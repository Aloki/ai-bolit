<?php


error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING ^ E_DEPRECATED);
ini_set('display_errors', 'stderr');

if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}

if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}

if (!defined('CLS_SCAN_CHECKERS')) {
    define('CLS_SCAN_CHECKERS', true);
}

if (!defined('MDS_VERSION')) {
    define('MDS_VERSION', 'HOSTER-32.1.21');
}

$scan_signatures    = null;
$clean_signatures   = null;
$start_time         = time();
$print              = true;
$report             = null;
$lic                = null;
$detached           = null;
$scanned = 0;

if (!isset($argv)) {
    $argv = $_SERVER['argv'];
}

$config = new MDSConfig();
$cli = new MDSCliParse($argv, $config);

if (!$config->get(MDSConfig::PARAM_DO_NOT_USE_UMASK)) {
    umask(0027);
}

Factory::configure($config->get(MDSConfig::PARAM_FACTORY_CONFIG));

if (!$config->get(MDSConfig::PARAM_DO_NOT_SEND_STATS)) {
    $imunify_license_filepath = '/var/imunify360/license.json';
    if (!file_exists($imunify_license_filepath)) {
        $imunify_license_filepath = '/var/imunify360/license-free.json';
    }
    $lic = Factory::instance()->create(ImLicense::class, [$imunify_license_filepath, ['/usr/share/imunify360/cln-pub.key', '/usr/share/imunify360/alt-license-pub.key']]);
    if (!$lic->isValid()) {
        $config->set(MDSConfig::PARAM_DO_NOT_SEND_STATS, true);
    }
}

AibolitHelpers::setCurrentIds();
MDSUnixSocket::setDefaultSocket();
$tables_config = new MDSTablesConfig(__DIR__ . '/mds_tables.config.json');

if ($config->get(MDSConfig::PARAM_SEARCH_CONFIGS) !== '') {
    $filter = new MDSCMSConfigFilter($tables_config);
    $finder = new Finder($filter, $config->get(MDSConfig::PARAM_SEARCH_DEPTH));
    $creds = new MDSDBCredsFromConfig($finder, $config->get(MDSConfig::PARAM_SEARCH_CONFIGS), $tables_config);
    if ($config->get(MDSConfig::PARAM_USE_STDOUT)) {
        $creds->printCreds();
    } else {
        $creds->printForXArgs();
    }
    exit(0);
}

$log_levels = explode(',', $config->get(MDSConfig::PARAM_LOG_LEVEL));
$log = new Logger($config->get(MDSConfig::PARAM_LOG_FILE), $log_levels);
$log->info('MDS: start');

$state = null;
$state_filepath = $config->get(MDSConfig::PARAM_STATE_FILEPATH);
if ($state_filepath) {
    $state = new MDSState($state_filepath);
    $state->setWorking();
}

if ($config->get(MDSConfig::PARAM_DETACHED)) {
    $detached = Factory::instance()->create(MDSDetachedMode::class, [$config->get(MDSConfig::PARAM_DETACHED), $config->get(MDSConfig::PARAM_OPERATION)]);
    $config->set(MDSConfig::PARAM_DO_NOT_SEND_STATS, true);
}

$filter = new MDSAVDPathFilter($config->get(MDSConfig::PARAM_IGNORELIST));

list($scan_signatures, $clean_db) = loadMalwareSigns($config);

set_exception_handler(function ($ex) use ($report, $print, $detached, $config, $scan_signatures, $scanned) {
    if ($ex instanceof MDSException) {
        if ($print) {
            print(PHP_EOL . 'Error: ' . $ex->getErrMsg() . PHP_EOL);
        }
        if ($report !== null && $report->getError() === null) {
            $report->addError($ex->getErrCode(), $ex->getErrMsg());
            $report->save();
        }
        if ($detached) {
            if ($scanned === 0) {
                $report = createNullReport($detached->getWorkDir() . '/' . 'report0.json', $config, $scan_signatures, $detached);
                $report->addError($ex->getErrCode(), $ex->getErrMsg());
                $report->save();
            }
            $detached->complete();
        }
        exit($ex->getErrCode());
    } else {
        echo PHP_EOL . $ex->getMessage() . PHP_EOL;
        exit(-1);
    }
});

if (
    $detached === null
    && ($config->get(MDSConfig::PARAM_SCAN) || $config->get(MDSConfig::PARAM_CLEAN))
    && $config->get(MDSConfig::PARAM_REPORT_FILE) === null
    && !@is_writable('/var/imunify360/tmp')
) {
    throw new MDSException(MDSErrors::MDS_NO_REPORT);
}

if (
    $detached === null
    && $config->get(MDSConfig::PARAM_CLEAN)
    && $config->get(MDSConfig::PARAM_BACKUP_FILEPATH) === ''
    && !@is_writable('/var/imunify360/tmp')
) {
    throw new MDSException(MDSErrors::MDS_NO_BACKUP);
}

$progress = new MDSProgress($config->get(MDSConfig::PARAM_PROGRESS));
if ($config->get(MDSConfig::PARAM_PROGRESS_STDOUT)) {
    $progress->setPrint(
        function ($text) {
            $text = str_pad($text, 160, ' ', STR_PAD_RIGHT);
            echo str_repeat(chr(8), 160) . $text;
        }
    );
}

if (is_string($config->get(MDSConfig::PARAM_AVD_APP))) {
    $config->set(MDSConfig::PARAM_AVD_APP, [$config->get(MDSConfig::PARAM_AVD_APP)]);
} else {
    $config->set(MDSConfig::PARAM_AVD_APP, $tables_config->getSupportedApplications());
}

// Process AVD paths.
$avdPaths = [];
if (is_string($config->get(MDSConfig::PARAM_AVD_PATH))) {
    $avdPaths[] = $config->get(MDSConfig::PARAM_AVD_PATH);
}

if ($config->get(MDSConfig::PARAM_AVD_PATHS) && file_exists($config->get(MDSConfig::PARAM_AVD_PATHS))) {
    $paths = file($config->get(MDSConfig::PARAM_AVD_PATHS), FILE_SKIP_EMPTY_LINES | FILE_IGNORE_NEW_LINES);
    foreach ($paths as $path) {
        $avdPaths[] = base64_decode($path);
    }
}

if (!empty($avdPaths)) {
    $normalized_paths = [];
    foreach ($avdPaths as $avdPath) {
        $normalized_paths = array_merge(
            $normalized_paths,
            AibolitHelpers::normalizeAvdPath($avdPath, $config->get(MDSConfig::PARAM_CLEAN))
        );
    }

    $normalized_paths = array_unique($normalized_paths);
    $config->set(MDSConfig::PARAM_AVD_PATH, false);
    $config->set(MDSConfig::PARAM_AVD_PATHS, $normalized_paths);
}
unset($avdPaths);

$creds = getCreds($config, $argc, $argv, $progress);

$prescan = '';
if (file_exists(__DIR__ . '/mds_prescan.config.bin')) {
    $prescan = trim(file_get_contents(__DIR__ . '/mds_prescan.config.bin'));
} else {
    throw new MDSException(MDSErrors::MDS_PRESCAN_CONFIG_ERROR, __DIR__ . '/mds_prescan.config.bin');
}

foreach ($creds as $i => $cred) {
    try {
        if ($cred === false) {
            continue;
        }

        if (isset($cred['db_path']) && $filter && !$filter->needToScan($cred['db_path'])) {
            continue;
        }

        $report = null;
        if (isset($cred['error'])) {
            throw $cred['error'];
        }
        if (!ini_get('mysqli.default_socket') && $cred['db_host'] === 'localhost') {
            $cred['db_host'] = gethostbyname($cred['db_host']);
        }
        $config->set(MDSConfig::PARAM_HOST, $cred['db_host']);
        $config->set(MDSConfig::PARAM_PORT, $cred['db_port']);
        $config->set(MDSConfig::PARAM_LOGIN, $cred['db_user']);
        $config->set(MDSConfig::PARAM_PASSWORD, $cred['db_pass']);
        $config->set(MDSConfig::PARAM_DATABASE, $cred['db_name']);
        $config->set(MDSConfig::PARAM_PREFIX, $cred['db_prefix']);

        if ($config->get(MDSConfig::PARAM_OVERRIDE_PORT)) {
            $config->set(MDSConfig::PARAM_PORT, $config->get(MDSConfig::PARAM_OVERRIDE_PORT));
        }
        if ($config->get(MDSConfig::PARAM_OVERRIDE_HOST)) {
            $config->set(MDSConfig::PARAM_HOST, $config->get(MDSConfig::PARAM_OVERRIDE_HOST));
        }

        scanDB(
            $config,
            $scan_signatures,
            $progress,
            $log,
            $tables_config,
            $prescan,
            $clean_db,
            $state,
            $lic,
            $i,
            $detached,
            $cred
        );

        $scanned++;
    } catch (MDSException $ex) {
        if (isset($detached)) {
            if ($report === null) {
                $report = createNullReport($detached->getWorkDir() . '/' . 'report' . $i . '.json', $config, $scan_signatures, $detached);
            }
            $report->addError($ex->getErrCode(), $ex->getErrMsg());
            $report->save();
        } elseif ($detached === null && ($progress->getDbCount() > 1)) {
            echo PHP_EOL . $ex->getErrMsg() . PHP_EOL;
        } else {
            throw $ex;
        }
    }
}

if ($scanned === 0) {
    throw new MDSException(MDSErrors::MDS_NO_SCANNED);
}

if ($detached) {
    $detached->complete();
}

if ($state && !$state->isCanceled()) {
    $state->setDone();
}

exit(0);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function createNullReport($filename, $config, $scan_signatures = null, $detached = null)
{
    $report = new MDSJSONReport(
        time(),
        $filename,
        MDS_VERSION,
        isset($scan_signatures) ? $scan_signatures->getDBMetaInfoVersion() : '',
        '',
        '',
        '',
        ''
    );
    if ($report->getError() !== null) {
        throw $report->getError();
    }
    if (isset($config)) {
        setOpFromConfig($config, $report, $detached);
    }
    $report->setPath(null);
    $report->setApp(null);
    return $report;
}

function getCreds($config, $argc, $argv, $progress)
{
    $creds = [];
    if ($config->get(MDSConfig::PARAM_AVD_PATH) || $config->get(MDSConfig::PARAM_AVD_PATHS)) {
        /** @var MDSDBCredsFromAVD $avd_creds */
        $avd_creds = Factory::instance()->create(MDSDBCredsFromAVD::class);
        $recursive = $config->get(MDSConfig::PARAM_SCAN);
        $paths = [];
        if ($config->get(MDSConfig::PARAM_AVD_PATHS)) {
            foreach ($config->get(MDSConfig::PARAM_AVD_PATHS) as $path) {
                $paths[] = $path;
                if ($recursive) {
                    $paths[] = $path . '/*';
                }
            }
        } else {
            $paths[] = $config->get(MDSConfig::PARAM_AVD_PATH);
            if ($recursive) {
                $paths[] = $config->get(MDSConfig::PARAM_AVD_PATH) . '/*';
            }
        }

        $avd_creds->countApps($paths, $config->get(MDSConfig::PARAM_AVD_APP), $recursive);
        $creds = $avd_creds->getCredsFromApps($paths, $config->get(MDSConfig::PARAM_AVD_APP), $recursive);
        $progress->setDbCount($avd_creds->getAppsCount());
    } elseif ($config->get(MDSConfig::PARAM_CREDS_FROM_XARGS)) {
        $creds_xargs = explode(';;', substr($argv[$argc - 1], 1, -1));
        $creds[] = [
            'db_host'   => $creds_xargs[0],
            'db_port'   => $creds_xargs[1],
            'db_user'   => $creds_xargs[2],
            'db_pass'   => $creds_xargs[3],
            'db_name'   => $creds_xargs[4],
            'db_prefix' => $creds_xargs[5],
        ];
        $progress->setDbCount(1);
    } else {
        $password = $config->get(MDSConfig::PARAM_PASSWORD);
        if ($config->get(MDSConfig::PARAM_PASSWORD_FROM_STDIN)) {
            $f = @fopen('php://stdin', 'r');
            echo "Enter password for db:" . PHP_EOL;
            $password = str_replace("\n", "", fgets($f));
            fclose($f);
        }
        $creds[] = [
            'db_host'   => $config->get(MDSConfig::PARAM_HOST),
            'db_port'   => $config->get(MDSConfig::PARAM_PORT),
            'db_user'   => $config->get(MDSConfig::PARAM_LOGIN),
            'db_pass'   => $password,
            'db_name'   => $config->get(MDSConfig::PARAM_DATABASE),
            'db_prefix' => $config->get(MDSConfig::PARAM_PREFIX),
        ];
        $progress->setDbCount(1);
    }
    return $creds;
}

function scanDB($config, $scan_signatures, $progress, $log, $tables_config, $prescan, $clean_db, $state, $lic, $i, $detached, $cred)
{
    try {
        $backup = null;
        if (empty($config->get(MDSConfig::PARAM_DATABASE))) {
            throw new MDSException(MDSErrors::MDS_NO_DATABASE);
        }

        if ($progress->getDbCount() > 1 && !$config->get(MDSConfig::PARAM_SCAN)) {
            throw new MDSException(MDSErrors::MDS_MULTIPLE_DBS, $progress->getDbCount());
        }

        $progress->setCurrentDb($i, $config->get(MDSConfig::PARAM_DATABASE));

        $log->info('MDS DB scan: started ' . $config->get(MDSConfig::PARAM_DATABASE));

        $report_filename = 'dbscan-' . $config->get(MDSConfig::PARAM_DATABASE) . '-' . $config->get(MDSConfig::PARAM_LOGIN) . '-' . time() . '.json';


        if ($config->get(MDSConfig::PARAM_DETACHED)) {
            $config->set(MDSConfig::PARAM_REPORT_FILE, $detached->getWorkDir() . '/' . 'report' . $i . '.json');
        }

        if (!$config->get(MDSConfig::PARAM_REPORT_FILE)) {
            $report_file = @is_writable('/var/imunify360/tmp') ? '/var/imunify360/tmp/' . $report_filename : __DIR__ . '/' . $report_filename;
        } else {
            if (is_dir($config->get(MDSConfig::PARAM_REPORT_FILE))) {
                $report_file = $config->get(MDSConfig::PARAM_REPORT_FILE) . '/' . $report_filename;
            } else {
                $report_file = $config->get(MDSConfig::PARAM_REPORT_FILE);
            }
        }

        $report = new MDSJSONReport(
            time(),
            $report_file,
            MDS_VERSION,
            isset($scan_signatures) ? $scan_signatures->getDBMetaInfoVersion() : '',
            $config->get(MDSConfig::PARAM_HOST),
            $config->get(MDSConfig::PARAM_DATABASE),
            $config->get(MDSConfig::PARAM_LOGIN),
            $config->get(MDSConfig::PARAM_PORT)
        );

        if ($report->getError() !== null) {
            throw $report->getError();
        }

        $report->setMalwareDbVer($scan_signatures->getDBMetaInfoVersion());

        setOpFromConfig($config, $report, $detached);

        $report->setScanId($config->get(MDSConfig::PARAM_DETACHED));

        if (isset($cred['db_app'])) {
            $report->setApp($cred['db_app']);
        }

        if (isset($cred['app_owner_uid'])) {
            $report->setAppOwnerUId($cred['app_owner_uid']);
        }

        if (isset($cred['db_path'])) {
            $report->setPath($cred['db_path']);
        }

        if ($config->get(MDSConfig::PARAM_CLEAN)) {
            $backup = new MDSBackup($config->get(MDSConfig::PARAM_BACKUP_FILEPATH));
        }

        mysqli_report(MYSQLI_REPORT_STRICT);
        $db_connection = mysqli_init();
        $db_connection->options(MYSQLI_OPT_CONNECT_TIMEOUT, $config->get(MDSConfig::PARAM_DB_TIMEOUT));
        $db_connection->options(MYSQLI_OPT_READ_TIMEOUT, $config->get(MDSConfig::PARAM_DB_TIMEOUT));
        if (
            !$db_connection->real_connect(
                $config->get(MDSConfig::PARAM_HOST),
                $config->get(MDSConfig::PARAM_LOGIN),
                $config->get(MDSConfig::PARAM_PASSWORD),
                $config->get(MDSConfig::PARAM_DATABASE),
                $config->get(MDSConfig::PARAM_PORT)
            )
        ) {
            $log->error('Can\'t connect to database: ' . $db_connection->connect_error);
            throw new MDSException(MDSErrors::MDS_CONNECT_ERROR, $db_connection->connect_error);
        }

        $base64_sup = false;
        $db_connection->set_charset('utf8');
        $res = @$db_connection->query('SELECT count(TO_BASE64("test")) > 0;');
        if ($res instanceof \mysqli_result) {
            $base64_sup = true;
        }

        if (!$base64_sup) {
            $tables_config->disableBase64();
            $report->setBase64(false);
        }

        $mds_find = new MDSFindTables($db_connection, $tables_config);

        if (!$config->get(MDSConfig::PARAM_DONT_SEND_UNK_URLS)) {
            $report->setUnknownUrlsSend(new MDSSendUrls(Factory::instance()->create(MDSCollectUrlsRequest::class)));
        }

        if ($config->get(MDSConfig::PARAM_CLEAN) || $config->get(MDSConfig::PARAM_SCAN)) {
            MDSScanner::scan(
                $prescan,
                $config->get(MDSConfig::PARAM_DATABASE),
                $config->get(MDSConfig::PARAM_PREFIX),
                $mds_find,
                $db_connection,
                $scan_signatures,
                $config->get(MDSConfig::PARAM_MAX_CLEAN_BATCH),
                $clean_db,
                $progress,
                $state,
                $report,
                $backup,
                $config->get(MDSConfig::PARAM_SCAN),
                $config->get(MDSConfig::PARAM_CLEAN),
                $log,
                $config->get(MDSConfig::PARAM_SIZE_LIMIT)
            );
        }

        if ($config->get(MDSConfig::PARAM_RESTORE)) {
            $report->setOp($config->get(MDSConfig::PARAM_OPERATION));
            $restore = new MDSRestore(
                $config->get(MDSConfig::PARAM_RESTORE),
                $db_connection,
                $progress,
                $report,
                $state,
                $log
            );
            $restore->restore($config->get(MDSConfig::PARAM_MAX_RESTORE_BATCH));
            $restore->finish();
        }

        $ch = null;
        if (!$config->get(MDSConfig::PARAM_DO_NOT_SEND_STATS)) {
            $request = new SendMessageRequest('MDS');
            $ch = Factory::instance()->create(MDSSendToCH::class, [$request, $lic]);
        }

        if ($report) {
            $report->setCH($ch);
            $report->save();
        }

        $db_connection->close();
        $log->info('MDS DB scan: finished ' . $config->get(MDSConfig::PARAM_DATABASE));

        $progress->setCurrentDb($i, $config->get(MDSConfig::PARAM_DATABASE), true);
    } catch (MDSException $ex) {
        // @phpstan-ignore-next-line
        if ($db_connection) {
            $db_connection->close();
        }
        onError($detached, $progress, $report ?? null, $ex);
    } catch (mysqli_sql_exception $e) {
        // @phpstan-ignore-next-line
        if ($db_connection) {
            $db_connection->close();
        }
        $ex = new MDSException(MDSErrors::MDS_CONNECT_ERROR, $config->get(MDSConfig::PARAM_LOGIN) . '@' . $config->get(MDSConfig::PARAM_HOST));
        onError($detached, $progress, $report, $ex);
    }
}

function onError($detached, $progress, $report, $ex)
{
    if ((isset($detached) || ($progress->getDbCount() > 1)) && (isset($report) && $report->getError() === null)) {
        $report->setPath(null);
        $report->setApp(null);
        $report->addError($ex->getErrCode(), $ex->getErrMsg());
        $report->save();
    } else {
        throw $ex;
    }
}

function setOpFromConfig($config, $report, $detached = null)
{
    $report->setOp($config->get(MDSConfig::PARAM_OPERATION));

    if (!isset($detached)) {
        return;
    }

    $detached->setOp($config->get(MDSConfig::PARAM_OPERATION));
}

function loadMalwareSigns($config)
{
    $scan_signatures = null;
    $clean_signatures = null;

    if ($config->get(MDSConfig::PARAM_SCAN) || $config->get(MDSConfig::PARAM_CLEAN) || $config->get(MDSConfig::PARAM_RESTORE)) {
        $avdb = trim($config->get(MDSConfig::PARAM_AV_DB) ?? '');
        $debug = new DebugMode();
        $scan_signatures = new LoadSignaturesForScan($avdb, 2, $debug);
        if ($scan_signatures->getResult() == LoadSignaturesForScan::SIGN_EXTERNAL) {
            echo 'Loaded external scan signatures from ' . $avdb . PHP_EOL;
        }
        $sign_count = $scan_signatures->getDBCount();
        echo 'Malware scan signatures: ' . $sign_count . PHP_EOL;

        $blackUrls = file_exists('/var/imunify360/files/sigs/v1/aibolit/blacklistedUrls.db') ?
            '/var/imunify360/files/sigs/v1/aibolit/blacklistedUrls.db' : __DIR__ . '/blacklistedUrls.db';

        $whiteUrls = file_exists('/var/imunify360/files/sigs/v1/aibolit/whitelistUrls.db') ?
            '/var/imunify360/files/sigs/v1/aibolit/whitelistUrls.db' : __DIR__ . '/whitelistUrls.db';


        $scan_signatures->blackUrls = new MDSUrls($blackUrls);
        $scan_signatures->whiteUrls = new MDSUrls($whiteUrls);

        if ($config->get(MDSConfig::PARAM_CLEAN)) {
            $procudb = trim($config->get(MDSConfig::PARAM_PROCU_DB) ?? '');
            $clean_signatures = new LoadSignaturesForClean('', $procudb);
            if ($clean_signatures->getDBLocation() == 'external') {
                echo 'Loaded external clean signatures from ' . $procudb . PHP_EOL;
            }
            $clean_db = $clean_signatures->getDB();
            $clean_signatures->setScanDB($scan_signatures);
            echo 'Malware clean signatures: ' . count($clean_db) . PHP_EOL;
        }
        echo PHP_EOL;
    }
    return [$scan_signatures, $clean_signatures];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Class Factory.
 */
class Factory
{
    /**
     * @var Factory
     */
    private static $instance;
    /**
     * @var array
     */
    private static $config;

    /**
     * Factory constructor.
     *
     * @throws Exception
     */
    private function __construct()
    {
    }

    /**
     * Instantiate and return a factory.
     *
     * @return Factory
     * @throws Exception
     */
    public static function instance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Configure a factory.
     *
     * This method can be called only once.
     *
     * @param array $config
     * @throws Exception
     */
    public static function configure($config = [])
    {
        if (self::isConfigured()) {
            throw new Exception('The Factory::configure() method can be called only once.');
        }

        self::$config = $config;
    }

    /**
     * Return whether a factory is configured or not.
     *
     * @return bool
     */
    public static function isConfigured()
    {
        return self::$config !== null;
    }

    /**
     * Creates and returns an instance of a particular class.
     *
     * @param string $class
     *
     * @param array $constructorArgs
     * @return mixed
     * @throws Exception
     */
    public function create($class, $constructorArgs = [])
    {
        if (!isset(self::$config[$class])) {
            throw new Exception("The factory is not contains configuration for '{$class}'.");
        }

        if (is_callable(self::$config[$class])) {
            return call_user_func(self::$config[$class], $constructorArgs);
        } else {
            return new self::$config[$class](...$constructorArgs);
        }
    }
}

class Config
{
    /**
     * @var array Configuration data
     */
    private $config     = [];

    /**
     * Returns valued of a particular option.
     *
     * @param string $key
     * @return mixed
     * @throws Exception
     */
    public function get($key)
    {
        if (!array_key_exists($key, $this->config)) {
            throw new Exception('An invalid option requested. Key: ' . $key);
        }
        return $this->config[$key];
    }

    /**
     * Set value to config by key
     *
     * @param string $key
     * @param mixed $value
     * @return mixed
     * @throws Exception
     */
    public function set($key, $value)
    {
        $this->config[$key] = $value;
    }

    /**
     * Set default config
     *
     * @param array $defaults
     */
    protected function setDefaultConfig($defaults)
    {
        $this->config = $defaults;
    }
}

class MDSConfig extends Config
{
    const PARAM_HELP                = 'help';
    const PARAM_VERSION             = 'version';
    const PARAM_USE_STDOUT          = 'stdout';
    const PARAM_HOST                = 'host';
    const PARAM_PORT                = 'port';
    const PARAM_LOGIN               = 'login';
    const PARAM_PASSWORD            = 'password';
    const PARAM_PASSWORD_FROM_STDIN = 'password-from-stdin';
    const PARAM_DATABASE            = 'database';
    const PARAM_PREFIX              = 'prefix';
    const PARAM_SCAN                = 'scan';
    const PARAM_CLEAN               = 'clean';
    const PARAM_REPORT_FILE         = 'report-file';
    const PARAM_SIGDB               = 'signature-db';
    const PARAM_PROGRESS            = 'progress';
    const PARAM_PROGRESS_STDOUT     = 'progress-stdout';
    const PARAM_FACTORY_CONFIG      = 'factory-config';
    const PARAM_AV_DB               = 'avdb';
    const PARAM_PROCU_DB            = 'procudb';
    const PARAM_SHARED_MEM          = 'shared-mem-progress';
    const PARAM_SHARED_MEM_CREATE   = 'create-shared-mem';
    const PARAM_STATE_FILEPATH      = 'state-file';
    const PARAM_MAX_CLEAN_BATCH     = 'max-clean';
    const PARAM_MAX_RESTORE_BATCH   = 'max-restore';
    const PARAM_RESTORE             = 'restore';
    const PARAM_LOG_FILE            = 'log-file';
    const PARAM_BACKUP_FILEPATH     = 'backup-file';
    const PARAM_LOG_LEVEL           = 'log-level';
    const PARAM_DONT_SEND_UNK_URLS  = 'do-not-send-urls';
    const PARAM_SEARCH_CONFIGS      = 'search-configs';
    const PARAM_SEARCH_DEPTH        = 'search-depth';
    const PARAM_CREDS_FROM_XARGS    = 'creds-from-xargs';
    const PARAM_OVERRIDE_PORT       = 'override_port';
    const PARAM_OVERRIDE_HOST       = 'override_host';
    const PARAM_DO_NOT_SEND_STATS   = 'do-not-send-stats';
    const PARAM_DB_TIMEOUT          = 'db-timeout';
    const PARAM_DETACHED            = 'detached';
    const PARAM_AVD_APP             = 'app-name';
    const PARAM_AVD_PATH            = 'path';
    const PARAM_AVD_PATHS           = 'paths';
    const PARAM_RESCAN              = 'rescan';
    const PARAM_IGNORELIST          = 'ignore-list';
    const PARAM_OPERATION           = 'op';
    const PARAM_DO_NOT_USE_UMASK    = 'do-not-use-umask';
    const PARAM_MEMORY_LIMIT        = 'memory';
    const PARAM_SIZE_LIMIT          = 'size';

    /**
     * @var array Default config
     */
    protected $defaultConfig = [
        self::PARAM_HELP                => false,
        self::PARAM_VERSION             => false,
        self::PARAM_SCAN                => false,
        self::PARAM_CLEAN               => false,
        self::PARAM_HOST                => '127.0.0.1',
        self::PARAM_PORT                => 3306,
        self::PARAM_LOGIN               => null,
        self::PARAM_PASSWORD            => null,
        self::PARAM_PASSWORD_FROM_STDIN => false,
        self::PARAM_DATABASE            => null,
        self::PARAM_PREFIX              => null,
        self::PARAM_REPORT_FILE         => null,
        self::PARAM_SIGDB               => null,
        self::PARAM_PROGRESS            => null,
        self::PARAM_FACTORY_CONFIG      => [
            MDSDetachedMode::class          => MDSDetachedMode::class,
            MDSDBCredsFromAVD::class        => MDSDBCredsFromAVD::class,
            ImLicense::class                => ImLicense::class,
            MDSSendToCH::class              => MDSSendToCH::class,
            MDSCollectUrlsRequest::class    => MDSCollectUrlsRequest::class,
        ],
        self::PARAM_USE_STDOUT          => true,
        self::PARAM_AV_DB               => null,
        self::PARAM_PROCU_DB            => null,
        self::PARAM_SHARED_MEM          => false,
        self::PARAM_SHARED_MEM_CREATE   => false,
        self::PARAM_STATE_FILEPATH      => null,
        self::PARAM_MAX_CLEAN_BATCH     => 100,
        self::PARAM_MAX_RESTORE_BATCH   => 100,
        self::PARAM_RESTORE             => null,
        self::PARAM_LOG_FILE            => null,
        self::PARAM_LOG_LEVEL           => 'INFO',
        self::PARAM_DONT_SEND_UNK_URLS  => false,
        self::PARAM_SEARCH_CONFIGS      => '',
        self::PARAM_SEARCH_DEPTH        => 3,
        self::PARAM_CREDS_FROM_XARGS    => false,
        self::PARAM_OVERRIDE_PORT       => false,
        self::PARAM_OVERRIDE_HOST       => false,
        self::PARAM_BACKUP_FILEPATH     => '',
        self::PARAM_DO_NOT_SEND_STATS   => false,
        self::PARAM_DB_TIMEOUT          => 15,
        self::PARAM_DETACHED            => false,
        self::PARAM_AVD_APP             => false,
        self::PARAM_AVD_PATH            => false,
        self::PARAM_AVD_PATHS           => false,
        self::PARAM_RESCAN              => false,
        self::PARAM_IGNORELIST          => false,
        self::PARAM_OPERATION           => false,
        self::PARAM_DO_NOT_USE_UMASK    => false,
        self::PARAM_MEMORY_LIMIT        => '1G',
        self::PARAM_SIZE_LIMIT          => '650K',
        self::PARAM_PROGRESS_STDOUT     => false,
    ];

    /**
     * Construct
     */
    public function __construct()
    {
        $this->setDefaultConfig($this->defaultConfig);
    }
}

/*
 * Abstract class for parse cli command
 */
abstract class CliParse
{
    /**
     * @var Config Config for fill
     */
    protected $config = null;

    /**
     * @var array List of options. Example of one element: ['short' => 'v', 'long' => 'version,ver', 'needValue' => false]
     */
    protected $opts     = [];

    /**
     * @var array Current of options from $argv
     */
    private $options    = [];

    /**
     * @var array Arguments left after getopt() processing
     */
    private $freeAgrs   = [];

    /**
     * Construct
     *
     * @param array $argv
     * @param Config $config
     * @throws Exception
     */
    public function __construct($argv, Config $config)
    {
        $this->config   = $config;
        $cliLongOpts    = [];
        $cliShortOpts   = [];
        foreach ($this->opts as $params) {
            $postfix = $params['needValue'] ? ':' : '';
            if ($params['long']) {
                $cliLongOpts = array_merge($cliLongOpts, $this->getMultiOpts($params['long'], $params['needValue']));
            }
            if ($params['short']) {
                $cliShortOpts = array_merge($cliShortOpts, $this->getMultiOpts($params['short'], $params['needValue']));
            }
        }
        $this->parseOptions($argv, $cliShortOpts, $cliLongOpts);
        $this->parse();
    }

    /**
     * Parse comand line params
     */
    abstract protected function parse();

    /**
     * Checking if the parameter was used in the cli line
     *
     * @param string $paramKey
     * @return bool
     * @throws Exception
     */
    protected function issetParam($paramKey)
    {
        if (!isset($this->opts[$paramKey])) {
            throw new Exception('An invalid option requested.');
        }
        if ($this->getExistingOpt($this->opts[$paramKey]['long'])) {
            return true;
        } elseif ($this->getExistingOpt($this->opts[$paramKey]['short'])) {
            return true;
        }
        return false;
    }

    /**
     * Checking if the parameter was used in the cli line
     *
     * @param string $paramKey
     * @return string|bool
     * @throws Exception
     */
    protected function getParamValue($paramKey, $default = null)
    {
        if (!isset($this->opts[$paramKey])) {
            throw new Exception('An invalid option requested.');
        }
        $existingLongOpt = $this->getExistingOpt($this->opts[$paramKey]['long']);
        if ($existingLongOpt) {
            return $this->options[$existingLongOpt];
        }
        $existingShortOpt = $this->getExistingOpt($this->opts[$paramKey]['short']);
        if ($existingShortOpt) {
            return $this->options[$existingShortOpt];
        }
        return $default;
    }

    /**
     * Return free arguments after using getopt()
     *
     * @return array
     * @throws Exception
     */
    protected function getFreeAgrs()
    {
        return $this->freeAgrs;
    }

    /**
     * Parse by getopt() and fill vars: $this->options $this->freeAgrs
     *
     * @return void
     */
    private function parseOptions($argv, $cliShortOpts, $cliLongOpts)
    {
        if (count($argv) <= 1) {
            return;
        }
        $this->options  = getopt(implode('', $cliShortOpts), $cliLongOpts);
        //$this->freeAgrs = array_slice($argv, $optind); // getopt(,,$optind) only for PHP7.1 and upper

        for ($i = 1; $i < count($argv); $i++) {
            if (strpos($argv[$i], '-') !== 0) {
                $this->freeAgrs = array_slice($argv, $i);
                break;
            }
        }
    }

    /**
     * Clean cli parameter
     *
     * @param string $optName Paramenter may be with ":" postfix
     * @return array
     */
    private function getCleanOptName($optName)
    {
        return str_replace(':', '', $optName);
    }

    /**
     * Return options with or without ":" postfix
     *
     * @param array $optString String with one or more options separated by ","
     * @param bool $addPostfix True if need add postfix
     * @return array Array list of options
     */
    private function getMultiOpts($optString, $addPostfix = false)
    {
        $opts = explode(',', $optString);
        if ($addPostfix) {
            $opts = array_map(function ($value) {
                return $value . ':';
            }, $opts);
        }
        return $opts;
    }

    /**
     * Return existing options from string.
     *
     * @param string $optsString String with one or more options separated by ","
     * @return string|bool Name of finded options in getopt()
     */
    private function getExistingOpt($optsString)
    {
        $opts = $this->getMultiOpts($optsString);
        foreach ($opts as $opt) {
            if (isset($this->options[$opt])) {
                return $opt;
            }
        }
        return false;
    }
}

/*
 * Abstract class for MDS which can parse cli command
 */
class MDSCliParse extends CliParse
{
    /**
     * @var array Project options for cli
     */
    protected $opts = [
        MDSConfig::PARAM_HELP                   => ['short' => 'h', 'long' => 'help',                   'needValue' => false],
        MDSConfig::PARAM_VERSION                => ['short' => 'v', 'long' => 'version,ver',            'needValue' => false],
        MDSConfig::PARAM_HOST                   => ['short' => '',  'long' => 'host',                   'needValue' => true],
        MDSConfig::PARAM_PORT                   => ['short' => '',  'long' => 'port',                   'needValue' => true],
        MDSConfig::PARAM_LOGIN                  => ['short' => '',  'long' => 'login',                  'needValue' => true],
        MDSConfig::PARAM_PASSWORD               => ['short' => '',  'long' => 'password',               'needValue' => true],
        MDSConfig::PARAM_PASSWORD_FROM_STDIN    => ['short' => '',  'long' => 'password-from-stdin',    'needValue' => false],
        MDSConfig::PARAM_DATABASE               => ['short' => '',  'long' => 'database',               'needValue' => true],
        MDSConfig::PARAM_PREFIX                 => ['short' => '',  'long' => 'prefix',                 'needValue' => true],
        MDSConfig::PARAM_SCAN                   => ['short' => '',  'long' => 'scan',                   'needValue' => false],
        MDSConfig::PARAM_CLEAN                  => ['short' => '',  'long' => 'clean',                  'needValue' => false],
        MDSConfig::PARAM_REPORT_FILE            => ['short' => '',  'long' => 'report-file',            'needValue' => true],
        MDSConfig::PARAM_SIGDB                  => ['short' => '',  'long' => 'signature-db',           'needValue' => true],
        MDSConfig::PARAM_PROGRESS               => ['short' => '',  'long' => 'progress',               'needValue' => true],
        MDSConfig::PARAM_PROGRESS_STDOUT        => ['short' => '',  'long' => 'progress-stdout',        'needValue' => false],
        MDSConfig::PARAM_AV_DB                  => ['short' => '',  'long' => 'avdb',                   'needValue' => true],
        MDSConfig::PARAM_PROCU_DB               => ['short' => '',  'long' => 'procudb',                'needValue' => true],
        MDSConfig::PARAM_SHARED_MEM             => ['short' => '',  'long' => 'shared-mem-progress',    'needValue' => true],
        MDSConfig::PARAM_SHARED_MEM_CREATE      => ['short' => '',  'long' => 'create-shared-mem',      'needValue' => false],
        MDSConfig::PARAM_STATE_FILEPATH         => ['short' => '',  'long' => 'state-file',             'needValue' => true],
        MDSConfig::PARAM_RESTORE                => ['short' => '',  'long' => 'restore',                'needValue' => true],
        MDSConfig::PARAM_LOG_FILE               => ['short' => '',  'long' => 'log-file',               'needValue' => true],
        MDSConfig::PARAM_LOG_LEVEL              => ['short' => '',  'long' => 'log-level',              'needValue' => true],
        MDSConfig::PARAM_DONT_SEND_UNK_URLS     => ['short' => '',  'long' => 'do-not-send-urls',       'needValue' => false],
        MDSConfig::PARAM_SEARCH_CONFIGS         => ['short' => '',  'long' => 'search-configs',         'needValue' => true],
        MDSConfig::PARAM_SEARCH_DEPTH           => ['short' => '',  'long' => 'search-depth',           'needValue' => true],
        MDSConfig::PARAM_CREDS_FROM_XARGS       => ['short' => '',  'long' => 'creds-from-xargs',       'needValue' => false],
        MDSConfig::PARAM_OVERRIDE_PORT          => ['short' => '',  'long' => 'override_port',          'needValue' => true],
        MDSConfig::PARAM_OVERRIDE_HOST          => ['short' => '',  'long' => 'override_host',          'needValue' => true],
        MDSConfig::PARAM_BACKUP_FILEPATH        => ['short' => '',  'long' => 'backup-file',            'needValue' => true],
        MDSConfig::PARAM_DO_NOT_SEND_STATS      => ['short' => '',  'long' => 'do-not-send-stats',      'needValue' => false],
        MDSConfig::PARAM_DB_TIMEOUT             => ['short' => '',  'long' => 'db-timeout',             'needValue' => true],
        MDSConfig::PARAM_DETACHED               => ['short' => '',  'long' => 'detached',               'needValue' => true],
        MDSConfig::PARAM_FACTORY_CONFIG         => ['short' => '',  'long' => 'factory-config',         'needValue' => true],
        MDSConfig::PARAM_AVD_APP                => ['short' => '',  'long' => 'app-name',               'needValue' => true],
        MDSConfig::PARAM_AVD_PATH               => ['short' => '',  'long' => 'path',                   'needValue' => true],
        MDSConfig::PARAM_AVD_PATHS              => ['short' => '',  'long' => 'paths',                  'needValue' => true],
        MDSConfig::PARAM_IGNORELIST             => ['short' => '',  'long' => 'ignore-list',            'needValue' => true],
        MDSConfig::PARAM_DO_NOT_USE_UMASK       => ['short' => '',  'long' => 'do-not-use-umask',       'needValue' => false],
        MDSConfig::PARAM_MEMORY_LIMIT           => ['short' => '',  'long' => 'memory',                 'needValue' => true],
        MDSConfig::PARAM_SIZE_LIMIT             => ['short' => '',  'long' => 'size',                   'needValue' => true],
    ];

    /**
     * Parse comand line params
     *
     * @return void
     * @throws Exception
     */
    protected function parse()
    {
        foreach ($this->opts as $configName => $params) {
            $default    = $params['needValue'] ? $this->config->get($configName) : null;
            $result     = $this->getParamValue($configName, $default);
            if (!$params['needValue'] && $result === false) { // $result === false because opt without value
                $result = true;
            }
            if ($configName == MDSConfig::PARAM_FACTORY_CONFIG) {
                $file = $result;
                if (is_string($file) && !empty($file) && @file_exists($file) && @is_readable($file) && @filesize($file) > 5) {
                    $optionalFactoryConfig = require($file);
                    $result = array_merge($this->config->get(MDSConfig::PARAM_FACTORY_CONFIG), $optionalFactoryConfig);
                }
            }
            $this->config->set($configName, $result);
        }

        $factoryConfig = $this->config->get(MDSConfig::PARAM_FACTORY_CONFIG);

        if ($this->config->get(MDSConfig::PARAM_SCAN)) {
            $this->config->set(MDSConfig::PARAM_OPERATION, MDSConfig::PARAM_SCAN);
        } elseif ($this->config->get(MDSConfig::PARAM_CLEAN)) {
            $this->config->set(MDSConfig::PARAM_OPERATION, MDSConfig::PARAM_CLEAN);
        } elseif ($this->config->get(MDSConfig::PARAM_RESTORE)) {
            $this->config->set(MDSConfig::PARAM_OPERATION, MDSConfig::PARAM_RESTORE);
        }

        if (function_exists('stream_isatty') && !@stream_isatty(STDOUT)) {
            $this->config->set(MDSConfig::PARAM_USE_STDOUT, false);
        }

        if ($this->config->get(MDSConfig::PARAM_USE_STDOUT)) {
            echo 'MDS - an Intelligent Malware Database Scanner for Websites.' . PHP_EOL;
        }

        if ($this->config->get(MDSConfig::PARAM_MEMORY_LIMIT) && ($mem = AibolitHelpers::getBytes($this->config->get(MDSConfig::PARAM_MEMORY_LIMIT))) > 0) {
            $this->config->set(MDSConfig::PARAM_MEMORY_LIMIT, $mem);
            ini_set('memory_limit', $mem);
            if ($this->config->get(MDSConfig::PARAM_USE_STDOUT)) {
                echo 'Changed memory limit to ' . $this->config->get(MDSConfig::PARAM_MEMORY_LIMIT) . PHP_EOL;
            }
        }

        if ($this->config->get(MDSConfig::PARAM_SIZE_LIMIT) && ($mem = AibolitHelpers::getBytes($this->config->get(MDSConfig::PARAM_SIZE_LIMIT))) > 0) {
            $this->config->set(MDSConfig::PARAM_SIZE_LIMIT, $mem);
        }

        if ($this->config->get(MDSConfig::PARAM_HELP)) {
            $this->showHelp();
        } elseif ($this->config->get(MDSConfig::PARAM_VERSION)) {
            $this->showVersion();
        } elseif (!$this->config->get(MDSConfig::PARAM_OPERATION) && !$this->config->get(MDSConfig::PARAM_SEARCH_CONFIGS)) {
            $this->showHelp();
        }
        // here maybe re-define some of $factoryConfig elements
        $this->config->set(MDSConfig::PARAM_FACTORY_CONFIG, $factoryConfig);
    }

    /**
     * Cli show help
     *
     * @return void
     */
    private function showHelp()
    {
        $memory_limit = ini_get('memory_limit');
        echo <<<HELP

Usage: php {$_SERVER['PHP_SELF']} [OPTIONS]

      --host=<host>                     Database host ('localhost' used for file socket connection, for TCP-IP use '127.0.0.1')
      --port=<port>                     Database port
      --login=<username>                Database username
      --password=<password>             Database password
      --password-from-stdin             Get database password from stdin
      --database=<db_name>              Database name
      --prefix=<prefix>                 Prefix for table
      --scan                            Do scan
      --clean                           Do clean
      --report-file=<filepath>          Filepath where to put the report
      --signature-db=<filepath>         Filepath with signatures
      --progress=<filepath>             Filepath with progress
      --progress-stdout                 Print progress in stdout
      --shared-mem-progress=<shmem_id>  ID of shared memory segment
      --create-shared-mem               MDS create own shared memory segment
      --state=<filepath>                Filepath with state for control task
      --backup-filepath=<filepath>      Backup file
      --avdb=<filepath>                 Filepath with ai-bolit signatures db
      --procudb=<filepath>              Filepath with procu signatures db
      --state-file=<filepath>           Filepath with info about state(content: new|working|done|canceled). You can change it on canceled
      --restore=<filepath>              Filepath to restore csv file
      --log-file=<filepath>             Filepath to log file
      --log-level=<LEVEL>               Log level (types: ERROR|DEBUG|INFO|ALL). You can use multiple by using comma (example: DEBUG,INFO)
      --do-not-send-urls                Do not send unknown urls to server for deeper analysis
      --search-configs=<path>           Search supported CMS configs and print db credentials
      --search-depth=<depth>            Search depth for CMS configs (default: 3)
      --creds-from-xargs                Get db credentials from last free arg (template: host;;port;;user;;pass;;name)
      --do-not-send-stats               Do not send report to Imunify correlation server
      --db-timeout=<timeout>            Timeout for connect/read db in seconds
      --detached=<scan_id>              Run MDS in detached mode
      --path=<path>                     Scan/clean CMS dbs from <path> with help AppVersionDetector
      --paths=<file>                    Scan/clean CMS dbs base64 encoded paths from <file> with help AppVersionDetector
      --app-name=<app-name>             Filter AppVersionDetector dbs for scan with <app-name>. Currently supported only 'wp-core'.
      --do-not-use-umask                MDS uses umask 0027, but if you use this parameter, then umask will not be set
      --memory=SIZE                     Maximum amount of memory a script may consume. Current value: {$memory_limit}.

  -h, --help                            Display this help and exit
  -v, --version                         Show version


HELP;
        exit(0);
    }

    /**
     * Cli show version
     *
     * @return void
     */
    private function showVersion()
    {
        echo 'Version: ' . MDS_VERSION . "\n";
        exit(0);
    }
}

/**
 * Class MDSTablesConfig for work with config file in MDS
 */
class MDSTablesConfig
{
    private $raw_config = [];
    private $files = [];

    /**
     * MDSTablesConfig constructor.
     * @param $file
     * @throws Exception
     */
    public function __construct($file)
    {
        if (empty($file) || !file_exists($file)) {
            throw new MDSException(MDSErrors::MDS_CONFIG_ERROR, $file);
        }

        $this->raw_config = json_decode(file_get_contents($file), true);
        foreach ($this->raw_config['applications'] as $app => $val) {
            $this->files[] = $val['config_file'];
        }
    }

    /**
     * Get all applications defined in config
     * @return array
     */
    public function getSupportedApplications()
    {
        return array_keys($this->raw_config['applications']);
    }

    /**
     * Get all file configs for applications defined in config
     * @return array
     */
    public function getSupportedConfigFiles()
    {
        return $this->files;
    }

    /**
     * Get all tables defined in config for application
     * @param $application
     * @return array
     */
    public function getSupportedTables($application)
    {
        return isset($this->raw_config['applications'][$application]) ? array_keys($this->raw_config['applications'][$application]) : [];
    }

    /**
     * Get table name defined in config for table in application
     * @param $application
     * @param $table
     * @return string
     */
    public function getTableName($application, $table)
    {
        return $this->raw_config['applications'][$application][$table]['table_name'] ?? '';
    }

    /**
     * Get all fields defined in config for table in application
     * @param $application
     * @param $table
     * @return array|mixed
     */
    public function getTableFields($application, $table)
    {
        $fields = $this->raw_config['applications'][$application][$table]['fields'] ?? [];
        $add_fields = $this->raw_config['applications'][$application][$table]['fields_additional_data'] ?? [];
        return array_merge($fields, $add_fields);
    }

    /**
     * Get key field defined in config for table in application
     * @param $application
     * @param $table
     * @return string
     */
    public function getTableKey($application, $table)
    {
        return $this->raw_config['applications'][$application][$table]['key'] ?? '';
    }

    /**
     * Get array of defined in config fields with key
     * @param $application
     * @param $table
     * @return array
     */
    public function getTableFieldsWithKey($application, $table)
    {
        $fields = $this->getTableFields($application, $table);
        if ($this->getTableKey($application, $table) !== '') {
            $fields[] = $this->getTableKey($application, $table);
        }
        return $fields;
    }

    /**
     * Get satisfied application table by fields and key
     * @param $fields
     * @param $key
     * @return array
     */
    public function getTableSatisfied($fields, $key)
    {
        $res = [];
        foreach ($this->getSupportedApplications() as $app) {
            foreach ($this->getSupportedTables($app) as $table) {
                $config_fields = $this->getTableFieldsWithKey($app, $table);
                $config_key = $this->getTableKey($app, $table);
                if ($config_key === $key && empty(array_diff($fields, $config_fields))) {
                    $res[] = ['app' => $app, 'table' => $table];
                }
            }
        }
        return $res;
    }

    /**
     * Disable base64
     */
    public function disableBase64()
    {
        foreach ($this->raw_config['applications'] as &$tables) {
            foreach ($tables as &$table) {
                if (isset($table['base64']) && $table['base64'] === true) {
                    $table['base64'] = false;
                }
            }
            unset($table);
        }
        unset($tables);
    }

    /**
     * Check application defined in config
     * @param $app
     * @return bool
     */
    public function isApplicationDefined($app)
    {
        return isset($this->raw_config['applications'][$app]);
    }

    /**
     * Check table for application defined in config
     * @param $app
     * @param $table
     * @return bool
     */
    public function isTableDefined($app, $table)
    {
        return isset($this->raw_config['applications'][$app][$table]);
    }

    /**
     * @param $application
     * @param $table
     * @return array
     */
    public function getConfigForTable($application, $table)
    {
        return isset($this->raw_config['applications'][$application][$table]) ? $this->raw_config['applications'][$application][$table] : [];
    }

    /**
     * @param $application
     * @return string
     */
    public function getApplicationDomainQuery($application)
    {
        return isset($this->raw_config['applications'][$application]['domain_name']) ? $this->raw_config['applications'][$application]['domain_name'] : '';
    }
}

/**
 * Class MDSFindTables Find tables that we have in config
 */
class MDSFindTables
{
    private $db;
    private $config;
    private $props = ['domain_name', 'config_file'];

    public function __construct($db, MDSTablesConfig $config)
    {
        $this->db = $db;
        $this->config = $config;
    }

    /**
     * Find tables in database
     *
     * @param  string  $db  - db name (null to scan all dbs that user have access to)
     * @param  string  $prefix  - prefix (null to disable filter by prefix)
     *
     * @return array
     */
    public function find($db = null, $prefix = null)
    {
        $result = [];
        foreach ($this->config->getSupportedApplications() as $app) {
            foreach ($this->config->getSupportedTables($app) as $table) {
                if (in_array($table, $this->props)) {
                    continue;
                }
                $query = 'SELECT DISTINCT table_schema as db, table_name as tab '
                        . 'FROM information_schema.columns '
                        . 'WHERE column_name = \'' . $this->config->getTableKey($app, $table) . '\' AND column_key = \'PRI\'';
                if (isset($db)) {
                    $query .= ' AND table_schema = \'' . $db . '\'';
                }
                if (isset($prefix)) {
                    $query .= ' AND table_name LIKE \'' . $prefix . '%\'';
                }

                $tableName = $this->config->getTableName($app, $table);
                if (!empty($tableName)) {
                    $query .= ' AND table_name LIKE \'%' . $tableName . '\'';
                }

                $fields = $this->config->getTableFields($app, $table);
                foreach ($fields as $field) {
                    $query .= ' AND table_name IN (SELECT DISTINCT table_name FROM information_schema.columns WHERE column_name = \'' . $field . '\'';
                }
                $query .= str_repeat(')', count($fields));
                $query .= ';';
                $tables = $this->db->query($query);
                if ($tables->num_rows === 0) {
                    continue;
                }
                foreach ($tables as $value) {
                    if (!isset($prefix)) {
                        $prefix = explode('_', $value['tab']);
                        $prefix = $prefix[0] . '_';
                    }
                    $domain_query = str_replace(['%db%', '%prefix%'], [$value['db'], $prefix], $this->config->getApplicationDomainQuery($app));
                    if (!empty($domain_query)) {
                        $domain_name_res = $this->db->query($domain_query);
                    }

                    $domain_name    = '';
                    $own_url        = '';
                    if (isset($domain_name_res) && $domain_name_res && $domain_name_res->num_rows > 0) {
                        $row = @array_values($domain_name_res->fetch_row());
                        if (isset($row[0])) {
                            $own_url = $row[0];
                        }
                    }
                    if ($own_url) {
                        $domain_name = parse_url($own_url, PHP_URL_HOST);
                        $domain_name = preg_replace('~^www\.~ism', '', $domain_name);
                        $domain_name = strtolower($domain_name);
                    }

                    $result[] = [
                        'config_app'    => $app,
                        'config_tab'    => $table,
                        'db'            => $value['db'],
                        'table'         => $value['tab'],
                        'prefix'        => $prefix,
                        'domain_name'   => $domain_name,
                        'config'        => $this->config->getConfigForTable($app, $table),
                    ];
                }
            }
        }
        return $result;
    }
}

/**
 * Class MDSJSONReport need for prepare and wirte JSON report
 */
class MDSJSONReport
{
    const STATUS_DETECTED   = 'detected';
    const STATUS_CLEAN      = 'clean';
    const STATUS_RESTORE    = 'restore';

    const STATE_DONE        = 'done';
    const STATE_CANCELED    = 'canceled';

    private $start_time         = '';
    private $report_filename    = '';
    private $unknown_urls_send  = '';
    private $mds_version        = '';
    private $malware_db_version = '';
    private $db_host            = '';
    private $db_name            = '';
    private $db_username        = '';
    private $db_port            = 3306;

    private $report_scan        = [];
    private $report_clean       = [];
    private $report_url_scan    = [];
    private $report_url_clean   = [];

    private $report = [];
    private $report_url = [];
    private $unknown_urls = [];
    private $urls_counter = 0;

    private $table_total_rows = [];
    private $table_scanned_rows = [];
    private $table_scanned_cells = [];
    private $table_fields_data = [];
    private $table_queries_performed = [];
    private $count_tables_scanned   = 0;
    private $running_time           = 0;
    private $errors                 = [];
    private $state                  = self::STATE_DONE;

    private $report_error           = null;

    private $uniq_tables_affected   = [];
    private $rows_infected          = 0;
    private $rows_cleaned           = 0;
    private $rows_restored          = 0;
    private $rows_with_errors       = [];

    private $count_of_detected_malicious_entries    = 0;
    private $count_of_cleaned_malicious_entries     = 0;
    private $operation = '';
    private $ch = null;

    private $app = null;
    private $app_owner_uid = null;
    private $path = null;
    private $scan_id = null;
    private $save_urls_limit = 5000;
    private $base64 = true;

    /**
     * MDSJSONReport constructor.
     * @param string $report_filename
     * @param string $mds_version
     * @param string $malware_db_version
     * @param string $db_host
     * @param string $db_name
     * @param string $db_username
     * @param string $db_port
     */
    public function __construct($start_time, $report_filename, $mds_version, $malware_db_version, $db_host, $db_name, $db_username, $db_port)
    {
        $this->start_time           = $start_time;
        $this->report_filename      = $report_filename;
        $this->mds_version          = $mds_version;
        $this->malware_db_version   = $malware_db_version;
        $this->db_host              = $db_host;
        $this->db_name              = $db_name;
        $this->db_username          = $db_username;
        $this->db_port              = $db_port;

        if (empty($report_filename) || (!file_exists($report_filename) && !is_writable(dirname($report_filename)))) {
            $this->report_error = new MDSException(MDSErrors::MDS_REPORT_ERROR, $report_filename);
        }
    }

    public function setSaveUrlsLimit($limit)
    {
        $this->save_urls_limit = $limit;
    }

    public function setMalwareDbVer($ver)
    {
        $this->malware_db_version = $ver;
    }

    public function setOp($op)
    {
        $this->operation = $op;
    }

    public function setApp($app)
    {
        $this->app = $app;
    }

    public function setAppOwnerUId($app_owner_uid)
    {
        $this->app_owner_uid = $app_owner_uid;
    }

    public function setPath($path)
    {
        $this->path = $path;
    }

    public function setScanId($scan_id)
    {
        $this->scan_id = $scan_id;
    }

    public function setCH($ch)
    {
        $this->ch = $ch;
    }

    public function getUser()
    {
        return $this->db_username;
    }

    public function getHost()
    {
        return $this->db_host;
    }


    public function getDbName()
    {
        return $this->db_name;
    }

    public function getError()
    {
        return $this->report_error;
    }

    /**
     * Set the total number of tables that we scanned
     * @param int $count
     * @return void
     */
    public function setCountTablesScanned($count)
    {
        $this->count_tables_scanned = $count;
    }

    /**
     * Set the total number of tables that we scanned
     * @param int $count
     * @return void
     */
    public function setUnknownUrlsSend($send_urls)
    {
        $this->unknown_urls_send = $send_urls;
    }

    /**
     * Set the total running time of the script
     * @param int $running_time_in_sec
     * @return void
     */
    public function setRunningTime($running_time_in_sec)
    {
        $this->running_time = $running_time_in_sec;
    }

    /**
     * Add total rows for every table
     * @param string $table_name
     * @param int $count
     * @return void
     */
    public function addTotalTableRows($table_name, $count)
    {
        $this->table_total_rows[$table_name] = $count;
    }

    /**
     * Add total scanned cells for every table
     * @param string $table_name
     * @param int $count
     * @return void
     */
    public function addScannedTableCells($table_name, $count)
    {
        $this->table_scanned_cells[$table_name] = $count;
    }

    /**
     * Add total scanned rows for every table
     * @param string $table_name
     * @param int $count
     * @return void
     */
    public function addScannedTableRows($table_name, $count)
    {
        $this->table_scanned_rows[$table_name] = $count;
    }

    /**
     * Add total performed queries for every table.
     *
     * @param string $table_name
     * @param int $count
     */
    public function addPerformedQueries($table_name, $count)
    {
        $this->table_queries_performed[$table_name] = $count;
    }

    /**
     * Add error code and message
     * @param int $error_code
     * @param string $error_msg
     * @return void
     */
    public function addError($error_code, $error_msg)
    {
        $this->errors[] = [
            'code'      => $error_code,
            'message'   => $error_msg,
        ];
    }

    /**
     * Change state
     * @param string $state
     * @return void
     */
    public function setState($state)
    {
        $this->state = $state;
    }

    /**
     * Change base64 support
     * @param bool $base64
     */
    public function setBase64($base64)
    {
        $this->base64 = $base64;
    }

    /**
     * Add errors
     * @param array $errors
     * @return void
     */
    public function addErrors($errors)
    {
        $this->errors = $errors;
    }

    /**
     * Add detected info
     * @param string $signature_id
     * @param string $snippet
     * @param string $table_name
     * @param int $row_id
     * @return void
     */
    public function addDetected($signature_id, $snippet, $table_name, $row_id, $field = '', $field_data = [])
    {
        $this->addSignatureRowId($signature_id, $snippet, $table_name, $row_id, $field, $field_data, self::STATUS_DETECTED, $this->report_scan);
    }

    /**
     * Add detected info
     * @param string $signature_id
     * @param string $snippet
     * @param string $table_name
     * @param int $row_id
     * @return void
     */
    public function addDetectedUrl($signature_id, $snippet, $table_name, $row_id, $field = '', $field_data = [])
    {
        $this->addSignatureRowId($signature_id, $snippet, $table_name, $row_id, $field, $field_data, self::STATUS_DETECTED, $this->report_url_scan);
    }

    /**
     * @param $url
     */
    public function addUnknownUrl($url)
    {
        if (!isset($this->unknown_urls[$url])) {
            $this->unknown_urls[$url] = '';
            $this->urls_counter++;
        }

        if ($this->unknown_urls_send !== '' && $this->urls_counter >= $this->save_urls_limit) {
            $this->unknown_urls_send->send(array_keys($this->unknown_urls));
            $this->urls_counter = 0;
            $this->unknown_urls = [];
        }
    }

    /**
     * Add detected error info
     * @param string $signature_id
     * @param string $snippet
     * @param string $error_code
     * @return void
     */
    public function addDetectedError($signature_id, $snippet, $table_name, $row_id, $field, $error_code)
    {
        $this->addSignatureError($signature_id, $snippet, $table_name, $row_id, $field, $error_code, self::STATUS_DETECTED, $this->report);
    }

    /**
     * Add clean info
     * @param string $signature_id
     * @param string $snippet
     * @param string $table_name
     * @param int $row_id
     * @return void
     */
    public function addCleaned($signature_id, $snippet, $table_name, $row_id, $field = '', $field_data = [])
    {
        $report = &$this->report_clean;
        if (strpos($signature_id, 'CMW-URL-') === 0) {
            $report = &$this->report_url_clean;
        }

        $this->addSignatureRowId($signature_id, $snippet, $table_name, $row_id, $field, $field_data, self::STATUS_CLEAN, $report);
    }

    /**
     * Add clean error info
     * @param string $signature_id
     * @param string $snippet
     * @param string $error_code
     * @return void
     */
    public function addCleanedError($signature_id, $snippet, $table_name, $row_id, $field, $error_code)
    {
        $this->addSignatureError($signature_id, $snippet, $table_name, $row_id, $field, $error_code, self::STATUS_CLEAN, $this->report);
    }

    /**
     * Add restored info
     * @param string $table_name
     * @param int $row_id
     * @param string $field
     * @return void
     */
    public function addRestored($table_name, $row_id, $field = '')
    {
        $this->addSignatureRowId('', '', $table_name, $row_id, $field, [], self::STATUS_RESTORE, $this->report);
        $this->rows_restored++;
    }

    /**
     * Add restored error info
     * @param string $error_code
     * @return void
     */
    public function addRestoredError($error_code, $table_name, $row_id, $field = '')
    {
        $this->addSignatureError('', '', $table_name, $row_id, $field, $error_code, self::STATUS_RESTORE, $this->report);
    }

    /**
     * Save report
     * @return void
     */
    public function save()
    {
        $report = $this->prepareReport();

        if (isset($this->ch)) {
            $this->ch->prepareData($report);
            $this->ch->send();
        }

        $json = json_encode($report);
        file_put_contents($this->report_filename, $json);

        if ($this->unknown_urls_send !== '' && !empty($this->unknown_urls)) {
            $this->unknown_urls_send->send(array_keys($this->unknown_urls));
        }
    }

    // /////////////////////////////////////////////////////////////////////////

    /**
     * Prepare report data for save
     * @return array
     */
    private function prepareReport()
    {
        $tables_affected = [];
        if ($this->operation === MDSConfig::PARAM_SCAN) {
            $this->report = array_merge($this->report_scan, $this->report);
            $this->report_url = &$this->report_url_scan;
            $tables_affected = $this->uniq_tables_affected[self::STATUS_DETECTED] ?? [];
        } elseif ($this->operation === MDSConfig::PARAM_CLEAN) {
            $this->report = array_merge($this->report_clean, $this->report);
            $this->report_url = &$this->report_url_clean;
            $tables_affected = $this->uniq_tables_affected[self::STATUS_CLEAN] ?? [];
        }

        $report =  [
            'start_time'                            => $this->start_time,
            'scanning_engine_version'               => $this->mds_version,
            'malware_database_version'              => $this->malware_db_version,
            'scanned_cells_count'                   => array_sum($this->table_scanned_cells),
            'scanned_rows_count'                    => array_sum($this->table_scanned_rows),
            'rows_count'                            => array_sum($this->table_total_rows),
            'queries_performed_count'               => array_sum($this->table_queries_performed),
            'count_of_tables_scanned'               => $this->count_tables_scanned,
            'count_of_tables_affected'              => count($tables_affected),
            'count_of_rows_infected'                => $this->rows_infected,
            'count_of_rows_cleaned'                 => $this->rows_cleaned,
            'count_of_rows_restored'                => $this->rows_restored,
            'count_of_detected_malicious_entries'   => $this->count_of_detected_malicious_entries,
            'count_of_cleaned_malicious_entries'    => $this->count_of_cleaned_malicious_entries,
            'running_time'                          => $this->running_time,
            'error_list'                            => $this->errors,
            'database_host'                         => $this->db_host,
            'database_port'                         => $this->db_port,
            'database_name'                         => $this->db_name,
            'database_username'                     => $this->db_username,
            'detailed_reports'                      => $this->processReport($this->report),
            'detailed_urls_reports'                 => $this->processReport($this->report_url),
            'rows_with_error'                       => $this->rows_with_errors,
            'state'                                 => $this->state,
            'operation'                             => $this->operation,
            'app'                                   => $this->app,
            'app_owner_uid'                         => $this->app_owner_uid,
            'path'                                  => $this->path,
            'base64_sup'                            => $this->base64,
            'mem_peak'                              => memory_get_peak_usage(true),
        ];
        if ($this->scan_id) {
            $report['scan_id'] = $this->scan_id;
        }
        return $report;
    }

    /**
     * @param array $report
     * @return array
     */
    private function processReport($report)
    {
        $reports = [];
        foreach ($report as $signature_id => $signature_params) {
            if (isset($signature_params['error'])) {
                $reports[] = [
                    'sigid'     => $signature_id,
                    'snpt'      => $signature_params['snippet'],
                    'status'    => 'error',
                    'errcode'   => $signature_params['error'],
                    'tables'    => [],
                ];
                continue;
            }
            $tables_result = [];
            foreach ($signature_params['tables_info'] as $table_name => $fields) {
                $fields_data = [];
                foreach ($fields as $field => $row_ids) {
                    $fields_data[] = [
                        'field'           => $field,
                        'additional_data' => $this->table_fields_data[$signature_id][$table_name][$field] ?? (object)[],
                        'row_ids'         => $row_ids,
                        'row_inf'         => count($row_ids),
                    ];
                }
                if ($fields_data) {
                    $tables_result[] = [
                        'table'         => $table_name,
                        //TODO: The name total_rows is not logically correct, as we are counting cells not rows, we will need to change
                        // this field in the future and add new fields as needed so that it does not break backwards compatibility
                        // with Imunify360 and CH.
                        'total_rows'    => $this->table_scanned_cells[ $table_name ] ?? 0,
                        'queries'       => $this->table_queries_performed[ $table_name ] ?? 0,
                        'fields'        => $fields_data,
                    ];
                }
            }
            $reports[] = [
                'sigid'     => $signature_id,
                'snpt'      => $signature_params['snippet'],
                'status'    => $signature_params['status'],
                'tables'    => $tables_result,
                'errcode'   => 0,
            ];
        }
        return $reports;
    }

    private function addTableAdditionalData($table, $data)
    {
        $res = (array)$table;
        foreach ($data as $field => $values) {
            foreach ($values as $value) {
                if (!in_array($value, $res[$field] ?? [])) {
                    $res[$field][] = $value;
                }
            }
        }
        return (object)$res;
    }

    /**
     * General method for adding detection and clean information
     * @param string $signature_id
     * @param string $snippet
     * @param string $table_name
     * @param string $row_id
     * @param string $status
     * @param array  &$report
     * @return void
     */
    private function addSignatureRowId($signature_id, $snippet, $table_name, $row_id, $field, $field_data, $status = self::STATUS_DETECTED, &$report = null)
    {
        if ($this->initReportRow($signature_id, $snippet, $status, $report)) {
            if ($status == self::STATUS_DETECTED) {
                $this->count_of_detected_malicious_entries++;
            } elseif ($status == self::STATUS_CLEAN) {
                $this->count_of_cleaned_malicious_entries++;
            }
        }
        if (!isset($report[$signature_id]['tables_info'][$table_name])) {
            $report[$signature_id]['tables_info'][$table_name] = [];
        }
        if (!isset($report[$signature_id]['tables_info'][$table_name][$field])) {
            $report[$signature_id]['tables_info'][$table_name][$field] = [];
        }
        $this->table_fields_data[$signature_id][$table_name][$field] = (object)$this->addTableAdditionalData($this->table_fields_data[$signature_id][$table_name][$field] ?? [], $field_data);
        $report[$signature_id]['tables_info'][$table_name][$field][] = $row_id;
        if (!isset($this->uniq_tables_affected[$status][$table_name][$field][$row_id])) {
            if ($status === self::STATUS_DETECTED) {
                $this->rows_infected++;
            } elseif ($status === self::STATUS_CLEAN) {
                $this->rows_cleaned++;
            }
        }
        $this->uniq_tables_affected[$status][$table_name][$field][$row_id] = '';
    }

    /**
     * General method for adding detection and clean error information
     * @param string $signature_id
     * @param string $snippet
     * @param string $error_code
     * @param string $status
     * @param array &$report
     * @return void
     */
    private function addSignatureError($signature_id, $snippet, $table_name, $row_id, $field, $error_code, $status = self::STATUS_DETECTED, &$report = null)
    {
        $this->initReportRow($signature_id, $snippet, $status, $report);
        $report[$signature_id]['error'] = $error_code;
        if (!isset($this->rows_with_errors['tables_info'][$table_name])) {
            $this->rows_with_errors['tables_info'][$table_name] = [];
        }
        if (!isset($this->rows_with_errors['tables_info'][$table_name][$field])) {
            $this->rows_with_errors['tables_info'][$table_name][$field] = [];
        }
        $this->rows_with_errors['tables_info'][$table_name][$field][] = $row_id;
    }

    /**
     * Initiate an array element if not exists
     * @param string $signature_id
     * @param string $snippet
     * @param string $status
     * @param array &$report
     * @return bool
     */
    private function initReportRow($signature_id, $snippet, $status = self::STATUS_DETECTED, &$report = null)
    {
        if (isset($report[$signature_id])) {
            return false;
        }
        $report[$signature_id] = [
            'snippet'       => $snippet,
            'total_rows'    => 0,
            'status'        => $status,
            'rows_infected' => 0,
            'tables_info'   => [],
            'error'         => null,
        ];
        return true;
    }

    public static function removeKeysFromReport($report, $keys)
    {
        self::array_walk_recursive_delete($report, function ($value, $key, $userdata) use ($keys) {
            return in_array($key, $keys, true);
        });
        return $report;
    }

    /**
     * Remove any elements where the callback returns true
     *
     * @param  array    $array    the array to walk
     * @param  callable $callback callback takes ($value, $key, $userdata)
     * @param  mixed    $userdata additional data passed to the callback.
     * @return array
     */
    private static function array_walk_recursive_delete(array &$array, callable $callback, $userdata = null)
    {
        foreach ($array as $key => &$value) {
            if (is_array($value)) {
                $value = self::array_walk_recursive_delete($value, $callback, $userdata);
            }
            if ($callback($value, $key, $userdata)) {
                unset($array[$key]);
            }
        }
        return $array;
    }
}

/**
 * Class MDSProgress module for tracking progress
 */
class MDSProgress
{
    private $total;
    private $total_table;
    private $num_tables = 1;
    private $current_table;
    private $current_table_num;
    private $current_db;
    private $current_db_num;
    private $last_file_update = 0;
    private $last_update = 0;
    private $progress_file;
    private $shared_mem;
    private $create_shared_mem;
    private $file_write_interval;
    private $update_interval;
    private $start;
    private $progress_string;
    private $tables;
    private $last_table_key;
    private $first_table_key;
    private $print = null;
    private $percent_main;
    private $db_count = 1;
    private $percent_table;

    private $one_db_percent;
    private $one_table_percent;
    private $one_record_percent;

    /**
     * MDSProgress constructor.
     * @param string $file - file for writing progress
     * @param int $update_interval - interval for update progress
     * @param int $file_write_interval - interval for writing to file progress
     * @param int $shared_mem - write to shared memory
     * @param bool $need_create_shmem - need to create shared memory
     * @throws Exception
     */
    public function __construct($file = false, $update_interval = 0, $file_write_interval = 1, $shared_mem = false, $need_create_shmem = false)
    {
        $this->start = AibolitHelpers::currentTime();
        $this->update_interval = $update_interval;
        $this->file_write_interval = $file_write_interval;
        if ($shared_mem) {
            $this->create_shared_mem = $need_create_shmem;
            if ($this->create_shared_mem) {
                @$this->shared_mem = new SharedMem((int)$shared_mem, "n", 0600, 5000);
            } else {
                @$this->shared_mem = new SharedMem((int)$shared_mem, "w", 0, 0);
            }
            if (!$this->shared_mem->isValid()) {
                if ($need_create_shmem) {
                    throw new MDSException(MDSErrors::MDS_PROGRESS_SHMEM_CRT_ERROR, $shared_mem);
                } else {
                    throw new MDSException(MDSErrors::MDS_PROGRESS_SHMEM_ERROR, $shared_mem);
                }
            }
        }

        if ($file) {
            if (is_writable(dirname($file)) || (file_exists($file) && is_writable($file))) {
                $this->progress_file = $file;
            } else {
                throw new MDSException(MDSErrors::MDS_PROGRESS_FILE_ERROR, $file);
            }
        }
    }

    /**
     * @param $total - total records for scanning
     */
    public function setTotal($total)
    {
        $this->total = $total;
    }

    /**
     * @param $num_dbs - num of tables for scan
     */
    public function setDbCount($num_dbs)
    {
        $this->db_count = $num_dbs;
        $this->one_db_percent = $num_dbs ? 100 / $num_dbs : 0;
    }

    /**
     *
     */
    public function getDbCount()
    {
        return $this->db_count;
    }

    /**
     * @param $tables - array of tables for scan
     */
    public function setTables($tables)
    {
        $this->tables = $tables;
        $this->num_tables = count($tables);
        $this->one_table_percent = $this->one_db_percent / $this->num_tables;
    }

    /**
     * @param $print - print function to printout progress
     */
    public function setPrint($print)
    {
        $this->print = $print;
    }

    /**
     * @param $i - index of currently scanned table
     * @param $table - name of currently scanned table
     */
    public function setCurrentTable($i, $table, $completed = false)
    {
        $new_percent = number_format(($this->current_db_num * $this->one_db_percent) + (($i + ($completed ? 1 : 0)) * $this->one_table_percent), 1);
        $this->progress_string = str_replace(substr($this->progress_string, 0, strpos($this->progress_string, '% of whole scan')), '[' . ($i + 1) . '/' . $this->num_tables . ' tbls of ' . ($this->current_db_num + 1) . '/' . $this->db_count . ' dbs] ' . $new_percent, $this->progress_string);
        if ($completed && !empty($this->progress_string)) {
            $start = @strpos($this->progress_string, '% of whole scan/') + 16;
            $end = @strpos($this->progress_string, '%', $start);
            $this->progress_string = substr_replace($this->progress_string, '100.0', $start, $end - $start);

            $start_count = @strpos($this->progress_string, '] ', $end) + 2;
            $end_count = @strpos($this->progress_string, ' rows', $end);
            $this->progress_string = substr_replace($this->progress_string, $this->total_table . ' of ' . $this->total_table, $start_count, $end_count - $start_count);
        }
        $this->current_table_num = $i;
        $this->current_table = $table;
        $this->percent_main = $new_percent;
        if ($this->print !== null && is_callable($this->print)) {
            $this->print->call($this, $this->getProgressAsString());
        }
    }

    /**
     * @param $i - index of currently scanned table
     * @param $table - name of currently scanned table
     */
    public function setCurrentDb($i, $db, $completed = false)
    {
        $new_percent = number_format(($i + ($completed ? 1 : 0)) * $this->one_db_percent, 1);
        $this->progress_string = str_replace(substr($this->progress_string ?? '', 0, strpos($this->progress_string ?? '', '% of whole scan')), '[' . ($this->current_table_num + 1) . '/' . $this->num_tables . ' tbls of ' . ($i + 1) . '/' . $this->db_count . ' dbs] ' . $new_percent, $this->progress_string ?? '');
        $this->current_db_num = $i;
        $this->current_db = $db;
        $this->percent_main = $new_percent;
        if ($this->print !== null && is_callable($this->print)) {
            $this->print->call($this, $this->getProgressAsString());
        }
    }

    /**
     * @param $key_start - first key of table
     * @param $key_last - last key of table
     */
    public function setKeysRange($key_start, $key_last)
    {
        $this->first_table_key = $key_start;
        $this->last_table_key = $key_last;
        $this->setTotalTable(($key_last - $key_start) + 1);
    }

    /**
     * @param $total_table - total records for table
     */
    public function setTotalTable($total_table)
    {
        $this->total_table = $total_table;
        $this->one_record_percent = $this->one_table_percent / $this->total_table;
    }

    /**
     * @param $row_id - current record
     * @param $detected - num of detected malicious
     * @param $db - current db
     * @param $table - current table
     */
    public function updateProgress($row_id, $detected, $cleaned, $db, $table)
    {
        if (time() - $this->last_update < $this->update_interval) {
            return;
        }

        $corrected_start_value = $row_id - $this->first_table_key;
        $percent_table = number_format($this->total_table ? $corrected_start_value * 100 / $this->total_table : 0, 1);
        $elapsed_time  = AibolitHelpers::currentTime() - $this->start;

        $stat            = '';
        $left            = 0;
        $left_time       = 0;
        $elapsed_seconds = 0;

        $percent_main = $this->percent_main;

        $percent_main += number_format($corrected_start_value * $this->one_record_percent, 1);

        if ($elapsed_time >= 1) {
            $elapsed_seconds = round($elapsed_time, 0);
            $fs              = floor($corrected_start_value / $elapsed_seconds);
            $left            = $this->total_table - $corrected_start_value;
            $clean = ($cleaned > 0 ? '/' . $cleaned : '');
            $malware = ($detected > 0 ? '[Mlw:' . $detected . $clean . ']' : '');
            if ($fs > 0) {
                $left_time = ($left / $fs);
                $stat = ' [Avg: ' . round($fs, 2) . ' rec/s' . ($left_time > 0 ? ' Left: ' . AibolitHelpers::seconds2Human($left_time) . ' for current table' : '') . '] ' . $malware;
            }
        }

        $this->progress_string = '[' . ($this->current_table_num + 1) . '/' . $this->num_tables . ' tbls of ' . ($this->current_db_num + 1) . '/' . $this->db_count . ' dbs] ' . $percent_main . '% of whole scan' . '/' . $percent_table . '% [' . $db . '.' . $table . '] ' . $corrected_start_value . ' of ' . $this->total_table . ' rows ' . $stat;

        $data = [
            'self'                  => __FILE__,
            'started'               => $this->start,
            'updated'               => time(),
            'progress_table'        => $percent_table,
            'progress_main'         => $percent_main,
            'time_elapsed'          => $elapsed_seconds,
            'time_left'             => round($left_time),
            'left'                  => $left,
            'total_table'           => $this->total_table,
            'current_index'         => $corrected_start_value,
            'current_db_num'        => $this->current_db_num,
            'current_table_num'     => $this->current_table_num,
            'total_db_count'        => $this->db_count,
            'total_tbl_db_count'    => $this->num_tables,
            'current_row_id'        => $row_id,
            'current'               => $db . '.' . $table . '/' . $row_id,
        ];

        if ($this->progress_file && (time() - $this->last_file_update > $this->file_write_interval)) {
            if (function_exists('json_encode')) {
                file_put_contents($this->progress_file, json_encode($data));
            } else {
                file_put_contents($this->progress_file, serialize($data));
            }

            $this->last_file_update = time();
        }

        if ($this->shared_mem && $this->shared_mem->isValid()) {
            $this->shared_mem->write($data);
        }

        if ($this->print !== null && is_callable($this->print)) {
            $this->print->call($this, $this->getProgressAsString());
        }
    }

    /**
     * @return string
     */
    public function getProgressAsString()
    {
        return $this->progress_string;
    }

    public function finalize()
    {
        if ($this->progress_file && file_exists($this->progress_file)) {
            @unlink($this->progress_file);
        }
        if ($this->shared_mem && $this->shared_mem->isValid()) {
            $this->shared_mem->close($this->create_shared_mem);
        }
        $this->shared_mem = null;
    }
}

/**
 * Class MDSScan module for scan string with signatures
 */
class MDSScan
{
    /**
     * Executes content scanning.
     *
     * @param string $content
     * @param \LoadSignaturesForScan $signature_db
     * @param array $table_config
     *
     * @return array|bool
     */
    public static function scan($content, $signature_db, $table_config)
    {
        $checkers['CriticalPHP'] = true;
        $checkers['CriticalJS'] = true;

        $checker_url['UrlChecker'] = false;

        $result = [];
        $resultUrl = [];

        $processResult = function ($checker, $content, $l_Pos, $l_SigId, &$return) use (&$result, $signature_db) {
            $return = null;
            $result = [
                'content'   => self::getFragment($content, $l_Pos),
                'pos'       => $l_Pos,
                'sigid'     => $l_SigId,
                'sn'        => isset($l_SigId) && isset($signature_db->_Mnemo[$l_SigId]) ? $signature_db->_Mnemo[$l_SigId] : '',
            ];
        };

        $processUrlResult = function ($checker, $content, $l_Pos, $l_SigId, &$return) use (&$resultUrl) {
            $return = null;
            if (isset($l_Pos['black'])) {
                for ($i = 0, $iMax = count($l_Pos['black']); $i < $iMax; $i++) {
                    $resultUrl['black'][] = [
                        'content'   => self::getFragment($content, $l_Pos['black'][$i]),
                        'pos'       => $l_Pos['black'][$i],
                        'sigid'     => $l_SigId['black'][$i],
                    ];
                }
            }

            if (isset($l_Pos['unk'])) {
                for ($i = 0, $iMax = count($l_Pos['unk']); $i < $iMax; $i++) {
                    $resultUrl['unk'][] = [
                        'content'   => self::getFragment($content, $l_Pos['unk'][$i]),
                        'pos'       => $l_Pos['unk'][$i],
                        'sigid'     => $l_SigId['unk'][$i],
                    ];
                }
            }
        };

        $l_Unwrapped = $content;
        if (isset($table_config['escaped']) && $table_config['escaped'] === true) {
            $l_Unwrapped = Normalization::unescape($l_Unwrapped);
        }
        $l_Unwrapped = Normalization::strip_whitespace($l_Unwrapped);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false && Encoding::iconvSupported()) {
            $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
        }
        $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
        $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        if ($l_DeobfType !== '') {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);
        $debug = new DebugMode();
        $found = ScanUnit::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signature_db, $debug, null, $processResult);
        $found_urls = ScanUnit::QCR_ScanContent($checker_url, $l_Unwrapped, $content, $signature_db, $debug, null, $processUrlResult);
        $ret = [];
        if ($found) {
            $ret['mlw'] = $result;
        }
        if ($found_urls) {
            $ret['url'] = $resultUrl;
        }
        return empty($ret) ? false : $ret;
    }

    public static function scanBatch($list, $signature_db, $table_config)
    {
        foreach ($list->getEntriesForScan() as $k => $v) {
            if ($res = self::scan($v->getB64decodedContent() ?? $v->getContent(), $signature_db, $table_config)) {
                $list->addScanResult($k, $res);
            }
        }
    }

    /**
     * Get snippet from string
     * @param $par_Content
     * @param $par_Pos
     * @return string|string[]
     */
    private static function getFragment($par_Content, $par_Pos)
    {
        $l_MaxChars = 120;

        $par_Content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '~', $par_Content);

        $l_MaxLen   = strlen($par_Content);
        $l_RightPos = min($par_Pos + $l_MaxChars, $l_MaxLen);
        $l_MinPos   = max(0, $par_Pos - $l_MaxChars);

        $l_Res = ($l_MinPos > 0 ? '…' : '') . substr($par_Content, $l_MinPos, $par_Pos - $l_MinPos) . '__AI_MARKER__' . substr($par_Content, $par_Pos, $l_RightPos - $par_Pos - 1);

        $l_Res = AibolitHelpers::makeSafeFn(Normalization::normalize($l_Res));

        $l_Res = str_replace('~', ' ', $l_Res);

        $l_Res = preg_replace('~[\s\t]+~', ' ', $l_Res);

        $l_Res = str_replace('' . '?php', '' . '?php ', $l_Res);

        return $l_Res;
    }
}

/**
 * Class MDSPreScanQuery generates PreScan SQL Query to get suspicious rows
 */
class MDSPreScanQuery
{
    private $aliases = [];
    private $limit = 0;
    private $last = 0;
    private $key;
    private $table;
    private $fields;
    private $fields_data;
    private $prescan;
    private $b64_template;
    private $db;
    private $size_limit;

    /**
     * MDSPreScanQuery constructor.
     * @param $prescan
     * @param $fields
     * @param $fields_data
     * @param $key
     * @param $table
     * @param $db
     * @param int $limit
     * @param int $last
     * @param int $size_limit
     */
    public function __construct($prescan, $fields, $fields_data, $key, $table, $db, $size_limit, $limit = 0, $last = 0)
    {
        $this->b64_template = 'CHAR_LENGTH($$FF$$) % 4 = 0 AND $$FF$$ REGEXP \'^(:AI:)?[-A-Za-z0-9+/]*={0,3}$\'';
        $this->limit = $limit;
        $this->prescan = $prescan;
        $this->fields = $fields;
        $this->fields_data = $fields_data;
        $this->key = $key;
        $this->table = $table;
        $this->last = $last;
        $this->db = $db;
        $this->size_limit = $size_limit;
        $this->generateAliases();
    }

    /**
     * @return array
     */
    public function getAliases()
    {
        return $this->aliases;
    }

    /**
     * @param $alias
     * @return bool|string
     */
    public function getFieldByAlias($alias)
    {
        foreach ($this->aliases as $key => $field) {
            if ($field === $alias) {
                return $key;
            }
        }
        return false;
    }

    /**
     * @param $field
     * @return bool|string
     */
    public function getAliasByField($field)
    {
        return $this->aliases[$field] ?? false;
    }

    /**
     * @return array
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * @return array
     */
    public function getFieldsData()
    {
        return $this->fields_data;
    }

    /**
     * @param $value
     */
    public function setLastKey($value)
    {
        $this->last = $value;
    }

    /**
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @return string
     */
    public function getDB()
    {
        return $this->db;
    }

    /**
     * @return string
     */
    public function getTable()
    {
        return $this->table;
    }

    /**
     * Generate pre scan sql query with or without base64 checking
     * @param boolean $base64 - base64 usage flag
     * @return string
     */
    public function generateSqlQuery($base64 = false)
    {
        $res = 'SELECT ';
        $numItems = count($this->fields);
        $i = 0;
        foreach ($this->fields as $column) {
            $res .= 'HEX(`' . $column . '`)' . ' as ' . $this->aliases[$column];
            if ($base64) {
                $res .= str_replace('$$FF$$', '`' . $column . '`', ', IF (' . $this->prescan . ', 1, 0) as ' . $this->aliases[$column] . '_norm');
                $res .= str_replace(
                    '$$FF$$',
                    'IF(SUBSTRING(`' . $column . '`, 1, 4) = \':AI:\', FROM_BASE64(SUBSTRING(`' . $column . '`, 5)), FROM_BASE64(`' . $column . '`))',
                    ', IF (' . $this->prescan . ', 1, 0) as ' . $this->aliases[$column] . '_b64'
                );
            }
            $res .= ',';
        }
        $res .= '`' . $this->getFieldByAlias('mds_key') . '`' . ' as ' . 'mds_key';
        if (count($this->fields_data ?? []) > 0) {
            $res .= ',';
        }

        $fields_data_count = count($this->fields_data);
        foreach ($this->fields_data as $column) {
            $res .= '`' . $column . '`' . ' as ' . $this->aliases[$column];
            if (++$i !== $fields_data_count) {
                $res .= ',';
            }
        }

        $res .= ' FROM `' . $this->db . '`.`' . $this->table . '`';
        $res .= ' WHERE `' . $this->key . '` > ' . $this->last;
        $res .= ' AND ';
        $res .= ' (';
        if ($base64) {
            $res .= '(' . $this->generatePreScanClause() . ')';
            $res .= ' OR (' . $this->generatePreScanClause(true) . ')';
        } else {
            $res .= $this->generatePreScanClause();
        }
        $res .= ')';
        if ($base64) {
            $res .= ' HAVING ';
            $i = 0;
            foreach ($this->fields as $column) {
                $res .= $this->aliases[$column] . '_norm = 1' . ' OR ' . $this->aliases[$column] . '_b64 = 1';
                if (++$i !== $numItems) {
                    $res .= ' OR ';
                }
            }
        }

        $res .= ' ORDER BY `' . $this->key . '`';
        if ($this->limit > 0) {
            $res .= ' LIMIT ' . $this->limit;
        }
        $res .= ';';
        return $res;
    }

    /**
     * generate aliases for fields
     */
    private function generateAliases()
    {
        $alphabet = 'abcdefghijklmnopqrstuvwxyz';
        $fields = array_merge($this->fields, $this->fields_data ?? []);
        $res = [];
        for ($i = 0, $iMax = count($fields); $i < $iMax; $i++) {
            $res[$fields[$i]] = $alphabet[$i];
        }
        $res[$this->key] = 'mds_key';
        $this->aliases = $res;
    }


    /**
     * Generate where clause part for sql pre scan query
     * @return string
     */
    private function generatePreScanClause($base64 = false)
    {
        $template = $base64 ? $this->b64_template : $this->prescan;
        $res = '';
        for ($i = 0, $iMax = count($this->fields); $i < $iMax; $i++) {
            $res .= '(LENGTH(`' . $this->fields[$i] . '`) <= ' . $this->size_limit . ' AND ';
            $res .= str_replace('$$FF$$', '`' . $this->fields[$i] . '`', '(' . $template . ')');
            $res .= ')';
            if ($i !== $iMax - 1) {
                $res .= ' OR ';
            }
        }
        return $res;
    }
}

/**
 * Class MDSScannerTable module for scan whole table
 */
class MDSScannerTable
{
    /**
     * @param mysqli                $connection
     * @param MDSPreScanQuery       $query
     * @param LoadSignaturesForScan $signature_db
     * @param int                   $max_clean
     * @param array                 $clean_db
     * @param MDSProgress           $progress
     * @param MDSState              $state
     * @param MDSJSONReport         $report
     * @param MDSBackup             $backup
     * @param Logger                $log
     * @param array                 $table_config
     *
     * @throws Exception
     */
    public static function scan($connection, $query, $signature_db, $max_clean, $clean_db = null, $progress = null, $state = null, $report = null, $backup = null, $log = null, $table_config = null)
    {
        $total_scanned_cells = 0;
        $total_scanned_rows = 0;
        $detected = 0;
        $detected_url = 0;
        $cleaned = 0;
        $total_queries = 0;

        $list = new MDSProcessingList();
        $sql = 'SELECT '
            . '  MIN(`' . $query->getKey() . '`) as start_key, '
            . '  MAX(`' . $query->getKey() . '`) as last_key, '
            . '  count(*) as rows_count '
            . 'FROM `' . $query->getDB() . '`.`' . $query->getTable() . '`;';
        try {
            $total_queries++;
            $tmp_query = $connection->query($sql);
        } catch (Exception $e) {
            throw new MDSException(MDSErrors::MDS_DROP_CONNECT_ERROR, 'Error while getting table key data. Db: ' . $query->getDB() . '. Table: ' . $query->getTable() . ' Error code: ' . $e->getCode() . '. Error message: ' . $e->getMessage());
        }
        if ($tmp_query === false) {
            throw new MDSException(MDSErrors::MDS_DROP_CONNECT_ERROR, 'Error while getting table key data. Db: ' . $query->getDB() . '. Table: ' . $query->getTable());
        }
        list($min_key, $last_key, $rows_count) = $tmp_query->fetch_array(MYSQLI_NUM);
        if ($progress instanceof MDSProgress) {
            $progress->setKeysRange($min_key, $last_key);
        }
        $pre_query = $query->generateSqlQuery(isset($table_config['base64']) && $table_config['base64'] === true);
        try {
            $total_queries++;
            $res = $connection->query($pre_query);
        } catch (Exception $e) {
            throw new MDSException(MDSErrors::MDS_DROP_CONNECT_ERROR, 'Error while getting table data. Db: ' . $query->getDB() . '. Table: ' . $query->getTable() . 'Error code: ' . $e->getCode() . '. Error message: ' . $e->getMessage());
        }
        if ($res === false) {
            throw new MDSException(MDSErrors::MDS_DROP_CONNECT_ERROR, 'Error while getting table data. Db: ' . $query->getDB() . '. Table: ' . $query->getTable());
        }
        if (self::isCanceled($state)) {
            $log->info('Task canceled');
            $report->setState(MDSJSONReport::STATE_CANCELED);
            return;
        }
        while ($res && $res->num_rows > 0) {
            if (!isset($clean_db)) {
                foreach ($res as $row) {
                    if (self::isCanceled($state)) {
                        $log->info('Task canceled in progress');
                        $report->setState(MDSJSONReport::STATE_CANCELED);
                        return;
                    }
                    $list->addToList($row, $query);
                    $list->markAllEntriesForScan();
                    foreach ($list->getEntriesForScan() as $k => $v) {
                        $result = MDSScan::scan($v->getB64decodedContent() ?? $v->getContent(), $signature_db, $table_config);
                        $list->addScanResult($k, $result);
                        if ($v->getScan() && $v->getScan()->IsMalwareDetected()) {
                            $log->debug(
                                sprintf(
                                    'DETECTED. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                    $v->getField(),
                                    $v->getKey(),
                                    $v->getScan()->getMalwareRes()->getSigname(),
                                    $v->getScan()->getMalwareRes()->getSnippet()
                                )
                            );
                            if ($report !== null) {
                                $report->addDetected(
                                    $v->getScan()->getMalwareRes()->getSigname(),
                                    $v->getScan()->getMalwareRes()->getSnippet(),
                                    $query->getTable(),
                                    $v->getKey(),
                                    $v->getField(),
                                    $v->getFieldsData()
                                );
                            }
                            $detected++;
                        }
                        if ($v->getScan() && $v->getScan()->IsBlackUrlDetected()) {
                            foreach ($v->getScan()->getBlackUrls() as $url) {
                                $log->debug(
                                    sprintf(
                                        'DETECTED Black Url. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                        $v->getField(),
                                        $v->getKey(),
                                        $url->getSigid(),
                                        $url->getSnippet()
                                    )
                                );
                                if ($report !== null) {
                                    $report->addDetectedUrl(
                                        $url->getSigid(),
                                        $url->getSnippet(),
                                        $query->getTable(),
                                        $v->getKey(),
                                        $v->getField(),
                                        $v->getFieldsData()
                                    );
                                }
                                $detected_url++;
                            }
                        }
                        if ($v->getScan() && $v->getScan()->IsUnknownUrlDetected()) {
                            foreach ($v->getScan()->getUnknownUrls() as $url) {
                                $log->debug(
                                    sprintf(
                                        'DETECTED Unknown Url. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                        $v->getField(),
                                        $v->getKey(),
                                        $url->getSigid(),
                                        $url->getSnippet()
                                    )
                                );
                                if ($report !== null) {
                                    $report->addUnknownUrl($url->getSigid());
                                }
                            }
                        }
                        $total_scanned_cells++;
                        if ($progress instanceof MDSProgress) {
                            $progress->updateProgress($v->getKey(), $detected + $detected_url, 0, $query->getDB(), $query->getTable());
                        }
                        $query->setLastKey($v->getKey());
                    }
                    $list->clear();
                    $total_scanned_rows++;
                }
            } else {
                $i = $max_clean;
                while (true) {
                    $row = $res->fetch_assoc();
                    if ($i-- && $row) {
                        $total_scanned_rows++;
                        $list->addToList($row, $query);
                        continue;
                    } elseif (!$row && $list->isEmpty()) {
                        break;
                    }
                    if ($row) {
                        $total_scanned_rows++;
                        $list->addToList($row, $query);
                    }
                    $list->markAllEntriesForScan();
                    $query->setLastKey($list->getLastKey());
                    MDSScan::scanBatch($list, $signature_db, $table_config);
                    foreach ($list->getEntriesWithScanResults() as $index => $entry) {
                        if (self::isCanceled($state)) {
                            $report->setState(MDSJSONReport::STATE_CANCELED);
                            return;
                        }
                        if (($entry->getScan() && $entry->getScan()->IsMalwareDetected()) || $entry->getScan()->IsBlackUrlDetected()) {
                            $list->addForClean($index);
                        }
                        if ($entry->getScan() && $entry->getScan()->IsMalwareDetected()) {
                            $log->debug(
                                sprintf(
                                    'DETECTED. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                    $entry->getField(),
                                    $entry->getKey(),
                                    $entry->getScan()->getMalwareRes()->getSigname(),
                                    $entry->getScan()->getMalwareRes()->getSnippet()
                                )
                            );
                            if ($report !== null) {
                                $report->addDetected(
                                    $entry->getScan()->getMalwareRes()->getSigname(),
                                    $entry->getScan()->getMalwareRes()->getSnippet(),
                                    $query->getTable(),
                                    $entry->getKey(),
                                    $entry->getField(),
                                    $entry->getFieldsData()
                                );
                            }
                            $detected++;
                        }
                        if ($entry->getScan() && $entry->getScan()->isBlackUrlDetected()) {
                            foreach ($entry->getScan()->getBlackUrls() as $url) {
                                $log->debug(
                                    sprintf(
                                        'DETECTED Black Url. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                        $entry->getField(),
                                        $entry->getKey(),
                                        $url->getSigid(),
                                        $url->getSnippet()
                                    )
                                );
                                if ($report !== null) {
                                    $report->addDetectedUrl(
                                        $url->getSigid(),
                                        $url->getSnippet(),
                                        $query->getTable(),
                                        $entry->getKey(),
                                        $entry->getField(),
                                        $entry->getFieldsData()
                                    );
                                }
                                $detected_url++;
                            }
                        }
                        if ($entry->getScan() && $entry->getScan()->IsUnknownUrlDetected()) {
                            foreach ($entry->getScan()->getUnknownUrls() as $url) {
                                $log->debug(
                                    sprintf(
                                        'DETECTED Unknown Url. Field: "%s", ID: %d, sn: "%s", content: "%s"',
                                        $entry->getField(),
                                        $entry->getKey(),
                                        $url->getSigid(),
                                        $url->getSnippet()
                                    )
                                );
                                if ($report !== null) {
                                    $report->addUnknownUrl($url->getSigid());
                                }
                            }
                        }
                    }
                    if ($backup instanceof MDSBackup) {
                        foreach ($list->getEntriesWithScanResultsOnlyBlack() as $index => $entry) {
                            $backup->backup($query->getDB(), $query->getTable(), $entry->getField(), $query->getKey(), $entry->getKey(), $entry->getContent());
                        }
                    }
                    MDSCleanup::cleanBatch($list, $detected + $detected_url, $cleaned, $clean_db, $connection, $query, $progress, $table_config);
                    foreach ($list->getEntriesWithCleanErrors() as $index => $entry) {
                        $report->addCleanedError('', '', $query->getTable(), $entry->getKey(), $entry->getField(), MDSErrors::MDS_CLEANUP_ERROR);
                    }

                    foreach ($list->getEntriesWithCleanResults() as $index => $entry) {
                        foreach ($entry->getClean() as $sig) {
                            $log->debug(
                                sprintf(
                                    'CLEANED. Field: "%s", ID: %d, sn: %s',
                                    $entry->getField(),
                                    $entry->getKey(),
                                    $sig
                                )
                            );
                            $report->addCleaned(
                                $sig,
                                $entry->getScan()->getSnippet(),
                                $query->getTable(),
                                $entry->getKey(),
                                $entry->getField(),
                                $entry->getFieldsData()
                            );
                        }
                    }
                    $total_scanned_cells += $list->getCount();
                    if ($progress instanceof MDSProgress) {
                        $progress->updateProgress($list->getLastKey(), $detected + $detected_url, $cleaned, $query->getDB(), $query->getTable());
                    }
                    $i = $max_clean;
                    $list->clear();
                }
            }
            $pre_query = $query->generateSqlQuery(isset($table_config['base64']) && $table_config['base64'] === true);
            $total_queries++;
            $res = $connection->query($pre_query);
        }

        $log->info(
            sprintf(
                'Scanning table "%s" finished. Scanned: %d, Detected: %d threats (%d signature and %d URL) in %d unique rows, Cleaned: %d unique rows',
                $query->getTable(),
                $total_scanned_cells,
                $detected + $detected_url,
                $detected,
                $detected_url,
                $list->getCountKeysWithScanResultsOnlyBlack(),
                $cleaned
            )
        );

        if ($report !== null) {
            $report->addTotalTableRows($query->getTable(), $rows_count);
            $report->addScannedTableCells($query->getTable(), $total_scanned_cells);
            $report->addScannedTableRows($query->getTable(), $total_scanned_rows);
            $report->addPerformedQueries($query->getTable(), $total_queries);
        }

        if ($res === false) {
            $log->error('Error with db connection ' . $connection->error);
            throw new MDSException(MDSErrors::MDS_DROP_CONNECT_ERROR, $connection->error);
        }
    }

    /**
     * Check on cancel
     * @param MDSState  $state
     * @return bool
     */
    private static function isCanceled($state)
    {
        if (is_null($state)) {
            return false;
        }
        return $state->isCanceled();
    }
}

/**
 * Class MDSScanner module for scan whole user
 */
class MDSScanner
{
    const QUERY_DATA_PART_LIMIT = 250;

    /**
     * @param string                $prescan - prescan string
     * @param string                $database - db name (null to scan all dbs that user have access to)
     * @param string                $prefix - prefix (null to disable filter by prefix)
     * @param MDSFindTables         $mds_find
     * @param mysqli                $connection
     * @param LoadSignaturesForScan $scan_signatures
     * @param int                   $max_clean
     * @param array                 $clean_db
     * @param MDSProgress           $progress
     * @param MDSState              $state
     * @param MDSJSONReport         $report
     * @param MDSBackup             $backup
     * @param bool                  $scan
     * @param bool                  $clean
     * @param Logger                $log
     * @param int                   $size_limit
     * @throws Exception
     */
    public static function scan($prescan, $database, $prefix, $mds_find, $connection, $scan_signatures, $max_clean = 100, $clean_db = null, $progress = null, $state = null, $report = null, $backup = null, $scan = true, $clean = false, $log = null, $size_limit = 650 * 1024)
    {

        $start_time = AibolitHelpers::currentTime();

        $tables = $mds_find->find($database, $prefix);
        if (empty($tables)) {
            $log->error('Not found any supported tables. Nothing to scan.');
            throw new MDSException(MDSErrors::MDS_NO_SUP_TABLES_ERROR, $database, $report->getUser(), $report->getHost());
        }

        if ($progress instanceof MDSProgress) {
            $progress->setTables($tables);
        }

        if (!$scan && !$clean) {
            return;
        }

        $log->info('MDS Scan: started');

        foreach ($tables as $i => $table) {
            if ($progress instanceof MDSProgress) {
                $progress->setCurrentTable($i, $table);
            }
            $scan_signatures->setOwnUrl($table['domain_name']);
            $prescan_query = new MDSPreScanQuery($prescan, $table['config']['fields'], $table['config']['fields_additional_data'] ?? [], $table['config']['key'], $table['table'], $table['db'], $size_limit, self::QUERY_DATA_PART_LIMIT);
            $log->debug(sprintf('Scanning table: "%s"', $table['table']));
            try {
                MDSScannerTable::scan($connection, $prescan_query, $scan_signatures, $max_clean, $clean_db, $progress, $state, $report, $backup, $log, $table['config']);
            } catch (MDSException $ex) {
                $report->addError($ex->getErrCode(), $ex->getErrMsg());
            }

            if ($progress instanceof MDSProgress) {
                $progress->setCurrentTable($i, $table, true);
            }
        }

        if ($report !== null) {
            $report->setCountTablesScanned(count($tables));
            $report->setRunningTime(AibolitHelpers::currentTime() - $start_time);
        }

        $log->info(sprintf('MDS Scan: finished. Time taken: %f second(s)', AibolitHelpers::currentTime() - $start_time));

        if ($progress instanceof MDSProgress) {
            $progress->finalize();
        }

        if ($backup instanceof MDSBackup) {
            $backup->finish();
        }
    }
}

/**
 * The MDSState class is needed to pass the MDS state of work
 */
class MDSState
{
    private $cache_ttl              = 1; //sec
    private $cache_data             = null;
    private $last_update_time_cache = 0;

    const STATE_NEW         = 'new';
    const STATE_WORKING     = 'working';
    const STATE_DONE        = 'done';
    const STATE_CANCELED    = 'canceled';

    private $state_filepath = null;

    /**
     * MDSState constructor.
     * @param string $state_filepath
     * @param int $cache_ttl
     */
    public function __construct($state_filepath, $cache_ttl = 1)
    {
        $this->state_filepath   = $state_filepath;
        $this->cache_ttl        = $cache_ttl;
    }

    /**
     * Scan or cure process not started
     * @return bool
     */
    public function isNew()
    {
        return $this->getCurrentState() == self::STATE_NEW;
    }

    /**
     * The scan or cure process is currently running
     * @return bool
     */
    public function isWorking()
    {
        return $this->getCurrentState() == self::STATE_WORKING;
    }

    /**
     * The scan or cure process is canceled
     * @return bool
     */
    public function isCanceled()
    {
        return $this->getCurrentState() == self::STATE_CANCELED;
    }

    /**
     * The scan or cure process is done
     * @return bool
     */
    public function isDone()
    {
        return $this->getCurrentState() == self::STATE_DONE;
    }

    /**
     * Set process to work state
     * @return bool
     */
    public function setWorking()
    {
        return $this->setStateWithoutCheck(self::STATE_WORKING);
    }

    /**
     * Set process to done state
     * @return bool
     */
    public function setDone()
    {
        return $this->setStateWithoutCheck(self::STATE_DONE);
    }

    /**
     * Set process to canceled state
     * @return bool
     */
    public function setCanceled()
    {
        $func = function ($data) {
            return ($data == self::STATE_WORKING) ? self::STATE_CANCELED : $data;
        };
        $new_data = $this->editFileWithClosure($this->state_filepath, $func);
        $this->setCache($new_data);
        return $new_data == self::STATE_CANCELED;
    }

    // /////////////////////////////////////////////////////////////////////////

    /**
     * Overwrite the file with new data with the condition programmed in the closure
     * @param string $filepath
     * @param string $edit_func
     * @param mixed $default
     * @return mixed
     */
    private function editFileWithClosure($filepath, $edit_func, $default = null)
    {
        $result = $default;
        $fh     = @fopen($filepath, 'c+');
        if (!$fh) {
            return $result;
        }
        if (flock($fh, LOCK_EX)) {
            $data   = trim(stream_get_contents($fh));
            $result = $edit_func($data);

            fseek($fh, 0);
            ftruncate($fh, 0);
            fwrite($fh, $result);
        } else {
            fclose($fh);
            return $result;
        }
        fclose($fh);
        return $result;
    }

    /**
     * Get file data
     * @param string $filepath
     * @return string|bool
     */
    private function readFile($filepath)
    {
        if (!file_exists($filepath)) {
            $this->setCache(false);
            return false;
        }
        $fh = @fopen($filepath, 'r');
        if (!$fh) {
            $this->setCache(false);
            return false;
        }
        $data = false;
        if (flock($fh, LOCK_SH)) {
            $data = trim(stream_get_contents($fh));
        }
        fclose($fh);
        $this->setCache($data);
        return $data;
    }

    /**
     * Set cache data
     * @param string $cache_data
     * @return void
     */
    private function setCache($cache_data)
    {
        $this->last_update_time_cache = time();
        $this->cache_data = $cache_data;
    }

    /**
     * Set state without checking
     * @param string $state
     * @return bool
     */
    private function setStateWithoutCheck($state)
    {
        $func = function ($data) use ($state) {
            return $state;
        };
        $new_data = $this->editFileWithClosure($this->state_filepath, $func, false);
        $this->setCache($new_data);
        return (bool)$new_data;
    }

    /**
     * Get current status
     * @return string
     */
    private function getCurrentState()
    {
        $current_state = $this->cache_data;
        if (is_null($this->cache_data) || $this->last_update_time_cache + $this->cache_ttl < time()) {
            $current_state = $this->readFile($this->state_filepath);
        }
        if (in_array($current_state, [self::STATE_WORKING, self::STATE_DONE, self::STATE_CANCELED])) {
            return $current_state;
        }
        return self::STATE_NEW;
    }
}

/**
 * Class MDSBackup Backup data to csv
 */
class MDSBackup
{
    private $fhandle;
    private $hmemory;
    private $uniq = [];

    /**
     * MDSBackup constructor.
     * @param string $file
     */
    public function __construct($file = '')
    {
        if ($file === '') {
            $file = @is_writable('/var/imunify360/tmp') ? '/var/imunify360/tmp' : getcwd();
            $file .= '/mds_backup_' . time() . '.csv';
        }
        $this->fhandle = fopen($file, 'a');
        $this->hmemory = fopen('php://memory', 'w+');

        if (!($this->fhandle && $this->hmemory)) {
            throw new MDSException(MDSErrors::MDS_BACKUP_ERROR);
        }
    }

    /**
     * Backup one record to csv
     * @param $db
     * @param $table
     * @param $field
     * @param $id
     * @param $data
     */
    public function backup($db, $table, $field, $key, $id, $data)
    {
        if (isset($this->uniq[$db][$table][$field][$key][$id])) {
            return;
        }
        fputcsv($this->hmemory, [$db, $table, $field, $key, $id, base64_encode($data)]);
        $size = fstat($this->hmemory);
        $size = $size['size'];
        if ($size > 32768) {
            $this->flush();
        }
        $this->uniq[$db][$table][$field][$key][$id] = '';
    }

    /**
     * Backup array of records to csv
     * @param $rows
     */
    public function backupBatch($rows)
    {
        foreach ($rows as list($db, $table, $field, $key, $id, $data)) {
             $this->backup($db, $table, $field, $key, $id, $data);
        }
    }

    /**
     * Flush to disk and close handles
     */
    public function finish()
    {
        $this->uniq = [];
        $this->flush();
        fclose($this->hmemory);
        fclose($this->fhandle);
    }

    /**
     * Flush to disk
     */
    private function flush()
    {
        rewind($this->hmemory);
        stream_copy_to_stream($this->hmemory, $this->fhandle);
        fflush($this->fhandle);
        rewind($this->hmemory);
        ftruncate($this->hmemory, 0);
    }
}

class MDSCleanup
{
    public static function clean($entry, $clean_db, $connection, $query, $field, $key, $report = null, $table_config = null)
    {
        $old_content = $entry->getContent();
        $c = $entry->getB64decodedContent() ?? $entry->getContent();
        $clean_result = CleanUnit::CleanContent($c, $clean_db, true, $table_config['escaped'] ?? false);
        if ($clean_result) {
            if ($entry->getB64decodedContent() !== null) {
                $c = base64_encode($c);
            }
            if ($entry->getPrefix()) {
                $c = $entry->getPrefix() . $c;
            }
            $query_str = 'UPDATE `' . $query->getDb() . '`.`' . $query->getTable() . '` SET `' . $field . '`=UNHEX(\'' . bin2hex($c) . '\')';
            $query_str .= ' WHERE `' . $query->getKey() . '`=' . $key . ' AND `' . $field . '`=UNHEX(\'' . bin2hex($old_content) . '\');';
            if ($connection->query($query_str) && $connection->affected_rows === 1 && $old_content !== $c) {
                return $clean_result;
            }
        }
        return false;
    }

    /**
     * @param MDSProcessingList $list
     * @param $detected
     * @param $cleaned
     * @param $clean_db
     * @param $connection
     * @param $query
     * @param $progress
     * @param $table_config
     *
     * @return void
     */
    public static function cleanBatch($list, $detected, &$cleaned, $clean_db, $connection, $query, $progress = null, $table_config = null)
    {
        if (!$list->isEntriesForclean()) {
            return;
        }
        @$connection->begin_transaction(MYSQLI_TRANS_START_READ_WRITE);
        foreach ($list->getEntriesForClean() as $index => $entry) {
            $clean = self::clean($entry, $clean_db, $connection, $query, $entry->getField(), $entry->getKey(), null, $table_config);
            $list->addCleanResult($index, $clean);
            if ($clean) {
                $cleaned++;
            }
            if ($progress instanceof MDSProgress) {
                $progress->updateProgress($entry->getKey(), $detected, $cleaned, $query->getDB(), $query->getTable());
            }
        }
        @$connection->commit();
    }
}

/**
 * Class MDSRestore Restore data from csv backup
 */
class MDSRestore
{
    private $fhandle;
    private $connection;
    private $progress;
    private $report;
    private $current_row = 0;
    private $start_time = 0;
    private $state = null;
    private $log = null;

    /**
     * MDSRestore constructor.
     * @param string        $file
     * @param mysqli        $connection
     * @param MDSProgress   $progress
     * @param MDSJSONReport $report
     * @param MDSState      $state
     */
    public function __construct($file, $connection, $progress = null, $report = null, MDSState $state = null, $log = null)
    {
        if (!$this->fhandle = fopen($file, 'r')) {
            throw new MDSException(MDSErrors::MDS_RESTORE_BACKUP_ERROR, $file);
        }
        $this->connection = $connection;
        $this->progress = $progress;
        $this->report = $report;
        $this->state = $state;
        $this->log = $log;

        $file = new \SplFileObject($file, 'r');
        $file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        $file->seek(PHP_INT_MAX);

        if ($progress instanceof MDSProgress) {
            $progress->setTotal($file->key());
            $progress->setKeysRange(0, $file->key());
            $progress->setTotalTable($file->key());
            $progress->setCurrentTable(0, '');
        }

        $this->start_time = AibolitHelpers::currentTime();
    }

    /**
     * Write to db one record
     * @param $db
     * @param $table
     * @param $field
     * @param $key
     * @param $id
     * @param $data
     * @return bool
     */
    public function writeToDb($db, $table, $field, $key, $id, $data)
    {
        $ret = false;
        $data = base64_decode($data);
        $query_str = 'UPDATE `' . $db . '`.`' . $table . '` SET `' . $field . '`=\'' . $this->connection->real_escape_string($data) . '\'';
        $query_str .= ' WHERE `' . $key . '`=' . $id . ';';
        if ($this->connection->query($query_str) && $this->connection->affected_rows === 1) {
            $ret = true;
        }
        if ($this->progress instanceof MDSProgress) {
            $this->progress->updateProgress(++$this->current_row, 0, 0, $db, $table);
        }
        if (isset($this->report)) {
            if ($ret === true) {
                $this->report->addRestored($table, $id, $field);
            } else {
                $this->report->addRestoredError(MDSErrors::MDS_RESTORE_UPDATE_ERROR, $table, $id, $field);
            }
        }
        return $ret;
    }

    /**
     * Write to db array of records
     * @param $rows
     */
    public function writeToDbBatch($rows)
    {
        foreach ($rows as list($db, $table, $field, $key, $id, $data)) {
            $this->writeToDb($db, $table, $field, $key, $id, $data);
        }
    }

    public function restore($count)
    {
        $batch = $count;
        $for_restore = [];
        while (true) {
            if ($this->isCanceled()) {
                $this->log->info('Task canceled in progress');
                $this->report->setState(MDSJSONReport::STATE_CANCELED);
                break;
            }
            $row = fgetcsv($this->fhandle);
            if ($batch-- && $row) {
                $for_restore[] = $row;
                continue;
            } else {
                if (!$row && empty($for_restore)) {
                    break;
                }
            }
            if ($row) {
                $for_restore[] = $row;
            }
            $this->writeToDbBatch($for_restore);
            $for_restore = [];
            $batch = $count;
        }
    }

    /**
     * Close file handle and save report
     */
    public function finish()
    {
        fclose($this->fhandle);
        if (isset($this->report)) {
            $this->report->setCountTablesScanned(1);
            $this->report->setRunningTime(AibolitHelpers::currentTime() - $this->start_time);
        }
    }

    /**
     * Check on cancel
     * @return bool
     */
    private function isCanceled()
    {
        if (is_null($this->state)) {
            return false;
        }
        return $this->state->isCanceled();
    }
}

/**
 * Class MDSUrls store urls data
 */
class MDSUrls
{
    private $optimized_db;
    private $urls;

    /**
     * MDSUrls constructor.
     * @param $file
     * @throws Exception
     */
    public function __construct($file)
    {
        if (empty($file) || !file_exists($file)) {
            throw new MDSException(MDSErrors::MDS_DB_URLS_ERROR, $file);
        }

        $db = new \SplFileObject($file, 'r');
        $db->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        foreach ($db as $url) {
            $url = explode('-', $url, 2);
            if (count($url) < 2) {
                continue;
            }
            $this->urls[$url[0]] = strpos($url[1], '//') === 0 ? substr_replace($url[1], '//(www\.)?', 0, 2) : $url[1];
        }
        unset($db);

        $this->optimized_db = $this->urls;
        $this->optSig($this->optimized_db);
        $this->optimized_db = array_map([$this, 'completeRegexp'], $this->optimized_db);
    }

    public function completeRegexp($item)
    {
        return ($item !== '') ? ('~' . $item . '~msi') : $item;
    }


    /**
     * Signature optimization (glue)
     * @param $sigs
     */
    private function optSig(&$sigs)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $index => &$s) {
            $s .= '(?<X' . $index . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e'  => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a'                    => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*'             => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}'                   => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~'                            => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~'  => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        $this->optSigCheck($sigs);

        $tmp = [];
        foreach ($sigs as $i => $s) {
            if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) {
                unset($sigs[$i]);
                $tmp[] = $s;
            }
        }

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#^((?>(?:\\\\.|\\[.+?\\]|[^(\n]|\((?:\\\\.|[^)(\n])++\))(?:[*?+]\+?|\{\d+(?:,\d*)?\}[+?]?|)){' . $i . ',})[^\n]*+(?:\\n\\1(?![{?*+]).+)+#im', [$this, 'optMergePrefixes'], $txt);
        }

        $sigs = array_merge(explode("\n", $txt), $tmp);

        $this->optSigCheck($sigs);
    }

    /**
     * @param $m
     * @return string
     */
    private function optMergePrefixes($m)
    {
        $limit = 8000;

        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {
            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            $len += strlen($s);
            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $r[] = $prefix . $suffixes[0];
                } else {
                    $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $r[] = $prefix . $suffixes[0];
            } else {
                $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
        }

        return implode("\n", $r);
    }

    /*
     * Checking errors in pattern
     */
    private function optSigCheck(&$sigs)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    /**
     * Return optimized db
     * @return mixed
     */
    public function getDb()
    {
        return $this->optimized_db;
    }

    public function getSig($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] !== -1 && strlen($key) > 1) {
                return 'CMW-URL-' . substr($key, 1);
            }
        }
        return null;
    }

    public function getSigUrl($id)
    {
        if (strpos($id, 'CMW-URL-') !== false) {
            $id = (int)str_replace('CMW-URL-', '', $id);
        }
        return $this->urls[$id];
    }
}

class MDSErrors
{
    const MDS_CONNECT_ERROR             = 1;
    const MDS_BACKUP_ERROR              = 2;
    const MDS_PROGRESS_FILE_ERROR       = 3;
    const MDS_PROGRESS_SHMEM_ERROR      = 4;
    const MDS_PROGRESS_SHMEM_CRT_ERROR  = 5;
    const MDS_RESTORE_BACKUP_ERROR      = 6;
    const MDS_NO_SUP_TABLES_ERROR       = 7;
    const MDS_CONFIG_ERROR              = 8;
    const MDS_DB_URLS_ERROR             = 9;
    const MDS_NO_DATABASE               = 10;
    const MDS_PRESCAN_CONFIG_ERROR      = 11;
    const MDS_REPORT_ERROR              = 12;

    const MDS_DROP_CONNECT_ERROR        = 13;

    const MDS_AVD_DB_NOTFOUND           = 14;
    const MDS_AVD_DB_INVALID            = 15;
    const MDS_INVALID_CMS_CONFIG        = 16;
    const MDS_CMS_CONFIG_NOTSUP         = 17;
    const MDS_MULTIPLE_DBS              = 18;
    const MDS_NO_SCANNED                = 19;
    const MDS_NO_REPORT                 = 20;
    const MDS_NO_BACKUP                 = 21;

    const MDS_CLEANUP_ERROR             = 101;
    const MDS_RESTORE_UPDATE_ERROR      = 102;

    const MESSAGES = [
        self::MDS_CONNECT_ERROR               => 'Can\'t connect to database: %s',
        self::MDS_BACKUP_ERROR                => 'Can\'t create backup file in %s',
        self::MDS_PROGRESS_FILE_ERROR         => 'Can\'t create progress file in %s',
        self::MDS_PROGRESS_SHMEM_ERROR        => 'Can\'t use progress shared memory with key %s',
        self::MDS_PROGRESS_SHMEM_CRT_ERROR    => 'Can\'t create progress shared memory with key %s',
        self::MDS_RESTORE_BACKUP_ERROR        => 'Can\'t open backup file for restore in %s',
        self::MDS_NO_SUP_TABLES_ERROR         => 'Not found any supported tables in db %s in %s@%s',
        self::MDS_CONFIG_ERROR                => 'Can\'t open configuration file in %s',
        self::MDS_DB_URLS_ERROR               => 'Can\'t open urls db file %s',
        self::MDS_DROP_CONNECT_ERROR          => 'Lost connection to database: %s',
        self::MDS_NO_DATABASE                 => 'No database selected. Please, provide database name.',
        self::MDS_PRESCAN_CONFIG_ERROR        => 'Can\'t load prescan config from %s',
        self::MDS_REPORT_ERROR                => 'Can\'t write report to %s',
        self::MDS_CLEANUP_ERROR               => 'Error in cleanup during update table record.',
        self::MDS_RESTORE_UPDATE_ERROR        => 'Error in restore during update table record.',
        self::MDS_AVD_DB_NOTFOUND             => 'Failed loading DB from "%s": DB file not found.',
        self::MDS_AVD_DB_INVALID              => 'Failed loading DB from "%s": invalid DB format.',
        self::MDS_INVALID_CMS_CONFIG          => 'Failed loading CMS config %s',
        self::MDS_CMS_CONFIG_NOTSUP           => 'Can\'t parse config for CMS: %s',
        self::MDS_MULTIPLE_DBS                => 'For multiple DBs (%s) we support only scan, please select one db for work.',
        self::MDS_NO_SCANNED                  => 'No database to process.',
        self::MDS_NO_REPORT                  =>  'No --report-file option specified',
        self::MDS_NO_BACKUP                  =>  'No --backup-file option specified',
    ];

    public static function getErrorMessage($errcode, ...$args)
    {
        return vsprintf(self::MESSAGES[$errcode] ?? 'An unknown error occurred.', ...$args);
    }
}

class MDSException extends Exception
{
    private $_errcode = 0;
    private $_errmsg = '';

    public function __construct($errcode, ...$args)
    {
        $this->_errcode = $errcode;
        $this->_errmsg = MDSErrors::getErrorMessage($errcode, $args);
        parent::__construct($this->_errmsg);
    }

    public function getErrCode()
    {
        return $this->_errcode;
    }

    public function getErrMsg()
    {
        return $this->_errmsg;
    }
}

class MDSDBCredsFromConfig
{
    private $finder;
    private $creds = [];

    public function __construct($finder, $path, MDSTablesConfig $config)
    {
        $res = [];
        $this->finder = $finder;
        foreach ($this->finder->find($path) as $file_config) {
            foreach ($config->getSupportedApplications() as $app) {
                try {
                    $cms = MDSCMSAddonFactory::getCMSConfigInstance($app, dirname($file_config));
                } catch (\Exception $e) {
                    continue;
                }
                $res = $cms->parseConfig();
                if (
                    isset($res['db_name']) && isset($res['db_user']) && isset($res['db_pass'])
                    && isset($res['db_host']) && isset($res['db_port']) && isset($res['db_prefix'])
                ) {
                    $this->creds[] = $res;
                }
            }
        }
        $this->creds = array_unique($this->creds, SORT_REGULAR);
    }

    public function getCreds()
    {
        return $this->creds;
    }

    public function printCreds()
    {
        echo 'Found following db credentials: ' . PHP_EOL;
        foreach ($this->creds as $db_cred) {
            echo '--------------------------------------------------------' . PHP_EOL;
            echo 'Host:   ' . $db_cred['db_host']   . PHP_EOL;
            echo 'Port:   ' . $db_cred['db_port']   . PHP_EOL;
            echo 'User:   ' . $db_cred['db_user']   . PHP_EOL;
            echo 'Pass:   ' . $db_cred['db_pass']   . PHP_EOL;
            echo 'Name:   ' . $db_cred['db_name']   . PHP_EOL;
            echo 'Prefix: ' . $db_cred['db_prefix'] . PHP_EOL;
        }
    }

    public function printForXArgs()
    {
        foreach ($this->creds as $db_cred) {
            echo '"\'' . $db_cred['db_host'] . ';;' . $db_cred['db_port'] . ';;' . $db_cred['db_user'] . ';;' . $db_cred['db_pass'] . ';;' . $db_cred['db_name'] . ';;' . $db_cred['db_prefix'] . '\'"' . PHP_EOL;
        }
    }
}

class MDSCMSConfigFilter
{
    private $followSymlink = true;
    private $config;

    public function __construct(MDSTablesConfig $config = null)
    {
        $this->config = $config;
    }

    private function fileExistsAndNotNull(FileInfo $file)
    {
        return ($file->is_file() && $file->file_exists() && ($file->getSize() > 2048));
    }

    public function needToScan(FileInfo $file, $only_dir = false)
    {
        if ($file->is_dir()) {
            return true;
        }
        if ($this->fileExistsAndNotNull($file) && in_array($file->getBasename(), $this->config->getSupportedConfigFiles())) {
            return true;
        }
        return false;
    }

    public function isFollowSymlink()
    {
        return $this->followSymlink;
    }
}

class SendMessageRequest
{
    const API_URL = 'https://api.imunify360.com/api/send-message';
    const DEBUG_API_URL = 'http://127.0.0.1:8888';

    private $timeout = 10;
    private $debug = false;
    private $tag = '';

    /**
     * SendMessageRequest constructor.
     * @param string $tag
     * @param int $timeout
     */
    public function __construct($tag, $timeout = 10, $debug = false)
    {
        $this->timeout = $timeout;
        $this->debug = $debug;
        $this->tag = $tag;
    }

    /**
     * @param $data
     * @return bool|array
     */
    public function request($data)
    {
        $json_data = json_encode($data);

        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->getApiUrl());
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
            $result = curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            fwrite(STDERR, 'Warning: [' . $this->tag . '] Curl: ' . $e->getMessage() . PHP_EOL);
            return false;
        }
        return @json_decode($result, true);
    }

    private function getApiUrl()
    {
        return $this->debug ? self::DEBUG_API_URL : self::API_URL;
    }
}

class MDSSendToCH
{
    private $request = null;
    private $report = null;
    private $lic = null;

    public function __construct($request, $lic)
    {
        $this->request = $request;
        $this->lic = $lic;
    }

    public function prepareData($report)
    {
        $this->report = MDSJSONReport::removeKeysFromReport($report, ['row_ids', 'rows_with_error']);
        $this->report = ['items' => [$this->report]];
    }

    public function send()
    {
        $license = $this->lic->getLicData();
        $data = [
            'method' => 'MDS_SCAN_LIST',
            'license' => $license,
            'payload' => $this->report,
            'server_id' => $license['id'],
        ];
        $res = $this->request->request($data);
        if ($res['status'] === 'ok') {
            return true;
        } else {
            fwrite(STDERR, 'Warning: [MDS] Invalid response: ' . json_encode($res) . PHP_EOL);
            return false;
        }
    }
}

class MDSDetachedMode
{
    protected $workdir;
    protected $scan_id;
    protected $pid_file;
    protected $done_file;
    protected $sock_file;
    protected $complete = [
        'scan' => 'MALWARE_SCAN_COMPLETE',
        'clean' => 'MALWARE_CLEAN_COMPLETE',
        'restore' => 'MALWARE_RESTORE_COMPLETE'
    ];

    protected $op = null;

    public function __construct($scan_id, $op, $basedir = '/var/imunify360/dbscan/run', $sock_file = '/var/run/defence360agent/generic_sensor.sock.2')
    {
        $basedir = $basedir . DIRECTORY_SEPARATOR . $op;
        $this->scan_id  = $scan_id;
        $this->setWorkDir($basedir, $scan_id);
        $this->pid_file     = $this->workdir . '/pid';
        $this->done_file    = $this->workdir . '/done';
        $this->setSocketFile($sock_file);
        $this->savePid();
        $this->checkWorkDir($this->workdir);
    }

    public function getWorkDir()
    {
        return $this->workdir;
    }

    protected function checkWorkDir($workdir)
    {
        if (!file_exists($workdir) && !mkdir($workdir, 0750) && !is_dir($workdir)) {
            die('Error! Cannot create workdir ' . $workdir . ' for detached scan.');
        } elseif (file_exists($workdir) && !is_writable($workdir)) {
            die('Error! Workdir ' . $workdir . ' is not writable.');
        }
    }

    protected function savePid()
    {
        file_put_contents($this->pid_file, strval(getmypid()));
    }

    public function complete()
    {
        @touch($this->done_file);
        $complete = [
            'method'        => 'MALWARE_SCAN_COMPLETE',
            'scan_id'       => $this->scan_id,
            'resource_type' => 'db',
        ];
        if ($this->op && isset($this->complete[$this->op])) {
            $complete['method'] = $this->complete[$this->op];
        }
        $json_complete = json_encode($complete) . "\n";
        $socket = @fsockopen('unix://' . $this->sock_file);
        if (is_resource($socket)) {
            stream_set_blocking($socket, false);
            fwrite($socket, $json_complete);
            fclose($socket);
        }
    }

    public function setOp($op)
    {
        if ($op && isset($this->complete[$op])) {
            $this->op = $op;
        }
    }

    protected function setWorkDir($dir, $scan_id)
    {
        $this->workdir = $dir . '/' . $scan_id;
    }

    protected function setSocketFile($sock)
    {
        $this->sock_file = $sock;
    }
}

class MDSDBCredsFromAVD
{
    const BUSY_TIMEOUT_MSEC = 10000;

    /**
     * SQLite's limit for "Maximum Number Of Arguments On A Function".
     */
    const SQLITE_MAX_FUNCTION_ARGS = 127;

    protected $dbh;

    protected $avd_path_prev    = '/var/imunify360/components_versions.sqlite3';
    protected $avd_path         = '/var/lib/cloudlinux-app-version-detector/components_versions.sqlite3';
    protected $found_apps       = 0;
    private $path_field         = 'real_path';

    public function __construct()
    {
        $path = file_exists($this->avd_path) ? $this->avd_path : (file_exists($this->avd_path_prev) ? $this->avd_path_prev : '');

        if ($path === '') {
            throw new MDSException(MDSErrors::MDS_AVD_DB_NOTFOUND, $this->avd_path);
        }

        $this->openAppDB($path);
        if (!$this->haveTable('apps')) {
            throw new MDSException(MDSErrors::MDS_AVD_DB_INVALID, $this->avd_path);
        }
        if (!$this->haveColumn('apps', $this->path_field)) {
            $this->path_field = 'path';
        }
    }

    public function getCredsFromApps($paths, $apps = null, $glob = false)
    {
        foreach ($this->getApps($paths, $apps, $glob) as $row) {
            try {
                $config = MDSCMSAddonFactory::getCMSConfigInstance($row['title'], $row[$this->path_field]);
                $res = $config->parseConfig();
                $res['app_owner_uid'] = $row['app_uid'] ?? null;
                yield $res;
            } catch (MDSException $ex) {
                $res = [
                    'error' => $ex,
                ];
                yield $res;
            }
        }
        $this->dbh = null;
    }

    public function getAppsCount()
    {
        return $this->found_apps;
    }

    public function countApps($paths, $apps = null, $glob = false)
    {
        $found_apps = 0;
        $queries = $this->generateAppDBQueries($glob, $apps, $paths, true);
        foreach ($queries as $query) {
            list($sql, $params) = $query;
            $count_sql = 'SELECT COUNT(*) as count FROM (' . $sql . ');';
            $result = $this->execQueryToAppDB($count_sql, $params);
            $found_apps += (int)$result->fetchArray(SQLITE3_NUM)[0];
        }
        $this->found_apps = $found_apps;
    }

    public function getApps($paths, $apps, $glob)
    {
        $queries = $this->generateAppDBQueries($glob, $apps, $paths);
        foreach ($queries as $query) {
            list($sql, $params) = $query;
            $res = $this->execQueryToAppDB($sql, $params);
            while ($row = $res->fetchArray(SQLITE3_ASSOC)) {
                yield $row;
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////

    private function openAppDB($db)
    {
        $this->dbh = new \SQLite3($db);
        $this->dbh->busyTimeout(self::BUSY_TIMEOUT_MSEC);
        $this->dbh->exec('PRAGMA journal_mode = WAL;');
    }

    private function haveColumn($table_name, $column_name)
    {
        $sql    = 'PRAGMA table_info("' . $table_name . '")';
        $stmt   = $this->dbh->prepare($sql);
        $result = $stmt->execute();
        while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
            if ($row['name'] == $column_name) {
                return true;
            }
        }
        return false;
    }

    private function haveTable($table_name)
    {
        $sql = 'PRAGMA table_info("' . $table_name . '")';
        $stmt   = $this->dbh->prepare($sql);
        $result = $stmt->execute();
        return (bool)$result->fetchArray();
    }

    /**
     * @param string $query
     * @param array  $params
     *
     * @return SQLite3Result
     */
    private function execQueryToAppDB(string $query, array $params)
    {
        $stmt  = $this->dbh->prepare($query);
        foreach ($params as $param_name => $param_value) {
            $stmt->bindValue($param_name, $param_value);
        }
        return $stmt->execute();
    }

    /**
     * Generates an array of queries to get apps from the database.
     *
     * Multiple queries are generated if the number of paths exceeds SQLite's limit of arguments in a function.
     *
     * @param bool $glob
     * @param string[] $apps
     * @param string[] $paths
     * @param bool $only_ids
     *
     * @return array
     */
    private function generateAppDBQueries($glob, $apps, $paths, $only_ids = false): array
    {
        $maxPathsPerQuery = self::SQLITE_MAX_FUNCTION_ARGS - count($apps);
        $result = [];

        $pathsChunks = array_chunk($paths, $maxPathsPerQuery);
        foreach ($pathsChunks as $pathsChunk) {
            $result[] = $this->generateAppDBQuery($glob, $apps, $pathsChunk, $only_ids);
        }

        return $result;
    }
    /**
     * @param bool     $glob
     * @param string[] $apps
     * @param string[] $paths
     * @param bool     $only_ids
     *
     * @return array
     */
    private function generateAppDBQuery($glob, $apps, $paths, $only_ids = false): array
    {
        $params = [];
        $sql = 'SELECT max(id)'
            . ' FROM apps'
            . ' WHERE (';
        for ($i = 0, $iMax = count($paths); $i < $iMax; $i++) {
            $sql .= $this->path_field . ' ';
            $sql .= $glob ? 'GLOB ' : '= ';
            $sql .= ':path' . $i;
            $params[':path' . $i] = $paths[$i];
            if ($i !== $iMax - 1) {
                $sql .= ' OR ';
            }
        }

        $sql .= ')';

        $sql .= !empty($apps) ? ' AND title IN (' : '';
        for ($i = 0, $iMax = count($apps); $i < $iMax; $i++) {
            $sql .= ':app' . $i;
            $params[':app' . $i] = $apps[$i];
            if ($i !== $iMax - 1) {
                $sql .= ', ';
            }
        }
        $sql .= !empty($apps) ? ')' : '';
        $sql .= ' GROUP BY ' . $this->path_field . ', title';

        $final_sql = $sql;
        if (!$only_ids) {
            $final_sql = 'SELECT * FROM apps WHERE id IN (' . $sql . ') ORDER BY id';
        }
        return [$final_sql, $params];
    }
}

class MDSCMSAddonFactory
{
    /**
     * @param string $app
     * @param string $path
     *
     * @return MDSCMSAddon
     * @throws MDSException
     */
    public static function getCMSConfigInstance($app, $path)
    {
        $class = 'MDS' . ucfirst(str_replace('_', '', $app)) . 'Config';

        if (!class_exists($class)) {
            throw new MDSException(MDSErrors::MDS_CMS_CONFIG_NOTSUP, $app);
        }
        return new $class($path);
    }
}

class MDSCMSAddon
{
    const CONFIG_FILE = '';
    const MIN_SIZE = '1000';

    protected $app;
    protected $path;

    public function __construct($path)
    {
        if (
            !file_exists($path . '/' . static::CONFIG_FILE)
            || !is_readable($path . '/' . static::CONFIG_FILE)
            || (filesize($path . '/' . static::CONFIG_FILE) < static::MIN_SIZE)
        ) {
            throw new MDSException(MDSErrors::MDS_INVALID_CMS_CONFIG, $path . '/' . static::CONFIG_FILE);
        }

        $this->path = $path;
    }

    public function parseConfig()
    {
    }
}

class MDSAVDPathFilter
{
    private $ignoreList = [];

    public function __construct($filepath)
    {
        if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
            return;
        }

        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $base64_filepath) {
            if ($base64_filepath !== '') {
                $this->ignoreList[$base64_filepath] = '';
            }
        }
    }

    public function needToScan($file)
    {
        $tree = $this->getTree($file);
        if ($this->pathRelatesTo($tree, $this->ignoreList, true)) {
            return false;
        }
        return true;
    }

    private function getTree($file)
    {
        $tree = [];
        $path = $file;
        while ($path !== '.' && $path !== '/') {
            $path = dirname($path, 1);
            $tree[] = $path;
        }
        $tree[] = $file;
        return $tree;
    }

    private function pathRelatesTo($tree, $pathes, $base64 = false)
    {
        foreach ($tree as $path) {
            if ($base64) {
                $path = base64_encode($path);
            }
            if (isset($pathes[$path])) {
                return true;
            }
        }
        return false;
    }
}

class MDSCollectUrlsRequest
{
    const API_URL = 'https://api.imunify360.com/api/mds/check-urls';
    const DEBUG_API_URL = 'http://127.0.0.1:8888';

    private $timeout = 10;
    private $debug = false;

    /**
     * MDSCollectUrlsRequest constructor.
     * @param int $timeout
     */
    public function __construct($timeout = 10, $debug = false)
    {
        $this->timeout = $timeout;
        $this->debug = $debug;
    }

    /**
     * @param $data
     * @return bool|array
     */
    public function request($data)
    {
        $result = '';
        $json_data = json_encode($data);

        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->getApiUrl());
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
            $result = curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            fwrite(STDERR, 'Warning: [MDS] Curl: ' . $e->getMessage() . PHP_EOL);
            return false;
        }
        return @json_decode($result, true);
    }

    private function getApiUrl()
    {
        return $this->debug ? self::DEBUG_API_URL : self::API_URL;
    }
}

class MDSSendUrls
{
    private $request = null;

    public function __construct($request)
    {
        $this->request = $request;
    }

    public function send($urls)
    {
        $data = [
            'urls'      => $urls,
            'source'    => 'MDS',
        ];
        $res = $this->request->request($data);
        if ($res !== null && $res['status'] === 'ok') {
            return true;
        } else {
            fwrite(STDERR, 'Warning: [MDS] Invalid response: ' . json_encode($res) . PHP_EOL);
            return false;
        }
    }
}

class MDSWpcoreConfig extends MDSCMSAddon
{
    const CONFIG_FILE = 'wp-config.php';

    public function parseConfig()
    {
        $res = [];
        $config = @file_get_contents($this->path . '/' . self::CONFIG_FILE, false, null, 0, 50000);
        if ($db_name = MDSParseContent::parseDefine('DB_NAME', $config)) {
            $res['db_name'] = $db_name;
        }
        if ($db_user = MDSParseContent::parseDefine('DB_USER', $config)) {
            $res['db_user'] = $db_user;
        }
        if ($db_pass = MDSParseContent::parseDefine('DB_PASSWORD', $config)) {
            $res['db_pass'] = $db_pass;
        }
        if ($db_prefix = MDSParseContent::parseVariable('table_prefix', $config)) {
            $res['db_prefix'] = $db_prefix;
        }
        if ($db_host = MDSParseContent::parseDefine('DB_HOST', $config)) {
            $host = explode(':', $db_host);
            $res['db_host'] = $host[0];
            $res['db_port'] = isset($host[1]) ? (int)$host[1] : 3306;
        }

        if (
            isset($res['db_name'])
            && isset($res['db_user'])
            && isset($res['db_pass'])
            && isset($res['db_host'])
            && isset($res['db_port'])
            && isset($res['db_prefix'])
        ) {
            $res['db_app'] = 'wp_core';
            $res['db_path'] = $this->path;
            return $res;
        }
        return false;
    }
}

class MDSJoomlacoreConfig extends MDSCMSAddon
{
    const CONFIG_FILE = 'configuration.php';

    public function parseConfig()
    {
        $res = [];
        $config = @file_get_contents($this->path . '/' . self::CONFIG_FILE, false, null, 0, 50000);

        if ($db_name = MDSParseContent::parsePublicVariable('db', $config)) {
            $res['db_name'] = $db_name;
        }
        if ($db_user = MDSParseContent::parsePublicVariable('user', $config)) {
            $res['db_user'] = $db_user;
        }
        if ($db_pass = MDSParseContent::parsePublicVariable('password', $config)) {
            $res['db_pass'] = $db_pass;
        }
        if ($db_prefix = MDSParseContent::parsePublicVariable('dbprefix', $config)) {
            $res['db_prefix'] = $db_prefix;
        }
        if ($db_host = MDSParseContent::parsePublicVariable('host', $config)) {
            $host = explode(':', $db_host);
            $res['db_host'] = $host[0];
            $res['db_port'] = isset($host[1]) ? (int)$host[1] : 3306;
        }

        if (
            isset($res['db_name']) && isset($res['db_user']) && isset($res['db_pass']) && isset($res['db_host'])
            && isset($res['db_port']) && isset($res['db_prefix'])
        ) {
            $res['db_app'] = 'joomla_core';
            $res['db_path'] = $this->path;
            return $res;
        } else {
            return false;
        }
    }
}

/**
 * Class stored all entries for scan/clean and scan/clean results
 */
class MDSProcessingList
{
    /**
     * Array of indexes of $entries array that will be scanned
     * @var int[]
     */
    private $forscan = [];

    /**
     * Array of indexes of $entries array that will be cleaned
     * @var int[]
     */
    private $forclean = [];

    /**
     * Array of entries that we get during prescan db query
     * @var MDSEntry[]
     */
    private $entries = [];

    /**
     * Scan results linked with $entries array
     * @var MDSMalwareEntry[]
     */
    private $scan_res = [];

    /**
     * Clean results linked with $entries array
     * @var array
     */
    private $clean_res = [];

    /**
     * Create new MDSEntry object from $data array and add to general list
     * @param array $data
     * @param MDSPreScanQuery $query
     */

    /**
     * Array of uniq infected keys
     * @var array
     */
    private $only_black_uniq = [];

    /**
     * Infected keys counter
     * @var int
     */
    private $count_black_uniq = 0;

    public function addToList(array $data, MDSPreScanQuery $query)
    {
        $key = $data['mds_key'];
        $fields = [];
        unset($data['mds_key'], $data['mds_field']);
        foreach ($data as $k => &$v) {
            $field = explode('_', $k);
            if (isset($field[1])) {
                if ($field[1] === 'b64' && $v === '1') {
                    $fields[$field[0]] = true;
                }
                unset($data[$k]);
            }
        }
        unset($v);
        $fields_data = [];
        foreach ($query->getFieldsData() as $field) {
            $k = $query->getAliasByField($field);
            $v = $data[$k];
            $fields_data[$field][] = $v;
        }
        foreach ($query->getFields() as $field) {
            $k = $query->getAliasByField($field);
            $v = $data[$k];
            $this->entries[] = new MDSEntry(
                $key,
                $query->getFieldByAlias($k),
                $fields_data,
                $k,
                $v,
                (isset($fields[$k]) && $fields[$k] === true)
            );
        }
    }

    /**
     * Clear list
     */
    public function clear()
    {
        $this->forscan = [];
        $this->forclean = [];
        $this->entries = [];
        $this->scan_res = [];
        $this->clean_res = [];
        $this->only_black_uniq = [];
    }

    /**
     * Send all entries to scan
     */
    public function markAllEntriesForScan()
    {
        $this->forscan = array_keys($this->entries);
    }

    /**
     * Get last db key value from $entries
     * @return int
     */
    public function getLastKey()
    {
        end($this->entries);
        $key = current($this->entries)->getKey();
        reset($this->entries);
        return $key;
    }

    /**
     * Add item for clean list
     * @param int $index
     */
    public function addForClean(int $index)
    {
        $this->forclean[] = $index;
    }

    /**
     * Get MDSEntry object with $index key
     * @param $index
     * @return MDSEntry
     */
    public function getEntry($index)
    {
        return $this->entries[$index];
    }

    /**
     * Get all MDSEntry objects, that marked to scan
     * @return Generator
     */
    public function getEntriesForScan()
    {
        foreach ($this->forscan as $index) {
            yield $index => $this->entries[$index];
        }
    }

    /**
     * Get all MDSEntry objects, that was scanned and have scan report
     * @return Generator
     */
    public function getEntriesWithScanResults()
    {
        foreach ($this->scan_res as $index => $result) {
            if ($result !== false) {
                yield $index => $this->entries[$index];
            }
        }
    }

    /**
     * Get all MDSEntry objects, that was scanned and have scan report, only malware
     * @return Generator
     */
    public function getEntriesWithScanResultsOnlyBlack()
    {
        foreach ($this->scan_res as $index => $result) {
            if ($result !== false) {
                if (
                    $this->entries[$index]->getScan()->isBlackUrlDetected()
                    || $this->entries[$index]->getScan()->isMalwareDetected()
                ) {
                    yield $index => $this->entries[$index];
                }
            }
        }
    }

    /**
     * Get count of uniq keys that was scanned and have scan report, only malware
     * @return int
     */
    public function getCountKeysWithScanResultsOnlyBlack()
    {
        return $this->count_black_uniq;
    }

    /**
     * Get all MDSEntry objects, that was cleaned and have clean report
     * @return Generator
     */
    public function getEntriesWithCleanResults()
    {
        foreach ($this->clean_res as $index => $result) {
            if ($result !== false) {
                yield $index => $this->entries[$index];
            }
        }
    }

    /**
     * Get all MDSEntry objects, that was cleaned with errors
     * @return Generator
     */
    public function getEntriesWithCleanErrors()
    {
        foreach ($this->clean_res as $index => $result) {
            if ($result === false) {
                yield $index => $this->entries[$index];
            }
        }
    }

    /**
     * Add scan result to MDSEntry object
     * @param int $index
     * @param array|bool $result
     */
    public function addScanResult(int $index, $result)
    {
        $this->scan_res[$index] = $result ? new MDSMalwareEntry($result) : false;
        $this->entries[$index]->setScan($this->scan_res[$index]);
        if ($this->scan_res[$index] && ($this->scan_res[$index]->isMalwareDetected() || $this->scan_res[$index]->isBlackUrlDetected())) {
            if (isset($this->only_black_uniq[$this->entries[$index]->getKey()])) {
                return;
            }
            $this->only_black_uniq[$this->entries[$index]->getKey()] = '';
            $this->count_black_uniq++;
        }
    }

    /**
     * Add clean result to MDSEntry object
     * @param int $index
     * @param array|bool $result
     */
    public function addCleanResult(int $index, $result)
    {
        if ($result === false) {
            $this->clean_res[$index] = false;
        } else {
            foreach ($result as $res) {
                $this->clean_res[$index][] = $res ? $res['id'] : false;
            }
        }
        $this->entries[$index]->setClean($this->clean_res[$index]);
    }

    /**
     * Get scan result for entry by index
     * @param int $index
     * @return MDSMalwareEntry
     */
    public function getScanResult(int $index)
    {
        return $this->scan_res[$index];
    }

    /**
     * Get clean result for entry by index
     * @param int $index
     * @return array
     */
    public function getCleanResult(int $index)
    {
        return $this->clean_res[$index];
    }

    /**
     * Do we have any entries for clean
     * @return bool
     */
    public function isEntriesForclean()
    {
        return !empty($this->forclean);
    }

    /**
     * count of all entries
     * @return int
     */
    public function getCount()
    {
        return count($this->entries);
    }

    /**
     * Do we have any entries in general list
     * @return bool
     */
    public function isEmpty()
    {
        return count($this->entries) === 0;
    }

    /**
     * Get all MDSEntry objects, that marked for clean
     * @return Generator
     */
    public function getEntriesForClean()
    {
        foreach ($this->forclean as $index) {
            yield $index => $this->entries[$index];
        }
    }
}

/**
 * Class to store data of each entry that we want to scan/clean with references to scan/clean reports
 */
class MDSEntry
{
    /**
     * db field
     * @var string
     */
    private $field;

    /**
     * alias for field
     * @var string
     */
    private $alias;

    /**
     * content of row
     * @var string
     */
    private $content;

    /**
     * additional fields data
     * @var array
     */
    private $field_data = [];

    /**
     * content of row base64 decoded if needed
     * @var string|null
     */
    private $b64decoded_content = null;

    /**
     * db key value
     * @var int
     */
    private $key;

    /**
     * reference to linked MDSMalwareEntry (ai-bolit report)
     * @var MDSMalwareEntry
     */
    private $scan_ref;

    /**
     * Content prefix for base64decod content
     * @var string
     */
    private $content_prefix = '';

    /**
     * reference to clean result (array of signature names cleaned)
     * @var array
     */
    private $clean_ref;

    public function __construct(int $key, string $field, array $field_data, string $alias, string $content, bool $base64)
    {
        $this->key = $key;
        $this->alias = $alias;
        $this->field = $field;
        $this->field_data = $field_data;
        $this->content = hex2bin($content);
        $this->b64decoded_content = null;
        if ($base64) {
            $bin = hex2bin($content);
            if (substr($bin, 0, 4) === ':AI:') {
                $this->b64decoded_content = base64_decode(substr($bin, 4));
                $this->content_prefix = ':AI:';
            } else {
                $this->b64decoded_content = base64_decode($bin);
            }
        }
    }

    /**
     * Get db field
     * @return string
     */
    public function getField()
    {
        return $this->field;
    }

    /**
     * Get content prefix
     * @return string
     */
    public function getPrefix()
    {
        return $this->content_prefix;
    }

    /**
     * Get array of additional data fields
     * @return array
     */
    public function getFieldsData()
    {
        return $this->field_data;
    }

    /**
     * Get db alias for field
     * @return string
     */
    public function getAlias()
    {
        return $this->alias;
    }

    /**
     * Get row content string
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Get base64 decoded content
     * @return string|null
     */
    public function getB64decodedContent()
    {
        return $this->b64decoded_content;
    }

    /**
     * Get db key value
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * link MDSMalwareEntry to this entry or false if nothing detected
     * @param bool|MDSMalwareEntry $scan
     */
    public function setScan(&$scan)
    {
        $this->scan_ref = $scan;
    }

    /**
     * link array of cleaned signature names to this entry or false if not cleaned
     * @param bool|array &$clean
     */
    public function setClean(&$clean)
    {
        $this->clean_ref = $clean;
    }

    /**
     * get linked MDSMalwareEntry object (scan report)
     * @return bool|MDSMalwareEntry
     */
    public function getScan()
    {
        return $this->scan_ref;
    }

    /**
     * get linked array of cleaned signatures
     * @return bool|array
     */
    public function getClean()
    {
        return $this->clean_ref;
    }
}

/**
 * Class to store data of each entry that was scanned and detected something (store ai-bolit report)
 */
class MDSMalwareEntry
{
    /**
     * Detected malware
     * @var MDSMalwareResult
     */
    private $malware = [];

    /**
     * Detected urls
     * @var MDSUrlResult[]
     */
    private $urls = [];

    /**
     * Unknown urls counter
     * @var int
     */
    private $unk_detected = 0;

    /**
     * Black urls counter
     * @var int
     */
    private $black_detected = 0;

    /**
     * Parse ai-bolit report and save data to object
     * @param $data
     */
    public function __construct(array $data)
    {
        if (isset($data['mlw'])) {
            $this->malware = new MDSMalwareResult($data['mlw']);
        }
        if (isset($data['url'])) {
            foreach ($data['url'] as $type => $urls) {
                $type = $type === 'unk' ? 'unknown' : $type;
                foreach ($urls as $url) {
                    if ($type === 'black') {
                        $this->black_detected++;
                    } else {
                        $this->unk_detected++;
                    }
                    $url[$type] = true;
                    $this->urls[] = new MDSUrlResult($url);
                }
            }
        }
    }

    /**
     * Is any malware entry in report
     * @return bool
     */
    public function isMalwareDetected()
    {
        return (isset($this->malware) && !empty($this->malware));
    }

    /**
     * Is any black url entry in report
     * @return bool
     */
    public function isBlackUrlDetected()
    {
        return $this->black_detected > 0;
    }

    /**
     * Is any unknown url entry in report
     * @return bool
     */
    public function isUnknownUrlDetected()
    {
        return $this->unk_detected > 0;
    }

    /**
     * Black url counter
     * @return int
     */
    public function countBlackUrlDetected()
    {
        return $this->black_detected;
    }

    /**
     * Unknown url counter
     * @return int
     */
    public function countUnknownUrlDetected()
    {
        return $this->unk_detected;
    }

    /**
     * Get snippet of malware detected or black url detected
     * @return string|void
     */
    public function getSnippet()
    {
        if ($this->isMalwareDetected()) {
            return $this->malware->getSnippet();
        } elseif ($this->isBlackUrlDetected()) {
            foreach ($this->getBlackUrls() as $url) {
                return $url->getSnippet();
            }
        }
    }

    /**
     * Get linked MDSMalwareResult object
     * @return MDSMalwareResult
     */
    public function getMalwareRes()
    {
        return $this->malware;
    }

    /**
     * Get Unknown urls list
     * @return Generator
     */
    public function getUnknownUrls()
    {
        foreach ($this->urls as $url) {
            if ($url->isUnknown()) {
                yield $url;
            }
        }
    }

    /**
     * Get black urls list
     * @return Generator
     */
    public function getBlackUrls()
    {
        foreach ($this->urls as $url) {
            if ($url->isBlack()) {
                yield $url;
            }
        }
    }
}

/**
 * Class to store data of detected malware
 */
class MDSMalwareResult
{
    /**
     * snippet
     * @var string
     */
    private $snippet;

    /**
     * signature id
     * @var string
     */
    private $sigid;

    /**
     * position
     * @var int
     */
    private $pos;

    /**
     * signature name
     * @var string
     */
    private $signame;

    public function __construct(array $data)
    {
        $this->snippet  = $data['content']  ?? '';
        $this->pos      = $data['pos']      ?? 0;
        $this->sigid    = $data['sigid']    ?? '';
        $this->signame  = $data['sn']       ?? '';
    }

    /**
     * Get snippet
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * Get signature id
     * @return string
     */
    public function getSigid()
    {
        return $this->sigid;
    }

    /**
     * Get position where we detected malware
     * @return int
     */
    public function getPos()
    {
        return $this->pos;
    }

    /**
     * Get signature name
     * @return string
     */
    public function getSigname()
    {
        return $this->signame;
    }
}

/**
 * Class to store data of detected black/unknown urls
 */
class MDSUrlResult
{
    /**
     * snippet
     * @var string
     */
    private $snippet;

    /**
     * url
     * @var string
     */
    private $sigid;

    /**
     * position
     * @var int
     */
    private $pos;

    /**
     * flag url black
     * @var bool
     */
    private $black;

    /**
     * @var bool
     * flag url unknown
     */
    private $unknown;

    /**
     * @param $data
     */
    public function __construct(array $data)
    {
        $this->snippet  = $data['content']  ?? '';
        $this->pos      = $data['pos']      ?? 0;
        $this->sigid    = $data['sigid']    ?? '';
        $this->black    = $data['black']    ?? false;
        $this->unknown  = $data['unknown']  ?? false;
    }

    /**
     * Get snippet
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * Get signature (detected url)
     * @return string
     */
    public function getSigid()
    {
        return $this->sigid;
    }

    /**
     * Get position where we detected url
     * @return int
     */
    public function getPos()
    {
        return $this->pos;
    }

    /**
     * Get flag is url black
     * @return bool
     */
    public function isBlack()
    {
        return $this->black;
    }

    /**
     * Get flag is url unknown
     * @return bool
     */
    public function isUnknown()
    {
        return $this->unknown;
    }
}

/**
 * Class to get mysqli default socket name
 */
class MDSUnixSocket
{
    /**
     * Default mysql socket paths
     * @var string[]
     */
    private static $sockets_def = [
        '/var/lib/mysql/mysql.sock',
        '/var/run/mysqld/mysqld.sock',
    ];

    /**
     * Default mysql configs paths
     * @var string[]
     */
    private static $cnf_paths_def = [
        '/etc/my.cnf',
        '/etc/mysql/my.cnf'
    ];

    /**
     * Check sockets if it's my related to mysql and use it in mysqli.default_socket
     */
    public static function setDefaultSocket()
    {
        foreach (self::getPossibleSockets() as $file) {
            if (self::checkMysqlSocket($file)) {
                ini_set('mysqli.default_socket', $file);
                break;
            }
        }
    }

    /**
     * Get list of all possible mysql sockets in system
     * @return array
     */
    private static function getPossibleSockets()
    {
        $sockets = array_filter(array_unique(array_merge(
            self::getMysqlSocketFromLsof(),
            self::getSocketFromMysqlCnf(self::$cnf_paths_def),
            self::$sockets_def
        )));
        return $sockets;
    }

    /**
     * Check path that it's mysql related socket
     * @param $file
     * @return bool
     */
    private static function checkMysqlSocket($file)
    {
        if (
            $file === '' || !file_exists($file) || !is_readable($file)
            || !is_writable($file) || is_file($file)
            || is_dir($file) || is_link($file)
        ) {
            return false;
        }
        $sock = fsockopen('unix://' . $file);
        stream_set_timeout($sock, 2);
        $data = fread($sock, 64);
        fclose($sock);
        $proto = @unpack('C/x/x/x/C', substr($data, 0, 5))[1];
        if ($proto < 9 || $proto > 20) {
            return false;
        }
        $banner = @unpack('Z*', $data, 5)[1];
        if (strlen($banner) < 10 && !ctype_alnum(str_replace(['@', '.', '-', '_', '/'], '', $banner))) {
            return false;
        }
        return true;
    }

    /**
     * Try to parse default mysql config paths and get socket from there
     * @param $files
     * @return array
     */
    private static function getSocketFromMysqlCnf($files)
    {
        $sockets = [];
        foreach ($files as $file) {
            if (!@is_readable($file)) {
                continue;
            }
            $cnf = @file_get_contents($file);
            if (preg_match('~socket\s*=\s*([^\n]+)~m', $cnf, $m) && !empty($m[1])) {
                $sockets[] = $m[1];
            }
            if (!is_dir($file . '.d')) {
                continue;
            }
            foreach (scandir($file . '.d') as $cnf_file) {
                if ($cnf_file === '.' || $cnf_file === '..') {
                    continue;
                }
                $cnf = file_get_contents($file . '.d/' . $cnf_file);
                if (preg_match('~socket\s*=\s*([^\n]+)~m', $cnf, $m) && !empty($m[1])) {
                    $sockets[] = $m[1];
                }
            }
        }
        return $sockets;
    }

    /**
     * Get list of possible mysql sockets through lsof
     * @return array|string[]
     */
    private static function getMysqlSocketFromLsof()
    {
        $socket_out = @shell_exec('lsof -U 2>/dev/null|grep mysql|awk \'$9 ~ /^\// {print $9}\'|uniq');
        $sockets = @explode("\n", $socket_out);
        return $sockets;
    }
}

class MDSParseContent
{
    public static function parseDefine($name, $content)
    {
        if (preg_match('~(?<!//|#)\s*define\(\s*[\'"]' . $name . '[\'"]\s*,\s*(?|(\d+)|(\'.*?(?<!\\\\)\')|(".*?(?<!\\\\)"))~msi', $content, $matches) && isset($matches[1][0])) {
            if (in_array($matches[1][0], ['"', "'"])) {
                return self::getStringFromPHPStringWithQuotes($matches[1]);
            }
            return $matches[1];
        }
        return false;
    }

    public static function parseVariable($name, $content)
    {
        if (preg_match('~(?<!//|#)\s*\$' . $name . '\s*=\s*(?|(\d+)|(\'.*?(?<!\\\\)\')|(".*?(?<!\\\\)"))~msi', $content, $matches) && isset($matches[1][0])) {
            if (in_array($matches[1][0], ['"', "'"])) {
                return self::getStringFromPHPStringWithQuotes($matches[1]);
            }
            return $matches[1];
        }
        return false;
    }

    public static function parsePublicVariable($name, $content)
    {
        if (preg_match('~(?<!//|#)\s*public\s+\$' . $name . '\s*=\s*(?|(\d+)|(\'.*?(?<!\\\\)\')|(".*?(?<!\\\\)"))~msi', $content, $matches) && isset($matches[1][0])) {
            if (in_array($matches[1][0], ['"', "'"])) {
                return self::getStringFromPHPStringWithQuotes($matches[1]);
            }
            return $matches[1];
        }
        return false;
    }


    private static function getStringFromPHPStringWithQuotes($string_with_quotes)
    {
        $escaped_characters = [
            "'" => [
                '\\\\' => '\\',
                "\\'" => "'",
            ],
            '"' => [
                '\\\\' => '\\',
                '\\"' => '"',
                '\\$' => '$',
                '\\n' => "\n",
                '\\r' => "\r",
                '\\t' => "\t",
                '\\v' => "\v",
                '\\f' => "\f",
                '\\e' => "\e",
                '\\0' => "\0",
            ],
        ];

        if (strlen($string_with_quotes) === 1) {
            return $string_with_quotes;
        }

        if (
            !array_key_exists(substr($string_with_quotes, 0, 1), $escaped_characters)
            || !array_key_exists(substr($string_with_quotes, -1), $escaped_characters)
        ) {
            return $string_with_quotes;
        }

        $quote = substr($string_with_quotes, 0, 1);

        if (!isset($escaped_characters[$quote])) {
            return $string_with_quotes;
        }

        return str_replace(
            array_keys($escaped_characters[$quote]),
            array_values($escaped_characters[$quote]),
            substr($string_with_quotes, 1, -1)
        );
    }
}

class LoadSignaturesForClean
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $advanced_ids        = [];
    private $sig_db_location    = 'internal';
    private $scan_db            = null;
    public $_FlexDBShe         = [];

    private $deMapper           = '';

    public function __construct($signature, $avdb, $full = true)
    {

        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($signature) {
            $db_raw                 = explode("\n", trim(base64_decode(trim($signature))));
            $this->sig_db_location  = 'external';
        } elseif (file_exists($avdb)) {
            $db_raw                 = explode("\n", trim(@gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb))))))));
            $this->sig_db_location  = 'external';
            echo "Loaded External DB\n";
        } else {
            InternalCleanSignatures::init();
            $db_raw = explode("\n", base64_decode(strrev(str_rot13(gzinflate(base64_decode(InternalCleanSignatures::$db))))));
        }

        $fatal = false;

        foreach ($db_raw as $line) {
            $line = trim($line);
            if ($line == '') {
                continue;
            }

            $parsed = preg_split("/\t+/", $line);

            if ($parsed[0] == 'System-Data') {
                $meta_info                              = json_decode($parsed[3], true);
                $this->sig_db_meta_info['build-date']   = $meta_info['build-date'];
                $this->sig_db_meta_info['version']      = $meta_info['version'];
                $this->sig_db_meta_info['release-type'] = $meta_info['release-type'];
            } else {
                $db_item['id']          = $parsed[0];
                $db_item['mask_type']   = $parsed[1];

                $db_item['mask_type']   = str_replace('*.', '.*\.', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_ANY', '.*', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_PHP', '\.(suspected|vir|txt|phtml|pht|php\d*|php\..*)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_HTML', '\.(htm|html|tpl|inc)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_JS', '\.(js)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_SS', '.*', $db_item['mask_type']);

                $db_item['sig_type']    = (int)$parsed[2];
                $db_item['sig_match']   = str_replace('~', '\~', trim($parsed[3]));
                $db_item['sig_match']   = str_replace('@<v>@', '\$[a-zA-Z0-9_]+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<id>@', '[a-zA-Z0-9_]+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<d>@', '\d+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<qq>@', '[\'"]', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<q>@', '[\'"]{0,1}', $db_item['sig_match']);
                $db_item['sig_replace'] = trim($parsed[4] ?? '');

                if ($db_item['sig_match'] === '') {
                    throw new Exception($line);
                }

                $this->_FlexDBShe[] = $db_item['sig_match'];  //rescan signs
                if (!$full && self::needSkip($db_item['id'])) {
                    $this->advanced_ids[] = AibolitHelpers::myCheckSum($db_item['sig_match']);
                    continue;
                }
                $db_item['sig_match']   = ($db_item['sig_match'] !== '-') ? ('~' . $db_item['sig_match'] . '~msi') : $db_item['sig_match'];
                $db_item['mask_type']   = '~' . $db_item['mask_type'] . '~msi';
                $this->sig_db[] = $db_item;
                if (preg_match($db_item['mask_type'], 'Lorem ipsum') === false) {
                    echo $db_item['mask_type'] . "\n";
                    $fatal = true;
                }

                if (preg_match($db_item['sig_match'], 'Lorem ipsum') === false) {
                    echo $db_item['sig_match'] . "\n";
                    $fatal = true;
                }
            }
        }

        if ($fatal) {
            throw new Exception("Errors in regexp\n\n");
        }
        LoadSignaturesForScan::optSig($this->_FlexDBShe, false, 'AibolitHelpers::myCheckSum');
        $this->_FlexDBShe = array_map([$this, 'completeRegexp'], $this->_FlexDBShe);
        $this->deMapper = @unserialize(@base64_decode($this->deMapper));
    }

    public function completeRegexp($item)
    {
        return ($item !== '') ? ('~' . $item . '~msi') : $item;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDeMapper()
    {
        return is_array($this->deMapper) ? $this->deMapper : false;
    }

    public function getScanDB()
    {
        return $this->scan_db;
    }

    public function setScanDB($db)
    {
        $this->scan_db = $db;
    }

    public function needSkipId($id)
    {
        return in_array($id, $this->advanced_ids);
    }

    private static function needSkip($name)
    {
        if (!preg_match('~^\w+-\w+-\d+-(.+?)(?:-\d+)?$~mis', strtolower($name), $m)) {
            return false;
        }
        $tags = explode('.', $m[1]);
        if (
            in_array('js', $tags)
            || in_array('html', $tags)
            || in_array('iframe', $tags)
        ) {
            if (
                !(
                in_array('phish', $tags)
                || in_array('bkdr', $tags)
                || in_array('wshll', $tags)
                || in_array('php', $tags)
                )
            ) {
                return true;
            }
        }
        return false;
    }
}

class InternalCleanSignatures
{
    public static $db;

    public static function init()
    {
        $i000101010010110010 = '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'; //This variable will be filled by the building script.
        self::$db = $i000101010010110010;
    }
}

class ImLicense
{
    const VERIFY_FIELDS = ['id', 'status', 'group', 'limit', 'token_created_utc', 'token_expire_utc'];
    private $is_valid = false;
    private $raw_lic = [];
    private $valid_sign = '';
    private $pub_keys = [];

    public function __construct($lic_path, $pub_keys)
    {
        if (file_exists($lic_path) && filesize($lic_path) > 0 && is_readable($lic_path)) {
            $this->raw_lic = json_decode(file_get_contents($lic_path), true);
        }

        foreach ($pub_keys as $pub_key) {
            if (file_exists($pub_key) && filesize($pub_key) > 0 && is_readable($pub_key)) {
                $this->pub_keys[] = file_get_contents($pub_key);
            }
        }

        if ($this->isAllFieldsPresent()) {
            $this->findValidSignature();
        }
    }

    public function isValid()
    {
        return $this->is_valid;
    }

    public function getLicData()
    {
        if (!$this->is_valid || $this->valid_sign === '') {
            return false;
        }
        if (is_array($this->raw_lic) && $this->isAllFieldsPresent()) {
            return [
                'id'                => $this->raw_lic['id'],
                'status'            => $this->raw_lic['status'],
                'limit'             => $this->raw_lic['limit'],
                'token_created_utc' => $this->raw_lic['token_created_utc'],
                'token_expire_utc'  => $this->raw_lic['token_expire_utc'],
                'sign'              => $this->valid_sign,
            ];
        }
        return false;
    }

    private function isAllFieldsPresent()
    {
        if (!isset($this->raw_lic['signatures'])) {
            return false;
        }
        if (empty($this->pub_keys)) {
            return false;
        }
        foreach (self::VERIFY_FIELDS as $field) {
            if (!isset($this->raw_lic[$field])) {
                return false;
            }
        }
        return true;
    }

    private function findValidSignature()
    {
        foreach ($this->raw_lic['signatures'] as $sign) {
            $signature = base64_decode($sign);
            $content = '';
            foreach (self::VERIFY_FIELDS as $field) {
                $content .= $this->raw_lic[$field];
            }
            foreach ($this->pub_keys as $pub_key) {
                if (openssl_verify($content, $signature, $pub_key, OPENSSL_ALGO_SHA512)) {
                    $this->valid_sign = $sign;
                    $this->is_valid = true;
                    return true;
                }
            }
        }
        return false;
    }
}

class LoadSignaturesForScan
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;
    private $hash;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_CronDB;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;

    /**
     * @var MDSUrls
     */
    public $blackUrls;

    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';
    private $cache_file = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;


    public function __construct($avdb_file, $mode, $debug)
    {
        if (!defined('DEBUG_MODE')) {
            define('DEBUG_MODE', 0);
        }

        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($avdb_file && file_exists($avdb_file)) {
            $this->cache_file = __DIR__ . '/' . basename($avdb_file, '.db') . '.cache.db';
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_CronDB      = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); //TODO: you need to remove array_flip and swap the keys and values in array_combine. Write a test: put the signature base in the tests folder and run a scan with this base on the VIRII folder - the result should not change, since the base is the same

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = [];
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = [];
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = [];
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = [];
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = [];
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = [];
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = [];
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = [];
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = [];
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = [];
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = [];
            }

            if (count($this->_CronDB) <= 1) {
                $this->_CronDB = [];
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            $this->cache_file = __DIR__ . '/' . 'internal' . '.cache.db';
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_CronDB      = InternalSignatures::$_CronDB;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        $this->hash = hash('sha256', serialize($this->_Mnemo));
        $cache = $this->loadDataFromCache();

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = [];
            $this->XX_FlexDBShe = [];
            $this->X_JSVirSig   = [];
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            } catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        if (!$cache) {
            $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe) + count($this->_CronDB);
            $this->count_susp = $this->count + count($this->_SusDB);

            if (!$debug->getDebugPCRE() && !$debug->getDebugPerformance()) {
                $this->OptimizeSignatures($debug);
            }

            $this->_DBShe = array_map('strtolower', $this->_DBShe);
            $this->X_DBShe = array_map('strtolower', $this->X_DBShe);

            $this->_FlexDBShe = array_map([$this, 'completeRegexp'], $this->_FlexDBShe);
            $this->_JSVirSig = array_map([$this, 'completeRegexp'], $this->_JSVirSig);
            $this->_AdwareSig = array_map([$this, 'completeRegexp'], $this->_AdwareSig);
            $this->_PhishingSig = array_map([$this, 'completeRegexp'], $this->_PhishingSig);
            $this->_SusDB = array_map([$this, 'completeRegexp'], $this->_SusDB);
            $this->_CronDB = array_map([$this, 'completeRegexp'], $this->_CronDB);
            $this->_ExceptFlex = array_map([$this, 'completeRegexp'], $this->_ExceptFlex);

            $this->X_JSVirSig = array_map([$this, 'completeRegexp'], $this->X_JSVirSig);
            $this->X_FlexDBShe = array_map([$this, 'completeRegexp'], $this->X_FlexDBShe);
            $this->XX_FlexDBShe = array_map([$this, 'completeRegexp'], $this->XX_FlexDBShe);
            $this->cacheData();
        }
    }

    private function OptimizeSignatures($debug)
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = [];

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = [];

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)') {
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            }
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e') {
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            }
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.') {
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';
            }

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        self::optSig($this->_FlexDBShe, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_JSVirSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_AdwareSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_PhishingSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_SusDB, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_CronDB, $debug, 'AibolitHelpers::myCheckSum');
        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '') {
                unset($this->_ExceptFlex[$i]);
            }
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    public function completeRegexp($item)
    {
        return ($item !== '') ? ('~' . $item . '~msi') : $item;
    }

    public static function optSig(&$sigs, $debug = false, $func_id = null)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $k => &$s) {
            if ($func_id && is_callable($func_id)) {
                $id = $func_id($s);
            } else {
                $id = $k;
            }
            $s .= '(?<X' . $id . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        self::optSigCheck($sigs, $debug);

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#'
                . '^'                                       //match from start of the line
                . '('                                       //capture $i count of tokens to captured group:
                    . '(?>'                                 //  capture one token + quantifier to one atomic group:
                        . '(?:'                             //    capture one token of regex to one non-captured group:
                            . '\\\\.'                       //      capture escaped symbol or regex token (\d, \s, \n ...) as one token
                            . '|\\\\[.+?\\\\]'              //      OR capture escaped special regex symbols as one token (\., \+, \?, \\)
                            . '|[^\[(\n]'                   //      OR don't capture chars [ - start of charset, ( - start of group, \n - end of line
                            . '|\((?:\\\\.|[^)(\n])++\)'    //      OR capture group as one token (....)
                            . '|\[(?:\\\\.|[^\]\[\n])++\]'  //      OR capture charset as one token [...]
                        . ')'
                        . '(?:'                             //    capture quantifier to one non-captured group:
                            . '[*?+]\+?'                    //      capture chars '*', '?', '+' with additional '+' at the end optionally
                            . '|\{\d+(?:,\d*)?\}[+?]?'      //      OR capture repeats like '{5, 10}' with additional '+' or '?' at the end optionally
                            . '|'                           //      OR capture nothing (no quantifier for token)
                        . ')'
                    . ')'
                    . '{' . $i . ',}'                       //  repeat capture of atomic group (regex token + quantifier) $i times
                . ')'
                . '[^\n]*+'                                 //  capture all to the end of line
                . '(?:'
                    . '\n\1(?![{?*+]).+'                    //    capture end of line + atomic group with $i count of tokens (same prefix) + all to the end of line
                . ')+'                                      //  repeat previous capture 1+ times
                . '#im', 'LoadSignaturesForScan::optMergePrefixes', $txt);
        }

        $sigs = explode("\n", $txt);

        self::optSigCheck($sigs, $debug);
    }

    /**
     * Change indexed groups in regex to named in format:
     *  (asd)\1 -> (?<br123_1>asd)(?P=br123_1) where 123 - index of regex, 1 - index of group
     * @param $str
     * @param $index
     * @return string
     */
    private static function changeIndexedGroupToNamed($str, $index)
    {
        $res = '';
        $counter = 1;
        $in_brackets = false;
        for ($i = 0; $i < strlen($str); $i++) {
            if ($str[$i] === '[' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = true;
                $res .= $str[$i];
            } elseif ($in_brackets && $str[$i] === ']' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = false;
                $res .= $str[$i];
            } elseif (!$in_brackets && $str[$i] === '(' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\') && $str[$i + 1] !== '?') {
                $res .= $str[$i] . '?<br' . $index . '_' . $counter . '>';
                $counter += 1;
            } elseif (!$in_brackets && $str[$i] === '\\' && $str[$i - 1] !== '\\' && (ord($str[$i + 1]) > 0x30 && ord($str[$i + 1]) < 0x38) && (ord($str[$i + 2]) < 0x30 || ord($str[$i + 2]) > 0x39)) {
                $res .= '(?P=br' . $index . '_' . $str[$i + 1] . ')';
                $i += 1;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    /**
     * Merge multiple regexps with same prefix and recalculate backreferences
     * @param $m
     * @return string
     */
    private static function optMergePrefixes($m, $limit = 8000)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        $prefixGroupCount = self::countGroups($prefix);
        $totalGroupCount = 0;
        $firstLine = true;
        foreach (explode("\n", $m[0]) as $line) {
            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            //if it will be first signature in array, then groups must be counted with prefix else only in suffix
            $groupCount = self::countGroups($firstLine ? $line : $s);

            $len += strlen($s);
            //if it's first signature in array, then we don't need to recalculate backreferences
            $noСhange = $firstLine ?: ($len > $limit);
            $s = preg_replace_callback('/(?<!\\\\)\\\\([0-9]+)/', function ($matches) use ($totalGroupCount, $prefixGroupCount, $groupCount, $noСhange) {
                if ($matches[1] <= $prefixGroupCount || $noСhange || $matches[1] > ($prefixGroupCount + $groupCount)) {
                    return $matches[0];
                }
                return '\\' . ($matches[1] + ($totalGroupCount - $prefixGroupCount));
            }, $s);
            $firstLine = false;
            $totalGroupCount += $groupCount;

            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $regex = $prefix . $suffixes[0];
                } else {
                    $regex = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                if (@preg_match('~' . $regex . '~msi', '') === false) {
                    $r = self::optMergePrefixes($m, $limit / 2);
                    return $r;
                }
                $r[] = $regex;
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
                $totalGroupCount = $prefixGroupCount + $groupCount;
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $regex = $prefix . $suffixes[0];
            } else {
                $regex = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
            if (@preg_match('~' . $regex . '~msi', '') === false) {
                $r = self::optMergePrefixes($m, $limit / 2);
                return $r;
            }
            $r[] = $regex;
        }
        return implode("\n", $r);
    }

    /**
     * Count regexp captured groups in string
     * @param $line
     * @return int
     */
    private static function countGroups($line)
    {
        $groupCount = 0;
        $escaped = false;
        $inSquareBrackets = false;
        for ($i = 0; $i < strlen($line); $i++) {
            if ($line[$i] === '\\') {
                $escaped = !$escaped; //next char must be skipped
            } else {
                if ($line[$i] === '[' && !$escaped) {
                    $inSquareBrackets = true; //we don't need to count any char if it inside []
                } elseif ($line[$i] === ']' && !$escaped) {
                    $inSquareBrackets = false;
                } elseif (
                    /* Need to count all groups, except no capturing:
                     * Non-capturing groups: (?:...)
                     * Positive look-ahead groups: (?=...)
                     * Negative look-ahead groups: (?!...)
                     * Positive look-behind groups: (?<=...)
                     * Negative look-behind groups: (?<!...)
                     * Atomic group (non-greedy): (?>...)
                     * Comment groups: (?#...)
                     */
                    $line[$i] === '(' && !$escaped && !$inSquareBrackets
                    && !(
                        $i + 3 < strlen($line) && $line[$i + 1] === '?'
                        && (
                            in_array($line[$i + 2], [':', '=', '!', '>', '#'])
                            || ($line[$i + 2] === '<' && in_array($line[$i + 3], ['=', '!']))
                        )
                    )
                ) {
                    $groupCount++;
                }
                $escaped = false;
            }
        }
        return $groupCount;
    }

    /*
     * Checking errors in pattern
     */
    private static function optSigCheck(&$sigs, $debug)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if (DEBUG_MODE) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if (DEBUG_MODE) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    private function cacheData()
    {
        if ($this->debug->getDebugPCRE() || $this->debug->getDebugPerformance()) {
            return false;
        }
        $cacheData = [
            '_DBShe'            => $this->_DBShe,
            'X_DBShe'           => $this->X_DBShe,
            '_FlexDBShe'        => $this->_FlexDBShe,
            '_JSVirSig'         => $this->_JSVirSig,
            '_AdwareSig'        => $this->_AdwareSig,
            '_PhishingSig'      => $this->_PhishingSig,
            '_SusDB'            => $this->_SusDB,
            '_CronDB'           => $this->_CronDB,
            '_ExceptFlex'       => $this->_ExceptFlex,
            'X_JSVirSig'        => $this->X_JSVirSig,
            'X_FlexDBShe'       => $this->X_FlexDBShe,
            'XX_FlexDBShe'      => $this->XX_FlexDBShe,
            '_DeMapper'         => $this->_DeMapper,
            '_Mnemo'            => $this->_Mnemo,
            'sig_db_meta_info'  => $this->sig_db_meta_info,
            'count'             => $this->count,
            'count_susp'        => $this->count_susp,
            'hash'              => $this->hash,
        ];
        @file_put_contents($this->cache_file, base64_encode(gzcompress(serialize($cacheData))));
        @chmod($this->cache_file, 0644);
        unset($cacheData);
    }

    private function loadDataFromCache()
    {
        if ($this->debug->getDebugPCRE() || $this->debug->getDebugPerformance()) {
            return false;
        }
        if (is_readable($this->cache_file)) {
            $cacheData = unserialize(gzuncompress(base64_decode(file_get_contents($this->cache_file))));
            if ($this->hash === $cacheData['hash']) {
                $this->_DBShe       = $cacheData['_DBShe'];
                $this->X_DBShe      = $cacheData['X_DBShe'];
                $this->_FlexDBShe   = $cacheData['_FlexDBShe'];
                $this->_JSVirSig    = $cacheData['_JSVirSig'];
                $this->_AdwareSig   = $cacheData['_AdwareSig'];
                $this->_PhishingSig = $cacheData['_PhishingSig'];
                $this->_SusDB       = $cacheData['_SusDB'];
                $this->_CronDB      = $cacheData['_CronDB'];
                $this->_ExceptFlex  = $cacheData['_ExceptFlex'];
                $this->X_JSVirSig   = $cacheData['X_JSVirSig'];
                $this->X_FlexDBShe  = $cacheData['X_FlexDBShe'];
                $this->XX_FlexDBShe = $cacheData['XX_FlexDBShe'];
                $this->_DeMapper    = $cacheData['_DeMapper'];
                $this->_Mnemo       = $cacheData['_Mnemo'];
                $this->sig_db_meta_info = $cacheData['sig_db_meta_info'];
                $this->count            = $cacheData['count'];
                $this->count_susp       = $cacheData['count_susp'];
                $this->hash             = $cacheData['hash'];
                return true;
            }
        }
        @unlink($this->cache_file);
        return false;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match($black, $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
        if ($this->ownUrl === null || $this->ownUrl === '') {
            return false;
        }
        $this->ownUrl = '~^(http(s)?:)?//(www\.)?' . preg_quote($this->ownUrl, '~') . '~msi';
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}

if (!defined('FUNC_MEMORY_USAGE')) {
    define('FUNC_MEMORY_USAGE', function_exists('memory_get_usage'));
}
if (!defined('FUNC_MEMORY_PEAK_USAGE')) {
    define('FUNC_MEMORY_PEAK_USAGE', function_exists('memory_get_peak_usage'));
}
class DebugMode
{
    const SLOW_FILES_COUNT = 10;
    const SLOW_FILES_MIN_TIME = 0.5; // 1/2 of second

    const DEOBFUSCATOR_DEBUG_COUNT = 'count';
    const DEOBFUSCATOR_DEBUG_MEDIAN_TIME = 'median_time';
    const DEOBFUSCATOR_DEBUG_MAX_TIME = 'max_time';
    const DEOBFUSCATOR_DEBUG_MIN_TIME = 'min_time';
    const DEOBFUSCATOR_DEBUG_TIME_LIST = 'time_list';

    private $debugMode = false;
    private $debugPerformance = false;
    private $debugPCRE = false;
    private $performance_stats = [];
    private $deobfuscatorData = [];

    private $slow_files = [];
    private $min_file = false;
    private $slow_files_count = self::SLOW_FILES_COUNT;
    private $slow_files_min_time = self::SLOW_FILES_MIN_TIME;


    public function __construct($debugMode = false, $debugPerformance = false, $debugPCRE = false)
    {
        $this->debugMode = $debugMode;
        $this->debugPerformance = $debugPerformance;
        $this->debugPCRE = $debugPCRE;
        if (defined('DEBUG_SLOW_FILES_COUNT')) {
            $this->slow_files_count = DEBUG_SLOW_FILES_COUNT;
        }
        if (defined('DEBUG_SLOW_FILES_MIN_TIME')) {
            $this->slow_files_min_time = DEBUG_SLOW_FILES_MIN_TIME;
        }
    }

    public function QCR_Debug($par_Str = "")
    {
        if ($this->debugMode) {
            return;
        }

        $l_MemInfo = ' ';
        if (FUNC_MEMORY_USAGE) {
            $l_MemInfo .= ' curmem=' . AibolitHelpers::bytes2Human(memory_get_usage());
        }

        if (FUNC_MEMORY_PEAK_USAGE) {
            $l_MemInfo .= ' maxmem=' . AibolitHelpers::bytes2Human(memory_get_peak_usage());
        }

        stdOut("\n" . date('H:i:s') . ': ' . $par_Str . $l_MemInfo . "\n");
    }

    public function getDebugMode()
    {
        return $this->debugMode;
    }

    public function getDebugPerformance()
    {
        return $this->debugPerformance;
    }

    public function getDebugPCRE()
    {
        return $this->debugPCRE;
    }

    public function isDebug()
    {
        return $this->getDebugMode() || $this->getDebugPerformance() || $this->getDebugPCRE();
    }

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    public function addPerformanceItem($item, $time)
    {
        $this->performance_stats[$item] = isset($this->performance_stats[$item]) ? $this->performance_stats[$item] + $time : 0;
    }

    public function addFile($file, $time)
    {
        if ($time < $this->slow_files_min_time) {
            return;
        }

        if (count($this->slow_files) < $this->slow_files_count) {
            $this->slow_files[(string) $time] = $file;
            $this->min_file = (float) min(array_keys($this->slow_files));
            return;
        }

        if ($this->min_file !== false && $time < $this->min_file) {
            return;
        }

        unset($this->slow_files[(string) $this->min_file]);
        $this->slow_files[(string) $time] = $file;
        $this->min_file = (float) min(array_keys($this->slow_files));
    }

    public function printPerformanceStats()
    {
        $keys = array_keys($this->performance_stats);
        for ($i = 0, $iMax = count($keys); $i < $iMax; $i++) {
            $this->performance_stats[$keys[$i]] = round($this->performance_stats[$keys[$i]] * 1000000);
        }

        arsort($this->performance_stats);

        foreach ($this->performance_stats as $r => $v) {
            echo $v . "\t\t" . $r . "\n";
        }
    }

    public function getSlowFiles($with_hash = false)
    {
        $res = [];
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            $res[] = ['fn' => $file, 'sha256' => $with_hash ? hash_file('sha256', $file) : 0, 'time' => (float) $time];
        }
        return $res;
    }

    public function printSlowFiles()
    {
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            echo $file . "\t\t" . $time . "\n";
        }
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    /**
     * @param array<float> $nums
     * @return float
     */
    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count / 2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}

class InternalSignatures
{
    public static $_DBShe;
    public static $X_DBShe;
    public static $_FlexDBShe;
    public static $X_FlexDBShe;
    public static $XX_FlexDBShe;
    public static $_ExceptFlex;
    public static $_AdwareSig;
    public static $_PhishingSig;
    public static $_JSVirSig;
    public static $X_JSVirSig;
    public static $_SusDB;
    public static $_CronDB;
    public static $_DeMapper;
    public static $_Mnemo;
    public static $db_meta_info;

    public static function init()
    {
        //BEGIN_SIG 12/12/2024 12:05:02
self::$_DBShe = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$X_DBShe = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_FlexDBShe = unserialize(gzinflate(/*1733951102*/base64_decode("")));
self::$X_FlexDBShe = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$XX_FlexDBShe = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_ExceptFlex = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_AdwareSig = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_PhishingSig = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_JSVirSig = unserialize(gzinflate(/*1733951102*/base64_decode("")));
self::$X_JSVirSig = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_SusDB = unserialize(gzinflate(/*1733951102*/base64_decode("FYzhCoIwFIXfZQSZ5axIiivhg3SF1KaOahu7swXmu7f9uOeeA+d8DRxhlrAvCc4nYNh6qR7aI3/prnFSK+SjFT2O6TXcbc3u9eicoQryHFc4o9/igly2Wk2EmXX90yHv9JuVEg6Beiki9dNYpDSWKYAoVcIHtWIQX4NJwNZJBd7QZAxmEwn788F0WvVyiHETK7swiR99VFYufw==")));
self::$_CronDB = unserialize(gzinflate(/*1733951102*/base64_decode("S7QysKquBQA=")));
self::$_Mnemo = unserialize(gzinflate(/*1733951102*/base64_decode("")));
self::$_DeMapper = unserialize(base64_decode("YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=="));
self::$db_meta_info = unserialize(base64_decode("YTozOntzOjEwOiJidWlsZC1kYXRlIjtzOjEwOiIxNzMzOTM3MjcwIjtzOjc6InZlcnNpb24iO3M6MTQ6IjIwMjQxMjExLTEzMjgyIjtzOjEyOiJyZWxlYXNlLXR5cGUiO3M6MTA6InByb2R1Y3Rpb24iO30="));

//END_SIG
    }
}

if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
class AibolitHelpers
{
    private static $euid = 0;
    private static $egids = [0];

    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val  = (int) preg_replace('~\D~', '', $val);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return (int)$val;
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function (&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }

    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

    /**
     * Wrapper for the hrtime() or microtime() functions
     * (depending on the PHP version, one of the two is used)
     *
     * @return float|mixed UNIX timestamp
     */
    public static function currentTime()
    {
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }

    public static function setCurrentIds()
    {
        self::$euid  = posix_geteuid();
        self::$egids = posix_getgroups();
    }

    public static function geteuid()
    {
        return self::$euid;
    }

    public static function getegids()
    {
        return self::$egids;
    }

    public static function getFileExtension($path)
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = ['.', '/'];

        if ($pathLen === 0 || in_array($path[$pathLen - 1], $breakpoint)) {
            return $res;
        }

        $hasExt = false;
        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === '.') {
                $hasExt = true;
            }
            if (in_array($path[$i], $breakpoint)) {
                break;
            }
            $res .= $path[$i];
        }

        return $hasExt ? strrev($res) : '';
    }

    public static function getBaseName($path, $prefix = '')
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = '/';

        if ($pathLen === 0) {
            return $res;
        }

        $hasPrefix = false;
        if ($prefix !== '') {
            $prefix = strrev($prefix);
            $hasPrefix = true;
        }

        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === $breakpoint) {
                if ($i === $pathLen - 1) {
                    continue;
                }
                break;
            }
            $res .= $path[$i];

            if ($hasPrefix && $res === $prefix) {
                $res = '';
                $hasPrefix = false;
            }
        }

        return strrev($res);
    }

    public static function getRealpath($path, $checkExists = false)
    {
        $fileExists = $checkExists ? @lstat($path) : true;
        if ($fileExists === false) {
            return false;
        }

        if (strlen($path) == 0) {
            return getcwd();
        }

        if ($path[0] != DIRECTORY_SEPARATOR) {
            $path = getcwd() . DIRECTORY_SEPARATOR . $path;
        }

        $stack = explode(DIRECTORY_SEPARATOR, $path);
        $abs = [];

        foreach ($stack as $i) {
            if ($i === '.' || $i === '') {
                continue;
            }
            if ($i === '..') {
                array_pop($abs);
            } else {
                $abs[] = $i;
            }
        }

        return DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $abs);
    }

    public static function getPcreErrorConstant($error_code)
    {
        switch ($error_code) {
            case PREG_NO_ERROR:
                return true;
            case PREG_INTERNAL_ERROR:
                return 'PREG_INTERNAL_ERROR';
            case PREG_BACKTRACK_LIMIT_ERROR:
                return 'PREG_BACKTRACK_LIMIT_ERROR';
            case PREG_RECURSION_LIMIT_ERROR:
                return 'PREG_RECURSION_LIMIT_ERROR';
            case PREG_BAD_UTF8_ERROR:
                return 'PREG_BAD_UTF8_ERROR';
            case PREG_BAD_UTF8_OFFSET_ERROR:
                return 'PREG_BAD_UTF8_OFFSET_ERROR';
            case PREG_JIT_STACKLIMIT_ERROR:
                return 'PREG_JIT_STACKLIMIT_ERROR';
        }
    }

    /**
     * Check if the file is an ELF (binary) file.
     *
     * @param string $filepath Path to the file.
     *
     * @return bool True if the file is an ELF file, false otherwise.
     */
    public static function isFileElf($filepath)
    {
        $firstFourBytes = @file_get_contents($filepath, false, null, 0, 4);
        return self::isStringElfPrefix($firstFourBytes);
    }

    /**
     * Check if the string represents the beginning of an ELF (binary) file.
     *
     * @param $str String to evaluate.
     *
     * @return bool True if the string is an ELF prefix, false otherwise.
     */
    public static function isStringElfPrefix($str)
    {
        return (strpos($str, chr(127) . 'ELF') === 0);
    }

    /**
     * Normalizes the path to the AVD database.
     *
     * First it removes directory separator from the end of the path. It does the same for directory separator followed
     * by a wildcard symbol.
     *
     * It uses glob() to resolve all paths matching any pattern in the original path and then applies realpath() to get
     * the real path for each.
     *
     * @param string $path      Path to be processed.
     * @param bool   $isCleanup If true, subfolders are not matched. Even if the path contains a wildcard.
     *
     * @return array[] An array of normalized paths.
     */
    public static function normalizeAvdPath($path, $isCleanup = false)
    {
        if (substr($path, -1) === DIRECTORY_SEPARATOR) {
            $path = substr($path, 0, -1);
        } elseif (substr($path, -2) === DIRECTORY_SEPARATOR . '*') {
            $path = substr($path, 0, -2);
        }

        $paths = [
            // sanitized path
            $path,
        ];

        if (!$isCleanup) {
            // extra path to match subfolders
            $paths[] = $path . DIRECTORY_SEPARATOR . '*';
        }

        $result = [];
        foreach ($paths as $_path) {
            $glob_paths = glob($_path, GLOB_ONLYDIR);
            $result = array_merge($result, $glob_paths);
        }

        if (empty($result)) {
            return [];
        }

        $result = array_unique($result);
        return array_map('realpath', $result);
    }

    /**
     * Check if the string is a core dump.
     *
     * @param string $header The first bytes of the file.
     *
     * @return bool True if the string is a core dump, false otherwise.
     */
    public static function isStringCoreDump($header)
    {
        return strlen($header) >= 17 && ord($header[16]) === 4;
    }
}

class FileInfo
{
    protected $index = 0;
    protected $inode = 0;
    protected $cron = false;
    protected $filename = '';
    protected $filetype = '';
    protected $extension = '';
    protected $basename = '';
    protected $realpath = '';
    protected $size = null;
    protected $created = 0;
    protected $modified = 0;
    protected $hash = 0;
    protected $sha256 = 0;
    protected $sha1file = 0;
    protected $content = '';
    protected $norm_content = '';
    protected $is_binary = 0;
    protected $is_core_dump = 0;
    protected $is_interesting = 0;
    protected $is_log = 0;
    protected $link = 0;
    protected $is_dir = 0;
    protected $is_file = 0;
    protected $is_readable = 0;
    protected $is_writable = 0;
    protected $is_exists = 0;
    protected $hashtable = null;
    protected $raw_stat = null;
    protected $uid = false;
    protected $gid = false;
    protected $groups = false;
    protected $mode = false;
    protected $raw_mode = false;
    protected $error = 0;

    /**
     * @return int|string
     */
    public function getSha1file()
    {
        if ($this->sha1file === 0) {
            $this->sha1file = sha1_file($this->filename);
        }
        return $this->sha1file;
    }

    /**
     * @return int|string
     */
    public function getSha256file()
    {
        if ($this instanceof ZipFileInfo) {
            return hash('sha256', $this->getContent());
        }
        return hash_file('sha256', $this->filename);
    }

    public function __construct($filename, $index, $hashtable = null)
    {
        $this->index = $index;
        $this->filename = $filename;
        $this->hashtable = $hashtable;
        $this->checkCrontabFile();
    }

    /**
     * @return bool
     */
    public function isBinary()
    {
        if ($this->is_binary !== 0) {
            return $this->is_binary;
        }
        $this->_setFlags();
        return $this->is_binary;
    }

    /**
     * @return bool
     */
    public function isCoreDump()
    {
        if ($this->is_core_dump !== 0) {
            return $this->is_core_dump;
        }
        $this->_setFlags();
        return $this->is_core_dump;
    }

    public function isCron()
    {
        return $this->cron;
    }

    public function isInteresting()
    {
        if ($this->is_interesting !== 0) {
            return $this->is_interesting;
        }
        $this->_setFlags();
        return $this->is_interesting;
    }

    public function isLog()
    {
        if ($this->is_log !== 0) {
            return $this->is_log;
        }
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 200);
        } else {
            $header = substr($this->content, 0, 200);
        }
        if (HyperScan::canMatchLog()) {
            $this->is_log = HyperScan::matchLog($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_log = (bool)preg_match('~\A\s*<\?(?:php)?\s*(?:exit|die)(?:\s*\(\s*(?:(?:\d+|([\'"])[^\'"$]{0,199}\1)\s*)?\))?\s*;~mis', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }

        return $this->is_log;
    }

    public function getError()
    {
        return $this->error;
    }

    /**
     * @return false|mixed|string
     */
    public function getContent()
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename);
        }
        return $this->content;
    }

    /**
     * @return void
     */
    public function cleanContentCache()
    {
        $this->content = '';
        $this->norm_content = '';
    }

    /**
     * @return string
     */
    public function getContentWithoutSpaces($max_size = false)
    {
        if ($this->norm_content !== '') {
            return $this->norm_content;
        }
        if (!$max_size) {
            $this->norm_content = Normalization::strip_whitespace($this->getContent());
        } elseif (is_numeric($max_size)) {
            $this->norm_content = Normalization::strip_whitespace($this->getContentBytes($max_size));
        }
        return $this->norm_content;
    }

    public function getContentBytes($max_bytes)
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename, false, null, 0, $max_bytes);
        }
        return $this->content;
    }

    /**
     * @param $text
     * @return string
     */
    private function _hash_($text)
    {
        static $r;

        if (empty($r)) {
            for ($i = 0; $i < 256; $i++) {
                if ($i < 33 || $i > 127) {
                    $r[chr($i)] = '';
                }
            }
        }

        return sha1(strtr($text, $r));
    }

    public function getIndex()
    {
        return $this->index;
    }

    public function setIndex($index)
    {
        $this->index = $index;
    }

    public function getFilename()
    {
        return $this->filename;
    }

    protected function _setStat()
    {
        $info = @lstat($this->filename);
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->link = ($info['mode'] & 0xF000) === 0120000;
        if ($this->link) {
            $info = @stat($this->filename);
        }
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->is_exists = true;
        $this->is_dir = ($info['mode'] & 0xF000) === 0040000;
        $this->is_file = ($info['mode'] & 0xF000) === 0100000;
        $this->size = $info['size'];
        $this->created = $info['ctime'];
        $this->modified = $info['mtime'];
        $this->inode = $info['ino'];
        $this->uid = $info['uid'];
        $this->gid = $info['gid'];
        $this->mode = sprintf("0%o", 0777 & $info['mode']);
        $this->raw_mode = $info['mode'];
        $this->raw_stat = $info;
    }

    public function getStat()
    {
        if ($this->raw_stat === null) {
            $this->_setStat();
        }
        return $this->raw_stat;
    }

    public function file_exists()
    {
        if ($this->is_exists === 0) {
            $this->_setStat();
        }
        return $this->is_exists;
    }

    public function is_dir()
    {
        if ($this->is_dir === 0) {
            $this->_setStat();
        }
        return $this->is_dir;
    }

    public function is_file()
    {
        if ($this->is_file === 0) {
            $this->_setStat();
        }
        return $this->is_file;
    }

    public function is_link()
    {
        if ($this->link === 0) {
            $this->_setStat();
        }
        return $this->link;
    }

    public function _is_readable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0400);    // User has read permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0040);    // Group has read permission
        }

        return (bool)($this->raw_mode & 0004);    // Other has read permission
    }

    public function is_readable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_readable === 0) {
            $this->is_readable = $this->_is_readable();
        }
        return $this->is_readable;
    }

    public function is_writeable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_writable === 0) {
            $this->is_writable = $this->_is_writable();
        }
        return $this->is_writable;
    }

    public function _is_writable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0200);    // User has write permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0020);    // Group has write permission
        }

        return (bool)($this->raw_mode & 0002);    // Other has write permission
    }

    public function filetype()
    {
        if ($this->filetype === '') {
            $this->filetype = $this->detectFileType();
        }
        return $this->filetype;
    }

    public function getExtension()
    {
        if ($this->extension === '') {
            $this->extension = AibolitHelpers::getFileExtension($this->getFilename());
        }
        return $this->extension;
    }

    public function getBasename($prefix = '')
    {
        if ($this->basename === '') {
            $this->basename = AibolitHelpers::getBaseName($this->getFilename(), $prefix);
        }
        return $this->basename;
    }

    public function getRealpath()
    {
        if ($this->realpath === '') {
            $this->realpath = $this->file_exists() ? AibolitHelpers::getRealpath($this->getFilename()) : false;
        }
        return $this->realpath;
    }

    private function isValidSqliteFile($filename)
    {
        $header = @file_get_contents($filename, false, null, 0, 100);
        if (strpos($header, 'SQLite format 3' . chr(0)) !== 0) { //check valid header
            return false;
        }
        if (substr($header, 72, 20) !== str_repeat(chr(0), 20)) { //check valid reserved bytes
            return false;
        }
        $page_size = unpack('n', substr($header, 16, 2))[1];
        $page_count = unpack('N', substr($header, 28, 4))[1];
        if ($page_size * $page_count !== filesize($filename)) { //check valid size
            return false;
        }
        return true;
    }

    private function detectFileType()
    {
        if ($this->raw_mode === false) {
            $this->_setStat();
        }
        if ($this->is_link() === true) {
            return 'link';
        }

        $mode = $this->raw_mode & 0xF000;
        if ($mode === 0100000) {
            return 'file';
        }
        if ($mode === 0040000) {
            return 'dir';
        }
        if ($mode === 0140000) {
            return 'socket';
        }
        if ($mode === 0060000) {
            return 'block';
        }
        if ($mode === 0020000) {
            return 'char';
        }
        if ($mode === 0010000) {
            return 'fifo';
        }

        return 'unknown';
    }

    /**
     * @return void
     */
    private function _setFlags()
    {
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 17);
        } else {
            $header = substr($this->content, 0, 17);
        }

        $this->is_binary = AibolitHelpers::isStringElfPrefix($header);
        $this->is_core_dump = AibolitHelpers::isStringCoreDump($header);

        if (HyperScan::canMatchInteresting()) {
            $this->is_interesting = HyperScan::matchInteresting($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_interesting = (bool)preg_match('~<(?:\?|html)|#!/|[\x09\x0A\x0D\x20-\x7E]{10}~msi', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }
        if (!$this->is_interesting && strpos($header, "\xFF\xD8") === 0) {
            $this->is_interesting = @file_get_contents($this->filename, false, null, filesize($this->filename) - 2, 2) !== "\xFF\xD9";
        }
        if ($header === 'SQLite for' && $this->isInteresting()) {
            $this->is_interesting = !$this->isValidSqliteFile($this->filename);
        }
        unset($header);
    }

    /**
     * @return void
     */
    protected function checkCrontabFile()
    {
        $this->cron = (stripos($this->filename, '/var/spool/cron') === 0);
    }

    /**
     * @return int|mixed
     */
    public function getSize()
    {
        if ($this->size === null) {
            $this->_setStat();
        }
        return $this->size;
    }

    /**
     * @return int|mixed
     */
    public function getInode()
    {
        if ($this->inode === 0) {
            $this->_setStat();
        }
        return $this->inode;
    }

    /**
     * @return int|mixed
     */
    public function getCreated()
    {
        if ($this->created === 0) {
            $this->_setStat();
        }
        return $this->created;
    }

    /**
     * @return int|mixed
     */
    public function getModified()
    {
        if ($this->modified === 0) {
            $this->_setStat();
        }
        return $this->modified;
    }

    public function getHash()
    {
        if ($this->hash === 0) {
            $this->hash = $this->_hash_($this->getContentWithoutSpaces());
        }
        return $this->hash;
    }

    /**
     * @return int|string
     */
    public function getSha256()
    {
        if ($this->hashtable !== null && $this->hashtable->get($this->filename) !== false) {
            $this->sha256 = $this->hashtable->get($this->filename);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content === '') {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 === 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 !== 0)) {
            $this->sha256 = bin2hex($this->sha2);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content !== '') {
            $this->sha256 = hash('sha256', $this->getContent());
        }
        if ($this->sha256 === 0) {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 !== 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 === 0)) {
            $this->sha2 = hex2bin($this->sha256);
        }
        return $this->sha256;
    }

    /**
     * @return int|mixed
     */
    public function getUid()
    {
        if ($this->uid === false) {
            $this->_setStat();
        }
        return $this->uid;
    }

    /**
     * @return int|mixed
     */
    public function getGid()
    {
        if ($this->gid === false) {
            $this->_setStat();
        }
        return $this->gid;
    }

    /**
     * @return int|mixed
     */
    public function getMode()
    {
        if ($this->mode === false) {
            $this->_setStat();
        }
        return $this->mode;
    }
}

class Finder
{
    const MAX_ALLOWED_PHP_HTML_IN_DIR = 600;

    private $sym_links              = [];
    private $skipped_folders        = [];
    private $doorways               = [];
    private $big_files              = [];
    private $big_elf_files          = [];

    private $collect_skipped        = false;
    private $collect_symLinks       = false;
    private $collect_doorways       = false;
    private $collect_bigfiles       = false;
    private $collect_bigelffiles    = false;

    private $total_dir_counter      = 0;
    private $total_files_counter    = 0;
    private $checked_hashes         = [];

    private $initial_dir            = '';
    private $initial_level          = null;
    private $level_limit            = null;

    /**
     * @var \FileFilter
     */
    private $filter;
    private $total                  = 0;

    public function __construct($filter = null, $level_limit = null)
    {
        $this->filter = $filter;
        $this->level_limit = $level_limit;
    }

    private function linkResolve($path)
    {
        return realpath($path);
    }

    private function resolve(FileInfo $file, $follow_symlinks)
    {
        if (!$follow_symlinks || !$file->is_link()) {
            return $file;
        }
        $realpath = $this->linkResolve($file->getFilename());
        if ($file->getFilename() !== $realpath) {
            return new FileInfo($realpath, $file->getIndex());
        }
        return $file;
    }

    private function isPathCheckedAlready($path)
    {
        $root_hash = crc32($path);
        if (isset($this->checked_hashes[$root_hash])) {
            return true;
        }
        $this->checked_hashes[$root_hash] = '';
        return false;
    }

    private function walk(FileInfo $file, $follow_symlinks)
    {
        $path = $file->getFilename();
        $level = substr_count($path, '/');
        if (isset($this->level_limit) && (($level - $this->initial_level + 1) > $this->level_limit)) {
            return;
        }
        $l_DirCounter          = 0;
        $l_DoorwayFilesCounter = 0;

        if ($follow_symlinks && $this->isPathCheckedAlready($path)) {
            return;
        }

        # will not iterate dir, if it should be ignored
        if (!$this->filter->needToScan($file, true)) {
            if ($this->collect_skipped) {
                $this->skipped_folders[] = $path;
            }
            return;
        }
        $dirh = @opendir($path);
        if ($dirh === false) {
            return;
        }

        while (($entry = readdir($dirh)) !== false) {
            if ($entry === '.' || $entry === '..') {
                continue;
            }
            $entry = $path . DIRECTORY_SEPARATOR . $entry;
            $file = new FileInfo($entry, 0);
            if ($file->is_link()) {
                if ($this->collect_symLinks) {
                    $this->sym_links[] = $entry;
                }

                if (!$follow_symlinks) {
                    continue;
                }
                $file = $this->resolve($file, true);
            } else {
                $realpath = $file->getRealpath();
                if ($file->getFilename() !== $realpath) {
                    $file = new FileInfo($file->getRealpath(), $file->getIndex());
                }
            }
            if ($file->is_dir()) {
                $l_DirCounter++;
                if ($this->collect_doorways && $l_DirCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                    $this->doorways[]  = $path;
                    $l_DirCounter = -655360;
                }
                $this->total_dir_counter++;
                yield from $this->walk($file, $follow_symlinks);
            } elseif ($file->is_file()) {
                if ($this->collect_doorways && is_callable([$this->filter, 'checkShortExt']) && $this->filter->checkShortExt($file)) {
                    $l_DoorwayFilesCounter++;
                    if ($l_DoorwayFilesCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                        $this->doorways[]           = $path;
                        $l_DoorwayFilesCounter = -655360;
                    }
                }
                if ($follow_symlinks && $this->isPathCheckedAlready($file->getFilename())) {
                    continue;
                }
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }

                $is_big_elf = false;
                if (
                    $this->collect_bigelffiles
                    && $is_big
                    && $file->isBinary()
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $is_big_elf = true;
                    if (!defined('CLOUDSCAN_MAX_ELF_SIZE') || $file->getSize() > CLOUDSCAN_MAX_ELF_SIZE) {
                        // Only add to the list of big ELF files if the max ELF file size is not set explicitly.
                        $this->big_elf_files[] = $file->getFilename();
                    }
                }
                if ($is_big) {
                    $need_to_scan = $this->filter->needToScan($file, false, [], ['check_size_range']);
                    if ($is_big_elf) {
                        if ($file->isCoreDump()) {
                            // Always prevent big core dump files from scanning.
                            $need_to_scan = false;
                        } elseif (
                            defined('CLOUDSCAN_MAX_ELF_SIZE')
                            && $file->getSize() <= CLOUDSCAN_MAX_ELF_SIZE
                        ) {
                            // Force big ELF files for scanning if the max ELF file size is set explicitly.
                            $need_to_scan = true;
                        }
                    }
                } else {
                    $need_to_scan = $this->filter->needToScan($file);
                }
                $this->total_files_counter = $need_to_scan ? $this->total_files_counter + 1 : $this->total_files_counter;
                $this->total++;
                if (defined('CLS_PROGRESS')) {
                    Progress::setCurrentFile($file->getFilename());
                    Progress::setFilesTotal($this->total_files_counter);
                    Progress::updateList($this->total);
                }
                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
        closedir($dirh);
    }

    private function expandPath(FileInfo $file, $follow_symlinks)
    {
        if ($file->file_exists()) {
            if ($file->is_dir()) {
                yield from $this->walk($file, $follow_symlinks);
            } else {
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }

                $is_big_elf = false;
                if (
                    $this->collect_bigelffiles
                    && $is_big
                    && $file->isBinary()
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $is_big_elf = true;
                    if (!defined('CLOUDSCAN_MAX_ELF_SIZE') || $file->getSize() > CLOUDSCAN_MAX_ELF_SIZE) {
                        // Only add to the list of big ELF files if the max ELF file size is not set explicitly.
                        $this->big_elf_files[] = $file->getFilename();
                    }
                }

                // If file is big and not an ELF file, we don't need to scan it.
                $need_to_scan = $is_big ? false : $this->filter->needToScan($file);
                if ($is_big_elf) {
                    if ($file->isCoreDump()) {
                        // Always prevent big core dump files from scanning.
                        $need_to_scan = false;
                    } elseif (
                        defined('CLOUDSCAN_MAX_ELF_SIZE')
                        && $file->getSize() <= CLOUDSCAN_MAX_ELF_SIZE
                    ) {
                        // Force big ELF files for scanning if the max ELF file size is set explicitly.
                        $need_to_scan = true;
                    }
                }

                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
    }

    public function find($target)
    {
        $started = AibolitHelpers::currentTime();

        if ($target === '/') {
            $target = '/*';
        }
        if (is_string($target) && substr($target, -1) === DIRECTORY_SEPARATOR) {
            $target = substr($target, 0, -1);
        }

        if (
            is_callable([$this->filter, 'getGenerated']) && !$this->filter->getGenerated()
            && is_callable([$this->filter, 'generateCheckers'])
        ) {
            $this->filter->generateCheckers();
        }

        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_LIST);
        }

        $paths = is_array($target) ? $target : new GlobIterator($target, FilesystemIterator::CURRENT_AS_PATHNAME);
        foreach ($paths as $path) {
            $this->initial_dir = realpath($path);
            $this->initial_level = substr_count($this->initial_dir, '/');
            $file = new FileInfo($path, 0);
            if (!$file->file_exists()) {
                continue;
            }
            $file = $this->resolve($file, $this->filter->isFollowSymlink());
            yield from $this->expandPath($file, $this->filter->isFollowSymlink());
        }

        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::FINDER_STAT, AibolitHelpers::currentTime() - $started);
        }
    }

    private function convertTemplatesToRegexp($templates)
    {
        return '~(' . str_replace([',', '.', '*'], ['|', '\\.', '.*'], $templates) . ')~i';
    }

    public function setLevelLimit($level)
    {
        $this->level_limit = $level;
    }

    public function getSymlinks()
    {
        return $this->sym_links;
    }

    public function getBigFiles()
    {
        return $this->big_files;
    }

    public function getBigElfFiles()
    {
        return $this->big_elf_files;
    }

    public function setCollectDoorways($flag)
    {
        $this->collect_doorways = $flag;
    }

    public function setCollectBigElfs($flag)
    {
        $this->collect_bigelffiles = $flag;
    }

    public function setCollectSymlinks($flag)
    {
        $this->collect_symLinks = $flag;
    }

    public function setCollectSkipped($flag)
    {
        $this->collect_skipped = $flag;
    }

    public function setCollectBigFiles($flag)
    {
        $this->collect_bigfiles = $flag;
    }

    public function getDoorways()
    {
        return $this->doorways;
    }

    public function skippedDirs()
    {
        return $this->skipped_folders;
    }

    public function getTotalDirs()
    {
        return $this->total_dir_counter;
    }

    public function getTotalFiles()
    {
        return $this->total_files_counter;
    }

    public function getFilter()
    {
        return $this->filter;
    }
}

class StringToStreamWrapper
{
    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return void
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return [];
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option, $arg1, $arg2)
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t.\"'\x0B\x0C\x00";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if (
            (isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if (
            $pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] === 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] === 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] === 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if (
            $pos_string && (isset($string[$pos_string]) && $string[$pos_string] === 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] === 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] === 'p')
        ) {
            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function unescape($string, $save_length = false)
    {
        if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) {
            return $string;
        }
        $strippedStr = stripcslashes($string);
        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            $strippedStr = preg_replace_callback('~\*\s+\/~msi', function ($m) {
                return str_pad('*/', strlen($m[0]));
            }, $strippedStr);
            return $strippedStr;
        }
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        $halt_postfix = '';
        if (
            preg_match('~__halt_compiler~mis', $string)
            && preg_match('~__halt_compiler\(\s{0,2000}\)\s{0,2000};.*$~mis', $string, $m, PREG_OFFSET_CAPTURE)
        ) {
            $pos = $m[0][1];
            $halt_postfix = $m[0][0];
            $string = substr($string, 0, $pos);
        }
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr . $halt_postfix;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr . $halt_postfix;
        }
    }

    public static function normalize($string, $save_length = false, &$error = null)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        $bad_chars = ['配', '内'];
        $string = str_replace($bad_chars, ' ', $string);
        $string = str_replace("\xEF\xBB\xBF", '   ', $string); //BOM

        $string = preg_replace_callback('~\bchr\s*\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function ($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function ($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $pattern = '~%([0-9a-fA-F]{2})~';
        if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) {
            $pattern = '~% {0,2}([0-9a-fA-F]{2})~';
        }
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback($pattern, function ($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
        }

        $last_char = $string[-1] ?? '';

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = str_replace($search, $replace, $string);
            if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) {
                $string .= $last_char;
            }
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    if (strpos($m[0], '  ') !== false) {
                        $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0]));
                    }
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
            $iter++;
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        $string = self::concatenate_strings($string, $save_length);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function ($m) {
            if (preg_match('~(?:\w[^\x00-\x7F]|[^\x00-\x7F]\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<\?\s*p\s*h\s*p~msi', function ($m) {
            return str_pad('<?php', strlen($m[0]), ' ');
        }, $string);

        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = str_replace(' ', '  ', $string);  //0xc2, 0xa0

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = trim($string);
        } else {
            $string = str_replace('<?php', '<?   ', $string);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        return $string;
    }

    public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if (strlen($string_normalized) == $start_pos + 1) {
            return $start_pos;
        }

        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            for ($i = $start_pos + 1, $iMax = strlen($string_orig); $i < $iMax; $i++) {
                if ($string_orig[$i] === ')') {
                    break;
                }
            }
            $start_pos = $i;
        }

        if (
            ($string_orig[$start_pos - 1] === '<' && $string_orig[$start_pos] === '?')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '*')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '/')
        ) {
            return $start_pos;
        }

        for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) {
            if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') {
                break;
            }
        }
        return $i - 1;
    }

    public static function get_start_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        $result_pos = $start_pos;
        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            $start_pos -= 1;
        }

        for ($i = $start_pos - 1; $i > 1; $i--) {
            if ($string_orig[$i] === ' ') {
                continue;
            } elseif ($string_orig[$i] === '.' && $string_orig[$i - 1] !== '\\') {
                $result_pos = $i;
                break;
            } else {
                $result_pos = $start_pos;
                break;
            }
        }
        for ($i = $result_pos - 1; $i >= 0; $i--) {
            if ($string_orig[$i] != ' ' && $string_normalized[$i] == ' ') {
                $result_pos = $i;
            } else {
                break;
            }
        }
        return $result_pos;
    }

    public static function string_pos($string, $needle, $unescape = false)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string_strip_whitespace = self::strip_whitespace($string, true);
        $needle = self::strip_whitespace($needle, false);
        $needle = preg_replace('~(?<!\:)//[^?\n]{1,15}(\n?\?>)~msi', '$1', $needle);

        $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) {
            $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?';
            return str_pad($ret, strlen($m[0]), ' ');
        }, $string_strip_whitespace);

        $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) {
            return str_pad('?>', strlen($m[0]), ' ', STR_PAD_LEFT);
        }, $string);

        if ($unescape) {
            $string = self::unescape($string, true);
        }

        $string = self::normalize($string, true);
        $needle = self::normalize($needle, false);
        $tempString = $string;
        $string = preg_replace_callback('~(?<![\*\\\\])/\*(?:(?:[^\*]|\*(?!\/))*)\*/~', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $string = $tempString;
        }
        $tempNeedle = $needle;
        $needle = preg_replace('~(?<![\*\\\\])/\*(([^\*]|\*(?!\/))*)\*/~', '', $needle); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $needle = $tempNeedle;
        }
        for ($i = 1; $i <= 7; $i++) {
            $dist_string = $string;
            // Removing multiline comments with spaces
            $string = preg_replace_callback('~(?<![\*\\\\ ]) {0,' . $i . '}/ {' . ($i - 1) . ',' . $i . '}\* {' . ($i - 1) . ',' . $i . '}(([^\*]| {' . $i . '}\* {' . ($i - 1) . ',' . $i . '}(?!\/))*) {' . ($i - 1) . ',' . $i . '}\* {' . ($i - 1) . ',' . $i . '}/~msi', function ($m) {
                return str_repeat(' ', strlen($m[0]));
            }, $string);
            if (preg_last_error() !== 0) {
                $string = $dist_string;
            }
        }

        $string = preg_replace_callback('~% *([\da-f]) *([\da-f])~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);
        $string = preg_replace_callback('~\\\\  x  ([\da-f])  ([\da-f])  ~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);

        $needle = self::concatenate_strings($needle, true);
        $needle = preg_replace('~\s+~msi', '', $needle);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if (trim($string[$i]) === '' && @trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $start = self::get_start_of_extended_length($string, $string_strip_whitespace, $start);
                    $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i);
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function concatenate_strings($string, $save_length)
    {
        $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);
        return $string;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    private static function extend_string_with_spaces($string, $strippedStr)
    {
        $strippedStr = str_replace('<?php  ', '<?php ', $strippedStr);

        $in_comment_ml = false;
        $in_comment_nl = false;
        $iMax = strlen($string);
        $jMax = strlen($strippedStr);

        if ($iMax === $jMax) {
            return $string;
        }

        $newStr = '';
        $j = 0;

        for ($i = 0; $i < $iMax; $i++) {
            $have_next = ($i + 1) < $iMax;
            if (isset($strippedStr[$j]) && trim($strippedStr[$j]) === '') {
                $j++;
                $i--;
                continue;
            }
            if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) {
                $newStr .= $string[$i];
                $j++;
            } elseif ((trim($string[$i]) === '/' && $have_next && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) {
                $in_comment_ml = true;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '*' && $have_next && trim($string[$i + 1]) === '/') && $in_comment_ml) {
                $in_comment_ml = false;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '/' && $have_next && trim($string[$i + 1]) === '/') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '#') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } elseif (($string[$i] === "\n" || $string[$i] === "\r") && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= ' ';
            } elseif (isset($string[$i]) && $have_next && isset($string[$i + 1]) && $string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= $string[$i];
                $j++;
            } elseif ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) {
                $newStr .= ' ';
            } else {
                $newStr .= ' ';
            }
        }
        return $newStr;
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}

if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text, &$bom = false)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        $bom = false;
        if ($first3 == self::UTF8_BOM) {
            $bom = true;
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-16LE';
        } elseif (isset($first4[3]) && $first4[0] === "\0" && $first4[1] !== "\0" && $first4[2] === "\0" && $first4[3] !== "\0") {
            return 'UTF-16BE';
        } elseif (isset($first4[3]) && $first4[0] !== "\0" && $first4[1] === "\0" && $first4[2] !== "\0" && $first4[3] === "\0") {
            return 'UTF-16LE';
        } elseif (isset($first4[3]) && $first4[0] === "\0" && $first4[1] === "\0" && $first4[2] === "\0" && $first4[3] !== "\0") {
            return 'UTF-32BE';
        } elseif (isset($first4[3]) && $first4[0] !== "\0" && $first4[1] === "\0" && $first4[2] === "\0" && $first4[3] === "\0") {
            return 'UTF-32LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return FUNC_ICONV;
    }

    public static function convertToCp1251($from, $str)
    {
        $str = self::unsetUtf16Pairs($str);
        $str = self::removeUTF8MultiByteCharacters($str);
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', $str);
        }
        return $ret;
    }

    public static function removeUTF8MultiByteCharacters($string)
    {
        $cleanText = '';
        $string = preg_replace("~\A\xEF\xBB\xBF~mis", '', $string);
        $textLength = strlen($string);

        for ($i = 0; $i < $textLength; $i++) {
            $byte = ord($string[$i]);
            $bytesLeft = 0;

            if (($byte & 0b10000000) == 0) {
                // 1-byte character
                $bytesLeft = 0;
            } elseif (($byte & 0b11100000) == 0b11000000) {
                // 2-byte character
                $bytesLeft = 1;
            } elseif (($byte & 0b11110000) == 0b11100000) {
                // 3-byte character
                $bytesLeft = 2;
            } elseif (($byte & 0b11111000) == 0b11110000) {
                // 4-byte character
                $bytesLeft = 3;
            }

            if ($bytesLeft === 0) {
                $cleanText .= $string[$i];
            } else {
                // Skip bytes for multi-byte characters
                $i += $bytesLeft;
                $cleanText .= '?';
            }
        }
        return $cleanText;
    }


    public static function checkUtf8Bytes($string_in_utf8, $position_without_multibyte, $length_without_multibyte, $bom = false)
    {
        $length = strlen($string_in_utf8);
        $index = 0;
        $start_position = 0;
        $stop_position = 0;
        $current_position_without_multibyte = 0;

        if ($bom) {
            $index += 3;
        }
        while ($index < $length) {
            $last_index = $index;
            $byte = ord($string_in_utf8[$index]);
            if (($byte & 0x80) == 0) {
                // 1 byte char
                $index++;
            } elseif (($byte & 0xE0) == 0xC0) {
                // 2 byte char
                $index += 2;
            } elseif (($byte & 0xF0) == 0xE0) {
                // 3 byte char
                $index += 3;
            } elseif (($byte & 0xF8) == 0xF0) {
                // 4 byte char
                $index += 4;
            } else {
                // Invalid byte
                $index++;
            }

            if ($current_position_without_multibyte === $position_without_multibyte) {
                $start_position = $last_index;
            }

            if ($current_position_without_multibyte - $position_without_multibyte >= $length_without_multibyte - 1) {
                $stop_position = $index;
                break;
            }

            $current_position_without_multibyte++;
        }
        return [$start_position, $stop_position - $start_position];
    }


    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }

    public static function convertFromUTF8($to, $str)
    {
        return @iconv('UTF-8', $to, $str);
    }

    public static function countUtf16Pairs($string)
    {
        $count = 0;
        for ($i = 0; $i < strlen($string); $i++) {
            if (
                (
                    isset($string[$i + 4])
                    && (ord($string[$i + 1]) >= 0xD8 && ord($string[$i + 1]) <= 0xDB)
                    && (ord($string[$i]) >= 0x00 && ord($string[$i]) <= 0xFF)
                    && (ord($string[$i + 3]) >= 0xDC && ord($string[$i + 3]) <= 0xDF)
                    && (ord($string[$i + 2]) >= 0x00 && ord($string[$i + 2]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                ) || (
                    isset($string[$i + 4])
                    && (ord($string[$i]) >= 0xD8 && ord($string[$i]) <= 0xDB)
                    && (ord($string[$i + 1]) >= 0x00 && ord($string[$i + 1]) <= 0xFF)
                    && (ord($string[$i + 2]) >= 0xDC && ord($string[$i + 2]) <= 0xDF)
                    && (ord($string[$i + 3]) >= 0x00 && ord($string[$i + 3]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                )
            ) {
                $count++;
                $i += 3;
            }
        }
        return $count;
    }

    public static function unsetUtf16Pairs($string)
    {
        $new_str = '';
        for ($i = 0; $i < strlen($string); $i++) {
            if (
                (
                    isset($string[$i + 4])
                    && (ord($string[$i + 1]) >= 0xD8 && ord($string[$i + 1]) <= 0xDB)
                    && (ord($string[$i]) >= 0x00 && ord($string[$i]) <= 0xFF)
                    && (ord($string[$i + 3]) >= 0xDC && ord($string[$i + 3]) <= 0xDF)
                    && (ord($string[$i + 2]) >= 0x00 && ord($string[$i + 2]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                ) || (
                    isset($string[$i + 4])
                    && (ord($string[$i]) >= 0xD8 && ord($string[$i]) <= 0xDB)
                    && (ord($string[$i + 1]) >= 0x00 && ord($string[$i + 1]) <= 0xFF)
                    && (ord($string[$i + 2]) >= 0xDC && ord($string[$i + 2]) <= 0xDF)
                    && (ord($string[$i + 3]) >= 0x00 && ord($string[$i + 3]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                )
            ) {
                $i += 3;
            } else {
                $new_str .= $string[$i];
            }
        }

        return $new_str;
    }
}

/**
 * Class SharedMem work with shared-memory
 */
class SharedMem
{
    private $instance = null;

    /**
     * SharedMem constructor.
     * @param int $key
     * @param string $mode
     * @param int $permissions
     * @param int $size
     */
    public function __construct(int $key, string $mode, int $permissions, int $size)
    {
        $this->instance = shmop_open($key, $mode, $permissions, $size);
    }

    /**
     * @param int $offset
     * @param int $size
     * @param bool $trim
     * @param bool $json
     * @return false|mixed|string
     */
    public function read(int $offset, int $size, bool $trim = true, bool $json = true)
    {
        $res = shmop_read($this->instance, $offset, $size);
        if ($trim) {
            $res = rtrim($res, "\0");
        }
        if ($json) {
            $res = json_decode($res, true);
        }
        return $res;
    }

    /**
     * @param string $data
     * @return int
     */
    public function write(array $data): int
    {
        shmop_write($this->instance, str_repeat("\0", shmop_size($this->instance)), 0);
        if (function_exists('json_encode')) {
            $res = shmop_write($this->instance, json_encode($data), 0);
        } else {
            $res = shmop_write($this->instance, serialize($data), 0);
        }
        return $res;
    }

    /**
     * @return int
     */
    public function getSize(): int
    {
        return shmop_size($this->instance);
    }

    /**
     * @return bool
     */
    public function delete(): bool
    {
        return shmop_delete($this->instance);
    }

    /**
     * @param bool $delete
     */
    public function close(bool $delete = false)
    {
        if ($delete) {
            shmop_delete($this->instance);
        }

        if (version_compare(phpversion('shmop'), '8.0.0', '<')) {
            shmop_close($this->instance);
        }

        $this->instance = null;
    }

    /**
     * @return bool
     */
    public function isValid()
    {
        if (version_compare(phpversion('shmop'), '8.0.0', '>=')) {
            return is_object($this->instance);
        }

        return is_resource($this->instance);
    }

    /**
     * @return false|resource|Shmop
     */
    public function getInstance()
    {
        return $this->instance;
    }
}

class ScanUnit
{
    /**
     * @param array<string,bool> $checkers
     * @param $l_Unwrapped
     * @param $l_Content
     * @param $signs
     * @param  \DebugMode  $debug
     * @param $precheck
     * @param $processResult
     * @param $return
     * @param $error
     * @param $error_info
     *
     * @return bool
     */
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, DebugMode $debug, $precheck = null, $processResult = null, &$return = null, &$error = null, &$error_info = null)
    {
        $smart_skipped = false;
        $flag = false;
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) {
                    $smart_skipped = true;
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug, $error, $error_info);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $tag = 'match_o:?,u:1_' . $checker;
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return, $tag);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug, $error, $error_info);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $tag = 'match_o:1,u:0_' . $checker;
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return, $tag);
                }
            }
            if ($flag) {
                return true;
            }
        }
        if (!$flag && $smart_skipped) {
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
        }
        return false;
    }

    /**
     * @param string $content
     * @param $signs
     * @param \DebugMode $debug
     * @param bool $deobfuscate
     * @param null $processResult
     * @param null $return
     *
     * @return int
     */
    public static function Rescan($content, $signs, DebugMode $debug, $deobfuscate = false, $processResult = null, &$return = null)
    {
        $checkers['CriticalPHP'] = true;
        $l_Unwrapped = Normalization::strip_whitespace($content);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            }
        }

        if ($deobfuscate) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        }

        if (isset($l_DeobfType) && $l_DeobfType != '' && isset($l_DeobfObj) && $l_DeobfObj instanceof Deobfuscator) {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);

        $getRescanRes = function ($checker, $content, $l_Pos, $l_SigId, &$return) use ($signs) {
            if ($signs->needSkipId($l_SigId)) {
                $return = 2;
            } else {
                $return = 1;
            }
        };
        $return = 0;
        self::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signs, $debug, null, $getRescanRes, $return);
        return $return;
    }
}

if (!defined('CLS_SCAN_CHECKERS')) {
    define('CLS_SCAN_CHECKERS', true);
}
class ScanCheckers
{
    const URL_GRAB = '~(?:<(script|iframe|object|embed|img|a)\s*[^<]{0,300}?)?((?:https?:)?\\\\?/\\\\?/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:;\[\]\|%_\+.\~#?&/=\\\\]*))(.{0,300}?(?:/>|</\1>))?~msi';
    const NESTED_URLS = '~((https?:\/\/|www\.).+?)(?=(https?:\/\/|www\.|$))~mi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }
        return false;
    }

    public static function CriticalCron($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_CronDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) {
            return false;
        }
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match($l_ExceptItem, $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_ExceptItem;
                }
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = (int)$l_Found[0][1] + 1;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error)  && $error === 0 && !$res) {
                $error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error)  && $error === 0 && !$res) {
                    $error = preg_last_error();
                    if ($debug->getDebugPCRE()) {
                        $error_info = $l_Item;
                    }
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if ($debug->getDebugMode()) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if ($debug->getDebugMode()) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if ($debug->getDebugMode()) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if ($debug->getDebugMode()) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error) && $error === 0 && !$res) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error) && $error === 0 && !$res) {
                    $error = preg_last_error();
                    if ($debug->getDebugPCRE()) {
                        $error_info = $l_Item;
                    }
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }
            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if ($own_domain === null || $own_domain === '') {
            return false;
        }
        return (bool)preg_match($own_domain, $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match($item, $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    /**
     * @param $l_Content
     * @param $l_Pos
     * @param $l_SigId
     * @param \LoadSignaturesForScan $signs
     * @param  \DebugMode  $debug
     * @param $error
     * @param $error_info
     *
     * @return bool
     */
    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;

        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            $l_Found[2][0] = str_replace('\/', '/', $l_Found[2][0]);
            $url_to_check = $l_Found[2][0];
            if (self::isOwnUrl($l_Found[2][0], $signs->getOwnUrl())) {
                $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
                continue;
            }

            if (isset($signs->whiteUrls)) {
                // URL is whitelisted.
                if (self::isUrlInList($l_Found[2][0], $signs->whiteUrls->getDb())) {
                    if (preg_match_all(self::NESTED_URLS, $l_Found[2][0], $l_FoundNested, PREG_OFFSET_CAPTURE) > 1) {
                        // Re-check the first part of the URL for blacklisted URLs. It is needed in the case of whitelisted nested URLs.
                        $url_to_check = $l_FoundNested[0][0][0];
                    } else {
                        // URL is whitelisted and there are no nested URLs.
                        $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
                        continue;
                    }
                }
            }

            if (isset($signs->blackUrls) && $id = self::isUrlInList($url_to_check, $signs->blackUrls->getDb())) {
                if (isset($l_Found[1][0]) && $l_Found[1][0] !== '' && isset($l_Found[3][0]) && $l_Found[3][0] !== '') {
                    $l_Pos['black'][] = $l_Found[2][1];
                    $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                }
            } else {
                $l_Pos['unk'][] = $l_Found[2][1];
                $l_SigId['unk'][] = $l_Found[2][0];
            }
            $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
            if ($debug->getDebugPCRE()) {
                $error_info = self::URL_GRAB;
            }
        }
        return !empty($l_Pos);
    }
}

if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Helpers
{
    const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis';
    const GOTO_MAX_HOPS        = 12000;

    /*************************************************************************************************************/
    /*                                Frequently used functions for deobfuscators                                */
    /*************************************************************************************************************/

    /**
     * This method normalizes string, converts characters to a readable form and some other things.
     * Also, the method can save the number of characters in the string by adding spaces if the number of characters has decreased.
     *
     * @param $string
     * @param false $save_length
     * @return string
     */
    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function ($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function ($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    /**
     * Code formatting. Not used in procu2 and ai-bolit
     *
     * @param $source
     * @return string
     */
    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_GOTO:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:
                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    /**
     * Replace create_function(...) with function(){}
     *
     * @param $str
     * @return string
     */
    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        $str = stripcslashes($str);
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] === '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } elseif ($str[$i] === ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    /**
     * Calculate functions and simple mathematical expressions in code.
     * This function is applicable for simple expressions, if they are complex, then it may produce an incorrect result, in this case use MathCalc.
     *
     * @param $expr
     * @return string
     */
    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        $expr = str_replace([' ', "\r", "\n", "\t"], '', $expr);
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]((int)$expr_arr[2]);
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x") !== false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                } elseif ($expr_arg[0] === '0' && (strlen($expr_arg) > 1) && (strpos($expr_arg, '.') === false)) {
                    $expr = str_replace($expr_arg, octdec($expr_arg), $expr);
                    $expr_arg = octdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = (float)$expr_arr[1][$pos] + (float)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    /**
     * Get code inside eval()
     *
     * @param $string
     * @return string
     */
    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    /**
     * Method for unwrapping goto constructs.
     *
     * @param string $content
     * @return string
     */
    public static function unwrapGoto(&$content): string
    {
        $processed = [];
        if (!preg_match('~\$[^\[\(\)\]=\+\-]{1,20}~msi', $content)) {
            return $content;
        }
        $label_num = 0;
        $label_name = 'tmp_spec_label';

        $replaceVars = [];

        $orig = $content;

        $content = preg_replace_callback('~\bgoto ([^\w;]+);~msi', function ($m) use (&$replaceVars, &$label_num, $label_name) {
            $label_num++;
            $newName = $label_name . $label_num;
            $replaceVars[] = [$m[1], $newName];
            return 'goto ' . $newName . '; ';
        }, $content);

        if (!empty($replaceVars)) {
            foreach ($replaceVars as $replaceVar) {
                $content = str_replace($replaceVar[0], $replaceVar[1], $content);
            }
        }

        $content = preg_replace_callback('~\b(if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*)(goto\s*(?:\w+);)~msi', function ($m) {
            return $m[1] . ' { ' . $m[3] . ' } ';
        }, $content);

        preg_match_all('~\bgoto\s?(\w+);~msi', $content, $gotoMatches, PREG_SET_ORDER);
        $gotoCount = count($gotoMatches);
        if ($gotoCount === 0 || $gotoCount > self::GOTO_MAX_HOPS) {
            return $content;
        }

        $label_num = 0;
        $label_name = 'tmp_label';

        $res      = '';
        $hops     = self::GOTO_MAX_HOPS;
        if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $content, $m)) {
            $res .= trim($m[1]) . PHP_EOL;
        }

        if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $content, $m, PREG_OFFSET_CAPTURE)) {
            $orig = substr($content, 0, $m[1][1]);
            $content = str_replace('<?php ' . $orig, '', $content);
        }

        $content = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function ($m) use (&$label_num, $label_name) {
            $label_num++;
            return $label_name . $label_num . ': ' . $m[0];
        }, $content);

        //try to match all if's conditions it can be if or loop
        preg_match_all('~\b(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~msi', $content, $conds, PREG_SET_ORDER);
        foreach ($conds as $cond) {
            preg_match('~\b\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi', $content, $while);
            preg_match('~\b' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi', $content, $do);
            preg_match('~\b(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi', $content, $m);
            preg_match('~\b(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi', $content, $ifelse);
            preg_match('~\b(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi', $content, $m);
            preg_match('~\b(\w+):[^:;]+[:;]\s*goto\s*(' . $m[1] . ');~msi', $content, $m);
            preg_match('~\b(\w+):\s*' . $ifelse[2] . ':\s*goto\s*(\w+);~msi', $content, $m);
            if (!empty($m) && ($m[2] === $cond[1])) { // if goto in last match point to this if statement - we have a loop, otherwise - if-else
                $ifelse = [];
            }
            if (preg_match('~\b\w+:\s*goto\s*' . $while[1] . ';\s*goto\s*\w+;~msi', $content) === 0) {
                $while = [];
            }

            if (empty($do) && empty($ifelse)) { //reverse conditions except do while & if else
                if ($cond[2][1] === '!') {
                    $cond[2] = substr_replace($cond[2], '', 1, 1);
                } else {
                    $cond[2] = '(!' . $cond[2] . ')';
                }
            }

            if (!empty($ifelse)) {
                $content = str_replace(
                    $cond[0],
                    $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';',
                    $content
                );
                preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $content, $m2);
                $content = str_replace(
                    $m2[0],
                    $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';',
                    $content
                );
            } elseif (!empty($do)) {
                preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $content, $match);
                $tmp = $cond[0];
                $content = str_replace(
                    $match[0],
                    $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ',
                    $content
                );
                $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';';
                $content = str_replace($tmp, $cond[0], $content);
            } else {
                if (!empty($while)) { //loop change if to while, reverse condition, exchange labels; in last goto $tmp_labelN
                    preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $content, $match);
                    $content = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $content);
                    $content = str_replace(
                        $cond[0],
                        $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';',
                        $content
                    );
                } else { //just if - need to reverse condition and exchange labels; in last need goto to $tmp_labelN
                    $tmp = $cond[0];
                    $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';';
                    $content = str_replace($tmp, $cond[0], $content);
                    preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $content, $match);
                    $content = str_replace(
                        $match[0],
                        $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3],
                        $content
                    );
                }
            }
        }

        $nextGotoPos = 0;
        while (
            $nextGotoPos !== false
            && $hops-- > 0
            && preg_match('~goto\s(\w+);~msi', substr($content, $nextGotoPos), $gotoNameMatch, PREG_OFFSET_CAPTURE)
        ) {
            $gotoNameStr    = $gotoNameMatch[1][0] . ':';
            $gotoNameStrLen = strlen($gotoNameStr);
            $gotoPos        = strpos($content, $gotoNameStr);
            $nextGotoPos    = strpos($content, 'goto ', $gotoPos);
            $cutUntilPos    = ($nextGotoPos - $gotoPos) - $gotoNameStrLen;
            if ($gotoPos === false) {
                return $orig;
            }
            if (in_array($gotoNameStr, $processed)) {
                $nextGotoPos    = strpos($content, 'goto ', strpos($content, $gotoNameMatch[0][0]) + 1);
                continue;
            }
            $processed[] = $gotoNameStr;

            if ($nextGotoPos) {
                $substr = substr($content, $gotoPos + $gotoNameStrLen, $cutUntilPos);
            } else {
                $substr = substr($content, $gotoPos + $gotoNameStrLen);
            }

            $piece = trim($substr);
            $piece === '' ?: $res .= $piece . ' ';
        }
        $res = preg_replace('~\w{1,20}:~msi', '', $res);
        $res = stripcslashes($res);
        if (strpos($res, 'hex2bin("') !== false) {
            $res = preg_replace_callback('~hex2bin\((?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . hex2bin($m[1]) . '\'';
            }, $res);
        }
        if (strpos($res, 'pack("H') !== false) {
            $res = preg_replace_callback('~pack\("([^"]+)",\s*(?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . pack($m[1], $m[2]) . '\'';
            }, $res);
        }
        return $res;
    }

    /**
     * Get text inside quotes (' or ")
     *
     * @param $string
     * @return string
     */
    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        if (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        return '';
    }

    /**
     * Get the value in quotes, the parity of the quotes is not checked.
     *
     * @param $string
     * @return array
     */
    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    /**
     * Apply some formatting rules to the code
     *
     * @param $string
     * @return string
     */
    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    /**
     * Parse array values of string and return array
     *
     * @param $string
     * @return array
     */
    public static function prepareArray($string)
    {
        $string = rtrim($string, ',');
        $array_string = Helpers::normalize($string);
        $list_str = explode(',', $array_string);
        $result = [];
        foreach ($list_str as $element) {
            $key = null;
            $value = $element;
            if (strpos($element, '=>') !== false) {
                list($key, $value) = explode('=>', $element);
            }
            $key = is_null($key) ? $key : trim($key, '\'"');
            $value = is_null($value) ? $value : trim($value, '\'"');

            if (is_null($key)) {
                $result[] = $value;
            } else {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    /**
     * Detect text encoding
     *
     * @param $text
     * @return false|string
     */
    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    /**
     * Function safety check
     *
     * @param $func Function name
     * @return bool
     */
    public static function isSafeFunc($func)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzdecode', 'gzuncompress', 'strrev', 'strlen',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes', 'chr',
            'htmlspecialchars_decode', 'convert_uudecode','pack', 'ord',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin',
            'trim', 'ltrim', 'rtrim', 'helpers::unserialize', 'utf8_encode',
        ];

        return in_array(strtolower($func), $safeFuncs);
    }

    /**
     * Convert the function to a safe one and return a boolean result was it possible to do it
     *
     * @param $func
     * @return bool
     */
    public static function convertToSafeFunc(&$func)
    {
        $replacedFuncs = [
            'unserialize' => 'Helpers::unserialize',
        ];

        $lowerFunc = strtolower($func);

        if (isset($replacedFuncs[$lowerFunc])) {
            $func = $replacedFuncs[$lowerFunc];
        }

        return self::isSafeFunc($func);
    }

    /**
     * Calculates a simple mathematical construct
     *
     * @param $task
     * @return string
     */
    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                list($subSearch, $number_1, $operator, $number_2) = $subMatch;
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    /**
     * From the content located in the input variable $content, get the values of the variables that can be calculated using the dictionary ($dictionary).
     * For example:
     * $dictionary: 'adnmpytr%uiqchsw_6jfoxkebzgl4v'
     * $content: $L1=$L1{8}.$L1{12}
     * return: ['$L1' => '%c']
     *
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content): array
    {
        $vars = [];
        preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all(
                '~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i],
                $varMatches
            );
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }
        return $vars;
    }

    /**
     * From the content located in the input variable $content, calculate the variable values of which are concatenated from the variables of the dictionaries located in $vars.
     * Dictionary variables must already be in $vars when the function is run.
     *
     * @param array  $vars
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionaryDynamically(array &$vars = [], string $content = ''): array
    {
        preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'\])?(\.)?\s?\.?=\s?((?:\$(?:GLOBALS\[\')?\w+(?:\'\])?[{\[]?\d*[}\]]?\s?\.?\s?)+);~msi', $content, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'])?[{\[]?(\d+)?[}\]]?~msi', $varsMatch[3], $subVarsMatches, PREG_SET_ORDER);
            $concat = '';
            $varsMatch[1] = str_replace('GLOBALS[\'', '', $varsMatch[1]);
            foreach ($subVarsMatches as $subVarsMatch) {
                $subVarsMatch[1] = str_replace('GLOBALS[\'', '', $subVarsMatch[1]);
                if (isset($subVarsMatch[2])) {
                    $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? '';
                } elseif ($varsMatch[1] !== $subVarsMatch[1]) {
                    $concat .= $vars[$subVarsMatch[1]];
                }
            }
            if (isset($vars[$varsMatch[1]])) {
                $vars[$varsMatch[1]] .= $concat;
            } else {
                $vars[$varsMatch[1]] = $concat;
            }
        }
        return $vars;
    }

    /**
     * Concatenate content of variables.
     * Examples: CheckDeobfuscationHelpersTest::testConcatVariableValues
     *
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str): string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars);
        $strVar = '';
        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }
        return $strVar;
    }

    /**
     * Concatenate simple strings inside which there may be chunks of PHP code
     * Examples: CheckDeobfuscationHelpersTest::testConcatStr
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str): string
    {
        preg_match_all('~(\.?)\s?[\'"(]([\w=\+/%&();]+)[)\'"]\s?~msi', $str, $concatStrings);
        $strVar = '';
        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }
        return $strVar;
    }

    /**
     * Concats simple strings without variable in content globally
     * Examples: CheckDeobfuscationHelpersTest::concatStringsInContent()
     *
     * @param string $str
     * @return string
     */
    public static function concatStringsInContent($str): string
    {
        $strVar = preg_replace_callback('~(?:[\'"(][\w=();]*[)\'"]\s?\.?\s?){2,}~msi', static function ($m) {
            return '\'' . self::concatStr($m[0]) . '\'';
        }, $str);
        return $strVar;
    }

    /**
     * Replace the elements of the dictionary array with its values.
     * Examples: CheckDeobfuscationHelpersTest::testReplaceVarsFromDictionary()
     *
     * @param string $dictionaryVar
     * @param array $dictionaryValue
     * @param string $str
     * @param bool $quote
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str, $quote = true): string
    {
        $result = $str;
        $result = preg_replace_callback(
            '~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"(]?([\da-fx]+)[\'")]?[\]}]\s?(\.)?\s?)~msi',
            function ($match) use ($dictionaryValue, $dictionaryVar, $quote) {
                if (substr($match[2], 0, 2) === '0x') {
                    $match[2] = hexdec($match[2]);
                }
                if ($match[1] !== $dictionaryVar || !isset($dictionaryValue[(int)$match[2]])) {
                    return $match[0];
                }
                $lastChar = $match[3] ?? '';
                $value = $dictionaryValue[(int)$match[2]];
                $value = str_replace(['\'', '.'], ['@@quote@@', '@@dot@@'], $value);
                $value = $quote ? '\'' . $value . '\'' : $value;
                return $value . $lastChar;
            },
            $result
        );
        $result = str_replace('\'.\'', '', $result);
        $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', '.'], $result);
        return $result;
    }

    /**
     * @param string $arrayName
     * @param array  $array
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string
    {
        $result = preg_replace_callback(
            '~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi',
            function ($match) use ($array, $arrayName) {
                if ($match[1] !== $arrayName) {
                    return $match[0];
                }
                return $array[$match[2]] ?? $match[0];
            },
            $str
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     * @return array
     */
    public static function collectVars(&$str, $trimQuote = '"', &$vars = [], $remove = false): array
    {
        if (!is_string($str)) {
            return $vars;
        }
        if (is_string($trimQuote)) {
            $tmp = $trimQuote;
            $trimQuote = [];
            $trimQuote[] = $tmp;
        }

        preg_match_all('~(\$(?:GLOBALS\[[\'"])?\w+)(?:[\'"]\])?\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $varName = $match;
            $varName = str_replace(['GLOBALS[\'', 'GLOBALS["'], '', $varName);
            $varValue = $matches[3][$index];
            foreach ($trimQuote as $quote) {
                $varValue = str_replace("$quote.$quote", '', $varValue);
                $varValue = trim($varValue, $quote);
            }
            $varValue = stripcslashes($varValue);
            if ($matches[2][$index] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }
        }
        if ($remove) {
            $str = str_replace($matches[0], '', $str);
        }

        return $vars;
    }

    /**
     * Collects concated variable vars or str from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     */
    public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array
    {
        // @phpstan-ignore-next-line
        if (!isset($vars)) {
            $vars = [];
        }
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $varName = $match[1];
            $varValue = '';

            preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER);
            foreach ($varsMatch as $varMatch) {
                if ($varMatch[1] !== '') {
                    $varValue .= $varMatch[1];
                } else {
                    $varValue .= $vars[$varMatch[2]] ?? '';
                }

                $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue);
                $varValue = stripcslashes(trim($varValue, $trimQuote));
            }

            if ($match[2] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }

            if ($remove) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"'): string
    {
        preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array
    {
        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=\*]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"])?(?:,\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $func = $match[2];
            $param1 = $match[3];
            $param2 = $match[4];
            $param3 = $match[5];

            if (self::convertToSafeFunc($func)) {
                if ($func === 'str_replace') {
                    $ret = @self::executeWrapper($func, [$param1, $param2, $param3]);
                } elseif (in_array($func, ['trim', 'ltrim', 'rtrim', 'pack'])) {
                    $ret = @self::executeWrapper($func, [$param1, $param2]);
                } else {
                    $ret = @self::executeWrapper($func, [$param1]);
                }
            }
            $vars[$match[1]] = self::convertToSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret);

            if ($delete) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects chr wrapped vars (concated or not) with one arg from str
     * ex. var1 = chr(123+323); var2 = chr(122+5432); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectChrVars(string $str, &$vars = []): array
    {
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\s?\(\d+[-+*//\s]+\d+\)[\s.]*)+);~msi',
            $str,
            $chrVars,
            PREG_SET_ORDER
        );

        foreach ($chrVars as $varStr) {
            $func = MathCalc::calcRawString($varStr[2]);
            preg_match_all('~\d+~msi', $func, $nums, PREG_SET_ORDER);
            $func = '';
            foreach ($nums as $num) {
                $func .= chr($num[0]);
            }
            $vars[$varStr[1]] = $func;
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false): string
    {
        $result = $str;

        uksort($vars, static function ($a, $b) {
            return strlen($b) <=> strlen($a);
        });
        foreach ($vars as $name => $value) {
            $sub_name = substr($name, 1);
            $result = preg_replace_callback(
                '~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi',
                function ($m) use ($value, $sub_name, $toStr) {
                    if ($m[2] !== $sub_name) {
                        return $m[0];
                    }
                    if ($toStr) {
                        return $m[1] . "'$value'";
                    }

                    return $m[1] . $value;
                },
                $result
            );

            if (!is_string($value)) {
                continue;
            }
            $result = str_replace(
                ['{' . $name . '}', $name . '('],
                [$value, trim($value, '\'"') . '('],
                $result
            );

            if (!$isFunc && !$toStr) {
                $result = str_replace($name, $value, $result);
            } elseif ($toStr) {
                $result = str_replace($name, "'$value'", $result);
            }
        }

        return $result;
    }

    /**
     * Removes duplicated string variables after replacing
     *
     * @param string $str
     *
     * @return string
     */
    public static function removeDuplicatedStrVars($str): string
    {
        return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi', '', $str);
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        array_walk($chars, static function (&$x) {
            $x = "'$x'";
        });
        $parts = explode(';', $str);
        foreach ($parts as &$part) {
            $vals = explode('=', $part);
            $part = str_replace($vals[1], strtr($vals[1], $chars), $part);
        }
        $str = implode(';', $parts);
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    /**
     * Expand base64decode() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceBase64Decode($str, $quote = '\'')
    {
        $hangs = 10;
        while (preg_match(self::REGEXP_BASE64_DECODE, $str) && $hangs--) {
            $str = preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) {
                if (substr($m[1], 0, 2) === '\x') {
                    $m[1] = stripcslashes($m[1]);
                }
                return $quote . base64_decode($m[1]) . $quote;
            }, $str);
        }
        return $str;
    }

    /**
     * Expand hex2bin() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceHex2Bin($str, $quote = '\'')
    {
        return preg_replace_callback('~hex2bin\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~msi', static function ($m) use ($quote) {
            return $quote . hex2bin($m[1]) . $quote;
        }, $str);
    }

    /**
     * Calc min(), max() and round().
     * This function can be used with simple constructions, if they are complex, then it is better to use a separate MathCalc class.
     *
     * @param string $string
     * @param int $max_iterations
     * @return string
     */
    public static function replaceMinMaxRound($string, $max_iterations = 15)
    {
        $i = 0;
        $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_multi_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi';
        while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_single_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_brackets, ['Helpers','calc'], $string);
            $i++;
        }

        return $string;
    }

    /**
     * Calc XOR with key
     *
     * @param string $encrypted
     * @param string $key
     * @return string
     */
    public static function xorWithKey($encrypted, $key)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax;) {
            for ($j = 0; $j < strlen($key) && $i < strlen($encrypted); $j++, $i++) {
                $res .= $encrypted[$i] ^ $key[$j];
            }
        }
        return $res;
    }

    /**
     * Calc XOR when char xored with previous char
     *
     * @param string $encrypted
     * @return string
     */
    public static function xorWithPrevChar($encrypted)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; $i++) {
            $num = $encrypted[$i];
            $res .= $encrypted[++$i] ^ $num;
        }
        return $res;
    }

    /**
     * Similar to the native PHP function unserialize(), but it is safe as it only supports simple data types.
     *
     * @param string $string
     * @return array|bool|float|int|string|null
     */
    public static function unserialize(&$string)
    {
        $type = substr($string, 0, 2);
        $string = substr($string, 2);
        switch ($type) {
            case 'N;':
                return null;
            case 'b:':
                list($ret, $string) = explode(';', $string, 2);
                return (bool)(int)$ret;
            case 'i:':
                list($ret, $string) = explode(';', $string, 2);
                return (int)$ret;
            case 'd:':
                list($ret, $string) = explode(';', $string, 2);
                return (float)$ret;
            case 's:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) {
                    return '';
                }
                $ret = substr($string, 1, $length);
                $string = substr($string, $length + 3);
                return $ret;
            case 'a:':
                $ret = [];
                list($length, $string) = explode(':', $string, 2);
                if ($string[0] !== '{') {
                    return '';
                }
                $length = (int) $length;
                $string = substr($string, 1);
                for ($i = 0; $i < $length; $i++) {
                    $ret[self::unserialize($string)] = self::unserialize($string);
                }
                if ($string === '') {
                    return $ret;
                }
                $end = substr($string, 0, 2);
                if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') {
                    return '';
                }
                $string = substr($string, 2);
                return $ret;
            case 'O:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                $string = substr($string, $length + 3);
                list($length, $string) = explode(':', $string, 2);
                $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string);
                return '';
            default:
                return '';
        }
    }

    /**
     * Post processing after deobfuscation
     *
     * @param string $deobfuscated
     * @return string
     */
    public static function postProcess($deobfuscated): string
    {
        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($matches) use ($match) {
                if ($matches[1] !== $match[1]) {
                    return $matches[0];
                }
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        if (strpos($deobfuscated, '${$') !== false) {
            preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $matches);
            preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
            $replace_to = [];
            foreach ($matches[1] as $k => $match) {
                $index = array_search($match, $matches2[1]);
                if ($index !== false) {
                    $replace_to[] = '$' . $matches2[2][$index];
                } else {
                    unset($matches[0][$k]);
                }
            }
            if (!empty($replace_to)) {
                $deobfuscated = str_replace($matches[0], $replace_to, $deobfuscated);
            }
        }

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }
        return $deobfuscated;
    }

    /*************************************************************************************************************/
    /*                                Helper functions for individual obfuscators                                */
    /*************************************************************************************************************/

    /**
     * @param $a
     * @param $b
     *
     * @return string
     */
    public static function decodefuncDictVars($a, $b)
    {
        $c = preg_split("//", $a, -1, PREG_SPLIT_NO_EMPTY);
        foreach ($c as $d => $e) {
            $c[$d] = chr(ord($e) + $b);
        }
        $res = implode("", $c);

        return $res;
    }

    /**
     * @param $string
     * @param $amount
     *
     * @return string
     */
    public static function rotencode($string, $amount)
    {
        $key = substr($string, 0, 1);
        if (strlen($string) == 1) {
            return chr(ord($key) + $amount);
        } else {
            return chr(ord($key) + $amount) . self::rotencode(
                substr($string, 1, strlen($string) - 1),
                $amount
            );
        }
    }

    /**
     * @param string $data
     * @param string $key
     *
     * @return string
     */
    public static function decodeEvalFileContentBySize(string $data, string $key): string
    {
        $res = '';
        $key = md5($key) . md5($key . $key);
        $key_len = strlen($key);
        $data_len = strlen($data);
        for ($i = 0; $i < $data_len; $i++) {
            $res .= chr(ord($data[$i]) ^ ord($key[$i % $key_len]));
        }

        return $res;
    }

    /**
     * @param string $key
     * @param string $data
     *
     * @return string
     */
    public static function decodeFuncVars(string $key, string $data): string
    {
        $hakfku = $data;
        $keyLen = strlen($key);
        $dataLen = strlen($hakfku);
        $res = "";
        for ($i = 0; $i < $dataLen;) {
            for ($j = 0; ($j < $keyLen && $i < $dataLen); $j++, $i++) {
                $res .= $hakfku[$i] ^ $key[$j];
            }
        }

        return $res;
    }

    public static function dictionarySampleDecode($string)
    {
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, -7);
        $str3 = substr($string, -5);
        return gzinflate(base64_decode($str1 . $str2 . $str3));
    }

    public static function dictionarySampleDecode2($string)
    {
        $last = substr($string, -2);
        $arr = str_split($string);
        $result = '';
        for ($i = 0; $i < count($arr) - 2; $i = $i + 2) {
            $result .= $arr[$i + 1] . $arr[$i];
        }
        $result .= $last;
        return $result;
    }

    public static function codelock_dec($codelock_v)
    {
        switch ($codelock_v) {
            case "A":
                $dv = 0;
                break;
            case "B":
                $dv = 1;
                break;
            case "C":
                $dv = 2;
                break;
            case "D":
                $dv = 3;
                break;
            case "E":
                $dv = 4;
                break;
            case "F":
                $dv = 5;
                break;
            case "G":
                $dv = 6;
                break;
            case "H":
                $dv = 7;
                break;
            case "I":
                $dv = 8;
                break;
            case "J":
                $dv = 9;
                break;
            case "K":
                $dv = 10;
                break;
            case "L":
                $dv = 11;
                break;
            case "M":
                $dv = 12;
                break;
            case "N":
                $dv = 13;
                break;
            case "O":
                $dv = 14;
                break;
            case "P":
                $dv = 15;
                break;
            case "Q":
                $dv = 16;
                break;
            case "R":
                $dv = 17;
                break;
            case "S":
                $dv = 18;
                break;
            case "T":
                $dv = 19;
                break;
            case "U":
                $dv = 20;
                break;
            case "V":
                $dv = 21;
                break;
            case "W":
                $dv = 22;
                break;
            case "X":
                $dv = 23;
                break;
            case "Y":
                $dv = 24;
                break;
            case "Z":
                $dv = 25;
                break;
            case "a":
                $dv = 26;
                break;
            case "b":
                $dv = 27;
                break;
            case "c":
                $dv = 28;
                break;
            case "d":
                $dv = 29;
                break;
            case "e":
                $dv = 30;
                break;
            case "f":
                $dv = 31;
                break;
            case "g":
                $dv = 32;
                break;
            case "h":
                $dv = 33;
                break;
            case "i":
                $dv = 34;
                break;
            case "j":
                $dv = 35;
                break;
            case "k":
                $dv = 36;
                break;
            case "l":
                $dv = 37;
                break;
            case "m":
                $dv = 38;
                break;
            case "n":
                $dv = 39;
                break;
            case "o":
                $dv = 40;
                break;
            case "p":
                $dv = 41;
                break;
            case "q":
                $dv = 42;
                break;
            case "r":
                $dv = 43;
                break;
            case "s":
                $dv = 44;
                break;
            case "t":
                $dv = 45;
                break;
            case "u":
                $dv = 46;
                break;
            case "v":
                $dv = 47;
                break;
            case "w":
                $dv = 48;
                break;
            case "x":
                $dv = 49;
                break;
            case "y":
                $dv = 50;
                break;
            case "z":
                $dv = 51;
                break;
            case "0":
                $dv = 52;
                break;
            case "1":
                $dv = 53;
                break;
            case "2":
                $dv = 54;
                break;
            case "3":
                $dv = 55;
                break;
            case "4":
                $dv = 56;
                break;
            case "5":
                $dv = 57;
                break;
            case "6":
                $dv = 58;
                break;
            case "7":
                $dv = 59;
                break;
            case "8":
                $dv = 60;
                break;
            case "9":
                $dv = 61;
                break;
            case "+":
                $dv = 62;
                break;
            case "/":
                $dv = 63;
                break;
            case "=":
                $dv = 64;
                break;
            default:
                $dv = 0;
                break;
        }
        return $dv;
    }

    public static function codelock_run($ciph, $key)
    {
        $m = 0;
        $abc = "";
        for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) {
            $c = substr($ciph, $i, 1);
            $dv = Helpers::codelock_dec($c);
            $dv = ($dv - $m) / 4;
            $fb = decbin($dv);
            while (strlen($fb) < 4) {
                $fb = "0" . $fb;
            }
            $abc = $abc . $fb;
            $m++;
            if ($m > 3) {
                $m = 0;
            }
        }
        $kl = 0;
        $pd = "";
        for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) {
            $c = substr($abc, $j, 8);
            $k = substr($key, $kl, 1);
            $dc = bindec($c);
            $dc = $dc - strlen($key);
            $c = chr($dc);
            $kl++;
            if ($kl >= strlen($key)) {
                $kl = 0;
            }
            $dc = ord($c) ^ ord($k);
            $p = chr($dc);
            $pd = $pd . $p;
        }
        return $pd;
    }

    public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key)
    {
        if ($codelock_calc_key !== "") {
            $codelock_calc_key = base64_encode($codelock_calc_key);
            $codelock_k1 = substr($codelock_calc_key, 0, 1);
            $codelock_k2 = substr($codelock_calc_key, 1, 1);
            $codelock_k3 = substr($codelock_calc_key, 2, 1);
            $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code);
            $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code);
            $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code);
        }
        $codelock_decint_code = base64_decode($codelock_decint_code);
        return $codelock_decint_code;
    }

    public static function decodeClassDecryptedWithKey(string $data, int $num, string $key): string
    {
        $CTL = function ($start, &$data, &$data_long) {
            $n = strlen($data);
            $tmp = unpack('N*', $data);
            $j = $start;
            foreach ($tmp as $value) {
                $data_long[$j++] = $value;
            }
            return $j;
        };

        $LtoC = function ($l) {
            return pack('N', $l);
        };

        $add = function ($i1, $i2) {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }
            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }
            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rsLT = function ($integer, $n) {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }
            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }
            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $delg = function ($y, $z, &$w, &$k, $num) use ($add, $rsLT) {
            $sum = 0xC6EF3720;
            $klhys = 0x9E3779B9;
            $n = $num;
            while ($n-- > 0) {
                $z = $add($z, -($add($y << 4 ^ $rsLT($y, 5), $y) ^ $add($sum, $k[$rsLT($sum, 11) & 3])));
                $sum = $add($sum, -$klhys);
                $y = $add($y, -($add($z << 4 ^ $rsLT($z, 5), $z) ^ $add($sum, $k[$sum & 3])));
            }
            $w[0] = $y;
            $w[1] = $z;
        };

        $resize = function (&$data, $size, $nonull = false) {
            $n = strlen($data);
            $nmod = $n % $size;
            if (0 == $nmod) {
                $nmod = $size;
            }
            if ($nmod > 0) {
                if ($nonull) {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = $data[$i % $n];
                    }
                } else {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = chr(0);
                    }
                }
            }
            return $n;
        };

        $ncdL = $CTL(0, $data, $enc_data_long);
        $resize($key, 16, true);
        $n_key_long = $CTL(0, $key, $key_long);
        $data = '';
        $w = array(0, 0);
        $j = 0;
        $len = 0;
        $k = array(0, 0, 0, 0);
        $pos = 0;
        for ($i = 0; $i < $ncdL; $i += 2) {
            if ($j + 4 <= $n_key_long) {
                $k[0] = $key_long[$j];
                $k[1] = $key_long[$j + 1];
                $k[2] = $key_long[$j + 2];
                $k[3] = $key_long[$j + 3];
            } else {
                $k[0] = $key_long[$j % $n_key_long];
                $k[1] = $key_long[($j + 1) % $n_key_long];
                $k[2] = $key_long[($j + 2) % $n_key_long];
                $k[3] = $key_long[($j + 3) % $n_key_long];
            }
            $j = ($j + 4) % $n_key_long;
            $delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $num);
            if (0 == $i) {
                $len = $w[0];
                if (4 <= $len) {
                    $data .= $LtoC($w[1]);
                } else {
                    $data .= substr($LtoC($w[1]), 0, $len % 4);
                }
            } else {
                $pos = ($i - 1) * 4;
                if ($pos + 4 <= $len) {
                    $data .= $LtoC($w[0]);
                    if ($pos + 8 <= $len) {
                        $data .= $LtoC($w[1]);
                    } elseif ($pos + 4 < $len) {
                        $data .= substr($LtoC($w[1]), 0, $len % 4);
                    }
                } else {
                    $data .= substr($LtoC($w[0]), 0, $len % 4);
                }
            }
        }
        return $data;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i + 1]) && ($str[$i] == '\\' && ($str[$i + 1] == '\\' || $str[$i + 1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function decodeFileGetContentsWithFunc($data, $key)
    {
        $out_data = "";

        for ($i = 0; $i < strlen($data);) {
            for ($j = 0; $j < strlen($key) && $i < strlen($data); $j++, $i++) {
                $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
            }
        }

        return $out_data;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0]; /** @phpstan-ignore-line */
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0]; /** @phpstan-ignore-line */
            }
            $Co = $iU;
        }
        return $UH;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for (
                        $T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]
                    ) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return self::convertToSafeFunc($cEerbvwKPI) ? @self::executeWrapper($cEerbvwKPI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($JWTDeUKphI) ? @self::executeWrapper($JWTDeUKphI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return self::convertToSafeFunc($rezmMBMev) ? @self::executeWrapper($rezmMBMev, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return self::convertToSafeFunc($WbbQXOQbH) ? @self::executeWrapper($WbbQXOQbH, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($jPnPLPZcMHgH) ? @self::executeWrapper($jPnPLPZcMHgH, [$sBtUiFZaz]) : '';
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll += ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll += (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0; $llll < $ll; $llll++) {
                        $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    }
                    $lllllll += $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll += ord($l[$lllll++]) + 16;
                    for ($llll = 0; $llll < $ll; $llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll += $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll = "?" . chr(62);
        $llllllllll = "";
        for (; $lllll < $lllllll;) {
            $llllllllll .= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll .= $llllllllll . chr(60) . "?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i = 0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function someDecoder5($str, $key, $mn1, $mn2, $mn3)
    {
        $c = array(496, 140, 32);
        $res = null;
        if ($key == $mn3) {
            $res = substr($str, $c[0] + $c[1], $c[2]);
        } elseif ($key == $mn1) {
            $res = substr($str, $c[0], $c[1]);
        } elseif ($key = $mn2) {
            $res = trim(substr($str, $c[0] + $c[1] + $c[2]));
        }
        return $res;
    }

    public static function someDecoder6($a, $b)
    {
        if ($b == md5($a)) {
            return base64_decode($a);
        } else {
            echo("The file was modified");
        }
    }

    /**
     * Replace chr() with its value.
     * Examples: replace chr(10), chr(10+20), chr(20-10)
     *
     * @param string $str
     *
     * @return string
     */
    public static function replaceChrInStr($str)
    {
        preg_match_all('~chr\((\d+([-+*\s]+\d+)|\d+)\)~msi', $str, $chrs, PREG_SET_ORDER);
        foreach ($chrs as $chr) {
            $func = MathCalc::calcRawString($chr[0]);
            preg_match('~\d+~msi', $func, $num);
            if ($num) {
                $str = str_replace($chr[0], '"' . chr($num[0]) . '"', $str);
            }
        }

        return $str;
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') {
            return ~$arg1;
        }
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3); $i++) {
            $res .= chr(substr($cipher, $i * 3, 3));
        }
        return $res;
    }

    public static function gegelShellDecode($str, $pieces)
    {
        $decoded = '';
        $tmp = explode("\n", $str);
        for ($i = 0; $i < sizeof($tmp); $i++) {
            $decoded .= trim($tmp[$i]);
        }
        if (!$pieces) {
            return gzinflate(base64_decode($decoded));
        }
        $res = '';
        for ($i = 0; $i < sizeof($pieces); $i += 2) {
            if ($i % 4) {
                $res .= substr($decoded, $pieces[$i], $pieces[$i + 1]);
            } else {
                $res .= strrev(substr($decoded, $pieces[$i], $pieces[$i + 1]));
            }
        };
        $res = base64_decode($res);
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x === $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xxtea_decrypt($str, $key)
    {
        $str2long = function ($s, $w) {
            $v = unpack("V*", $s . str_repeat("\0", (4 - strlen($s) % 4) & 3));
            $v = array_values($v);
            if ($w) {
                $v[count($v)] = strlen($s);
            }
            return $v;
        };
        $long2str = function ($v, $w) {
            $len = count($v);
            $n = ($len - 1) << 2;
            if ($w) {
                $m = $v[$len - 1];
                if (($m < $n - 3) || ($m > $n)) {
                    return false;
                }
                $n = $m;
            }
            $s = array();
            for ($i = 0; $i < $len; $i++) {
                $s[$i] = pack("V", $v[$i]);
            }

            if ($w) {
                return substr(join('', $s), 0, $n);
            } else {
                return join('', $s);
            }
        };

        $int32 = function ($n) {
            while ($n >= 2147483648) {
                $n -= 4294967296;
            }
            while ($n <= -2147483649) {
                $n += 4294967296;
            }
            return (int)$n;
        };


        if ($str == "") {
            return "";
        }
        $str = base64_decode($str);
        $v = $str2long($str, false);
        $k = $str2long($key, false);
        if (count($k) < 4) {
            for ($i = count($k); $i < 4; $i++) {
                $k[$i] = 0;
            }
        }

        $n = count($v) - 1;

        $z = $v[$n];
        $y = $v[0];

        $delta = 0x9E3779B9;
        $q = floor(6 + 52 / ($n + 1));
        $sum = $int32($q * $delta);
        while ($sum != 0) {
            $e = $sum >> 2 & 3;
            for ($p = $n; $p > 0; $p--) {
                $z = $v[$p - 1];
                $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
                $y = $v[$p] = $int32($v[$p] - $mx);
            }
            $z = $v[$n];
            $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
            $y = $v[0] = $int32($v[0] - $mx);
            $sum = $int32($sum - $delta);
        }

        return $long2str($v, true);
    }

    public static function Xtea_decrypt($text, $key)
    {

        $add = function ($i1, $i2) {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }

            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }

            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rshift = function ($integer, $n) {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }

            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }

            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $block_decrypt = function ($y, $z, $key) use ($add, $rshift) {
            $delta = 0x9e3779b9;
            $sum = 0xC6EF3720;
            $n = 32;

            for ($i = 0; $i < 32; $i++) {
                $z = $add($z, -($add($y << 4 ^ $rshift($y, 5), $y)
                    ^ $add($sum, $key[$rshift($sum, 11) & 3])));
                $sum = $add($sum, -$delta);
                $y = $add($y, -($add($z << 4 ^ $rshift($z, 5), $z)
                    ^ $add($sum, $key[$sum & 3])));
            }
            return [$y, $z];
        };

        $str2long = function ($data) {
            $tmp = unpack('N*', $data);
            $data_long = [];
            $j = 0;

            foreach ($tmp as $value) {
                $data_long[$j++] = $value;
            }
            return $data_long;
        };

        $long2str = function ($l) {
            return pack('N', $l);
        };

        $_key = '';
        $cbc = 1;

        if (is_array($key)) {
            $_key = $key;
        } elseif (isset($key) && !empty($key)) {
            $_key = $str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = $str2long(base64_decode($text));

        if ($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = $block_decrypt($cipher[$i], $cipher[$i + 1], $_key);
            if ($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for ($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= $long2str($plain[$i][0]);
            $output .= $long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

        return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr): string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i === 2 && self::convertToSafeFunc($args[1]) && self::convertToSafeFunc($args[2])) {
                $args[3] = @self::executeWrapper($args[1], [@self::executeWrapper($args[2], [$args[3]])]);
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr): string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i === 1 && self::convertToSafeFunc($args[0]) && self::convertToSafeFunc($args[1])) {
                $args[2] = @self::executeWrapper($args[0], [@self::executeWrapper($args[1], [$args[2]])]);
            }
        }

        return $args[2];
    }

    public static function decodeACharCustom($encoded)
    {
        $result = '';
        $i = 0;
        $len = strlen($encoded);
        while ($i < $len) {
            if ($encoded[$i] === ' ') {
                $result .= ' ';
            } elseif ($encoded[$i] === '!') {
                $result .= chr((ord($encoded[$i + 1]) - ord('A')) * 16 + (ord($encoded[$i + 2]) - ord('a')));
                $i += 2;
            } else {
                $result .= chr(ord($encoded[$i]) + 1);
            }
            $i++;
        }
        return $result;
    }

    public static function joomlaInjectDecoder($params, $op, $delta)
    {
        $params = explode(',', $params);
        $params = array_reverse($params);
        for ($i = 1, $iMax = count($params); $i < $iMax; $i++) {
            if ($i !== 0) {
                $params[$i] = substr($params[$i], 1, -1);
            }
            for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) {
                $tmp = ord($params[$i][$j]);
                if ($op === '-') {
                    $tmp = $tmp - $delta;
                } elseif ($op === '+') {
                    $tmp = $tmp + $delta;
                }
                $params[$i][$j] = chr($tmp);
            }
            if ($i === 0) {
                break;
            }
            if (self::convertToSafeFunc($params[$i])) {
                $params[0] = @self::executeWrapper($params[$i], [$params[0]]);
            }
            if ($i === $iMax - 1) {
                $i = -1;
            }
        }
        return $params[0];
    }

    public static function deobfuscatorIO_string($string, $key)
    {
        $m = [];
        $n = 0;
        $p = '';
        $inc = 0;
        $string = base64_decode($string);
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if ($string[$i] === "\xC3") {
                $inc = 64;
                continue;
            } elseif ($string[$i] === "\xC2") {
                continue;
            }
            $p .= chr(ord($string[$i]) + $inc);
            $inc = 0;
        }
        $string = $p;
        $p = '';
        for ($i = 0; $i < 256; $i++) {
            $m[$i] = $i;
        }
        for ($i = 0; $i < 256; $i++) {
            $n = ($n + $m[$i] + ord($key[$i % strlen($key)])) % 256;
            $o = $m[$i];
            $m[$i] = $m[$n];
            $m[$n] = $o;
        }
        $r = 0;
        $n = 0;
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            $r = ($r + 1) % 256;
            $n = ($n + $m[$r]) % 256;
            $o = $m[$r];
            $m[$r] = $m[$n];
            $m[$n] = $o;
            $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]);
        }
        return $p;
    }

    public static function decodeEvalFuncBinary($input)
    {
        if (empty($input)) {
            return;
        }
        $keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $chr1 = $chr2 = $chr3 = "";
        $enc1 = $enc2 = $enc3 = $enc4 = "";
        $i = 0;
        $output = "";
        $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input);
        do {
            $enc1 = strpos($keyStr, substr($input, $i++, 1));
            $enc2 = strpos($keyStr, substr($input, $i++, 1));
            $enc3 = strpos($keyStr, substr($input, $i++, 1));
            $enc4 = strpos($keyStr, substr($input, $i++, 1));
            $chr1 = ($enc1 << 2) | ($enc2 >> 4);
            $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2);
            $chr3 = (($enc3 & 3) << 6) | $enc4;
            $output .= chr($chr1);
            if ($enc3 !== 64) {
                $output .= chr($chr2);
            }
            if ($enc4 !== 64) {
                $output .= chr($chr3);
            }
            $chr1 = $chr2 = $chr3 = "";
            $enc1 = $enc2 = $enc3 = $enc4 = "";
        } while ($i < strlen($input));

        return $output;
    }

    public static function jsPackerUnbaser($int, $radix)
    {
        if ($int < $radix) {
            $ret = '';
        } else {
            $ret = self::jsPackerUnbaser((int)($int / $radix), $radix);
        }

        if (($int = $int % $radix) > 35) {
            $ret .= chr($int + 29);
        } else {
            $ret .= base_convert((string)$int, 10, 36);
        }
        return $ret;
    }

    public static function jsObjectDecodeIndexToString($int)
    {
        $ret = base_convert((string)$int, 10, 36);
        $ret = preg_replace_callback('~[0-9]~', function ($m) {
            return chr((int)$m[0] + 65);
        }, $ret);
        return $ret;
    }

    public static function jsObjectStringDecoder($r, $t, $encoded)
    {
        $ret = '';
        $i = 1;
        for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) {
            $o = strpos($r, $encoded[$f]);
            if (in_array($encoded[$f], $t)) {
                $i = 0;
            }
            if ($o !== false) {
                $ret .= chr($i * strlen($r) + $o);
                $i = 1;
            }
        }
        return $ret;
    }

    public static function utfCharVarsFuncEvalVarDecoder($argOne, $argTwo = '')
    {
        $argOne = base64_decode($argOne);
        if (empty($argOne)) {
            return '';
        }
        if ($argTwo == '') {
            return ~$argOne;
        } else {
            //$temp   = $globalVar['¾”Ã‰Å”—˜']($argOne);//strlen
            //$argTwo = $globalVar['ÊƒÑÇ»µ½Èªº']($argTwo, $temp, $argTwo); //str_pad
            $temp   = strlen($argOne);//strlen
            $argTwo = str_pad($argTwo, $temp, $argTwo); //str_pad
            return $argOne ^ $argTwo;
        }
    }

    public static function utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, &$str, &$vars = []): array
    {
        $varsMatchesRegex = '~\\' . $globalVarName . '\[\'([^\']+)\'\]\s?=\s?' . $funcName . '\(\'([^\']+)\',\'([^\']*)\'\);~msi';
        preg_match_all($varsMatchesRegex, $str, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            $vars[$varsMatch[1]] = self::utfCharVarsFuncEvalVarDecoder($varsMatch[2], $varsMatch[3]);
            $str = str_replace($varsMatch[0], '', $str);
        }

        return $vars;
    }

    public static function utfCharVarsFuncEvalCodeDecoder(&$str, &$vars, $globalVarName, $funcName): string
    {
        $vars = Helpers::utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, $str, $vars);
        foreach ($vars as $name => $val) {
            $str = str_replace($globalVarName . '[\'' . $name . '\'](', $val . '(', $str);
        }

        return $str;
    }

    public static function varFuncStrDecoder(string $strData): string
    {
        $strLen = strlen(trim($strData));
        $result = '';
        for ($i = 0; $i < $strLen; $i += 2) {
            $result .= pack("C", hexdec(substr($strData, $i, 2)));
        }

        return $result;
    }

    public static function executeWrapper(string $func, array $params = [])
    {
        $res = '';
        try {
            $res = call_user_func_array($func, $params);
        } catch (Throwable $e) {
        }
        return $res;
    }

    public static function reverseByteCode($data, $opcodes, $xor)
    {
        $code = '';

        $decrypt_string = function ($data, &$data_offset, $xor) {
            $len = '' ;
            $result = '' ;
            $start = $data[$data_offset + 1];
            if (!$start) {
                $data_offset++;
            }
            while (is_numeric($data[++$data_offset])) {
                $len .= $data[$data_offset];
            }
            if ($len) {
                $len = (int)$len;
                for ($i = 0; $i < $len; $i++) {
                    $result .= $data[++$data_offset] ^ chr($xor);
                }
                if (!$start) {
                    $result *= 1;
                }
            }
            return [$len, $result];
        };

        $opcode_goto = function ($data, &$data_offset) {
            $new_offset = '' ;
            while (is_numeric($data[++$data_offset])) {
                $new_offset .= $data[$data_offset];
            }
            return $new_offset;
        };

        $offset = 0;
        $stack = [];
        $stack_offset = -1;
        $labels = [];
        $line = '';

        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            switch ($opcode) {
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[(int)$new_offset] = '';
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[($offset + (int)$new_offset)] = '';
                    break;
            }
            $offset++;
        }
        $offset = 0;
        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            if (isset($labels[$index])) {
                $code .= 'l_' . $index . ': ' . "\n";
            }
            switch ($opcode) {
                case $opcodes['DECRYPT']:
                    list($len, $string) = $decrypt_string($data, $offset, $xor);
                    $stack[++$stack_offset] = '\'' . addcslashes($string, '\'\\') . '\'';
                    break;
                case $opcodes['EVAL_REPLACE']:
                    $stack[$stack_offset] = str_replace(chr(076) . chr(074), $offset + 12, $stack[$stack_offset]);
                case $opcodes['EVAL']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $code .= $stack[$stack_offset] . "\n";
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $code .= 'goto l_' . (int)$new_offset . "\n";
                    break;
                case $opcodes['VAR']:
                    $stack[$stack_offset] = '$' . trim(stripcslashes($stack[$stack_offset]), '\'');
                    break;
                case $opcodes['ASSIGN']:
                    if (is_array($stack[$stack_offset - 1]) && empty($stack[$stack_offset - 1])) {
                        $stack[$stack_offset - 1] = '[]';
                    }
                    $line =  $stack[$stack_offset] . ' = ' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['END_STMT']:
                    if (!empty($line)) {
                        $code .= $line . ';' . "\n";
                    }
                    $stack = [];
                    $stack_offset = -1;
                    $line = '';
                    break;
                case $opcodes['ARRAY']:
                    $stack[++$stack_offset] = [];
                    break;
                case $opcodes['CALL_FUNC']:
                    $__argc = ord($data[++$offset]) - 48;
                    $cur_stack = $stack_offset;
                    $stack_offset = $stack_offset - $__argc;
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $func = $stack[$stack_offset];
                    $args = [];
                    for ($i = 1; $i <= $__argc; $i++) {
                        $args [] = &$stack[$stack_offset + $i];
                    }
                    $args_str = '';
                    for ($i = 1; $i <= $__argc; $i++) {
                        $colon = ($i == 1) ? '' : ',';
                        $args_str .= $colon . '$args[' . ($i - 1) . ']';
                    }
                    while ($cur_stack >= $stack_offset) {
                        unset($stack[$cur_stack--]);
                    }
                    $res = $func . '(' . implode(', ', $args) . ')';
                    $line = $res;
                    $stack[$stack_offset] = $res;
                    break;
                case $opcodes['INVERT']:
                    $stack[++$stack_offset] = '!' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['BOOL']:
                    $stack[++$stack_offset] = '(bool)@' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $line = 'if (!' . $stack[$stack_offset] . ') goto l_' . ($offset + (int)$new_offset);
                    $code .= $line . ';' . "\n";
                    $line = '';
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GET_CONST']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    if (strcasecmp($stack[$stack_offset], '__file__') == 0) {
                        $stack[$stack_offset] = '__FILE__';
                    } elseif (strcasecmp($stack[$stack_offset], '__dir__') == 0) {
                        $stack[$stack_offset] = '__DIR__';
                    } elseif (preg_match('/^__(class|trait)__$/i', $stack[$stack_offset])) {
                        $stack[$stack_offset] = '' ;
                    } else {
                        $stack[$stack_offset] = defined($stack[$stack_offset]) ? $stack[$stack_offset] : '\'' . $stack[$stack_offset] . '\'';
                    }
                    break;
                case $opcodes['APPEND']:
                    $stack[$stack_offset] = '(array)' . $stack[$stack_offset] . '[]';
                    break;
                case $opcodes['RETURN']:
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['RET']:
                    if ($stack_offset < 0) {
                        $stack[$stack_offset] = null;
                    }
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['MATH']:
                    $op = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $left = trim(stripcslashes($stack[$stack_offset - 2]), '\'');
                    $right = trim(stripcslashes($stack[$stack_offset - 1]), '\'');
                    $stack[$stack_offset] = $left . ' ' . $op . ' ' . $right;
                    break;
                case $opcodes['FETCH_INDEX']:
                    $index = $stack[$stack_offset];
                    unset($stack[$stack_offset--]);
                    $stack[$stack_offset] = $stack[$stack_offset] . '[' . $index . ']';
                    break;
            }
            $offset++;
        }
        return $code;
    }

    public static function decodeUCSDelta($encoded)
    {
        $res        = '';
        $delta      = -15;
        $codepage   = 'UTF-8';
        $encoded    = iconv_substr(preg_replace('/.*?SQUID(.*)/i', '$1', $encoded), 0, -7);
        $encoded    = preg_replace(['/\/x7b/s', '/\/x7d/s'], ['{', '}'], $encoded);

        if (empty($encoded)) {
            return false;
        }

        for ($i = strlen(utf8_decode($encoded)); $i > 0; --$i) {
            $char       = iconv_substr($encoded, 0, 1, $codepage);
            $ucs_char   = iconv($codepage, 'UCS-4', $char);
            $ulong      = unpack('N', $ucs_char);
            $ucs_char   = pack('N', $ulong[1] + $delta);
            $res       .= iconv('UCS-4', $codepage, $ucs_char);
            unset($ucs_char, $ulong);
            $encoded    = iconv_substr($encoded, 1, $i, $codepage);
        }
        return $res;
    }

    public static function decodeDictionaryCreateFuncs($result, $vars)
    {
        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', static function ($match) use ($vars) {
            $varName = '$' . $match[1];
            return $vars[$varName] ?? $varName;
        }, $result);

        preg_match('~(?|(\$\w+)=create_function\(\'(\$\w+)\',\'|function\s*(\w+)\((\$\w+)\)\s*\{\s*)\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);(?:\'\);|})~msi', $result, $decoderFunc);
        $result = str_replace($decoderFunc[0], '', $result);
        $decoderFunc = $decoderFunc[1];
        $result = Helpers::replaceCreateFunction($result);
        $result = preg_replace_callback('~(\$?\w+)\s*\(\'([^\']+)\'\)~msi', function ($m) use ($decoderFunc) {
            if ($m[1] !== $decoderFunc) {
                return $m[0];
            }
            return '\'' . Helpers::dictionarySampleDecode($m[2]) . '\'';
        }, $result);

        if (preg_match('~function\s*(\w+)\(\$\w+\)\s*\{\$\w+=substr\(\$\w+,strlen\(\$\w+\)\s*-2\);\$\w+=str_split\(\$\w+\);\$\w+=\'\';for\s*\(\$\w+=0;\$\w+<count\(\$\w+\)-2;\$\w+=\$\w+\+2\)\s*\{\$\w+\.=\$\w+\[\$\w+\+1\]\.\$\w+\[\$\w+\];\}\$\w+\.=\$\w+;return\s*\$\w+;\}~msi', $result, $decoderFunc2)) {
            $result = preg_replace_callback('~(\$\w+)\s*=\s*"([^"]+)";~msi', function ($m) {
                $res = base64_decode(Helpers::dictionarySampleDecode2($m[2]));
                if (!empty($res)) {
                    return $m[1] . '=\'' . $res . '\';';
                }
                return $m[0];
            }, $result);
        }

        $result = Helpers::normalize($result);

        return $result;
    }

    public static function NormalizeInt($str)
    {
        $res = 0;
        if ($str[0] === '0' && $str[1] === 'x') {
            $res = hexdec($str);
        } elseif ($str[0] === '0') {
            $res = octdec($str);
        } else {
            $res = (int) $str;
        }
        return $res;
    }

    public static function currentTime()
    {
        /** @phpstan-ignore-next-line */
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }
}

/**
 * Class for calculating mathematical functions, examples can be found here tests/deobfuscator/CheckDeobfuscationHelpersTest.php
 */
class MathCalc
{
    const ELEMENT_TYPE_OPERATION            = 'operation';
    const ELEMENT_TYPE_NUMBER               = 'number';
    const ELEMENT_TYPE_SIMPLE_PARENTHESES   = 'simple_parentheses';

    const ELEMENT       = 'element';
    const ELEMENT_TYPE  = 'type';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_OPERATION  = '<=>|===|!==|==|!=|<>|<=|>=|&&|\|\||<<|>>|\*\*|\+|\-|/|\*|%|&|\||\^|\~|>|<';
    const REGEXP_VALUE_SIGN = '\-|\+';

    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $math_operations_order = [];

    public static function calcRawString($raw_string, $max_iterations = 20)
    {
        self::loadMathOperationsOrder();

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithParentheses($raw_string);
            $raw_string = static::calcFuncInRawStringOnePassWithParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while ($iterations < $max_iterations);

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while ($iterations < $max_iterations);
        return $raw_string;
    }

    ////////////////////////////////////////////////////////////////////////////

    protected static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        return FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string);
    }

    private static function calcRawStringOnePassWithParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_VALUE . ')\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_OPERATION . ')\s*'
            . ')+';
        $regexp_find_math_operations_inside_brackets    = '(?<=[(,=])' . $regexp_find_simple_math_operations . '(?=[),;])';
        return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function ($matches) {
            $original = $matches[0];
            $math_string = $original;
            if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) {
                return $original;
            }
            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            } catch (\Exception $e) {
                return $original;
            }
            return $result;
        }, $raw_string);
    }

    private static function calcRawStringOnePassWithoutParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?'
            . ')+';
        return preg_replace_callback('~(?<=[^_$]|\b)(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function ($matches) {
            $begin          = $matches[1];
            $math_string    = $matches[2];
            $end            = $matches[3];
            $original       = $begin . $math_string . $end;

            if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) {
                return $original;
            }
            if (self::haveOnlyValue($math_string)) {
                return $original;
            }
            if (self::haveOnlyOperation($math_string)) {
                return $original;
            }

            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithoutParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            } catch (\Exception $e) {
                return $original;
            }
            return $begin . $result . $end;
        }, $raw_string);
    }

    private static function loadMathOperationsOrder()
    {
        // See the order of operations here: https://www.php.net/manual/en/language.operators.precedence.php
        if (!empty(self::$math_operations_order)) {
            return;
        }

        self::$math_operations_order = [
            [
                '**' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a ** $b;
                    },
                ],
            ],
            [
                '~' => [
                    'elements' => [+1],
                    'func' => function ($a) {
                        return ~$a;
                    },
                ],
            ],
            [
                '*' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a * $b;
                    },
                ],
                '/' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a / $b;
                    },
                ],
                '%' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a % $b;
                    },
                ],
            ],
            [
                '+' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a + $b;
                    },
                ],
                '-' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a - $b;
                    },
                ],
            ],
            [
                '<<' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a << $b;
                    },
                ],
                '>>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a >> $b;
                    },
                ],
            ],
            [
                '<' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a < $b);
                    },
                ],
                '<=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <= $b);
                    },
                ],
                '>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a > $b);
                    },
                ],
                '>=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a >= $b);
                    },
                ],
            ],
            [
                '==' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a == $b);
                    },
                ],
                '!=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a != $b);
                    },
                ],
                '===' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a === $b);
                    },
                ],
                '!==' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a !== $b);
                    },
                ],
                '<>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <> $b);
                    },
                ],
                '<=>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <=> $b);
                    },
                ],
            ],
            [
                '&' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a & $b;
                    },
                ],
            ],
            [
                '^' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a ^ $b;
                    },
                ],
            ],
            [
                '|' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a | $b;
                    },
                ],
            ],
            [
                '&&' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a && $b);
                    },
                ],
            ],
            [
                '||' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a || $b);
                    },
                ],
            ],
        ];
    }

    private static function haveOnlyValue($string)
    {
        return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string);
    }

    private static function haveOnlyOperation($string)
    {
        return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string);
    }

    private static function haveOnlyValueWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string);
    }

    private static function haveOnlyOperationWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string);
    }

    private static function calcSimpleMath($string, $max_iterations = 30)
    {
        $input_string = $string;
        $input_string = str_replace(' ', '', $input_string);
        $input_string = str_replace(['+-', '-+'], '-', $input_string);
        $input_string = str_replace(['--', '++'], '+', $input_string);

        $regexp_find_simple_math_operations = '('
                . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')'
                . ')';
        if (!preg_match_all('~' . $regexp_find_simple_math_operations . '~mis', $input_string, $matches)) {
            return $string;
        }

        $math_array = [];
        foreach ($matches[0] as $index => $element) {
            if ($element === $matches[self::ELEMENT_TYPE_OPERATION][$index]) {
                $type = self::ELEMENT_TYPE_OPERATION;
            } elseif ($element === $matches[self::ELEMENT_TYPE_NUMBER][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $k          = $element;
                $element    = self::convertNum($element);
            } elseif ($element === $matches[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $element    = self::convertNum(trim($element, '()'));
            } else {
                throw new Exception();
            }

            $math_array[] = [
                self::ELEMENT       => $element,
                self::ELEMENT_TYPE  => $type,
            ];
        }

        $need_reindex = false;
        $last_element = null;
        foreach ($math_array as $index => $item) {
            if (
                $item[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION
                && in_array($item[self::ELEMENT], ['-'])
                && isset($math_array[$index + 1])
                && $math_array[$index + 1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER
                && (is_null($last_element) || $last_element[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION)
            ) {
                $math_array[$index + 1][self::ELEMENT] *= (int)($item[self::ELEMENT] . '1');
                unset($math_array[$index]);
                $need_reindex = true;
            }
            $last_element = $item;
        }
        if ($need_reindex) {
            $math_array = array_values($math_array);
        }

        if (count($math_array) === 1 && $math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER) {
            return $math_array[0][self::ELEMENT];
        }

        $changed = false;
        foreach (self::$math_operations_order as $operations) {
            $iterations = 0;
            do {
                $interrupted = false;
                foreach ($math_array as $index => &$element) {
                    if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    if (!isset($operations[$element[self::ELEMENT]])) {
                        continue;
                    }

                    $func_params    = $operations[$element[self::ELEMENT]];
                    $val1_offset    = $func_params['elements'][0];
                    $val2_offset    = isset($func_params['elements'][1]) ? $func_params['elements'][1] : null;
                    $val1_index     = $index + $val1_offset;
                    $val2_index     = $index + $val2_offset;

                    if (!isset($math_array[$val1_index])) {
                        continue;
                    }
                    if ($math_array[$val1_index][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    $val1 = $math_array[$val1_index][self::ELEMENT];

                    if (is_null($val2_offset)) {
                        try {
                            $result = $func_params['func']($val1);
                        } catch (\Exception $e) {
                            continue;
                        }
                        $element[self::ELEMENT] = $result;
                    } else {
                        if (!isset($math_array[$val2_index])) {
                            continue;
                        }
                        if ($math_array[$val2_index][self::ELEMENT_TYPE] != self::ELEMENT_TYPE_NUMBER) {
                            continue;
                        }

                        $val2 = $math_array[$val2_index][self::ELEMENT];

                        try {
                            $result = $func_params['func']($val1, $val2);
                        } catch (\Exception $e) {
                            throw new \Exception();
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER;

                    unset($math_array[$val1_index]);
                    if (!is_null($val2_offset)) {
                        unset($math_array[$val2_index]);
                    }
                    $changed        = true;
                    $interrupted    = true;
                    break;
                }
                unset($element);
                $math_array = array_values($math_array);
                $iterations++;
                if ($iterations >= $max_iterations) {
                    return $string;
                }
            } while ($interrupted);
        }

        if (!$changed) {
            return $string;
        }

        $return_value = '';
        foreach ($math_array as $element) {
            $return_value .= $element[self::ELEMENT];
        }
        return $return_value;
    }

    private static function convertNum(string $string)
    {
        if (stripos($string, '0x') === 0) {
            return (float)hexdec($string);
        } elseif (stripos($string, '0b') === 0) {
            return (float)bindec($string);
        } elseif (stripos($string, '0.') === 0) {
            return (float)$string;
        } elseif ($string !== '0' && substr($string, 0, 1) == '0') {
            return (float)octdec($string);
        }
        return (float)$string;
    }
}

/**
 * The class is auxiliary for MathCalc, calculates certain specific mathematical functions with explicit values
 */
class FuncCalc
{
    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $functions = [];

    private static $functions_regexp = '';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_VALUE_SIGN = '\-|\+';

    public static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        if (empty(self::$functions)) {
            self::loadFunctions();
        }
        $regexp_find_functions = '(?>'
                . '\b(' . self::$functions_regexp . ')\b' // functions name
                . '\s*'
                . '\('
                    . '('
                        . '(?>'
                            . '\s*(?:' . self::REGEXP_VALUE_SIGN . ')?\s*(?:' . self::REGEXP_VALUE . ')\s*,?' // math value
                            . '|'
                            . '\s*"[^"]+"\s*,?' // double quoted string
                            . '|'
                            . '\s*\'[^\']+\'\s*,?' // single quoted string
                        . ')*'
                    . ')'
                . '\)'
                . '\s*'
                . ')+';

        return preg_replace_callback('~' . $regexp_find_functions . '~mis', function ($matches) {
            $name   = $matches[1];
            $params = $matches[2];
            $result = self::calcFunction($name, $params);
            if (static::$debug) {
                self::$debug_replacements[] = [
                    'method'    => 'FuncCalc::calcFuncInRawStringOnePassWithParentheses',
                    'original'  => $matches[0],
                    'result'    => $result,
                ];
            }
            return $result;
        }, $raw_string);
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcFunction($name, $params)
    {
        $result             = "$name($params)"; // safely
        $name_lower         = strtolower($name);
        $function_otions    = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false;
        if (!$function_otions) {
            return $result;
        }

        $params_array = explode(',', $params);
        $params_array = array_map('trim', $params_array);

        try {
            return $function_otions['func'](...$params_array); // safely
        } catch (Exception $ex) {
            return $result;
        }
    }

    private static function loadFunctions()
    {
        self::$functions = [
            'min' => [
                'func' => function (...$a) {
                    return min($a);
                },
            ],
            'max' => [
                'func' => function (...$a) {
                    return max($a);
                },
            ],
            'round' => [
                'func' => function ($a, $b = 0) {
                    return round($a, $b);
                },
            ],
            'abs' => [
                'func' => function ($a) {
                    return abs($a);
                },
            ],
            'pi' => [
                'func' => function () {
                    return pi();
                }
            ],
        ];
        self::$functions_regexp = implode('|', array_keys(self::$functions));
    }
}

class Debugger
{
    const DEBUG_COUNT = 'count';
    const DEBUG_MEDIAN_TIME = 'median_time';
    const DEBUG_MAX_TIME = 'max_time';
    const DEBUG_MIN_TIME = 'min_time';
    const DEBUG_TIME_LIST = 'time_list';

    private $deobfuscatorData;

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count / 2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}

///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (strpos($a, '-') === 0) {
                if (substr($a, 2, 1) === '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && isset($argv) && @strpos(@$argv[0], 'deobfuscator2') !== false) {
    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.jit', '1');
    if (!defined('DEBUG_PERFORMANCE')) {
        define('DEBUG_PERFORMANCE', 0);
    }
    $options = parseArgs($argv);
    $str = @php_strip_whitespace($options[0]);
    $str2 = @file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = Helpers::currentTime();
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(Helpers::currentTime() - $start, 4) . ' sec.';
}

class Deobfuscator
{
    const PCRE_BACKTRACKLIMIT = 4000000;
    const PCRE_RECURSIONLIMIT = 40000;

    const TYPE_PREG_FULL = 'full';
    const TYPE_PREG_FAST = 'fast';
    const TYPE_PREG_PRECHECK = 'precheck';
    const TYPE_FUNC = 'func';

    private static $signatures = array (
  0 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*([\'"][^\'"]+[\'"]\\s*\\^\\s*[\'"][^\'"]*[\'"])\\s*;)((?:\\s*\\$\\w+\\s*=(?:\\s*(?:[\'"][^\'"]+[\'"]|\\2\\([0-9-\\s]+\\))\\s*.?){1,};){1,})\\s*(function\\s*(\\w{1,50})\\s*\\(\\s*(\\$\\w{1,50})\\s*,\\s*(\\$\\w{1,50})\\s*\\)\\s*\\{\\s*global\\s*\\2\\s*;\\s*(\\$\\w{1,50})\\s*= \\s*[\'"][^\'"]*[\'"]\\s*;\\s*for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\10\\s*<\\s*strlen\\(\\7\\)\\s*;\\)\\s*\\{\\s*for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\11\\s*<\\s*strlen\\(\\8\\)\\s*&&\\s*\\10\\s*<\\s*strlen\\(\\7\\)\\s*;\\s*\\11\\+\\+,\\s*\\10\\+\\+\\)\\s*\\{\\s*\\9\\s*\\.\\=\\s*\\2\\(ord\\(\\7\\[\\10\\]\\)\\s*\\^\\s*ord\\(\\8\\[\\11\\]\\)\\);\\s*\\}\\s*\\}\\s*return\\s*\\9\\s*;\\s*\\})\\s*((\\$\\w{1,50})\\s*=\\s*\\$_COOKIE\\s*;\\s*\\13\\s*=\\s*array_merge\\(\\13, \\s*\\$_POST\\)\\s*;\\s*\\$\\w{1,50}\\s*=\\s*(?:\\s*(?:[\'"][^\'"]+[\'"]|\\2\\([0-9-\\s]+\\))\\s*.?){1,};\\s*foreach\\s*\\(\\$\\w{1,50}\\s*\\$\\w{1,50}\\s*=>\\s*\\$\\w{1,50}\\)\\s*\\{\\s*\\$\\w{1,50}\\s*=\\s*\\$\\w{1,50}\\(\\6\\(\\6\\(\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\s*,\\s*\\$\\w{1,50}\\)\\s*,\\s*\\$\\w{1,50}\\)\\);\\s*if\\s*\\(isset\\(.*?\\)\\)\\s*\\{\\s*if\\s*\\(.*?\\)\\s*\\{\\s*.*?\\}\\s*elseif\\s*\\(.*?\\)\\s*\\{\\s*.*?\\}\\s*exit\\(\\)\\s*;\\s*\\}\\s*\\})~msi',
    'id' => 'cookiePost',
  ),
  1 => 
  array (
    'full' => '~(\\$\\w{1,30})=file\\(__FILE__\\);\\s*eval\\(base64_decode\\(["\']([^"\']{1,1000})["\']\\)\\);\\s*(eval\\(base64_decode\\(\\w{1,30}\\(\\$\\w{1,30}\\)\\)\\);)\\s*(eval\\(\\w{1,30}\\(\\w{1,30}\\(\\$\\w{1,30},\\d{1,4}\\),\\w{1,30}\\(\\$\\w{1,30},\\d{1,4}\\)\\)\\);)\\s*[_\\w]{1,20}\\(\\);\\s*([\\w+/=]{1,2000})~msi',
    'id' => 'zeura4',
  ),
  2 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*\'([^\\$]+)\'\\s*;)\\s*((\\$\\w{1,50})\\s?=\\s?\'c\'\\.\'h\'\\.\'r\';)((\\$\\w{1,50})\\s*=\\s*(?:\\4\\s*\\([0-9-]*\\)\\s*.?\\s*){1,20};)\\s*((\\$\\w{1,50})\\s*=\\s*(?:\\4\\s*\\([0-9-]*\\)\\s*.?\\s*){1,20};)\\s*(eval\\s*\\(\\s*\\6\\s*\\(\\s*\\8\\s*\\(\'(?:[^\\$]+)\'\\s*\\)\\)\\);)~msi',
    'id' => 'evalIter',
  ),
  3 => 
  array (
    'full' => '~<\\?[ph\\s]*((\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*)((?:\\$\\w{1,50}\\s?=\\s?(?:\\2\\[\\d{1,10}\\]\\.?)+;)+)\\s*@?(eval\\((?:\\$\\w{1,50}\\()+(?:\\2\\[\\d{1,10}\\]\\.?)+\\)+;)~msi',
    'id' => 'dictVarsEval',
  ),
  4 => 
  array (
    'full' => '~<\\?[ph\\s]*(\\$\\w{0,50})\\s*=\\s*file\\(__FILE__\\)\\s*;\\s*(eval\\(base64_decode\\("[^"]+"\\)\\)\\s*;)\\s*(eval\\(base64_decode\\(((\\w{0,50})\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\)\\)\\s*;)\\s*(eval\\(("[^"]+"\\s*\\.\\s*((\\w{0,10})\\((\\5\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\s*,\\s*(\\5\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\)\\))\\s*);)\\s*__halt_compiler\\(\\)\\s*;\\s*([\\w\\+/=]+)~msi',
    'id' => 'evalFile',
  ),
  5 => 
  array (
    'full' => '~if\\(!empty\\(\\$_POST\\[[\'"][^"\']+[\'"]\\]\\)\\s*\\{\\$\\w{1,10}\\s*=\\s*(base64_decode\\([\'"][^"\']+[\'"]\\)\\s*);\\$\\w{1,10}\\s*=\\s*[\'"][^"\']+[\'"]\\s*;\\s*function\\s*(\\w+)[^}]+}\\s*\\$(\\w{1,10})\\s*=\\s*\\2\\(\\$\\w{1,10}\\s*,\\s*\\$\\w{1,10}\\)\\s*;\\s*\\$\\3\\s*=\\s*\\w{1,10}\\s*\\w{1,10}\\(\\$\\w{1,10}\\s*,\\s*\\$\\w{1,10}\\)\\s*;if\\(\\$\\3\\)\\s*\\$\\3\\s*=\\s*\\2\\([\'"][^"\']+[\'"]\\s*,\\s*base64_decode\\([\'"][^"\']+[\'"]\\)\\);\\}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  6 => 
  array (
    'full' => '~(\\$\\w{1,20})\\s*=\\s*(chr\\(\\d{1,4}\\)\\.["\'][x\\\\\\\\a-f0-9]{1,60}["\'][^;]{1,60});\\s*(\\$\\w{1,20})\\s*=\\s*([^;]{1,100});\\s*(\\$\\w{1,20})\\s*=\\s*\\1\\(\\3\\(["\']([a-z0-9+/=]{1,50000})["\']\\)\\);\\s*echo ["\']\\{\\$\\{\\s*eval\\s*\\(\\5\\)\\s*\\}\\}["\'];~msi',
    'id' => 'simpleEvalFunctions',
  ),
  7 => 
  array (
    'full' => '~(\\$\\w+)=(\'[^\']+\');\\s*eval\\(gzinflate\\(str_rot13\\((\\$_D)\\(\\1\\)+;~msi',
    'id' => 'undefinedDFunc',
  ),
  8 => 
  array (
    'full' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~msi',
    'id' => 'base64Array',
  ),
  9 => 
  array (
    'full' => '~for\\((\\$\\w{1,40})=\\d+,(\\$\\w+)=\'([^\\$]+)\',(\\$\\w+)=\'\';@?ord\\(\\2\\[\\1\\]\\);\\1\\+\\+\\)\\{if\\(\\1<\\d+\\)\\{(\\$\\w+)\\[\\2\\[\\1\\]\\]=\\1;\\}else\\{\\$\\w+\\.\\=@?chr\\(\\(\\5\\[\\2\\[\\1\\]\\]<<\\d+\\)\\+\\(\\5\\[\\2\\[\\+\\+\\1\\]\\]\\)\\);\\}\\}\\s*.{0,500}eval\\(\\4\\);(if\\(isset\\(\\$_(GET|REQUEST|POST|COOKIE)\\[[\'"][^\'"]+[\'"]\\]\\)\\)\\{[^}]+;\\})?~msi',
    'fast' => '~for\\((\\$\\w{1,40})=\\d+,(\\$\\w+)=\'([^\\$]+)\',(\\$\\w+)=\'\';@?ord\\(\\2\\[\\1\\]\\);\\1\\+\\+\\)\\{if\\(\\1<\\d+\\)\\{(\\$\\w+)\\[\\2\\[\\1\\]\\]=\\1;\\}else\\{\\$\\w+\\.\\=@?chr\\(\\(\\5\\[\\2\\[\\1\\]\\]<<\\d+\\)\\+\\(\\5\\[\\2\\[\\+\\+\\1\\]\\]\\)\\);\\}\\}\\s*.{0,500}eval\\(\\4\\);~msi',
    'id' => 'parenthesesString',
  ),
  10 => 
  array (
    'full' => '~\\$codelock_rfiled=dirname\\(__FILE__\\);(?:\\s*\\$codelock_fixpath=\'\';)?\\s*if\\s*\\(\\$codelock_file\\s*==\\s*\'\'\\)\\s*\\{\\s*echo\\s*"[^"]+";\\s*die\\(\\);\\s*\\}\\s*else\\s*\\{\\}\\s*\\$codelock_lock="([^"]+)";\\s*eval\\((gzinflate\\()?base64_decode\\(\\$codelock_lock\\)\\)\\)?;\\s*return;\\s*\\?>\\s*([\\w\\+\\/=\\$\\)\\(]+)~msi',
    'id' => 'codeLockDecoder',
  ),
  11 => 
  array (
    'fast' => '~(?:(?:/\\*[^\\*]+\\*/)+)if(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)isset(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)\\$_REQUEST(?:(?:/\\*[^\\*]+\\*/)+)\\[(?:(?:(?:/\\*[^\\*]+\\*/)+)*\'\\w+\'(?:(?:/\\*[^\\*]+\\*/)+)\\.?)+\\](?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)eval(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)stripslashes(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)\\$_REQUEST(?:(?:/\\*[^\\*]+\\*/)+)\\[(?:(?:(?:/\\*[^\\*]+\\*/)+)*\'\\w+\'(?:(?:/\\*[^\\*]+\\*/)+)\\.?)+\\](?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+);(?:(?:/\\*[^\\*]+\\*/)+)~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*[^\\*]+\\*/)+))(?&c)if(?&c)\\((?&c)isset(?&c)\\((?&c)\\$_REQUEST(?&c)\\[(?:(?&c)*\'\\w+\'(?&c)\\.?)+\\](?&c)\\)(?&c)\\)(?&c)eval(?&c)\\((?&c)stripslashes(?&c)\\((?&c)\\$_REQUEST(?&c)\\[(?:(?&c)*\'\\w+\'(?&c)\\.?)+\\](?&c)\\)(?&c)\\)(?&c);(?&c)~msi',
    'id' => 'garbageComments',
  ),
  12 => 
  array (
    'full' => '~(?:null;\\s*header\\([^\\)]+\\);\\s*)?\\$\\w+\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([\\\\\\da-fx]+)"\\("([\\\\\\da-fx]+)"\\);\\s*eval\\("([\\\\\\da-fx]+)"\\(\\2\\)\\);~msi',
    'id' => 'evalHexFunc',
  ),
  13 => 
  array (
    'full' => '~((?:(\\$\\w+)\\s*\\.?=\\s*\'[^\']+\';\\s*)++)eval\\(pack\\("H\\*",\\s*\\2\\)\\);~msi',
    'id' => 'evalHex2Bin',
  ),
  14 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*set_time_limit\\(0\\);\\s*session_start\\(\\);\\s*\\$\\w+\\s*=\\s*"[^"]+";(\\s*function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*@?((?:\\w+\\()+)\\3(\\)+);\\s*}\\s*(\\$\\w+)="([^"]+)";\\s*\\2\\(\\6\\);)~msi',
    'id' => 'agustus1945',
  ),
  15 => 
  array (
    'full' => '~\\$\\w+="([^"]+)";(?:\\$l+=0;\\$l+=\'base64_decode\';\\$l+=0;eval\\(\\$l+\\("[^"]+"\\)+;|\\$l+=\'ord\';)[^\\^]+\\^[\\dx]+\\);}eval\\(\\$l+\\("[^"]+"\\)+;eval\\(\\$l+\\);return;~msi',
    'id' => 'custom1',
  ),
  16 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"(\\w{32})";\\s*(\\$\\w+)\\s*=\\s*array\\s*\\(\\);\\s*(\\3\\[\\d+\\]\\s*=\\s*"[^"]+";\\s*)+\\s*(\\$\\w+)\\s*=\\s*"base64_decode";\\s*\\$\\w+\\s*=\\s*(\\w+)\\s*\\(\\3,\\1\\);function\\s*\\6\\(\\s*.{200,500}return\\s*\\$\\w+;\\s*}\\s*eval\\s*\\(\\5\\s*\\(\\$\\w+\\)\\);~msi',
    'id' => 'custom2',
  ),
  17 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\{\\s*\\2\\s*=\\s*((?:\\w+\\()+)\\2\\)+;\\s*\\3\\s*=\\s*md5\\(\\3\\);\\s*(\\$\\w+)\\s*=\\s*0;\\s*(\\$\\w+)\\s*=\\s*\'\';\\s*for\\((\\$\\w+)\\s*=\\s*0;\\s*\\7\\s*<\\s*strlen\\(\\2\\);\\s*\\7\\+\\+\\)\\s*\\{\\s*\\5\\s*=\\s*\\5\\s*==\\s*strlen\\(\\3\\)\\s*\\?\\s*0\\s*:\\s*\\5;\\s*\\6\\s*\\.=\\s*\\2\\[\\7\\]\\s*\\^\\s*\\3\\[\\5\\+\\+\\];\\s*\\}\\s*\\2\\s*=\\s*\\6;\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\((\\$\\w+)\\s*=\\s*0;\\8\\s*<\\s*strlen\\(\\2\\);\\s*\\8\\+\\+\\)\\{\\s*\\$\\w+\\s*=\\s*\\2\\[\\7\\];\\s*\\$\\w+\\s*\\.=\\s*\\2\\[\\+\\+\\7\\]\\s*\\^\\s*\\$\\w+;\\s*\\}\\s*return\\s*\\$\\w+;\\s*\\}\\s*if\\(preg_match\\(\'[^\']+\',\\$_SERVER\\[\'HTTP_USER_AGENT\'\\],(\\$\\w+)\\)\\)\\{\\s*\\3\\s*=\\s*\\9\\[\\d+\\];\\s*\\3\\s*\\.=\\s*"(\\d+)";\\s*\\3\\s*=\\s*str_replace\\([^\\)]+\\);\\s*\\}else\\{\\s*die\\(\\);\\s*\\}\\s*\\2\\s*=\\s*\'([^\']+)\';\\s*eval\\(\\1\\(\\2,\\3\\)\\);~msi',
    'id' => 'decryptWithUserAgent',
  ),
  18 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*\'[bs64_dcogzinflate\\.\'\\s]+;\\s*)+(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*eval\\((?:\\$\\w+\\()+\\2\\)+;~msi',
    'id' => 'evalVarB64',
  ),
  19 => 
  array (
    'full' => '~(function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\'\';\\s*[^}]+\\}\\s*return\\s*\\$\\w+;\\s*\\}\\s*)?(?:\\$\\w+=\\w+\\(\'[^\']+\'\\);)+(\\$\\w+)=\\$\\w+\\(\'\',\\s*\\$\\w+\\(\'([^\']+)\'\\)\\);\\3\\(\\);~msi',
    'id' => 'createFuncHex2Bin',
  ),
  20 => 
  array (
    'full' => '~(define\\(\'([^\']+)\', \'[^\']+\'\\);\\$GLOBALS\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*?)\',([0-9a-fx]+),\\s*([\\-0-9a-f]+)\\)+;.*?)(?:if\\(!function_exists\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\[\\{]\\d+[\\}\\]]\\)+\\{function\\s*hex2bin\\(\\$\\w+\\)\\s*(?:[^}\\]]+[\\]\\}])+\\}function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{(?:\\8=substr\\(\\8,\\(int\\)\\(hex2bin\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]]\\s*[\\{\\[][0-9a-fx]+[\\}\\]]\\)+[;,]\\s*)+\\(int\\)\\(hex2bin\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;return\\s*\\8;\\}(?:\\$\\w+=\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]];)+function\\s*(\\w+)\\((\\$\\w+)\\)\\{(?:global\\s*\\$\\w+;)+\\s*return\\s*strrev\\(gzinflate\\(\\$\\w+\\(\\7\\(\\10\\)+;\\s*\\}(?:eval\\()+\\9\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;|((\\$\\w+)=urldecode\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\);((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)eval\\(\\$\\w+\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;))~msi',
    'id' => 'explodeGzinflateSubstr',
  ),
  21 => 
  array (
    'full' => '~eval\\(\'\\?>\'\\.base64_decode\\(strtr\\(substr\\("([^"]+)",(\\d+)\\*2\\),substr\\("\\1",\\2,\\2\\),\\s*substr\\("\\1",0,\\2\\)+~msi',
    'id' => 'evalStrtr',
  ),
  22 => 
  array (
    'full' => '~(?:eval\\(base64_decode\\("[^"]+"\\)+;\\s*)+eval\\(base64_decode\\((\\w+)\\((\\$\\w+)\\[\\d\\],\\d+\\)+;eval\\((\\w+)\\(\\1\\(\\2\\[\\d+\\],\\d+\\),\\1\\(\\2\\[\\d+\\],\\d+\\),\\2\\)\\);__halt_compiler\\(\\);([\\w\\+/=]+)~msi',
    'id' => 'evalB64Chunks',
  ),
  23 => 
  array (
    'fast' => '~function\\s{0,50}(\\w+)\\(\\$\\w+,\\s{0,50}\\$\\w+\\s?\\)\\s{0,50}\\{\\s{0,50}(?:\\$\\w+\\s{0,50}=\\s{0,50}[\'"]([^\'"]+)[\'"];\\s{0,50})?(\\$\\w+\\s{0,50}=\\s{0,50}base64_encode\\s{0,50}\\(\\$\\w+\\);\\s{0,50})?(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:strlen|base64_decode)\\(\\$\\w+\\);\\s{0,50})+(?:if\\s{0,50}\\(\\$\\w+\\s{0,50}<=\\s{0,50}\\$\\w+\\)\\s{0,50}\\{\\s{0,50}return\\s{0,50}\\$\\w+\\s{0,50}\\^\\s{0,50}\\$\\w+;\\s{0,50}\\}|(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:""|0);\\s{0,50})+while\\s{0,50}\\(\\$\\w+\\s{0,50}<\\s{0,50}strlen\\s{0,50}\\(\\$\\w+\\)+\\s{0,50}\\{)\\s{0,50}for\\s{0,50}\\(\\s{0,50}\\$\\w+\\s{0,50}=\\s{0,50}0;\\s{0,50}\\$\\w+\\s{0,50}<\\s{0,50}(?:strlen\\s{0,50}\\()?\\$\\w+\\)?;\\s{0,50}(?:\\+\\+\\$\\w+|\\$\\w+\\+\\+)\\)\\s{0,50}\\{\\s{0,50}[^\\^]+\\^\\s{0,50}[^}]+[\\}\\s]+return\\s{0,50}(base64_decode\\(|gzuncompress\\s*\\(\\s*base64_decode\\s*\\()?\\$\\w+\\)?\\)?;\\s{0,50}\\};?\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}"([^"]+)";\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}(?:"([^"]+)"|\'([^\']+)\');\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}\\1\\((?:base64_decode\\()?(?:\\5|\\7)\\)?,\\s{0,50}(?:\\5|\\7)\\);\\s{0,50}eval\\s{0,50}\\(\\10\\);~msi',
    'full' => '~function\\s{0,50}(\\w+)\\(\\$\\w+,\\s{0,50}\\$\\w+\\s?\\)\\s{0,50}\\{\\s{0,50}(?:\\$\\w+\\s{0,50}=\\s{0,50}[\'"]([^\'"]+)[\'"];\\s{0,50})?(\\$\\w+\\s{0,50}=\\s{0,50}base64_encode\\s{0,50}\\(\\$\\w+\\);\\s{0,50})?(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:strlen|base64_decode)\\(\\$\\w+\\);\\s{0,50})+(?:if\\s{0,50}\\(\\$\\w+\\s{0,50}<=\\s{0,50}\\$\\w+\\)\\s{0,50}\\{\\s{0,50}return\\s{0,50}\\$\\w+\\s{0,50}\\^\\s{0,50}\\$\\w+;\\s{0,50}\\}|(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:""|0);\\s{0,50})+while\\s{0,50}\\(\\$\\w+\\s{0,50}<\\s{0,50}strlen\\s{0,50}\\(\\$\\w+\\)+\\s{0,50}\\{)\\s{0,50}for\\s{0,50}\\(\\s{0,50}\\$\\w+\\s{0,50}=\\s{0,50}0;\\s{0,50}\\$\\w+\\s{0,50}<\\s{0,50}(?:strlen\\s{0,50}\\()?\\$\\w+\\)?;\\s{0,50}(?:\\+\\+\\$\\w+|\\$\\w+\\+\\+)\\)\\s{0,50}\\{\\s{0,50}[^\\^]+\\^\\s{0,50}[^}]+[\\}\\s]+return\\s{0,50}(base64_decode\\(|gzuncompress\\s*\\(\\s*base64_decode\\s*\\()?\\$\\w+\\)?\\)?;\\s{0,50}\\};?\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}"([^"]+)";\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}(?|"([^"]+)"|\'([^\']+)\');\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}\\1\\((?:base64_decode\\()?(?:\\5|\\7)\\)?,\\s{0,50}(?:\\5|\\7)\\);\\s{0,50}eval\\s{0,50}\\(\\9\\);~msi',
    'id' => 'b64FuncEval',
  ),
  24 => 
  array (
    'full' => '~(\\$\\w+)=create_function\\(((?:base64_decode\\(\'[^\']+\'\\)|chr\\([0-9a-fx\\-/]+\\)|str_rot13\\(\'[^\']+\'\\))\\.?,?)+\\);\\1\\(base64_decode\\(((?:base64_decode\\(\'[^\']+\'\\)|chr\\([0-9a-fx\\-/]+\\)|str_rot13\\(\'[^\']+\'\\)|\'[^\']*\')\\.?,?)+\\)\\);~msi',
    'id' => 'createFuncB64StrRotChr',
  ),
  25 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\(__FILE__,\\s*\'\\w\'\\);\\s*fseek\\(\\1,\\s*\\d+\\);\\s*(\\$\\w+)\\s*=\\s*stream_get_contents\\(\\1\\);\\s*fclose\\(\\1\\);\\s*(\\$\\w+)\\s*=\\s*create_function\\(\'\',\\s*gzuncompress\\(strrev\\(\\2\\)\\)\\);\\s*\\3\\(\\);\\s*__halt_compiler\\(\\);\\s*(.*)~msi',
    'id' => 'gzuncompressStrrev',
  ),
  26 => 
  array (
    'full' => '~@?(?:eval|assert)\\(str_rot13\\(\\s*(["\'])(riny\\((?:pbaireg_hhqrpbqr|fgeeri|tmvasyngr)\\((?:[^;]+;)+)\\1\\s*\\)\\);~msi',
    'id' => 'strRot13ConvertUUDecode',
  ),
  27 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=@?\\1\\(\'([^\']+)\',"([^"]+)"\\);\\s*@?\\3\\("([^"]+)"\\);~msi',
    'id' => 'createFuncHex',
  ),
  28 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strrev\\("\\(lave"\\);\\s*(\\$\\w+)\\s*=\\s*\\$\\w+\\s*\\.\\s*"base64_decode\\("\\s*\\.\\s*base64_decode\\(strrev\\(\\$\\w+\\)\\)\\s*\\.\\s*"\\)\\);";\\s*eval\\(strrev\\(strrev\\(\\4\\)\\)\\);\\s*}\\s*\\$\\w+\\s*=\\s*strrev\\("\\("\\);\\s*\\$\\w+\\s*=\\s*strrev\\(""\\{\\$\\w+\\}""\\);\\s*\\$\\w+\\s*=\\s*strrev\\("\\)"\\);\\s*\\$\\w+\\s*=\\s*strrev\\("\\)"\\);\\s*(\\$\\w+)\\s*=(?:\\s*\\$\\w+\\s*\\.?)+;\\s*\\3\\(strrev\\(base64_encode\\(\\5\\)\\)\\);~msi',
    'id' => 'evalStrrev',
  ),
  29 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*eval\\(base64_decode\\(substr\\(strrev\\(\\1\\),\\s*(\\d+),(\\-\\d+)\\)\\)\\);~msi',
    'id' => 'evalSubstr',
  ),
  30 => 
  array (
    'full' => '~((?:\\$\\w+\\.?=\'[^\']+\';\\s*)+)\\$\\w+=\\$\\w+;function\\s*(\\w+)\\((\\$\\w+),(\\$\\w+)\\)\\s*\\{(\\$\\w+)=\'\';for\\((\\$\\w+)=0;\\6<strlen\\(\\3\\);\\)for\\(\\5=0;\\5<strlen\\(\\4\\);\\5\\+\\+,\\6\\+\\+\\)(\\$\\w+)\\.=\\3\\{\\6\\}\\^\\4\\{\\5\\};return\\s*\\7;\\};(\\$\\w+)=base64_decode\\(\\8\\);@?(\\$\\w+)=\\2\\(\\8,\'([^\']+)\'\\);@?eval\\(@?gzuncompress\\(\\9\\)\\);~msi',
    'id' => 'XorGzUncompress',
  ),
  31 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)\\s*=\\s*str_replace\\("([^"]+)","","([^"]+)"\\);\\s*(\\$\\w+)=\'([base64_dco\\.\']+)\';\\s*@?eval\\(\\6\\(\\3\\("([^"]+)",\\s*"",\\s*\\1\\)\\)\\);~msi',
    'id' => 'evalStrReplace',
  ),
  32 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";(\\$\\w+)\\s*=\\s*base64_decode\\("([^"]+)"\\);eval\\(base64_decode\\(\\3\\)\\);(?:\\s*\\$\\w+\\s*=\\s*"[^"]+";)?~msi',
    'id' => 'sistemitComEnc',
  ),
  33 => 
  array (
    'full' => '~(function\\s*(\\w+)\\((\\$\\w+)\\){\\s*return\\s*(base64_decode|gzinflate|eval)\\(\\$\\w+(,\\d+)?\\);}\\s*)+(\\$\\w+)="([^"]+)";(preg_replace\\(\'/\\.\\*/e\',"([\\\\x0-9a-f]+)",\'\\.\'\\);)~msi',
    'id' => 'funcs',
  ),
  34 => 
  array (
    'full' => '~if\\(!defined\\(\'(\\w+)\'\\)\\)define\\(\'\\1\',__FILE__\\);(?:\\s*@eval\\(base64_decode\\(\'([^\']+)\'\\)\\);)+\\s*@chop\\(base64_decode\\(\'([^\']+)\'\\)~msi',
    'id' => 'fakeChop',
  ),
  35 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*"[^"]*"(?:\\.\\$\\w+)?;\\s*)+(\\$\\w+)=(?:\\$\\w+\\.?)+;\\s*eval\\(str_rot13\\(gzinflate\\(str_rot13\\(base64_decode\\(\\(\\1\\)\\)\\)\\)\\)\\);~msi',
    'id' => 'R4C',
  ),
  36 => 
  array (
    'full' => '~((?:\\$GLOBALS\\["[^"]+"\\]=base64_decode\\("[^"]*"\\);)+).{0,10}((?:\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]=base64_decode\\(\\$GLOBALS\\["[^"]+"\\]\\);)+).{0,10}(?:((?:\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]=base64_decode\\(\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\);)+).{0,10}(\\$\\w+)=\\$_POST\\[\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\];if\\(\\4\\!=\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\)\\s*\\{(\\$\\w+)=base64_decode\\(\\$_POST\\[\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\]\\);)?@?eval\\((?:"\\\\\\$\\w+=\\5;"\\);\\}|(?:\\w+\\()+\\$GLOBALS\\[\\$GLOBALS\\["([^"]+)"\\]\\]\\)\\)\\)\\);)~msi',
    'id' => 'manyGlobals',
  ),
  37 => 
  array (
    'full' => '~((?:\\$GLOBALS\\["[^"]+"\\]=base64_decode\\("[^"]*"\\);)+).*?if\\(md5\\(\\$_GET\\[\\$GLOBALS\\["[^"]+"\\]\\]\\).*?echo\\s?\\$GLOBALS\\["[^"]+"\\];}+\\s?\\?>~msi',
    'id' => 'manyGlobals',
  ),
  38 => 
  array (
    'full' => '~eval\\(\'\\$(\\w+)\\s*=\\s*"([^"]+)";\\$(\\w+)\\s*=\\s*"([^"]+)";(eval\\((?:\\w+\\()+)(\\$\\{"\\3"\\}\\s*\\.\\s*\\$\\{"\\1"})(\\)+;)\'\\);~msi',
    'id' => 'blackshadow',
  ),
  39 => 
  array (
    'full' => '~if\\(\\!\\s?defined\\(\\s?\'([^\']+)\'\\)\\)\\s?define\\(\\s?\'\\1\',\\s?\'[^\']+\'\\)?;\\s?call_user_func_array\\([\'"\\w\\s]+,\\s?array\\(\\d\\)\\);[^\\$]+(\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\s?=\\s?explode\\(\\s?\'([^\']+)\',\\s?gzinflate\\(\\s?substr\\(\\s?\'((?:[^\']+\')+),(\\dx\\w{1,50}),\\s?(\\-?[\\w]{1,50})\\)+;\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\s?=\\s*call_user_func_array\\([^,]+,\\s?array\\(\\s?\'([^\']+)\',\\s?\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\[(0x\\d+)\\]\\)+;)(?:.*?\\$[GET_LOBALS]+{\\s?[\'"]?\\1[\'"]?})+[^;]+;~msi',
    'id' => 'callUserFuncsPackDefinedVar',
  ),
  40 => 
  array (
    'fast' => '~((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\))(?>.*?((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\)))+(?:.*?goto\\s*(\\w+);\\s*.*?\\5:\\s*goto\\s*(\\w+);(?>[^\\\\]+[^;]+;\\s*)+\\w+:|=>pack\\(\\$\\w+,"[^"]+"\\),pack\\(\\$\\w+,"[^"]+"\\)=>\\$\\w+\\];\\$\\w+=\\$\\w+;\\w+:[^;]+;goto\\s*(\\w+);.*?(\\w+):)~msi',
    'full' => '~((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\))(?>.*?(?1))+(?|.*?goto\\s*(\\w+);\\s*.*?\\3:\\s*goto\\s*(\\w+);(?>[^\\\\]+[^;]+;\\s*)+\\w+:|=>pack\\(\\$\\w+,"[^"]+"\\),pack\\(\\$\\w+,"[^"]+"\\)=>\\$\\w+\\];\\$\\w+=\\$\\w+;\\w+:[^;]+;goto\\s*(\\w+);.*?\\3:)~msi',
    'id' => 'SDCMS',
  ),
  41 => 
  array (
    'full' => '~goto\\s[^;]+;\\s?(?:\\w{1,50}:\\s?)?.{0,1920}?if\\s?\\(!@preg_match\\("\\\\\\w{1,50}.*?\\w{1,50}:[\\s}]+\\?>~msi',
    'id' => 'goto',
  ),
  42 => 
  array (
    'full' => '~(?:class\\s*(\\w+)\\s*\\{\\s*)?(?:function\\s*\\w+\\(\\)\\s*\\{\\s*)?(?:\\$[^;\\s]+\\s*=\\s*\\d;\\s*[^;\\s]+:\\s*if\\s*\\([^\\)]+\\)+\\s*\\{\\s*goto\\s*[^;\\s]+;\\s*\\}\\s*\\$[^;\\s]+[^:]+:\\s*[^;]+;\\s*)?goto [^;\\s]+;\\s*(?:[^;\\s]+:\\s*(?:[^;\\s]+:\\s*)?.*?goto\\s*[^;\\s]+;\\s*(?:}\\s*goto\\s*[^;\\s]+;)?(?:goto\\s*[^;\\s]+;)?\\s*)+(?:\\s*/\\*[^\\*]+\\*/\\s*)?[^;\\s]+:\\s*(?|}|[^;>]+;)(?:\\s*goto\\s*[^;\\s]+;\\s*[^;\\s]+:\\s*[^;\\s]+:\\s*|(?:\\s*die;\\s*}\\s*)?\\s*goto\\s*[^;\\s]+;\\s*[^;\\s]+:\\s*\\}?)?(?:(?:.*?goto\\s*\\w{1,50};)?(?:\\s*\\w{1,50}:\\s?)+)?(?:(?:[^;]+;\\s*goto\\s*\\w+;\\s*)+\\w+:\\s*include\\s*[^;]+;)?(foreach\\s*\\([^{]+(\\{(?:[^{}]|(?2))*\\}))?(?(1).*?\\s*\\}\\s*new\\s*\\1\\(\\);|)~msi',
    'fast' => '~goto [^;\\s]+;\\s*([^;\\s]+:\\s*(?>[^;\\s]+:\\s*)?.*?goto\\s*[^;\\s]+;\\s*(?>}\\s*goto\\s*[^;\\s]+;)?(?>goto\\s*[^;\\s]+;)?\\s*)+[^;\\s]+:\\s*[^;]+(?>;|\\?>)~msi',
    'precheck' => 
    array (
      0 => '~goto [^;\\s]+;\\s*~msi',
    ),
    'id' => 'goto',
  ),
  43 => 
  array (
    'full' => '~goto\\s*(\\w+);\\s*.*?\\1:\\s*goto\\s*(\\w+);(?:[^\\\\]+[^;]+;\\s*)+\\w+:\\s*(?:;|\\?>)~msi',
    'id' => 'goto',
  ),
  44 => 
  array (
    'full' => '~\\$\\w+\\s=\\sfile_get_contents\\(base64_decode\\(["\'][^"\']+["\']\\)\\s\\.\\sbase64_decode\\(["\'][^"\']+[\'"]\\)\\s\\.\\s\\$\\w+\\s\\.\\s["\'][^\'"]+["\']\\s\\.\\s\\$_SERVER\\[["\'][^\'"]+[\'"]\\]\\s\\.\\s["\'][^"\']+["\']\\s\\.\\s\\$_SERVER\\[["\'][^"\']+["\']\\]\\);.*?\\s\\$\\w+\\s=\\sbase64_decode\\(["\'][^"\']+["\']\\);\\s.*?\\s@unlink\\(\\$_SERVER\\[["\'][^"\']+["\']\\]\\);~msi',
    'id' => 'gotoBase64Decode',
  ),
  45 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:str_rot13\\(\\$\\w{1,50}\\)|[\'"][^"\']+[\'"]|base64_decode\\("(?:{\\$\\w{1,50}})+"\\));\\s*)+(\\$\\w{1,50})\\s?=\\s?base64_decode\\("((?:{\\$\\w{1,50}})+)"\\);\\s?eval\\(\\1\\);~msi',
    'id' => 'gotoStrRot13Vars',
  ),
  46 => 
  array (
    'precheck' => 
    array (
      0 => '~(\\$\\{"GLOBALS"\\}\\["\\w+"\\])\\s*=\\s*"\\w+";~msi',
      1 => '~\\s*exec\\(\\$\\w+\\);\\s*echo\\s*"[^"]+";~msi',
    ),
    'full' => '~(\\$\\{"GLOBALS"\\}\\["\\w+"\\])\\s*=\\s*"\\w+";\\s*(?:\\$\\{"GLOBALS"\\}\\["(\\w+)"\\]\\s*=\\s*"\\w+";\\s*)+.*?;\\s*\\$\\{\\1\\}\\s*=\\s*[\\"\'][^;]+[\\"\'];\\s*exec\\(\\$\\w+\\);\\s*echo\\s*"[^"]+";\\s*\\}\\s*\\}~msi',
    'id' => 'gotoShell',
  ),
  47 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\'[^\']++\';\\s*)*eval\\(base64_decode\\(substr\\("(?:[^"]++)",(?:\\d+),(?:-?\\d+)\\)\\.base64_decode\\(strrev\\("[^"]++"(?:\\.(?:substr\\("(?:[^"]++)",(?:\\d++),(?:-?\\d++)\\)|"(?:[^"]+)"))++\\)\\)\\)\\);(?:\\$\\w+\\s*=\\s*\'[^\']++\';\\s*)*~msi',
    'id' => 'substrEmpty',
  ),
  48 => 
  array (
    'full' => '~function\\s{0,50}(\\w+)\\((\\$\\w+)\\)\\s{0,50}\\{\\s{0,50}\\2\\s{0,50}=\\s{0,50}substr\\(\\2,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f]+)\\3\\)+;\\s{0,50}\\2\\s{0,50}=\\s{0,50}substr\\(\\2,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f]+)\\5\\)*,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f\\-]+)\\7\\)+;\\s{0,50}return\\s{0,50}\\2;\\s{0,50}\\}\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}([\'"])[^\'"]+\\10;\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}[\'"]base64_decode[\'"];\\s{0,50}function\\s{0,50}\\w+\\((\\$\\w+)\\)\\s{0,50}{\\s{0,50}global\\s{0,50}\\9;\\s{0,50}global\\s{0,50}\\11;\\s{0,50}return\\s{0,50}strrev\\(gzinflate\\(\\11\\(\\1\\(\\12\\)\\)\\)\\);\\s{0,50}\\}\\s{0,50}(?:(?:eval\\()+\\w+\\(([\'"]))?([^\'"]+)\\13\\)+;~msi',
    'id' => 'Obf_20200522_1',
  ),
  49 => 
  array (
    'full' => '~(\\$auth_pass\\s*=\\s*"[^"]+";\\s*(?:/\\*[^\\*]+\\*/\\s*)?)\\$__="";((?:\\$__=\\$__\\."[^"]+";\\s*)+)\\$\\w+=\\$__;function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\{\\s*for\\((\\$\\w+)=0;\\6<strlen\\(\\4\\);\\)\\s*for\\((\\$\\w+)=0;\\7<strlen\\(\\5\\);\\7\\+\\+,\\s*\\6\\+\\+\\)\\s*(\\$\\w+)\\s*\\.=\\s*\\4\\{\\6\\}\\s*\\^\\s*\\5\\{\\7\\};\\s*return\\s*\\8;\\s*\\};(\\$\\w+)=base64_decode\\(\\9\\);\\$__=\\3\\(\\9,"([^"]+)"\\);\\$_=create_function\\("",\\$__\\);\\$_\\(\\);~msi',
    'id' => 'b64xoredkey',
  ),
  50 => 
  array (
    'full' => '~(eval\\(gzinflate\\(base64_decode\\("([^"]+)"\\)\\)\\);\\s*)((?:eval\\((?:\\$\\w+\\()+"[^"]+"\\)+;\\s*)+)~msi',
    'id' => 'linesCond',
  ),
  51 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*\'[\'.error_reporting]+;\\s*\\1\\(0\\);((?:\\s*\\$\\w+\\s*=\\s*[\'abcdefgilnorstz64_.]+;)+)((?:\\s*\\$\\w+\\s*=\\s*\'[^;]+\';)+)((?:\\s*\\$\\w+\\()+)(\\$\\w+)[\\s\\)]+;\\s*die\\(\\);~mis',
    'id' => 'blackScorpShell',
  ),
  52 => 
  array (
    'fast' => '~()(\\$\\w+)\\s*=\\s*basename(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)trim(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)preg_replace(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)rawurldecode(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)"[%0-9A-F\\.]+"(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*),\\s*\'\',\\s*__FILE__(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*);(\\$\\w+)\\s*=\\s*"([%\\w\\.\\-\\~]+)";(?:(\\$\\w+)=[^;]+;\\5(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\'\',\\s*\'};\'\\s*\\.\\s*(?:(?:/\\*\\w+\\*/)*)\\()?(?:eval(?:(?:/\\*\\w+\\*/)*)\\()?(?:(?:/\\*\\w+\\*/)*)rawurldecode(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\s*\\^\\s*substr(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)str_repeat(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\2,\\s*(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)/strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\2(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\s*\\+\\s*1(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*),\\s*0,(?:(?:/\\*\\w+\\*/)*)\\s*strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:(?:/\\*\\w+\\*/)*)\\s*\\.\\s*\'{\'(?:(?:/\\*\\w+\\*/)*)\\))?(?:(?:/\\*\\w+\\*/)*);~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*\\w+\\*/)*))(\\$\\w+)\\s*=\\s*basename(?&c)\\((?&c)trim(?&c)\\((?&c)preg_replace(?&c)\\((?&c)rawurldecode(?&c)\\((?&c)"[%0-9A-F\\.]+"(?&c)\\)(?&c),\\s*\'\',\\s*__FILE__(?&c)\\)(?&c)\\)(?&c)\\)(?&c);(\\$\\w+)\\s*=\\s*"([%\\w\\.\\-\\~]+)";(?:(\\$\\w+)=[^;]+;\\5(?&c)\\((?&c)\'\',\\s*\'};\'\\s*\\.\\s*(?&c)\\()?(?:eval(?&c)\\()?(?&c)rawurldecode(?&c)\\((?&c)\\3(?&c)\\)(?&c)\\s*\\^\\s*substr(?&c)\\((?&c)str_repeat(?&c)\\((?&c)\\2,\\s*(?&c)\\((?&c)strlen(?&c)\\((?&c)\\3(?&c)\\)(?&c)/strlen(?&c)\\((?&c)\\2(?&c)\\)(?&c)\\)(?&c)\\s*\\+\\s*1(?&c)\\)(?&c),\\s*0,(?&c)\\s*strlen(?&c)\\((?&c)\\3(?&c)\\)(?&c)\\)(?&c)\\)(?:(?&c)\\s*\\.\\s*\'{\'(?&c)\\))?(?&c);~msi',
    'id' => 'xorFName',
  ),
  53 => 
  array (
    'full' => '~(\\$\\w{1,40})=base64_decode\\(\'[^\']+\'\\);(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);(\\$\\w+)=base64_decode\\(\'([^\']+)\'\\);eval\\(\\1\\(gzuncompress\\(\\2\\(\\3\\)\\)\\)\\);~msi',
    'id' => 'phpMess',
  ),
  54 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"([^\\"]+)\\";\\s*\\$\\w+\\s*=\\s*\\$\\w+\\(\\1,\\"[^\\"]+\\",\\"[^\\"]+\\"\\);\\s*\\$\\w+\\(\\"[^\\"]+\\",\\"[^\\"]+\\",\\"\\.\\"\\);~msi',
    'id' => 'pregReplaceSample05',
  ),
  55 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\w+\\(\'[^\\)]+\'\\);\\s*(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\\)]+\'\\);\\s*(\\$\\w+)\\s*=\\s*\\"([^\\"]+)\\";\\s*(\\$\\w+)\\s*=\\s*[^;]+;\\s*\\2\\(\\5,\\"[^\']+\'\\3\'[^\\"]+\\",\\"\\.\\"\\);~msi',
    'id' => 'pregReplaceB64',
  ),
  56 => 
  array (
    'full' => '~preg_replace\\([\'"]/\\(\\.\\*\\)/e[\'"],[\'"]([^\'"]+)[\'"],\\s?NULL\\);~msi',
    'id' => 'pregReplaceStr',
  ),
  57 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'([^\']+)\';\\s*\\1\\s*=\\s*gzinflate\\s*\\(base64_decode\\s*\\(\\1\\)\\);\\s*\\1\\s*=\\s*str_replace\\s*\\(\\"__FILE__\\",\\"\'\\$\\w+\'\\",\\1\\);\\s*eval\\s*\\(\\1\\);~msi',
    'id' => 'GBE',
  ),
  58 => 
  array (
    'full' => '~\\$GLOBALS\\[\'([_\\d]{3,20})\'\\]=array\\(([^;]*)\\);\\s*\\?><\\?\\s*function\\s*(_\\d{1,20})\\(\\$\\w{1,10}\\)\\s*{\\$\\w{1,10}=array\\(([^;]{10,1000})\\);return base64_decode\\(\\$\\w{1,10}\\[\\$\\w{1,10}\\]\\);}\\s*\\?><\\?php\\s*(if\\(\\3\\(\\d{1,3}\\)==\\$_GET\\[\\3\\(\\d{1,3}\\)\\]\\)\\s*{[^}]{0,100}\\}if[^}]{3,500}\\})~msi',
    'id' => 'globalsArrayDictFunc',
  ),
  59 => 
  array (
    'full' => '~(?:if\\s*\\(\\!isset\\(\\$\\w+\\)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\\w+;\\s*)?(\\$GLOBALS\\[\\s*[\'"]_+\\w{1,60}[\'"]\\s*\\])\\s*=\\s*\\s*array\\s*\\(\\s*(?>base64_decode\\s*\\([^)]+\\)[,\\)]|\'\\w*\'[,\\)])+;\\s*(?>\\?>\\s*\\<\\?(?>php)?\\s*)?(?:function\\s*(\\w+)\\((\\$\\w+)\\)\\{(?>static\\s*\\$\\w+=\\s*\\w+;\\s*if\\(\\$\\w+\\s*==\\s*\\w+\\)\\s*)?(\\$\\w+)=array\\([^\\)]+\\);return\\s*base64_decode\\(\\4\\[\\3\\]\\);\\})?\\s*(?>\\?\\>\\s*)?(?:\\<\\?(?>php)?(?:\\s*\\$GLOBALS\\[\\2\\(\\d+\\)\\]=array\\((?:\\1\\[\\d+\\]\\((?:\\2\\(\\d+\\)\\s*\\.?)+\\)+[,;])+)\\s*\\?\\>)?(?>\\<\\?)?(?>php)?(?:\\s*\\1\\[\\d+\\].+?\\2\\(\\d+\\)\\);exit\\(\\);[\\}\\s]+|\\s*\\1\\[\\d+\\]\\s*\\([^)]+\\)[^|]+[^;]+;\\s*if\\(\\1\\[\\d+\\]\\([^{]+\\{\\s*\\$\\w+=\\s*\\w+;\\s*include\\(\\$_\\d+\\);\\}|\\s*function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{[^}]+\\}\\s*\\?\\>\\<\\?\\s*\\$\\w+=\\$GLOBALS\\[\\2\\(\\d+\\)\\]\\[[^?]+\\$GLOBALS\\[\\2\\(\\d+\\)\\]\\[[^]]+\\]\\((?:\\$\\w+,?)+\\);|\\s*@?\\1\\[\\d+\\]\\([^@]+@\\1\\[\\d+\\]\\("[^"]+"\\);|(?:\\s*\\$\\w+\\s*\\.?=[^;]+;)+foreach\\([^)]+\\)\\1\\[\\d+\\]\\((?:\\$\\w+,?)+\\);|\\s*@?\\1\\[\\d+\\]\\([^@]+@\\1\\[\\d+\\]\\(\\2[^}]+\\}\\}else[^}]+\\}\\}|\\s*\\1\\[\\d+\\]\\([^?]+\\?[^?]+[^>]+>[^}]+}foreach\\([^}]+}[^|]+\\|\\|\\s*(?:[^}]+\\}){18}if\\(isset\\(\\$\\w+\\[\\2\\(\\d+\\)\\]\\)\\)\\{[^}]+}\\w+\\(\\$\\w+\\);if\\(\\$\\w+\\s*==\\s*\\$\\w+\\)\\w+\\(\\$\\w+\\);|\\s*@\\1\\[\\d+\\]\\((?:[^?]+\\?)+[^;]+;@\\1\\[\\d+\\]\\([^}]+}{5}|(?:function[^}]+})+(?:[^}]+})+}[^!]+(?:[^}]+})+else{return\\s*\\2\\(\\d+\\);\\}\\}|\\s*\\1\\[\\d+\\]\\(\\d+\\);(?:[^}]+})+\\s*if\\([^}]+\\}\\s*\\w+\\(\\s*\\2\\(\\d+\\)[^;]+;\\s*\\}|\\s*if\\([^}]+\\}\\}if\\([^}]+\\}\\1\\[\\d+\\]\\(\\$\\w+\\);\\}\\}|\\1\\[\\d+\\]\\((?:[^}]+}+)+if\\(@?\\$\\w+\\[\\2\\(\\d+\\)\\]\\!=\\s*[^{]+\\{\\$\\w+=\\w+\\(\\$\\w+\\[\\2\\(\\d+\\)\\]\\);if\\(\\1\\[\\d+\\]\\s*\\(\\2\\(\\d+\\),[^)]+\\)\\)\\{\\1\\[\\d+\\]\\(\\2\\(\\d+\\),\\$\\w+\\);\\}\\}|(?:\\s*[^}]+\\})+echo\\s*\\$\\w+;[^;]+;|[^}]+\\}else{[^}]+\\}\\}else\\{[^}]+\\}echo\\s*\\1\\[\\d+\\]\\([^}]+}\\s*}|\\$\\w+=\\2\\(\\d+\\);[^;]+;\\1\\[\\d+\\]\\((?:\\2\\(\\d+\\),?)+\\);|[^}]+}else{\\s*[^}]+\\}\\}else\\{[^}]+\\}if[^}]+}else\\s*if[^}]+\\}if[^{]+{\\1\\[\\d+\\]\\([^}]+\\}\\s*\\}|\\1\\[\\d+\\]\\s*\\([^}]+\\}if\\([^}]+}if\\(\\1[^}]+\\}else\\s*if\\([^}]+\\}\\1\\[\\d+\\]\\([^}]+\\}if\\([^)]+\\)\\]==\\s*\\2\\(\\d+\\)+eval\\(\\1\\[\\d+\\]\\(\\$\\w+[^)]+\\)+;|(?:[^}]+\\})+echo\\s*\\$\\w+;|(?:[^}]+\\}+)+;|\\1\\[\\d+\\]\\((?:[^{]+\\{+)+\\1\\[\\d+\\]\\(\\2[^;]+;\\}\\}|(?:[^{]+\\{)+\\1\\[\\d+\\]\\(\\2\\(\\d+\\)+;\\}echo\\s*\\$\\w+;|(?:[^{]+\\{)+[^}]+}if\\(@?\\$\\w+\\[\\2\\(\\d+\\)\\][^)]+\\)+eval\\(\\1\\[\\d+\\]\\(\\$\\w+[^)]+\\)+;|\\s*(?:\\$_\\d{1,3}=\\1\\[\\d{1,3}\\]\\(\\$_POST\\[\\2\\(\\d{1,3}\\)\\]\\);){1,10}\\$_\\d{1,3}=\\1\\[\\d{1,3}\\]\\([$_\\d,]{1,30}\\);if\\([$_\\d,]{2,5}\\){echo\\s\\2\\(\\d{1,3}\\);}else\\{echo\\s\\2\\(\\d{1,3}\\)\\s*\\.[_\\d$]{1,3};}\\s*\\?\\>)~msi',
    'fast' => '~\\$GLOBALS\\[\\s*[\'"]_+\\w{1,60}[\'"]\\s*\\]\\s*=\\s*\\s*array\\s*\\(\\s*base64_decode\\s*\\(~msi',
    'id' => 'Bitrix',
  ),
  60 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?__FILE__;\\s?(?:\\$\\w{1,50}\\s?=\\s?__LINE__;\\s?)?\\$\\w{1,50}\\s?=\\s?(\\d{1,10});\\s?eval\\(+((?:base64_decode\\(|gzuncompress\\()+[\'"][^"\']+[\'"]\\)+);\\s?return;\\s*\\?>\\s*([^\\s]+)~msi',
    'id' => 'lockit3',
  ),
  61 => 
  array (
    'full' => '~\\$\\w{1,40}\\s*=\\s*(__FILE__|__LINE__);\\s*\\$\\w{1,40}\\s*=\\s*(\\d+);\\s*eval(\\s*\\()+\\$?\\w+\\s*\\([\'"][^\'"]+[\'"](\\s*\\))+;\\s*return\\s*;\\s*\\?>(.+)~msi',
    'id' => 'B64inHTML',
  ),
  62 => 
  array (
    'full' => '~<\\?php\\s+(?:/[*/].*?)?(?:\\$[O0]*=__FILE__;\\s*)?(\\$[O0]*)=urldecode\\(\'([%a-f0-9]+)\'\\);(\\$(GLOBALS\\[\')?[O0]*(\'\\])?=(\\d+);)?(.*?)(\\$(GLOBALS\\[\')?[O0]*(\'\\])?\\.?=(\\$(GLOBALS\\[\')?[O0]*(\'\\])?([{\\[]\\d+[}\\]])?\\.?)+;)+([^\\?]+)\\?\\>[\\s\\w\\~=/+\\\\^{`%|@[\\]}]+~msi',
    'fast' => '~(\\$[O0]*)=urldecode\\(\'([%a-f0-9]+)\'\\);(\\$(GLOBALS\\[\')?[O0]*(\'\\])?=(\\d+);)?(.*?)(\\$(GLOBALS\\[\')?[O0]*(\'\\])?\\.?=(\\$(GLOBALS\\[\')?[O0]*(\'\\])?([{\\[]\\d+[}\\]])?\\.?)+;)+([^\\?]+)\\?\\>[\\s\\w\\~=/+\\\\^{`%|@[}]+~msi',
    'id' => 'LockIt',
  ),
  63 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\\s*@?eval\\s*\\(\\1\\s*\\([^\\)]+\\)+\\s*;~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*\\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\\s*@?eval\\s*\\(\\1\\s*\\(~msi',
    'id' => 'FOPO',
  ),
  64 => 
  array (
    'full' => '~\\$_F=__FILE__;\\$_X=\'([^\']+\');eval\\([^\\)]+\\)+;~msi',
    'fast' => '~\\$_F=__FILE__;\\$_X=\'([^\']+\');eval\\(~ms',
    'id' => 'ByteRun',
  ),
  65 => 
  array (
    'precheck' => 
    array (
      0 => '~(urldecode|base64_decode){0,1}~msi',
      1 => '~(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}~msi',
      2 => '~(\\$\\w{1,40}=\'[^\']+\';\\s*)+(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}~msi',
    ),
    'full' => '~(\\$\\w{1,40}=\'[^\']+\';\\s*)+(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}\\(?[\'"]([\\w+%=-]+)[\'"]\\)?;((\\$\\w+)=[^;]+;)+[^\\(]+\\(\'Content-Type.*?;\\${"[^"]+"}\\["[\\\\x0-9a-f]+"\\]\\(\\);~msi',
    'id' => 'Urldecode',
  ),
  66 => 
  array (
    'full' => '~(\\$[\\w{1,40}]+)\\s?=\\s?(urldecode|base64_decode)\\(?[\'"]([\\w+%=\\-/\\\\\\*]+)[\'"]\\);(\\s*\\$\\w+\\.?\\s?=\\s?@?((?:\\$\\w+\\s*\\.\\s*)?\\$\\w+[{\\[]\\d+[}\\]]\\s*[\\.;]?\\s*)+)+((\\$\\w+=["\']([^\'"]+)[\'"];\\s*eval\\(\'\\?>\'\\.[\\$\\w\\(\\)\\*\\d,\\s]+);|(eval\\(\\s*\\$\\w+\\([\'"]([^\'"]+)[\'"][)\\s]+;)|header\\(\'[^\']+\'\\);(?:\\$\\w+=\\${[^}]+}\\[[^\\]]+\\]\\(\'.*?\'?;}?\'\\);)+\\${[^}]+}\\[[^\\]]+\\]\\(\\);)~msi',
    'id' => 'UrlDecode2',
  ),
  67 => 
  array (
    'precheck' => 
    array (
      0 => '~(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+~msi',
    ),
    'fast' => '~(?:\\$\\w{1,40}\\s?=\\s?[\'"]?[\\d\\w]+[\'"]?;\\s*)*()(?:(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+(?:global\\s*\\$\\w+;\\s*)?(\\$[\\w{1,40}]+)\\s?=\\s?urldecode\\(\\2\\);|\\$\\w{1,40}\\s?=\\s?urldecode\\([\'"][^\'"]+[\'"]\\);(?:\\s*header\\(\'Content-Type:[^\\)]+\\);\\s*(?:\\$\\w+="\\d+";\\s*)+)?function\\s*\\w+\\([^{]+\\{global\\s*\\$\\w+;)\\s*.+?\\$\\w{1,40}(?:.{1,1000}\\$\\w{1,40}[{\\[]\\d+[}\\]]\\.?)+?.*?(?:function\\s*(\\w+)\\(\\$\\w+\\s*=\\s*\'\'\\)\\{global\\s*\\$\\w{1,40};@.+\\5\\(\\);|function\\s*\\w+\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\s*\\{\\$\\w+\\s*[^)]+\\)[^}]+;\\}|header\\((?:\\$\\w{1,40}[\\[\\{]\\d+[\\]\\}]\\s?\\.?\\s?)+\\).?\\s?})~msi',
    'full' => '~(?:\\$\\w{1,40}\\s?=\\s?[\'"]?[\\d\\w]+[\'"]?;\\s*)*()(?|(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+(?:global\\s*\\$\\w+;\\s*)?(\\$[\\w{1,40}]+)\\s?=\\s?urldecode\\(\\2\\);|(\\$\\w{1,40})\\s?=\\s?urldecode\\([\'"]([^\'"]+)[\'"]\\);(?:\\s*header\\(\'Content-Type:[^\\)]+\\);\\s*(?:\\$\\w+="\\d+";\\s*)+)?function\\s*\\w+\\([^{]+\\{global\\s*(\\$\\w+);)\\s*.+?\\4(?:.{1,1000}\\4[{\\[]\\d+[}\\]]\\.?)+?.*?(?:function\\s*(\\w+)\\(\\$\\w+\\s*=\\s*\'\'\\)\\{global\\s*\\4;@.+\\5\\(\\);|function\\s*\\w+\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\s*\\{\\$\\w+\\s*[^)]+\\)[^}]+;\\}|header\\((?:\\4[\\[\\{]\\d+[\\]\\}]\\s?\\.?\\s?)+\\).?\\s?})~msi',
    'id' => 'UrlDecode3',
  ),
  68 => 
  array (
    'full' => '~(?:@?session_start\\(\\);)?(?:@?(?:set_time_limit|error_reporting)\\(\\d+\\);){1,2}(?:ini_set\\(base64_decode\\([\'"][^\'"]+[\'"]\\)|@\\$\\w{1,50}=\\$_POST\\[base64_decode\\([\'"][^\'"]+[\'"]\\)\\];|if\\((?:\\w{1,50}\\(\\)\\){foreach\\(\\$_POST\\s{0,50}as\\s{0,50}\\$\\w{1,50}=>\\$\\w{1,50}\\)|\\$_GET|!empty\\(\\$_SERVER\\[))(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\)+\\.?){1,200}\\]?(?:\\)\\)|;})?(?:;return\\s?\\$\\w{1,50};})?;?~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  69 => 
  array (
    'full' => '~echo\\s{0,50}base64_decode\\(\'[^\']+\'\\);\\s{0,50}echo\\s{0,50}base64_decode\\(\'[^\']+\'\\)\\.php_uname\\(\\)\\.base64_decode\\(\'[^\']+\'\\);.*?else\\s{0,50}{\\s{0,50}echo\\s{0,50}base64_decode\\(\'[^\']+\'\\);\\s{0,50}}}}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  70 => 
  array (
    'full' => '~{(\\$\\w{1,100})\\s?=(?:\\s?base64_decode\\(\'[^\']+\'\\)\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\1\\(base64_decode\\(\'[^\']+\'\\),(?:\\s?base64_decode\\(\'[^\']+\'\\)\\.?)+\\);\\2\\(base64_decode\\(\'([^\']+)\'\\)\\);exit;}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  71 => 
  array (
    'full' => '~eval\\(base64_decode\\(\'[^\']+\'\\)\\.file_get_contents\\(base64_decode\\(\'[^\']+\'\\)\\)\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  72 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}->get\\(base64_decode\\([\'"][^\'"]+[\'"]\\)(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\)){1,200}\\)\\s?\\)\\s?{~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  73 => 
  array (
    'full' => '~\\${base64_decode\\(\'[^\']+\'\\)}\\[base64_decode\\(\'[^\']+\'\\)]\\s?=\\s?base64_decode\\(\'[^\']+\'\\);if\\(isset\\(\\$_GET\\[base64_decode\\(\'[^\']+\'\\)]\\).*?\\${\\${base64_decode\\(\'[^\']+\'\\)}\\[base64_decode\\(\'[^\']+\'\\)]}\\(base64_decode\\(\'[^\']+\'\\)\\);exit;}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  74 => 
  array (
    'fast' => '~(?:\\$GLOBALS\\["[^"]+"\\]\\s*=\\s*base64_decode\\s*\\((?:"[^"]*")?(?:\'[^\']*\')?\\);\\s*)+function\\s*(\\w+)\\s*\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*curl_init\\s*\\(\\$GLOBALS[^}]+\\}\\s*(\\$\\w+)\\s*=\\s*\\1\\s*\\(\\$GLOBALS\\[[^\\)]+\\);\\s*eval\\s*\\((?:"[^"]*"\\s*\\.\\s*)?\\2\\);~msi',
    'full' => '~(?:\\$GLOBALS\\["[^"]+"\\]\\s*=\\s*base64_decode\\s*\\((?|"[^"]*"|\'[^\']*\')\\);\\s*)+function\\s*(\\w+)\\s*\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*curl_init\\s*\\(\\$GLOBALS[^}]+\\}\\s*(\\$\\w+)\\s*=\\s*\\1\\s*\\(\\$GLOBALS\\[[^\\)]+\\);\\s*eval\\s*\\((?:"[^"]*"\\s*\\.\\s*)?\\2\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  75 => 
  array (
    'fast' => '~()(?:error_reporting\\(0\\);\\s*ignore_user_abort;\\s*sleep\\(\\d+\\);)?\\$\\w+\\s*=\\s*\\(\\(\\!empty\\(\\$_SERVER\\[(?:base64_decode\\(\'[^\']+\'\\))\\s*\\]\\)+\\s*\\?\\s*(?:base64_decode\\(\'[^\']+\'\\))\\s*:[^;]+;\\s*\\$\\w+\\s*=\\s*str_replace\\((?:base64_decode\\(\'[^\']+\'\\)),\\s*\'\',\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*(?:base64_decode\\(\'[^\']+\'\\));\\s*)+\\$\\w+\\s*=\\s*rand\\(\\d+,\\s*\\d+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*base64_decode\\((?:base64_decode\\(\'[^\']+\'\\))\\);\\s*)+.*?\\$\\w+\\s*=\\s*array\\((?:(?:base64_decode\\(\'[^\']+\'\\)),?\\s*)+\\);\\s*for\\s*\\([^}]+\\}\\s*(\\$\\w+)\\s*=\\s*basename\\(__FILE__,\\s*(?:base64_decode\\(\'[^\']+\'\\))\\)[^;]+;\\s*(\\$\\w+)\\s*=\\s*file_get_contents\\(\\2\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\([^;]+;\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*exec\\((?:base64_decode\\(\'[^\']+\'\\))[^;]+;~msi',
    'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\\(\'[^\']+\'\\))))(?:error_reporting\\(0\\);\\s*ignore_user_abort;\\s*sleep\\(\\d+\\);)?\\$\\w+\\s*=\\s*\\(\\(\\!empty\\(\\$_SERVER\\[(?&s)\\s*\\]\\)+\\s*\\?\\s*(?&s)\\s*:[^;]+;\\s*\\$\\w+\\s*=\\s*str_replace\\((?&s),\\s*\'\',\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*(?&s);\\s*)+\\$\\w+\\s*=\\s*rand\\(\\d+,\\s*\\d+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*base64_decode\\((?&s)\\);\\s*)+.*?\\$\\w+\\s*=\\s*array\\((?:(?&s),?\\s*)+\\);\\s*for\\s*\\([^}]+\\}\\s*(\\$\\w+)\\s*=\\s*basename\\(__FILE__,\\s*(?&s)\\)[^;]+;\\s*(\\$\\w+)\\s*=\\s*file_get_contents\\(\\2\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\([^;]+;\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*exec\\((?&s)[^;]+;~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  76 => 
  array (
    'full' => '~if\\s?\\(isset\\(\\$_POST\\[[\'"][^\'"]+[\'"]\\]\\)\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?substr\\(\\$_POST\\[[\'"][^\'"]+[\'"]\\],\\s?\\d+\\);(?:[^;]+;\\s?){2}\\$\\w{1,50}\\s?=\\s?proc_open\\(base64_decode\\([\'"][^\'"]+[\'"]\\),\\s?array[^;]+;\\s?}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  77 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?ignore_user_abort\\(true\\);\\s?sleep\\(\\d{1,5}\\);(?:\\$\\w{1,50}\\s?=\\s?rand[^;]+;)?(?:(?:if\\(\\$\\w{1,50}==\\d+\\))?(\\$\\w{1,100})\\s?=\\s?base64_decode\\(base64_decode\\(\'[^\']+\'\\)\\);)+.*?chmod\\((?:base64_decode\\()?[\'"]?[^\'"]+[\'"]?\\)?,\\d+\\);.*?base64_decode\\((?:base64_decode\\()?[\'"][^\'"]+[\'"]\\)\\);(?:chmod\\()?(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\))+(?:\\.__DIR__\\."[^"]+",\\$\\w+\\);@?unlink\\("?\\$\\w+"?\\));~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  78 => 
  array (
    'fast' => '~()(?:\\$\\w+\\s*=\\s*"\\w{32}";|=@?NULL;)(?:\\s*(?:(?:\\$\\{)+(?:(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))|\\$\\w+)\\}(?:\\[(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\])?\\}?|\\$\\w+)=(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\));)+\\s*eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\(\\$\\{\\$\\{(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\}\\[(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\]\\}\\)+;\\s*(?:__halt_compiler\\(\\);)?\\s*exit;~msi',
    'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))))(?:\\$\\w+\\s*=\\s*"\\w{32}";|=@?NULL;)(?:\\s*(?:(?:\\$\\{)+(?:(?&s)|\\$\\w+)\\}(?:\\[(?&s)\\])?\\}?|\\$\\w+)=(?&s);)+\\s*eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\(\\$\\{\\$\\{(?&s)\\}\\[(?&s)\\]\\}\\)+;\\s*(?:__halt_compiler\\(\\);)?\\s*exit;~msi',
    'id' => 'manyB64WithVarNorm',
  ),
  79 => 
  array (
    'full' => '~explode\\(\\"\\*\\*\\*\\",\\s*\\$\\w+\\);\\s*eval\\(eval\\(\\"return strrev\\(base64_decode\\([^\\)]+\\)+;~msi',
    'fast' => '~explode\\(\\"\\*\\*\\*\\",\\s*\\$\\w+\\);\\s*eval\\(eval\\(\\"return strrev\\(base64_decode\\(~msi',
    'id' => 'cobra',
  ),
  80 => 
  array (
    'full' => '~\\$[O0]+=\\(base64_decode\\(strtr\\(fread\\(\\$[O0]+,(\\d+)\\),\'([^\']+)\',\'([^\']+)\'\\)\\)\\);eval\\([^\\)]+\\)+;~msi',
    'fast' => '~\\$[O0]+=\\(base64_decode\\(strtr\\(fread\\(\\$[O0]+,(\\d+)\\),\'([^\']+)\',\'([^\']+)\'\\)\\)\\);eval\\(~msi',
    'id' => 'strtrFread',
  ),
  81 => 
  array (
    'full' => '~if\\s*\\(\\!extension_loaded\\(\'IonCube_loader\'\\)\\).+pack\\(\\"H\\*\\",\\s*\\$__ln\\(\\"/\\[A-Z,\\\\r,\\\\n\\]/\\",\\s*\\"\\",\\s*substr\\(\\$__lp,\\s*([0-9a-fx]+\\-[0-9a-fx]+)\\)\\)\\)[^\\?]+\\?\\>\\s*[0-9a-z\\r\\n]+~msi',
    'fast' => '~IonCube_loader~ms',
    'id' => 'FakeIonCube',
  ),
  82 => 
  array (
    'full' => '~(\\$\\w{1,40})="([\\w\\]\\[\\<\\&\\*\\_+=/]{300,})";\\$\\w+=\\$\\w+\\(\\1,"([\\w\\]\\[\\<\\&\\*\\_+=/]+)","([\\w\\]\\[\\<\\&\\*\\_+=/]+)"\\);~msi',
    'id' => 'strtrBase64',
  ),
  83 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*array\\((\'[^\']+\',?)+\\);\\s*.+?(\\$_\\w{1,40}\\[\\w+\\])\\s*=\\s*explode\\(\'([^\']+)\',\\s*\'([^\']+)\'\\);.+?(\\2\\[[a-fx\\d]+\\])\\(\\);(.+?\\2)+.+}~msi',
    'fast' => '~(\\$_\\w{1,40}\\[\\w+\\])\\s*=\\s*explode\\(\'([^\']+)\',\\s*\'([^\']+)\'\\);.+?(\\1\\[[a-fx\\d]+\\])\\(\\);~msi',
    'id' => 'explodeSubst',
  ),
  84 => 
  array (
    'full' => '~(\\$[\\w{1,40}]+)\\s*=\\s*\'([\\w+%=\\-\\#\\\\\'\\*]+)\';(\\$[\\w+]+)\\s*=\\s*Array\\(\\);(\\3\\[\\]\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;+)+(.+\\3)[^}]+}~msi',
    'fast' => '~(\\$[\\w{1,40}]+)\\s*=\\s*\'([\\w+%=\\-\\#\\\\\'\\*]+)\';(\\$[\\w+]+)\\s*=\\s*Array\\(\\);(\\3\\[\\]\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;+)+~msi',
    'id' => 'subst',
  ),
  85 => 
  array (
    'full' => '~if\\s{0,50}\\(!(?:function_exists|\\$\\W{1,50})\\(\\"([\\w\\W]{1,50})\\"\\)\\)\\s{0,50}{\\s{0,50}function \\1\\(.+?eval\\(\\1\\(\\"([^\\"]+)\\"\\)\\);~msi',
    'fast' => '~if\\s{0,50}\\(!(?:function_exists|\\$\\W{1,50})\\(\\"([\\w\\W]{1,50})\\"\\)\\)\\s{0,50}{\\s{0,50}function \\1\\(.+?eval\\(\\1\\(\\"[^\\"]+\\"\\)\\);~msi',
    'id' => 'decoder',
  ),
  86 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"riny\\(\\"\\.(\\$\\w+)\\(\\"base64_decode\\"\\);\\s*(\\$\\w+)\\s*=\\s*\\2\\(\\1\\.\'\\("([^"]+)"\\)\\);\'\\);\\s*\\$\\w+\\(\\3\\);~msi',
    'id' => 'GBZ',
  ),
  87 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$GLOBALS\\[\'[^\']+\'\\]\\s*=\\s*Array\\(\\);\\s*global\\s*\\$\\w+;(\\$\\w{1,40})\\s*=\\s*\\$GLOBALS;\\$\\{"\\\\x[a-z0-9\\\\]+"\\}\\[(\'\\w+\')\\]\\s*=\\s*\\"(([^\\"\\\\]|\\\\.)*)\\";\\1\\[(\\1\\[\\2\\]\\[\\d+\\].?).+?exit\\(\\);\\}+~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*\\$GLOBALS;\\$\\{"\\\\x[a-z0-9\\\\]+"\\}\\[(\'\\w+\')\\]\\s*=\\s*\\"(([^\\"\\\\]|\\\\.)*)\\";\\1\\[(\\1\\[\\2\\]\\[\\d+\\].?)~msi',
    'id' => 'globalsArray',
  ),
  88 => 
  array (
    'full' => '~(\\${(["\\w\\\\]+)}\\[["\\w\\\\]+\\]=["\\w\\\\]+;)+((\\${\\${(["\\w\\\\]+)}\\[["\\w\\\\]+\\]}).?=((urldecode\\(["%\\w]+\\);)|(\\${\\${["\\w\\\\]+}\\[["\\w\\\\]+\\]}{\\d+}.?)+;))+eval\\(\\${\\${["\\w\\\\]+}\\[["\\w\\\\]+\\]}\\(["\\w+=]+\\)\\);~msi',
    'id' => 'xbrangwolf',
  ),
  89 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'(\\\\.|[^\']){0,100}\';\\s*\\$\\w+\\s*=\\s*\'(\\\\.|[^\']){0,100}\'\\^\\1;[^)]+\\)+;\\s*\\$\\w+\\(\\);~msi',
    'fast' => '~((?>\\$\\w{1,40}))\\s*=\\s*\'((?>\\.|[^\']){0,100})\';\\s*\\$\\w+\\s*=\\s*\'((?>\\.|[^\']){0,100})\'\\^\\1;~msi',
    'id' => 'xoredVar',
  ),
  90 => 
  array (
    'full' => '~(?:(?:\\$\\w+=\'[^\']+\';\\s*)+(?:\\$\\w+=\'[^\']+\'\\^\'[^\']+\';\\s*)+.{0,50})?\\$\\w{1,40}=\'[^\']{0,100}(?:\'\\^\')?[^\']*\';(?:\\$\\w{1,40}=\\w{1,3};)?(?:\\$\\w{1,40}=\'[^\']+(?:\'\\^\')?[^\']*\';)+(?:.{0,6000}?)if\\(\\$\\w{1,40}==\\$\\w{1,40}\\(\\$\\w{1,40}\\)\\){(?:.{0,6000}?)(\\$\\w+)=\\$\\w+\\(\\$\\w+,\\$\\w+\\);\\1\\(\'[^\']+\',\'[^\']+\'\\);}.{0,300}\\$\\w{1,40}(?:\\(\'[^\']{0,100}\',\'[^\']{0,100}\'\\))?(?:.{0,300}\\s*;\\s*\'[^\']+\';){0,2}~msi',
    'fast' => '~\\$\\w{1,40}=\'[^\']{0,100}(?:\'\\^\')[^\']*\';(?:\\$\\w{1,40}=\'[^\']+(?:\'\\^\')?[^\']*\';)+~msi',
    'id' => 'xoredVar',
  ),
  91 => 
  array (
    'full' => '~(\\$\\w+)=fopen\\(__FILE__,\'r\'\\);(\\$\\w+)=fread\\(\\1,filesize\\(__FILE__\\)\\);fclose\\(\\1\\);(\\$\\w+)=explode\\(hex2bin\\(\'([^\']+)\'\\),\\2\\)\\[(\\d)\\];(\\$\\w+)=\\[\\];for\\((\\$\\w+)=0;\\7<strlen\\(\\3\\);\\7\\+\\+\\)\\6\\[\\]=ord\\(\\3\\[\\7\\]\\)\\s*xor\\s*\\7;eval\\(hex2bin\\(base64_decode\\(implode\\(array_map\\(hex2bin\\(\'([^\']+)\'\\),\\6\\)\\)\\)\\)\\);__halt_compiler\\(\\);\\w+~msi',
    'id' => 'D5',
  ),
  92 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'([^\']*)\';\\s*(\\$\\w{1,40})\\s*=\\s*explode\\s*\\((chr\\s*\\(\\s*\\(\\d+\\-\\d+\\)\\)),substr\\s*\\(\\1,\\s*\\((\\d+\\-\\d+)\\),\\s*\\(\\s*(\\d+\\-\\d+)\\)\\)\\);\\s*(\\$\\w{1,40})\\s*=\\s*\\3\\[\\d+\\]\\s*\\(\\3\\[\\s*\\(\\d+\\-\\d+\\)\\]\\);\\s*(\\$\\w{1,40})\\s*=\\s*\\3\\[\\d+\\]\\s*\\(\\3\\[\\s*\\(\\d+\\-\\d+\\)\\]\\);\\s*if\\s*\\(!function_exists\\s*\\(\'([^\']*)\'\\)\\)\\s*\\{\\s*function\\s*\\9\\s*\\(.+\\1\\s*=\\s*\\$\\w+[+\\-\\*]\\d+;~msi',
    'fast' => '~(\\$\\w{1,40})\\s=\\s\'([^\']*)\';\\s(\\$\\w{1,40})=explode\\((chr\\(\\(\\d+\\-\\d+\\)\\)),substr\\(\\1,\\((\\d+\\-\\d+)\\),\\((\\d+\\-\\d+)\\)\\)\\);\\s(\\$\\w{1,40})\\s=\\s\\3\\[\\d+\\]\\(\\3\\[\\(\\d+\\-\\d+\\)\\]\\);\\s(\\$\\w{1,40})\\s=\\s\\3\\[\\d+\\]\\(\\3\\[\\(\\d+\\-\\d+\\)\\]\\);\\sif\\s\\(!function_exists\\(\'([^\']*)\'\\)\\)\\s\\{\\sfunction\\s*\\9\\(~msi',
    'id' => 'arrayOffsets',
  ),
  93 => 
  array (
    'precheck' => 
    array (
      0 => '~explode\\(chr\\(~msi',
      1 => '~substr\\(~msi',
      2 => '~if\\s?\\(!function_exists\\(~msi',
      3 => '~if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)~msi',
    ),
    'full' => '~(\\$\\w+)\\s?=\\s?(?|\'([^\']+)\'|"([^"]+)");\\s?(\\$\\w+)\\s?=\\s?explode\\(chr\\(+(\\d+\\s?[-+]\\s?\\d+)\\)+,\\s?[\'"]((?:\\d+,?)+)[\'"]\\);\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)\\s?{\\s?function\\s?\\9\\((\\$\\w+),\\s?(\\$\\w+)\\)\\s?{\\s?(\\$\\w+)\\s?=\\s?NULL;\\s?for\\s?\\((\\$\\w+)\\s?=\\s0;\\s?\\13\\s?<\\s?\\(sizeof\\(\\10\\)\\s?/\\s?(\\d+)\\);\\s?\\13\\+\\+\\)\\s?{\\s?\\12\\s?\\.=\\s?substr\\(\\11,\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\],\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\s?\\+\\s?(\\d+)\\]\\);\\s?}\\s?return\\s?\\12;\\s?}\\s;\\s?}\\s?(\\$\\w+)\\s?=\\s?[\'"](.*?eval\\(str_replace\\(chr\\(\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\),\\s?chr\\(\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\),\\s?\\9\\(\\3,\\1\\)\\)\\);.*?)[\'"];\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?\\22\\(\\6,\\s?\\18,\\s?NULL\\);\\s?\\22\\s?=\\s?\\18;\\s?\\22\\s?=\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\s?\\-\\s?\\d+;~msi',
    'fast' => '~(\\$\\w+)\\s?=\\s?(?:\'([^\']+)\'|"[^"]+");\\s?(\\$\\w+)\\s?=\\s?explode\\(chr\\(+(\\d+\\s?[-+]\\s?\\d+)\\)+,\\s?[\'"]((?:\\d+,?)+)[\'"]\\);\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)\\s?{\\s?function\\s?\\9\\((\\$\\w+),\\s?(\\$\\w+)\\)\\s?{\\s?(\\$\\w+)\\s?=\\s?NULL;\\s?for\\s?\\((\\$\\w+)\\s?=\\s0;\\s?\\13\\s?<\\s?\\(sizeof\\(\\10\\)\\s?/\\s?(\\d+)\\);\\s?\\13\\+\\+\\)\\s?{\\s?\\12\\s?\\.=\\s?substr\\(\\11,\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\],\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\s?\\+\\s?(\\d+)\\]\\);\\s?}\\s?return\\s?\\12;\\s?}\\s;\\s?}\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?\\20\\(\\6,\\s?\\18,\\s?NULL\\);\\s?\\20\\s?=\\s?\\18;\\s?\\20\\s?=\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\s?\\-\\s?\\d+;~msi',
    'id' => 'arrayOffsetsEval',
  ),
  94 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*array\\((\'\\d+\',?)+\\);)+\\$\\w{1,40}=\\"([^\\"]+)\\";if\\s*\\(!function_exists\\(\\"\\w{1,50}\\"\\)\\)\\s*\\{\\s*function\\s*[^\\}]+\\}\\s*return\\s*\\$\\w+;\\}[^}]+}~msi',
    'fast' => '~(\\$\\w{1,50}=\\s*array\\((\'\\d+\',?)+\\);)+\\$\\w{1,40}=\\"[^\\"]+\\";if\\s*\\(!function_exists\\(\\"\\w{1,50}\\"\\)\\)\\{\\s*function ~msi',
    'id' => 'obfB64',
  ),
  95 => 
  array (
    'full' => '~if\\(\\!function_exists\\(\'findsysfolder\'\\)\\){function findsysfolder\\(\\$fld\\).+\\$REXISTHEDOG4FBI=\'([^\']+)\';\\$\\w+=\'[^\']+\';\\s*eval\\(\\w+\\(\'([^\']+)\',\\$REXISTHEDOG4FBI\\)\\);~msi',
    'fast' => '~if\\(!function_exists\\(\'findsysfolder\'\\)\\){function findsysfolder\\(\\$fld\\)\\{\\$fld1=dirname\\(\\$fld\\);\\$fld=\\$fld1\\.\'/scopbin\';clearstatcache\\(\\);if\\(!is_dir\\(\\$fld\\)\\)return findsysfolder\\(\\$fld1\\);else return \\$fld;\\}\\}require_once\\(findsysfolder\\(__FILE__\\)\\.\'/911006\\.php\'\\);~msi',
    'id' => 'sourceCop',
  ),
  96 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\s*\\(\\s*(\\$\\w{1,40})\\s*,\\s*(\\$\\w{1,40})\\s*\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=\\s*str_rot13\\s*\\(\\s*gzinflate\\s*\\(\\s*str_rot13\\s*\\(\\s*base64_decode\\s*\\(\\s*[\'"][^\'"]*[\'"]\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(if\\s*\\(\\s*\\$\\w+\\s*==[\'"][^\'"]*[\'"]\\s*\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=(\\$\\w+[\\{\\[]\\d+[\\}\\]]\\.?)+;return\\s*(\\$\\w+)\\(\\3\\);\\s*\\}\\s*else\\s*)+\\s*if\\s*\\(\\s*\\$\\w+\\s*==[\'"][^\'"]*[\'"]\\s*\\)\\s*\\{\\s*return\\s*eval\\(\\3\\);\\s*\\}\\s*\\};\\s*(\\$\\w{1,40})\\s*=\\s*[\'"][^\'"]*[\'"];(\\s*\\9\\([\'"][^\'"]*[\'"],)+\\s*[\'"][^\'"]*[\'"]\\s*\\)+;~msi',
    'id' => 'webshellObf',
  ),
  97 => 
  array (
    'full' => '~(\\$\\w{1,40})=\'([^\'\\\\]|.*?)\';\\s*((\\$\\w{1,40})=(\\1\\[\\d+].?)+;\\s*)+(\\$\\w{1,40})=\'\';\\s*(\\$\\w{1,40})\\(\\6,\\$\\w{1,40}\\.\\"([^\\"]+)\\"\\.\\$\\w{1,40}\\.\\4\\);~msi',
    'fast' => '~(\\$\\w{1,40})=\'([^\\\\\']|.*?)\';\\s*((\\$\\w{1,40})=(\\1\\[\\d+].?)+;\\s*)+(\\$\\w{1,40})=\'\';~msi',
    'id' => 'substCreateFunc',
  ),
  98 => 
  array (
    'full' => '~@error_reporting\\(0\\);\\s*@ini_set\\(\'error_log\',NULL\\);\\s*@ini_set\\(\'log_errors\',0\\);\\s*@ini_set\\(\'display_errors\',\\s*0\\);\\s*@(\\$\\w+)="[create_function"\\.]+;\\s*(\\$\\w+)=\\1\\("([^"]+)","[eval\\."]+\\(\'\\?>\'\\.[base64_decode"\\.]+\\(\\3\\)\\);"\\);\\s*\\2\\("([^"]+)"\\);exit;~msi',
    'id' => 'Obf_20200507_2',
  ),
  99 => 
  array (
    'full' => '~\\$\\w+=([create_function"\'.]+);\\s?\\$\\w+=\\$\\w+\\([\'"]\\\\?\\$\\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\\.?)+)\\.([\'"](\\([\'"]\\?>[\'"]\\.)\\w+[\'"]\\.[^)\\\\]+)\\\\?\\$\\w+\\)+;[\'"]\\);\\s?\\$\\w+\\([\'"]([\\w\\+=\\\\\'"%/]+)[\'"]\\);~msi',
    'id' => 'createFunc',
  ),
  100 => 
  array (
    'full' => '~(?(DEFINE)(?\'foreach\'(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*))(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*"";(?P>foreach)if\\(isset\\(\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\]\\)+\\{\\s*\\$\\w+\\s*=\\s*\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\];(?:\\s*\\$\\w+\\s*=\\s*"";\\s*)+(?P>foreach)+\\$\\w+\\s*=\\s*\\$\\w+\\([create_function\'\\.]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\)\\);\\s*\\$\\w+\\(\\);\\s*(?:exit\\(\\);)?\\s*}~msi',
    'fast' => '~()(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*"";(?:(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*)if\\(isset\\(\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\]\\)+\\{\\s*\\$\\w+\\s*=\\s*\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\];(?:\\s*\\$\\w+\\s*=\\s*"";\\s*)+(?:(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*)+\\$\\w+\\s*=\\s*\\$\\w+\\([create_function\'\\.]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\)\\);\\s*\\$\\w+\\(\\);~msi',
    'id' => 'forEach',
  ),
  101 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*base64_decode\\s*\\([\'"][^\'"]+[\'"]\\);\\s*if\\s*\\(!function_exists\\s*\\("rotencode"\\)\\).{0,1000}eval\\s*\\(\\$\\w+\\s*\\(base64_decode\\s*\\([\'"][^"\']+[\'"]\\)+;~msi',
    'id' => 'PHPMyLicense',
  ),
  102 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*if\\(!function_exists\\(\\"([^\\"]*)\\"\\)\\)\\{function\\s*\\2\\((\\$\\w{1,40}),(\\$\\w{1,40})=\\d+\\)\\{(\\$\\w{1,40})=implode\\(\\"[^\\"]*\\",\\3\\);(\\$\\w{1,40})=array\\((\\d+),(\\d+),(\\d+)\\);if\\(\\4==0\\)\\s*(\\$\\w{1,40})=substr\\(\\5,\\6\\[\\d+\\],\\6\\[\\d+\\]\\);elseif\\(\\4==1\\)\\s*\\10=substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\],\\6\\[\\d+\\]\\);else\\s*\\10=trim\\(substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\)\\);return\\s*\\(\\10\\);\\}\\}\\s*eval\\(base64_decode\\(\\2\\(\\1\\)\\)\\);\\s*eval\\(\\w{1,40}\\(\\2\\(\\1\\s*,\\s*2\\)\\s*,\\s*\\2\\(\\1\\s*,\\s*1\\)\\)\\);\\s*__halt_compiler\\(\\);\\s*[\\w\\+\\=/]+~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*if\\(!function_exists\\(\\"([^\\"]*)\\"\\)\\)\\{function\\s*\\2\\((\\$\\w{1,40}),(\\$\\w{1,40})=\\d+\\)\\{(\\$\\w{1,40})=implode\\(\\"[^\\"]*\\",\\3\\);(\\$\\w{1,40})=array\\((\\d+),(\\d+),(\\d+)\\);if\\(\\4==0\\)\\s*(\\$\\w{1,40})=substr\\(\\5,\\6\\[\\d+\\],\\6\\[\\d+\\]\\);elseif\\(\\4==1\\)\\s*\\10=substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\],\\6\\[\\d+\\]\\);else\\s*\\10=trim\\(substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\)\\);return\\s*\\(\\10\\);\\}\\}\\s*eval\\(base64_decode\\(\\2\\(\\1\\)\\)\\);\\s*eval\\(\\w{1,40}\\(\\2\\(\\1\\s*,\\s*2\\)\\s*,\\s*\\2\\(\\1\\s*,\\s*1\\)\\)\\);\\s*__halt_compiler\\(\\);~msi',
    'id' => 'zeura',
  ),
  103 => 
  array (
    'full' => '~<\\?php(?:\\s*/\\*.*?\\*/)?\\s*(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*function\\s(\\w{1,50})\\((\\$\\w{1,50}),(\\$\\w{1,50})\\){(\\$\\w{1,50})=array\\(\\d+,\\d+,\\d+,(\\d+)\\);if\\(\\4==\\d+\\){(\\$\\w{1,50})=substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\],\\5\\[2\\]\\);}elseif\\(\\4==\\d+\\){\\7=substr\\(\\3,\\5\\[0\\],\\5\\[1\\]\\);}elseif\\(\\4==\\d+\\){\\7=trim\\(substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\]\\+\\5\\[2\\]\\)\\);}return\\7;}eval\\(base64_decode\\(\\2\\(\\1\\[0\\],\\d+\\)\\)\\);eval\\(\\w{1,50}\\(\\2\\(\\1\\[0\\],\\d+\\),\\2\\(\\1\\[0\\],\\d+\\),\\1\\)\\);__halt_compiler\\(\\);[\\w+=/]+~msi',
    'fast' => '~<\\?php(?:\\s*/\\*.*?\\*/)?\\s*(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*function\\s(\\w{1,50})\\((\\$\\w{1,50}),(\\$\\w{1,50})\\){(\\$\\w{1,50})=array\\(\\d+,\\d+,\\d+,(\\d+)\\);if\\(\\4==\\d+\\){(\\$\\w{1,50})=substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\],\\5\\[2\\]\\);}elseif\\(\\4==\\d+\\){\\7=substr\\(\\3,\\5\\[0\\],\\5\\[1\\]\\);}elseif\\(\\4==\\d+\\){\\7=trim\\(substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\]\\+\\5\\[2\\]\\)\\);}return\\7;}eval\\(base64_decode\\(\\2\\(\\1\\[0\\],\\d+\\)\\)\\);eval\\(\\w{1,50}\\(\\2\\(\\1\\[0\\],\\d+\\),\\2\\(\\1\\[0\\],\\d+\\),\\1\\)\\);__halt_compiler\\(\\);~msi',
    'id' => 'zeuraFourArgs',
  ),
  104 => 
  array (
    'full' => '~(<\\?php\\s*/\\* This file is protected by copyright law and provided under.*?\\*/(?:\\s*/\\*.*?\\*/\\s*)+\\$_[0O]+="(\\w+)";.*?\\$_[0O]+=__FILE__;.*?\\$\\w+=str_replace\\("\\\\n","",\\$\\w+\\);\\$\\w+=str_replace\\("\\\\r","",\\$\\w+\\);.*?function\\s\\w+\\(\\$\\w+,\\$\\w+\\){\\$\\w+=md5\\(\\$\\w+\\)\\.md5\\(\\$\\w+\\.\\$\\w+\\);.*?\\$\\w+=strlen\\(\\$\\w+\\);for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\$\\w+\\);\\$\\w+\\+\\+\\){\\$\\w+\\.=\\s?chr\\(ord\\(\\$\\w+\\[\\$\\w+\\]\\)\\^ord\\(\\$\\w+\\[\\$\\w+%\\$\\w+\\]\\)\\);}return\\s\\$\\w+;}eval\\(\\w+\\(\\w+\\("([^"]+)"\\),\\$\\w+\\)\\);eval\\(\\w+\\(\\$\\w+\\)\\);exit\\(\\);\\?)>[^"\']+~msi',
    'id' => 'evalFileContentBySize',
  ),
  105 => 
  array (
    'full' => '~<\\?php\\s*(eval(?:\\(\\w+)+\\((substr\\(file_get_contents\\(__FILE__\\),\\s?(\\d+)\\))\\)+;)\\s*__halt_compiler\\(\\);\\s*[\\w+/]+~msi',
    'id' => 'evalFileContentOffset',
  ),
  106 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.?)+)\\);(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.?)+)\\);(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.)[^;]+)\\);(\\1\\((\\(-(\\d+)-\\(-\\9\\)\\))\\);@set_time_limit\\((\\(-(\\d+)-\\(-\\11\\)\\))\\);)eval\\(base64_decode\\(((?:(?|[\'"]\\d+[\'"]|chr\\(\\d+\\))\\.?)+)\\)\\.gzinflate\\(str_rot13\\(\\3\\(\\5\\){4};~msi',
    'fast' => '~@set_time_limit\\((\\(-(\\d+)-\\(-\\2\\)\\))\\);eval\\(base64_decode\\(((?:(?:[\'"]\\d+[\'"]|chr\\(\\d+\\))\\.?)+)\\)\\.gzinflate\\(str_rot13\\(\\$\\w+\\(\\$\\w+\\){4};~msi',
    'id' => 'evalConcatedVars',
  ),
  107 => 
  array (
    'full' => '~(?:\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)*(?:\\$\\w+="[\\w\\\\]+";)*(\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";(\\$\\w+="[\\w\\\\]+";)?){5,}.+\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\].+?(?:};?(?!\\[))+(?:exit;}+if\\(@?file_exists\\("[^"]+"\\)+{include\\("[^"]+"\\);\\}|==\\(string\\)\\$\\{\\$\\w+\\}\\)\\s*\\{\\$\\w+="[^"]+";\\$\\w+="[^"]+";\\$\\{\\$\\w+\\}\\.=\\$\\{\\$\\w+\\};break;\\}+eval\\("[^"]+"\\.gzinflate\\(base64_decode\\(\\$\\{\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\}\\)+;|\\["[^"]+"\\]\\}\\);|\\)\\)\\{[^;]+;ob_clean\\(\\);[^\\.]+\\.urlencode\\(\\$\\{\\$\\w+\\}\\)+;\\}+|else\\{wp_redirect\\(get_bloginfo\\("[^"]+"\\)\\."[^"]+"\\);\\}exit;\\}+)?~msi',
    'id' => 'Obf_20200618_1',
  ),
  108 => 
  array (
    'full' => '~(\\$\\w+\\s?=\\s?(\\w+)\\(\'\\d+\'\\);\\s*)+\\$\\w+\\s?=\\s?new\\s?\\$\\w+\\(\\2\\(\'(\\d+)\'\\)+;\\s?error_reporting\\(0\\);\\s?eval\\(\\$\\w+\\(\\$\\w+->\\$\\w+\\("([^"]+)"\\)+;.+?function \\2.+?return\\s\\$\\w+;\\s}~msi',
    'id' => 'aanKFM',
  ),
  109 => 
  array (
    'full' => '~(?:\\$\\w{1,500}\\s*=\\s*[\'"][^\'"]+[\'"];)+(?:\\$\\w{1,500}\\s*=\\s*\\$\\w{1,500}\\s?\\.\\s?[\'"]{2}\\s?\\.\\s?\\$\\w{1,500};)+(?:\\$\\w{1,500}\\s?=\\s?(?:str_rot13|base64_decode|gzinflate)\\(\\$\\w{1,500}\\);)+\\s*eval\\(\\$\\w{1,500}\\);~msi',
    'id' => 'longVarConcatStrRot13B64Gz',
  ),
  110 => 
  array (
    'full' => '~error_reporting\\(\\d\\);@?set_time_limit\\(\\d\\);(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]{0,100})[\'"];(\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]{0,500}[\'"];)eval\\(gzinflate\\(base64_decode\\(\\3\\)\\)\\);rebirth\\(\\);eval\\(gzinflate\\(base64_decode\\(hate\\(\\1,\\5\\){4};~msi',
    'fast' => '~error_reporting\\(\\d\\);@?set_time_limit\\(\\d\\);(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]{0,100})[\'"];(\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]{0,500}[\'"];)eval\\(gzinflate\\(base64_decode\\(\\$\\w{1,50}\\)\\)\\);rebirth\\(\\);eval\\(gzinflate\\(base64_decode\\(hate\\(\\$\\w{1,50},\\$\\w{1,50}\\){4};~msi',
    'id' => 'evalLoveHateFuncs',
  ),
  111 => 
  array (
    'full' => '~function\\s?(\\w+)\\(\\){\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\2\\s?=\\s?str_rot13\\(\\2\\);\\s?(\\w+)\\(\\2\\);\\s?}\\s?function\\s?\\4\\((\\$\\w+)\\){\\s?(?:global\\s?\\$\\w+;\\s?)?\\5\\s?=\\s?pack\\([\'"]H\\*[\'"],\\5\\);\\s?(\\$\\w+)\\s?=\\s?[\'"]{2};\\s?eval\\(((?:\\6|\\5)\\.?)+\\);\\s?}\\s?\\1\\(\\);~msi',
    'id' => 'evalPackStrrot',
  ),
  112 => 
  array (
    'full' => '~error_reporting\\(\\d\\);(?:\\$\\w+=[\'"]\\w+[\'"];)?ini_set\\([\'"]\\w+[\'"],\\d\\);(?:(\\$\\w+=\\[(?:"[^"]+"=>"[^"]+",?\\s*)+\\];)|eval\\(base64_decode\\([\'"]([\\w\\+=]+)[\'"]\\)\\);)\\$\\w+=str_split\\([\'"]([}\\w|,[=\'\\.;\\]&]+)[\'"]\\);\\$\\w+=[\'"]{2};foreach\\(\\$\\w+\\s{0,50}as\\s{0,50}\\$\\w+\\){foreach\\((\\$\\w+)\\s{0,50}as\\s{0,50}\\$\\w+\\s{0,50}=>\\s{0,50}\\$\\w+\\){(?:\\$\\w+=[\'"]\\w+[\'"];\\$\\w+=[\'"]\\w+[\'"];)?if\\(\\$\\w+\\s{0,50}==\\s{0,50}\\(string\\)\\$\\w+\\){(?:\\$\\w+=[\'"]\\w+[\'"];\\$\\w+=[\'"]\\w+[\'"];)?\\$\\w+\\s{0,50}\\.=\\s{0,50}\\$\\w+;break;}}}(?:eval\\([\'"]\\?>[\'"]\\.gzinflate\\(base64_decode\\(\\$\\w+\\)\\)\\);)?~msi',
    'id' => 'evalArrayVar',
  ),
  113 => 
  array (
    'full' => '~(?>(?>\\$\\w+)\\s*\\.?=\\s*"[^;]+;?";\\s*)+\\beval\\((?>\\$\\w+\\s*\\.?\\s*)+\\)~msi',
    'id' => 'evalVarConcat',
  ),
  114 => 
  array (
    'full' => '~(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+(?:\\${\\${"[^"]+"}\\["[^"]+"\\]}="[^"]+";)+(eval\\(htmlspecialchars_decode\\(urldecode\\(base64_decode\\(\\${\\${"[^"]+"}\\["[^"]+"\\]}\\)\\)\\)\\);)~msi',
    'id' => 'evalVarSpecific',
  ),
  115 => 
  array (
    'full' => '~(?:(?:\\$\\w+=(?:chr\\(\\d+\\)[;.])+)+\\$\\w+="[^"]+";(\\$\\w+)=(?:\\$\\w+[.;])+\\s*)?(\\$\\w+)=\'([^\']+)\';((?:\\s*\\2=str_replace\\(\'[^\']+\',\\s*\'\\w\',\\s*\\2\\);\\s*)+)(?(1)\\s*\\1\\s*=\\s*str_replace\\(\'[^+]\',\\s*\'[^\']+\',\\s*\\1\\);\\s*(\\$\\w+)\\s*=\\s*[^;]+;";\\s*@?\\1\\(\\s*str_replace\\((?:\\s*array\\(\'[^\']+\',\\s*\'[^\']+\'\\),){2}\\s*\\5\\)\\s*\\);|\\s*\\2=base64_decode\\(\\2\\);\\s*eval\\(\\2\\);)~msi',
    'id' => 'evalVarReplace',
  ),
  116 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s*=\\s*base64_decode\\((?:[\'"][^\'"]+[\'"]\\.?)+\\);)+\\s*(?:\\$\\w{1,50}\\s*=\\s*[\'"][^\'"]+[\'"];)+\\s*(eval\\(htmlspecialchars_decode\\((?:\\$\\w{1,50}\\(?)+\\)+;)~msi',
    'id' => 'evalVarsB64Concated',
  ),
  117 => 
  array (
    'full' => '~((\\$[^\\s=.;]+)\\s*=\\s*\\(?[\'"]([^\'"]+)[\'"]\\)?\\s*;?\\s*)+\\s*.{0,10}?(?:error_reporting\\(\\d\\);|@set_time_limit\\(\\d\\);|@|ini_set\\([\'"]\\w{1,99}[\'"],\\s?\\d\\);\\s?){0,5}(?:eval\\s*\\(|assert\\s*\\(|echo)\\s*([\'"?>.\\s]+)?\\(?(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|convert_uudecode\\s*\\()+(\\({0,1}[\\s"\']?(\\$[^\\s=\'")]+)?(?:str_replace\\((?:.+?,){3}\\2?)?[\\s"\']?\\){0,1})(?:[\'"]?\\)+;?)+~msi',
    'id' => 'evalVar',
  ),
  118 => 
  array (
    'full' => '~((?:(?:\\$\\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\\((?:"\\?>"\\.)?(?:\\$\\w+\\()+[\'"]([^\'"]+)[\'"]\\)+;)~msi',
    'id' => 'evalVarSlashed',
  ),
  119 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\((\\$\\w{1,40})\\)\\{(\\$\\w{1,40})=\'base64_decode\';(\\$\\w{1,40})=\'gzinflate\';return\\s*\\4\\(\\3\\(\\2\\)\\);\\}\\$\\w{1,40}=\'[^\']*\';\\$\\w{1,40}=\'[^\']*\';eval\\(\\1\\(\'([^\']*)\'\\)\\);~msi',
    'id' => 'evalFunc',
  ),
  120 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\s*\\((\\$\\w{1,40})\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=\\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\\s*(\\$\\w{1,40})\\s*=\\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\\s*return\\s*\\4\\s*\\(\\3\\s*\\(\\2\\)\\);\\s*\\}\\s*\\$\\w{1,40}\\s*=\\s*\\"[^\\"]*\\";\\s*\\$\\w{1,40}\\s*=\\s*\\"[^\\"]*\\";\\s*eval\\s*\\(\\1\\s*\\(\\"([^\\"]*)\\"\\)\\);~msi',
    'id' => 'evalFunc',
  ),
  121 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]@?(([\\w."]+\\()+[\'"]([\\w\\/+]+)[\'"])\\)+;[\'"]\\s?;\\s?(\\$\\w+)\\s?=\\s?([\\w@."]+)\\s?;\\s?@?(\\$\\w+)\\s?=\\s\\5\\([\'"]+,\\s?"\\1;"\\s?\\);\\7\\([\'"]{2}\\);~msi',
    'id' => 'evalConcatFunc',
  ),
  122 => 
  array (
    'full' => '~function\\sT_\\((\\$\\w+)\\)\\s{\\s(\\$\\w+)\\s=\\s256;\\s(\\$w2)\\s=\\s8;\\s(\\$\\w+)\\s=\\sarray\\(\\);\\s(\\$\\w+)\\s=\\s0;\\s(\\$\\w+)\\s=\\s0;\\sfor\\s\\((\\$\\w+)\\s=\\s0;\\s\\7\\s<\\sstrlen\\(\\1\\);\\s\\7\\+\\+\\)\\s{\\s\\5\\s=\\s\\(\\5\\s<<\\s8\\)\\s\\+\\sord\\(\\1\\[\\7\\]\\);\\s\\6\\s\\+=\\s8;\\sif\\s\\(\\6\\s>=\\s\\3\\)\\s{\\s\\6\\s-=\\s\\3;\\s(\\$\\w+)\\[\\]\\s=\\s\\5\\s>>\\s\\6;\\s\\5\\s&=\\s\\(1\\s<<\\s\\6\\)\\s-\\s1;\\s\\2\\+\\+;\\sif\\s\\(\\2\\s>>\\s\\3\\)\\s{\\s\\3\\+\\+;\\s}\\s}\\s}\\s(\\$\\w+)\\s=\\srange\\("\\\\x0",\\s"\\\\377"\\);\\s(\\$\\w+)\\s=\\s\'\';\\sforeach\\s\\(\\4\\sas\\s\\7\\s=>\\s(\\$\\w+)\\)\\s{\\sif\\s\\(!isset\\(\\9\\[\\11\\]\\)\\)\\s{\\s(\\$\\w+)\\s=\\s(\\$\\w+)\\s\\.\\s\\13\\[0\\];\\s}\\selse\\s{\\s\\12\\s=\\s\\9\\[\\11\\];\\s}\\s\\10\\s\\.=\\s\\12;\\sif\\s\\(\\7\\)\\s{\\s\\9\\[\\]\\s=\\s\\13\\s\\.\\s\\12\\[0\\];\\s}\\s\\13\\s=\\s\\12;\\s}\\sreturn\\s\\10;\\s}\\s(\\$_\\w+)="[\\w\\\\]+";eval\\(T_\\(\\14\\("(.*)"\\)\\)\\);~mis',
    'fast' => '~function\\sT_\\((\\$\\w+)\\)\\s{\\s(\\$\\w+)\\s=\\s256;\\s(\\$w2)\\s=\\s8;\\s(\\$\\w+)\\s=\\sarray\\(\\);\\s(\\$\\w+)\\s=\\s0;\\s(\\$\\w+)\\s=\\s0;\\sfor\\s\\((\\$\\w+)\\s=\\s0;\\s\\7\\s<\\sstrlen\\(\\1\\);\\s\\7\\+\\+\\)\\s{\\s\\5\\s=\\s\\(\\5\\s<<\\s8\\)\\s\\+\\sord\\(\\1\\[\\7\\]\\);\\s\\6\\s\\+=\\s8;\\sif\\s\\(\\6\\s>=\\s\\3\\)\\s{\\s\\6\\s-=\\s\\3;\\s(\\$\\w+)\\[\\]\\s=\\s\\5\\s>>\\s\\6;\\s\\5\\s&=\\s\\(1\\s<<\\s\\6\\)\\s-\\s1;\\s\\2\\+\\+;\\sif\\s\\(\\2\\s>>\\s\\3\\)\\s{\\s\\3\\+\\+;\\s}\\s}\\s}\\s(\\$\\w+)\\s=\\srange\\("\\\\x0",\\s"\\\\377"\\);\\s(\\$\\w+)\\s=\\s\'\';\\sforeach\\s\\(\\4\\sas\\s\\7\\s=>\\s(\\$\\w+)\\)\\s{\\sif\\s\\(!isset\\(\\9\\[\\11\\]\\)\\)\\s{\\s(\\$\\w+)\\s=\\s(\\$\\w+)\\s\\.\\s\\13\\[0\\];\\s}\\selse\\s{\\s\\12\\s=\\s\\9\\[\\11\\];\\s}\\s\\10\\s\\.=\\s\\12;\\sif\\s\\(\\7\\)\\s{\\s\\9\\[\\]\\s=\\s\\13\\s\\.\\s\\12\\[0\\];\\s}\\s\\13\\s=\\s\\12;\\s}\\sreturn\\s\\10;\\s}\\s(\\$_\\w+)="[\\w\\\\]+";eval\\(T_\\(\\14\\("(.*)"\\)\\)\\);~mis',
    'id' => 'evalFuncFunc',
  ),
  123 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?bin2hex\\(\\5\\);\\s?(\\$\\w+)\\s?=\\s?hex2bin\\(\\7\\);\\s*(?:eval\\()+[\'"]\\?>[\'"]\\.\\1\\(\\3\\(\\8\\)+;~msi',
    'id' => 'evalBinHexVar',
  ),
  124 => 
  array (
    'full' => '~((?:(?:\\${"(?:\\w{0,10}?\\\\x\\w{1,10}){1,100}"}\\["\\w{0,10}?(?:\\\\x\\w{1,10}){1,100}"\\]|\\$\\w+)\\s*=\\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\\${)?\\$\\w{1,50}}?\\s*=\\s*array\\(array\\(([\'"][^\\)]+[\'"])\\)\\);(.*?create_function\\(.*?array_walk\\((?:\\${\\${"(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\\\x\\w{1,10}){1,10}"\\]}|(?:\\${)?\\$\\w+}?),\\s*(?:\\${\\${"\\w?(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\w?\\\\x\\w{1,10}){1,20}"\\]}|\\$\\w+)\\);)~msi',
    'fast' => '~create_function\\([\'"][^"\']+[\'"],\\s*(?:[\'"][^"\']+[\'"]\\.?)+.*?\\);\\s*\\$[^=]+=\\s*array_walk\\((?:\\${\\${"(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\\\x\\w{1,10}){1,10}"\\]}|(?:\\${)?\\$\\w+}?),\\s*(?:\\${\\${"\\w?(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\w?\\\\x\\w{1,10}){1,20}"\\]}|\\$\\w+)\\);~msi',
    'id' => 'evalArrayWalkFunc',
  ),
  125 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*eval\\([\'"]\\?>[\'"]\\s?\\.\\s?base64_decode\\(strtr\\(substr\\(\\1\\s?,(\\d+)\\*(\\d+)\\)\\s?,\\s?substr\\(\\1\\s?,(\\d+)\\s?,\\s?(\\d+)\\)\\s?,\\s*substr\\(\\s?\\1\\s?,\\s?(\\d+)\\s?,\\s?(\\d+)(?:\\s?\\))+;~msi',
    'id' => 'evalSubstrVal',
  ),
  126 => 
  array (
    'full' => '~(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];\\s?\\1\\s?=\\s?base64_decode\\(\\1\\);\\s?eval\\(gzinflate\\(str_rot13\\(\\1\\)+;~msi',
    'id' => 'evalGzStrRotB64',
  ),
  127 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*([\'"][^\'"]+[\'"]);\\s*eval\\(urldecode\\(hex2bin\\([\'"]([^\'"]+)[\'"]\\)\\)\\);\\s*eval\\(hex2bin\\([\'"]([^\'"]+)[\'"]\\)\\s*\\.\\s*((?:\\$\\w{1,50}\\()+\\1)\\)+;~msi',
    'id' => 'twoEvalVarsReplace',
  ),
  128 => 
  array (
    'full' => '~global\\s?(\\$\\w{1,50});\\s?if\\(!\\1\\)\\s?{\\s?function\\sob_start_flush\\((\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:\\d{1,5}[,\\s]*)+)\\);\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:\\d{1,5}[,\\s]*)+)\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?foreach\\(\\5\\sas\\s(\\$\\w{1,50})\\)\\s?{\\s?\\7\\s?\\.=\\s?chr\\(\\3\\[\\8\\]\\+(\\d{1,5})\\);\\s?}.*?\\7\\.substr\\(.*?[\'"]ob_start_flush[\'"]\\);\\s?}\\s?\\?>~msi',
    'id' => 'obStartFlushVar',
  ),
  129 => 
  array (
    'full' => '~((?:\\$GLOBALS\\[[\'"][^\'"]+[\'"]\\]\\s?=\\s?base64_decode\\([\'"][^\'"]*[\'"]\\);){10,})(?:.*?\\$GLOBALS\\[[\'"][^\'"]+[\'"]\\])+[);]*~msi',
    'id' => 'b64GlobalVarsReplace',
  ),
  130 => 
  array (
    'full' => '~\\${"\\\\x[^"]+"}\\["(\\\\x[^"]+)"\\]\\s?=\\s?"(\\\\x[^"]+)";\\s?\\${\\${"\\\\x[^"]+"}\\["(\\\\x[^"]+)"\\]}\\s?=\\s?"(\\w?\\\\x[^"]+)";\\s?eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\("(\\\\x[^"]+)"\\)+;~msi',
    'id' => 'evalGlobalVarFuncWrapped',
  ),
  131 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[chr\'.\\s]+;\\s?((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\s?\\(\\d+[-+*//\\s]+\\d+\\)[\\s.]*)+;\\s*)+)(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50}\\(\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)+;)\\s?(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\s?\\([\'"]{2}\\s?,\\s?\\3\\);\\s?\\5\\s?\\(\\);~msi',
    'id' => 'createFuncChrVarsMany',
  ),
  132 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];)?\\s?(\\$\\w{1,50})\\s?=\\s?[chr\'.\\s]+;\\s?((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\s?\\(\\d+[-+*//\\s]+\\d+\\)[\\s.]*)+;\\s?)+)\\s?(eval\\s{0,10}\\((?:\\s{0,10}\\$?\\w{1,50}\\s{0,10}\\()+[\'"][^\'"]+[\'"]\\)+;)~msi',
    'id' => 'evalChrVarsMany',
  ),
  133 => 
  array (
    'full' => '~(preg_replace\\(["\'](?:/\\.\\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\\s*,\\s*)[^\\),]+(?:[\\)\\\\0-5]+;[\'"])?(,\\s*["\'][^"\']*["\'])\\)+;~msi',
    'id' => 'eval',
  ),
  134 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*[\'"]([^\'"]*)[\'"]\\s*;\\s*(\\$\\w{1,40}\\s*=\\s*(strtolower|strtoupper)\\s*\\((\\s*\\1[\\[\\{]\\s*\\d+\\s*[\\]\\}]\\s*\\.?\\s*)+\\);\\s*)+\\s*if\\s*\\(\\s*isset\\s*\\(\\s*\\$\\{\\s*\\$\\w{1,40}\\s*\\}\\s*\\[\\s*[\'"][^\'"]*[\'"]\\s*\\]\\s*\\)\\s*\\)\\s*\\{\\s*eval\\s*\\(\\s*\\$\\w{1,40}\\s*\\(\\s*\\$\\s*\\{\\s*\\$\\w{1,40}\\s*\\}\\s*\\[\\s*[\'"][^\'"]*[\'"]\\s*\\]\\s*\\)\\s*\\)\\s*;\\s*\\}\\s*~msi',
    'id' => 'evalInject',
  ),
  135 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*(([base64_decode\'\\.\\s]+)|([eval\'\\.\\s]+)|([create_function\'\\.\\s]+)|([stripslashes\'\\.\\s]+)|([gzinflate\'\\.\\s]+)|([strrev\'\\.\\s]+)|([str_rot13\'\\.\\s]+)|([gzuncompress\'\\.\\s]+)|([urldecode\'\\.\\s]+)([rawurldecode\'\\.\\s]+));\\s*)+\\$\\w+\\s*=\\s*\\$\\w+\\(\'\',(\\s*\\$\\w+\\s*\\(\\s*)+\'[^\']+\'\\)+;\\s*\\$\\w+\\(\\);~msi',
    'fast' => '~\\$\\w+\\s*=\\s*\\$\\w+\\(\'\',(\\s*\\$\\w+\\s*\\(\\s*)+\'[^\']+\'\\)+;\\s*\\$\\w+\\(\\);~msi',
    'id' => 'createFuncConcat',
  ),
  136 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*base64_decode\\("([^"]+)"\\);(\\1\\s*=\\s*ereg_replace\\("([^"]+)","([^"]+)",\\1\\);)+\\1=base64_decode\\(\\1\\);eval\\(\\1\\);~msi',
    'id' => 'evalEregReplace',
  ),
  137 => 
  array (
    'full' => '~(?>((\\$\\w{1,100})\\s{0,100}=\\s{0,100}(([base64_decode"\'\\.\\s]+)|([eval"\'\\.\\s]+)|([create_function"\'\\.\\s]+)|([stripslashes"\'\\.\\s]+)|([gzinflate"\'\\.\\s]+)|([strrev"\'\\.\\s]+)|([str_rot13"\'\\.\\s]+)|([gzuncompress"\'\\.\\s]+)|([urldecode"\'\\.\\s]+)([rawurldecode"\'\\.\\s]+));\\s*)+)\\s*(error_reporting[^;]+;\\s?ini_set[^;]+;\\s?)?\\s*@?eval\\(\\$[^)]+\\)+;~msi',
    'id' => 'evalWrapVar',
  ),
  138 => 
  array (
    'full' => '~(?:\\$\\{"[^"]+"\\}\\["[^"]+"\\]="[^"]+";)+(?:\\$\\{\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\}="[^"]+";)+@?eval\\s*\\(\\s*([\'"?>.]+)?@?\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|eval\\s*\\()+\\(?\\$\\{\\$\\{"[^\\)]+\\)+;~msi',
    'id' => 'escapes',
  ),
  139 => 
  array (
    'full' => '~(\\$\\w+)\\s*=(?:\\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\\s*\\(\\d+\\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\\s*?\\.?)+;\\s*(\\$\\w+)\\s*=(?:\\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\\s*\\(\\d+\\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\\s*?\\.?)+;\\s*@?\\1\\s*\\(@?\\2\\s*\\([\'"]([^\'"]+)[\'"]\\)+;~msi',
    'id' => 'assert',
  ),
  140 => 
  array (
    'full' => '~eval\\s*\\(str_rot13\\s*\\([\'"]+\\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\\)+;~msi',
    'id' => 'evalCodeFunc',
  ),
  141 => 
  array (
    'full' => '~\\$\\{"GLOBALS"\\}\\[[\'"](\\w+)[\'"]\\]=["\'](\\w+)[\'"];\\$\\{"GLOBALS"\\}\\[[\'"](\\w+)[\'"]\\]=["\']\\2[\'"];\\${\\$\\{"GLOBALS"\\}\\[[\'"]\\3[\'"]\\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\\$\\{\\$\\{"GLOBALS"\\}\\[[\'"]\\1[\'"]\\]\\}\\)+;~msi',
    'id' => 'evalVarVar',
  ),
  142 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){4}\\s*\\}\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){3}function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){5}return\\s*\\1\\(\\$\\w+,\\s*false\\);\\s*\\}\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){5}return\\s*\\1\\(\\$\\w+,\\s*true\\);\\s*\\}\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*eval\\(\\4\\(base64_decode\\(\\5\\),\\s*"([^"]+)"\\)\\);~msi',
    'id' => 'xxteaDecrypt',
  ),
  143 => 
  array (
    'full' => '~(\\$\\w+)=[\'"][^"\']+[\'"];(\\$\\w+)=strrev\\(\'edoced_46esab\'\\);eval\\(\\2\\([\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'edoced_46esab',
  ),
  144 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?strrev\\([\'"][base64_dco\'"\\.]+[\'"]\\);\\s*(\\$\\w+)\\s?=\\s?strrev\\([\'"][gzinflate\'"\\.]+[\'"]\\);\\s*@?eval\\(\\2\\(\\1\\([\'"]([\\w\\/\\+=]+)[\'"]\\)\\)\\);~msi',
    'id' => 'edoced_46esab_etalfnizg',
  ),
  145 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"((?:[^"]|(?<=\\\\)")*)";(\\$\\w+)\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;(\\$\\w+)\\s*=\\s*[^;]+;(\\$\\w+)\\s*=\\s*"[^"]+";\\$\\w+\\s*=\\s*\\5\\."[^"]+"\\.\\6;\\3\\((\\1\\[\\d+\\]\\.?)+,\\s*\\$\\w+\\s*,"\\d+"\\);~smi',
    'fast' => '~(\\$\\w+)\\s*=\\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\\$\\w+)\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;(\\$\\w+)\\s*=\\s*[^;]+;(\\$\\w+)\\s*=\\s*"[^"]+";\\$\\w+\\s*=\\s*\\5\\."[^"]+"\\.\\6;\\3\\((\\1\\[\\d+\\]\\.?)+,\\s*\\$\\w+\\s*,"\\d+"\\);~smi',
    'id' => 'eval2',
  ),
  146 => 
  array (
    'fast' => '~(?:\\${"\\\\x[\\\\\\w]+"}\\["\\\\x[\\\\\\w]+"\\]\\s?=\\s?"[\\w\\\\]+";){1,10}\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?=\\s?"\\w{1,100}";\\${\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?}="(\\\\x[^"]+)";eval\\(((?:str_rot13\\(|gzinflate\\(|base64_decode\\(){1,10})\\(\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\){1,5};~msi',
    'full' => '~(?:\\${"\\\\x[\\\\\\w]+"}\\["\\\\x[\\\\\\w]+"\\]\\s?=\\s?"[\\w\\\\]+";){1,10}\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?=\\s?"\\w{1,100}";\\${\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?}="(\\\\x[^"]+)";eval\\(((?|str_rot13\\(|gzinflate\\(|base64_decode\\(){1,10})\\(\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\){1,5};~msi',
    'id' => 'evalEscapedCharsContent',
  ),
  147 => 
  array (
    'full' => '~eval\\(strrev\\(\\s?\'([^\']+)\'\\s?\\)\\);~msi',
    'id' => 'evalStrrevCode',
  ),
  148 => 
  array (
    'full' => '~eval\\(convert_uudecode\\(\\s?\'((?:.*?\\\\\')*[^\']+)\'\\)\\);~msi',
    'id' => 'evalConvertUudecodeWithSlashedQuote',
  ),
  149 => 
  array (
    'full' => '~@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*\\((\'\',)?\\s*([\'"][?>\\s]+[\'".\\s]+)?\\s*\\(?\\s*@?\\s*(?:base64_decode\\s*\\(|pack\\s*\\(["\']H\\*[\'"],|convert_uudecode\\s*\\(|htmlspecialchars_decode\\s*\\(|gzdecode\\s*\\(|stripslashes\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|unserialize\\s*\\(|eval\\s*\\(|hex2bin\\()+.*?[^\'");]+((\\s*\\.?[\'"]([^\'";]+[\'"]*\\s*)+|,\\s*true)?\\s*[\'"\\)]+)+\\s*;?(\\s*\\2\\(\\);)?~msi',
    'id' => 'eval',
  ),
  150 => 
  array (
    'full' => '~eval\\s*/\\*[\\w\\s\\.:,]+\\*/\\s*\\([^\\)]+\\)+;~msi',
    'fast' => '~eval\\s*/\\*[\\w\\s\\.:,]+\\*/\\s*\\(~msi',
    'id' => 'eval',
  ),
  151 => 
  array (
    'full' => '~((\\$\\w+)="";\\$\\w+\\s*\\.=\\s*"[^;]+;\\s*)+(?:(?:\\$\\w+)?="";)?eval\\((\\s*\\$\\w+\\s*\\.)+\\s*"[^"]+(?:"\\);)+~msi',
    'id' => 'evalConcatVars',
  ),
  152 => 
  array (
    'full' => '~(\\$ssl\\w{1,20})\\s{0,10}=\\s{0,10}["\'][\\w*/._]{1,500}["\'];\\s{1,10}\\$\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\]\\s{1,10}\\.\\s{1,10}\\1\\[\\d{1,4}\\][^;]{1,300};\\s{1,10}\\$ssl\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\][^;]{1,400};\\s{1,10}\\$ssl\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\][^;]{1,400};\\s{1,10}(\\$\\w{1,20})\\s{0,10}=\\s{0,10}["\']([\\w*/._\\\\]{1,500})["\'];\\s{1,10}(\\$\\w{1,20})\\s{0,10}=\\s{0,10}["\']([\\w*/._\\\\]{1,500})["\'];\\s{1,10}@?(eval\\([^;]{1,100};)~msi',
    'id' => 'varsEvalFuncs',
  ),
  153 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*("[\\w=+/\\\\ ".\\n]+");\\s*)+)(\\$\\w+\\s*=\\s*((?:\\$\\w+\\()+\\$\\w+\\)+);\\s*)?((?:eval\\((?(3)\\$\\w+|(?:\\$\\w+\\(+)+\\$\\w+)\\)+;\\s*)+)~msi',
    'id' => 'evalVarsFuncs',
  ),
  154 => 
  array (
    'full' => '~((?>\\$\\w+\\s?\\.?=\\s?(?:[base_decode\\."\'\\d\\s/\\*\\+\\-]+|str_rot13)(?:\\(?[\'"][^\'"]+[\'"]\\)?)?;\\s*)+)\\s*(\\s*@?eval\\((?:[\'"\\)]\\?>[\'"\\)]\\s*\\.\\s*)*(?:(?:\\w+\\()*\\$\\w+\\(?)+(?:.*?)?\\)+;)+~msi',
    'id' => 'evalFuncVars',
  ),
  155 => 
  array (
    'full' => '~eval\\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\\)]+\\)+;~msi',
    'fast' => '~eval\\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
    'id' => 'evalHex',
  ),
  156 => 
  array (
    'full' => '~eval\\s*\\("\\\\x?\\d+[^\\)]+\\)+;(?:[\'"]\\)+;)?~msi',
    'fast' => '~eval\\s*\\("\\\\x?\\d+~msi',
    'id' => 'evalHex',
  ),
  157 => 
  array (
    'full' => '~(\\$\\w+)\\s=\\s(["\']?[\\w\\/\\+]+["\']?);\\s(\\$\\w+)\\s=\\s((?:str_rot13\\(|rawurldecode\\(|convert_uudecode\\(|gzinflate\\(|str_rot13\\(|base64_decode\\(|rawurldecode\\(|)+\\1\\)\\)+);\\secho\\s(eval\\(\\3\\);)~msi',
    'id' => 'echoEval',
  ),
  158 => 
  array (
    'full' => '~if\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\){function\\s?\\1\\((\\$\\w+)\\){(\\$\\w+)=array\\((?:\'(\\d+)\',)?\'([^\']+)\',\'([^\']+)\',\\2\\);for\\((\\$\\w+)=0;\\7<[34];\\7\\+\\+\\){for\\((\\$\\w+)=0;\\8<strlen\\(\\3\\[\\7\\]\\);\\8\\+\\+\\)\\s?\\3\\[\\7\\]\\[\\8\\]\\s?=\\s?chr\\(ord\\(\\3\\[\\7\\]\\[\\8\\]\\)-(?:\\(\\7\\?\\3\\[\\8\\s?xor\\s?\\8\\]:1\\)|1)\\);if\\(\\7==[21]\\)\\s?\\3\\[[32]\\]=\\3\\[[01]\\]\\(\\3\\[[21]\\]\\(\\3\\[[32]\\]\\)\\);}\\s?return\\s?\\3\\[[32]\\];}(\\$\\w+)=["\']([\\w\\+\\/=]+)["\'];(\\$\\w+)=[\'"]\\1[\'"];(\\$\\w+)=\\11\\([\'"]([^\'"]+)[\'"]\\);\\$\\w+=@?\\12\\(\'\',\\11\\(\\9\\)\\);\\$\\w+\\(\\);}~msi',
    'id' => 'evalCreateFunc',
  ),
  159 => 
  array (
    'full' => '~(\\$\\w{1,1000})=[\'"]([\'"\\w/\\+=]+)[\'"];(\\$\\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\\(\\$\\w{1,3000}\\);){1,100}eval\\((\\$\\w{1,3000})\\);~msi',
    'id' => 'evalAssignedVars',
  ),
  160 => 
  array (
    'full' => '~(?:\\$_{1,50}\\s*=\\s*[^;]{2,200}\\s*;\\s*)+(?:\\$_{1,50}\\s*=\\s*\\$_{1,50}\\([^\\)]+\\);\\s*|(?:if\\(!function_exists\\(\'[^\']+\'\\)\\){function\\s\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\){return\\s?eval\\("return function\\(\\$\\w{1,50}\\){{\\$\\w{1,50}}};"\\);}}\\s*)?)+(?:\\$_{1,50}\\s*=\\s*\'[^\']+\';\\s*)?(?:\\s*(\\$_{1,50}\\s*=\\s*)?\\$_+\\([^)]*\\)+;\\s*)+(?:echo\\s*\\$_{1,50};)?~msi',
    'id' => 'seolyzer',
  ),
  161 => 
  array (
    'full' => '~(\\$\\w+)="((?:[^"]|(?<=\\\\)")*)";(\\s*\\$GLOBALS\\[\'\\w+\'\\]\\s*=\\s*(?:\\${)?(\\1\\[\\d+\\]}?\\.?)+;\\s*)+(.{0,400}\\s*\\1\\[\\d+\\]\\.?)+;\\s*}~msi',
    'fast' => '~(\\$\\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\\s*\\$GLOBALS\\[\'\\w+\'\\]\\s*=\\s*(?:\\${)?(\\1\\[\\d+\\]}?\\.?)+;\\s*)+(.{0,400}\\s*\\1\\[\\d+\\]\\.?)+;\\s*}~msi',
    'id' => 'subst2',
  ),
  162 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*"[^"]{1,1000}";\\s*)+(\\$\\w{1,50}\\s*=\\s*\\$?\\w{1,50}\\("\\w{1,50}"\\s*,\\s*""\\s*,\\s*"\\w{1,50}"\\);\\s*)+\\$\\w{1,50}\\s*=\\s*\\$\\w{1,50}\\("",\\s*\\$\\w{1,50}\\(\\$\\w{1,50}\\("\\w{1,50}",\\s*"",(\\s*\\$\\w{1,50}\\.?)+\\)+;\\$\\w{1,50}\\(\\);~msi',
    'id' => 'strreplace',
  ),
  163 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\\s?\\$\\w{1,50}\\s?=\\s?str_replace\\([\'"]\\w{1,50}[\'"],\\s?[\'"][\'"],\\s?["\']\\w{1,100}[\'"]\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:\'[^\']{1,500}\'|"[^\\s]{1,500}?");\\s){1,15}.*?\\$\\w{1,50}\\s?=\\s?str_replace\\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\\s?\'\',\\s?(?:\\$\\w{1,50}\\s?\\.?\\s?){1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',\\s?\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'strreplace',
  ),
  164 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\$\\w{1,50}\\)\\s?{if\\(file_exists[^}]+}(\\$\\w{1,50})\\s?=\\s?str_replace\\(array\\(base64_decode\\(\'([^\']+)\'\\),base64_decode\\(\'([^\']+)\'\\)\\),array\\(base64_decode\\(\'([^\']+)\'\\),base64_decode\\(\'([^\']+)\'\\)\\),\\2\\);(\\$\\w{1,50})\\s?=\\s?strrev[^;]+;(\\$\\w{1,50})\\s?=\\s?\\8\\(\\3\\);(\\$\\w{1,50})\\s?=\\s?strrev[^;]+;return@?\\10\\(\\9\\);}if.*?exit;}\\s?((\\$\\w{1,50})\\s?=\\s?base64_decode\\(\'([^\']+)\'\\);preg_match\\(base64_decode\\(\'[^\']+\'\\),\\12,(\\$\\w{1,50})\\);(\\$\\w{1,50})\\s?=\\s?\\14\\[1\\];(\\$\\w{1,50})\\s?=\\s?\\1\\(\\15,\\$\\w{1,50}\\);if\\(isset\\(\\16\\)\\){eval\\(\\16\\);})~msi',
    'id' => 'pregB64FuncImgStr',
  ),
  165 => 
  array (
    'full' => '~@?echo\\s*([\'"?>.\\s]+)?@?\\s*(base64_decode\\s*\\(|stripslashes\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|eval\\s*\\()+[\\s\\/\'"].*?[^\'")]+((\\s*\\.?[\'"]([^\'";\\$]+\\s*)+)?\\s*[\'"\\);]+)+~msi',
    'id' => 'echo',
  ),
  166 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=strtoupper\\s*\\((\\1\\[\\d+\\]\\s*\\.?\\s*)+\\)\\s*;\\s*if\\(\\s*isset\\s*\\(\\${\\s*\\3\\s*}\\[\\d*\\s*\'\\w+\'\\s*\\]\\s*\\)\\s*\\)\\s*{eval\\(\\${\\3\\s*}\\[\'\\w+\']\\s*\\)\\s*;}~smi',
    'fast' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=strtoupper\\s*\\((\\1\\[\\d+\\]\\s*\\.?\\s*)+\\)\\s*;\\s*if\\(\\s*isset\\s*\\(\\${\\s*\\3\\s*}\\[\\d*\\s*\'\\w+\'\\s*\\]\\s*\\)\\s*\\)\\s*{eval\\(\\${\\3\\s*}\\[\'\\w+\']\\s*\\)\\s*;}~smi',
    'id' => 'strtoupper',
  ),
  167 => 
  array (
    'full' => '~(\\$\\w+)="[^"]+";\\s*(\\$\\w+)=str_ireplace\\("[^"]+","",\\1\\);(\\$\\w+)\\s*=\\s*"[^"]+";\\s*function\\s*(\\w+)\\((\\$\\w+,?)+\\){\\s*(\\$\\w+)=\\s*create_function\\(\'\',\\$\\w+\\);\\s*array_map\\(\\6,array\\(\'\'\\)+;\\s*}\\s*set_error_handler\\(\'\\4\'\\);(\\$\\w+)=\\2\\(\\3\\);user_error\\(\\7,E_USER_ERROR\\);\\s*if\\s*.+?}~msi',
    'id' => 'errorHandler',
  ),
  168 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(str_ireplace\\("[^"]+","","[^"]+"\\)\\);(\\$\\w+)="([^"]+)";eval\\(\\1\\(\\2\\)+;}~msi',
    'id' => 'evalIReplace',
  ),
  169 => 
  array (
    'full' => '~error_reporting\\((?:0|E_ALL\\^E_NOTICE)\\);ini_set\\("display_errors",\\s*[01]\\);if\\(!defined\\(\'(\\w+)\'\\)\\){define\\(\'\\1\',__FILE__\\);if\\(!function_exists\\("([^"]+)"\\)\\){function [^(]+\\([^\\)]+\\).+?eval\\(""\\);.+?;}?eval\\(\\$[^\\)]+\\)\\);[^\\)]+\\)+.*?;return\\s*\\$[^;]+;\\s*\\?>([^;]+);~msi',
    'id' => 'PHPJiaMi',
  ),
  170 => 
  array (
    'full' => '~\\$\\w+=0;(\\$GLOBALS\\[\'\\w+\'\\])\\s*=\\s*\'([^\']+)\';\\s*(\\$\\w+)=pack\\(\'H\\*\',substr\\(\\1,\\s*([-\\d]+)\\)\\);if\\s*\\(!function_exists\\(\'(\\w+)\'\\)\\){function\\s*\\5\\(\\$\\w+,\\s*\\$\\w+\\){\\$\\w+=\\1;\\s*\\$d=pack\\(\'H\\*\',substr\\(\\1,\\s*\\4\\)\\);\\s*return\\s*\\$\\w+\\(substr\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\);}};eval\\(\\3\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'substr',
  ),
  171 => 
  array (
    'full' => '~(?:\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]=\'_F\';)?\\$(?:_F|\\{\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]\\})=_{1,2}(?:FILE|hex)_{1,2};(?:\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]=\'_X\';)?\\$(?:_X|\\{\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]\\})=["\']([^\'"]+)[\'"];\\s*(?:\\$[_\\w]+\\.=[\'"][\\w\\+\\/=]+[\'"];){0,30}\\$_\\w+=base64_decode\\(\\$_X\\);\\$_X=strtr\\(\\$_X,\'([^\']+)\',\'([^\']+)\'\\);\\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\\(\'\\~?__FILE__\\~?\',"\'".\\$_F."\'",\\$_X\\);eval\\(\\$_R\\);\\$_R=0;\\$_X=0;~msi',
    'fast' => '~\\$_\\w+=base64_decode\\(\\$_X\\);\\$_X=strtr\\(\\$_X,\'([^\']+)\',\'([^\']+)\'\\);\\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\\(\'\\~?__FILE__\\~?\',"\'".\\$_F."\'",\\$_X\\);eval\\(\\$_R\\);\\$_R=0;\\$_X=0;~msi',
    'id' => 'LockIt2',
  ),
  172 => 
  array (
    'full' => '~(?:@error_reporting\\(\\d+\\);\\s{0,10}@set_time_limit\\(\\d+\\);)?\\s{0,10}(\\$\\w+)=([\\s\'\\w\\/+=]+);\\s{0,10}(\\$\\w+)=(__FILE__);\\s*\\1=gzinflate\\(str_rot13\\(base64_decode\\(\\$tr\\)\\)\\);\\1=strtr\\(\\1,\'([^\']+)\'\\s*,\'([^\']+)\'\\);(\\$_R)=@?ereg_replace\\(\'\\~?\\4\\~?\',"\'".\\3."\'",\\1\\);eval\\(\\7\\);\\7=0;\\1=0;~msi',
    'fast' => '~(\\$\\w+)=([\\s\'\\w\\/+=]+);\\s*(\\$\\w+)=(__FILE__);\\s*\\1=\\w+\\(\\w+\\(\\w+\\(\\$tr\\)\\)\\);\\1=\\w+\\(\\1,\'([^\']+)\'\\s*,\'([^\']+)\'\\);(\\$_R)=@?\\w+\\(\'\\~?\\4\\~?\',"\'".\\3."\'",\\1\\);\\w+\\(\\7\\);\\7=0;\\1=0;~msi',
    'id' => 'anaski',
  ),
  173 => 
  array (
    'full' => '~\\$\\w+=\'=+\\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\\s*(?:http://www\\.ud64\\.com/)?\\s*=+\';\\s*(\\$ud64_c[o0]m="[\\\\0-9a-z\\."]+;)+\\$\\w+=(\\$ud64_c[o0]m\\()+"([^"]+)"\\)+;@eval\\(\\$ud64_c[o0]m\\(\'[^\']+\'\\)+;~msi',
    'id' => 'ud64',
  ),
  174 => 
  array (
    'full' => '~(\\$[\\w_]+=("[\\\\\\\\\\w]+"\\.?)+;)+\\$\\w+=(?:\\$\\w+\\()+"([\\w\\/\\+=]+)"\\)+;@eval\\(\\$\\w+\\(\'.*?\'\\)+;~msi',
    'id' => 'ud64',
  ),
  175 => 
  array (
    'full' => '~\\$\\w+=__FILE__;\\$\\w+=fopen\\(\\$\\w+,\'rb\'\\);fread\\(\\$\\w+,(\\d+)\\);\\$\\w+=explode\\("\\\\t",base64_decode\\(fread\\(\\$\\w+,(\\d+)\\)+;\\$\\w+=\\$\\w+\\[[\\d+]\\];[\\$l1=\\d{}\\.;\\(\\)\\[\\]]+eval\\(\\$\\w+\\(\'[^\']+\'\\)+;\\s*return\\s*;\\?>[\\w=\\+]+~msi',
    'id' => 'qibosoft',
  ),
  176 => 
  array (
    'full' => '~(\\$\\w+)=base64_decode\\("([^"]+)"\\);\\s*eval\\("return\\s*eval\\(\\\\"\\1\\\\"\\);"\\)~msi',
    'id' => 'evalReturn',
  ),
  177 => 
  array (
    'full' => '~(?:\\$[0O]+\\[[\'"](\\w+)[\'"]\\]\\.?="[\\\\\\w]+";)+(?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\.?=\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\([\'"][\\d\\(]+[\'"](,__FILE__)?\\);)+@eval\\((?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\()+"([^"]+)"\\)+;~mis',
    'fast' => '~(?:\\$[0O]+\\[[\'"](\\w+)[\'"]\\]\\.?="[\\\\\\w]+";)+(?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\.?=\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\([\'"][\\d\\(]+[\'"](,__FILE__)?\\);)+@eval\\((?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\()+"([^"]+)"\\)+;~mis',
    'id' => 'evalChars',
  ),
  178 => 
  array (
    'full' => '~<\\?php\\s+((\\$GLOBALS\\[\\s*[\'"]\\w+[\'"]\\s*\\])\\s*=\\s*base64_decode\\("([^"]*)"\\);)+\\s*\\?><\\?php\\s.+\\2.+exit;\\s}\\sfunction\\s\\w+\\(\\)\\s{\\sreturn\\sarray\\(\\s\'favicon\'\\s=>\\s\'[^\']+\',\\s+\'sprites\'\\s=>\\s\'[^\']+\',\\s\\);\\s}~msi',
    'id' => 'globalsBase64',
  ),
  179 => 
  array (
    'full' => '~(\\$\\w+=strrev\\("[^"]+"\\);)+eval\\((\\$\\w+\\()+"[^"]+"\\)+;~mis',
    'fast' => '~(\\$\\w+=strrev\\("[^"]+"\\);)+eval\\((\\$\\w+\\()+"[^"]+"\\)+;~mis',
    'id' => 'strrevVarEval',
  ),
  180 => 
  array (
    'full' => '~\\$\\w+=basename/\\*\\w+\\*/\\(/\\*\\w+\\*/trim/\\*\\w+\\*/\\(.+?(\\$\\w+)=.+\\1.+?;~msi',
    'id' => 'comments',
  ),
  181 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\s*\\(+|gzinflate\\s*\\(+|strrev\\s*\\(+|str_rot13\\s*\\(+|gzuncompress\\s*\\(+|convert_uudecode\\s*\\(+|urldecode\\s*\\(+|rawurldecode\\s*\\(+|htmlspecialchars_decode\\s*\\(+)+"([^"]+)"\\)+;\\s*@?eval\\(([\'"?>.\\s]+)?\\1\\);~',
    'fast' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\s*\\(+|gzinflate\\s*\\(+|strrev\\s*\\(+|str_rot13\\s*\\(+|gzuncompress\\s*\\(+|convert_uudecode\\s*\\(+|urldecode\\s*\\(+|rawurldecode\\s*\\(+|htmlspecialchars_decode\\s*\\(+)+"([^"]+)"\\)+;\\s*@?eval\\(([\'"?>.\\s]+)?\\1\\);~',
    'id' => 'varFuncsEval',
  ),
  182 => 
  array (
    'full' => '~<\\?php\\s*defined\\(\'[^\']+\'\\)\\s*\\|\\|\\s*define\\(\'[^\']+\',__FILE__\\);(global\\s*\\$[^;]+;)+\\s*(if\\(!function_exists\\(\'([^\']+)\'\\)\\){\\s*function\\s*[^\\)]+\\(\\$[^,]+,\\$[^=]+=\'\'\\){\\s*if\\(empty\\(\\$[^\\)]+\\)\\)\\s*return\\s*\'\';\\s*\\$[^=]+=base64_decode\\(\\$[^\\)]+\\);\\s*if\\(\\$[^=]+==\'\'\\)\\s*return\\s*\\~\\$[^;]+;\\s*if\\(\\$[^=]+==\'-1\'\\)\\s*@[^\\(]+\\(\\);\\s*\\$[^=]+=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\(\\$[^\\)]+\\);\\s*\\$[^=]+=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\(\\$[^,]+,\\$[^,]+,\\$[^\\)]+\\);\\s*return\\s*\\$[^^]+\\^\\$[^;]+;\\s*}}\\s*)+(\\$[^\\[]+\\["[^"]+"]=[^\\(]+\\(\'[^\']+\',\'[^\']*\'\\);\\s*)+(\\$[^\\[]+\\[\'[^\']+\'\\]=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\([^\\)]*\\)+;\\s*)+return\\(eval\\(\\$[^\\[]+\\[\'[^\']+\'\\]\\)+;\\s*\\?>\\s*#!/usr/bin/php\\s*-q\\s*(\\s*[^\\s]+)+~msi',
    'fast' => '~<\\?php\\s*defined\\(\'[^\']{10,30}\'\\)\\s*\\|\\|\\s*define\\(\'[^\']{10,30}\',__FILE__\\);(global\\s*\\$[^;]{10,30};)+\\s*if\\(!function_exists\\(\'([^\']+)\'\\)\\){\\s*function\\s*[^\\)]+\\(\\$[^,]{10,30},\\$[^=]{10,30}=\'\'\\){\\s*if\\(empty\\(\\$[^\\)]+\\)\\)\\s*return\\s*\'\';\\s*\\$[^=]{10,30}=base64_decode~msi',
    'id' => 'OELove',
  ),
  183 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=(\\s*(\\d+)\\+)*\\d+;\\s*)?(\\$\\w+="[^"]+";\\s*)+\\s*(?:\\$\\w+\\s*=(?:\\s*(?:\\d+)\\+)*\\s*\\d+;\\s*)?(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\']+\',\\s*\\$\\w+,\\s*\'[^\']+\'\\);.+?\\4\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*\\4;\\s*(\\$\\w+="[^"]+";\\s*)+.+?\\$\\w+\\(\\$\\w+,\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+,\\s*"(\\d+)"\\)+,\\$\\w+\\);.+function \\w+\\((\\$\\w+),\\s*\\$\\w+,\\s(\\$\\w+)\\)\\s{\\8\\s=\\s\\8\\s\\.\\s\\8;.+return \\7;\\s*}~msi',
    'fast' => '~(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\']+\',\\s*\\$\\w+,\\s*\'[^\']+\'\\);.+?\\1\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*\\1;\\s*(\\$\\w+="[^"]+";\\s*)+~msi',
    'id' => 'Obf_20200402_1',
  ),
  184 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*"[^"]+";\\s*)?(?:((?:\\$\\w+\\s*=\\s*\'[^\']+\';\\s*)+)(\\$\\w+=(?:\\$\\w+\\.?)+);)?function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+),\\s*(\\$\\w+)\\)\\s*{\\s*return\\s*([\'\\. ]*(\\4|\\5|\\6)[\'\\. ]*)+;\\s*}\\s*(?:\\$\\w+\\s*=\\s*"[^"]+";)?(\\s*\\$\\w+\\s*=\\s*\\3\\((((\'\')|(\\$\\w+)|(\\$\\w+[\\[\\{]\\d+[\\]\\}](\\.\'\')?)|(\\$\\w+[\\[\\{]\\d+[\\]\\}]\\.\\$\\w+[\\[\\{]\\d+[\\]\\}]))\\s*,?\\s*)+\\);\\s*)+\\s*\\$\\w+\\s*=\\s*\\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\\)+;~msi',
    'fast' => '~function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+),\\s*(\\$\\w+)\\)\\s*{\\s*return\\s*([\'\\. ]*(\\2|\\3|\\4)[\'\\. ]*)+;\\s*}\\s*(?:\\$\\w+\\s*=\\s*"[^"]+";)?(\\s*\\$\\w+\\s*=\\s*\\1\\((((\'\')|(\\$\\w+)|(\\$\\w+[\\[\\{]\\d+[\\]\\}](\\.\'\')?)|(\\$\\w+[\\[\\{]\\d+[\\]\\}]\\.\\$\\w+[\\[\\{]\\d+[\\]\\}]))\\s*,?\\s*)+\\);\\s*)+\\s*\\$\\w+\\s*=\\s*\\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\\)+;~msi',
    'id' => 'Obf_20200402_2',
  ),
  185 => 
  array (
    'full' => '~(?:function\\s*\\w{1,50}\\(\\$\\w{1,50},\\s*\\$\\w{1,50}\\)\\s*\\{(?:\\s*\\$\\w{1,50}\\s*=\\s*(?:md5\\(\\$\\w{1,50}\\)|\\d+|base64_decode\\(\\$\\w{1,50}\\)|strlen\\(\\$\\w{1,50}\\)|\'\');\\s*)+\\s*for\\s*\\(\\$\\w{1,50}\\s*=\\s\\d+;\\s*\\$\\w{1,50}\\s*<\\s*\\$len;\\s*\\$\\w{1,50}\\+\\+\\)\\s*\\{\\s*if\\s*\\(\\$\\w{1,50}\\s*==\\s*\\$\\w{1,50}\\)\\s*\\{\\s*\\$\\w{1,50}\\s*=\\s*\\d+;\\s*}\\s*\\$\\w{1,50}\\s*\\.=\\s*substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\);\\s*\\$\\w{1,50}\\+\\+;\\s*\\}(?:\\s*\\$\\w{1,50}\\s*=\\s*\'\';)?\\s*for\\s*\\(\\$\\w{1,50}\\s*=\\s*\\d+;\\s*\\$\\w{1,50}\\s*<\\s*\\$\\w{1,50};\\s*\\$\\w{1,50}\\+\\+\\)\\s*{\\s*if\\s*\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*<\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\)\\s*\\{\\s*\\$\\w{1,50}\\s*\\.=\\s*chr\\(\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*\\+\\s*\\d+\\)\\s*-\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\);\\s*}\\s*else\\s*{\\s*\\$\\w{1,50}\\s*\\.=\\s*chr\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*-\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\);\\s*}\\s*}\\s*return\\s*\\$\\w{1,50};\\s*\\}\\s*|\\$\\w{1,50}\\s*=\\s*"([^"]+)";\\s*){2}\\s*\\$\\w{1,50}\\s*=\\s*"([^"]+)";\\s*\\$\\w{1,50}\\s*=\\s*\\w{1,50}\\(\\$\\w{1,50},\\s*\\$\\w{1,50}\\);\\s*eval\\(\\$\\w{1,50}\\);~msi',
    'id' => 'Obf_20200414_1',
  ),
  186 => 
  array (
    'full' => '~(?:\\$\\w+\\s{0,10}=\\s{0,10}\'\\w+\';)?\\s{0,10}(\\$\\w+)\\s*=\\s*urldecode\\(\'[%0-9a-f]+\'\\);(\\s*(\\$\\w+)\\s*=(\\s*\\1\\{\\d+\\}\\.?)+;)+\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\.\\3\\("[^"]+"\\);\\s*eval\\(\\5\\);~msi',
    'fast' => '~(\\$\\w+)\\s*=\\s*urldecode\\(\'[%0-9a-f]+\'\\);(\\s*(\\$\\w+)\\s*=(\\s*\\1\\{\\d+\\}\\.?)+;)+\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\.\\3\\("[^"]+"\\);\\s*eval\\(\\5\\);~msi',
    'id' => 'Obf_20200421_1',
  ),
  187 => 
  array (
    'full' => '~(\\$\\w+)=\'([^\']+)\';(\\$\\w+)=str_rot13\\(gzinflate\\(str_rot13\\(base64_decode\\(\\1\\)\\)\\)\\);eval\\(\\3\\);~msi',
    'id' => 'SmartToolsShop',
  ),
  188 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*\\("\\?>"\\.gzuncompress\\(base64_decode\\("[^"]+"\\)\\)\\);\\s*@?eval\\(\\1\\);~msi',
    'id' => 'Obf_20200504_1',
  ),
  189 => 
  array (
    'full' => '~(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);\\s*eval\\(\\1\\);~mis',
    'fast' => '~(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);\\s*eval\\(\\1\\);~mis',
    'id' => 'Obf_20200507_1',
  ),
  190 => 
  array (
    'full' => '~(?:error_reporting\\(0\\);\\s*ini_set\\("max_execution_time",0\\);\\s*(?:/\\*.*?\\*/)?\\s*)?(\\$\\w+)=\\s*\\[(("."=>".",?\\s*)+)];\\s*(\\$\\w+)=str_split\\("([^"]+)"\\);\\s*(?:\\$\\w+="";)?\\s*foreach\\(\\4\\s*as\\s*(\\$\\w+)\\)\\s*{\\s*foreach\\(\\s*\\1\\s*as\\s*(\\$\\w+)=>(\\$\\w+)\\)\\s*{\\s*if\\(\\6==\\(string\\)\\8\\)\\s*\\{\\s*\\$\\w+\\.=\\7;\\s*break;\\s*}\\s*}\\s*}~msi',
    'fast' => '~(\\$\\w+)=\\s*\\[(("."=>".",?\\s*)+)];\\s*(\\$\\w+)=str_split\\("([^"]+)"\\);\\s*(?:\\$\\w+="";)?\\s*foreach\\(\\4\\s*as\\s*(\\$\\w+)\\)\\s*{\\s*foreach\\(\\s*\\1\\s*as\\s*(\\$\\w+)=>(\\$\\w+)\\)\\s*{\\s*if\\(\\6==\\(string\\)\\8\\)\\s*\\{\\s*\\$\\w+\\.=\\7;\\s*break;\\s*}\\s*}\\s*}~msi',
    'id' => 'Obf_20200507_4',
  ),
  191 => 
  array (
    'full' => '~assert\\("[eval"\\.]+\\([base64_decode\\."]+\\(\'([^\']+)\'\\)\\)"\\);~msi',
    'id' => 'Obf_20200507_5',
  ),
  192 => 
  array (
    'full' => '~parse_str\\s*\\(\\s*((?:[\'"][^\'"]+["\']\\s*\\.?\\s*)+)\\s*,\\s*(\\$\\w+)\\s*\\)\\s*;\\s*@?\\s*(\\2\\s*\\[\\s*\\d+\\s*\\]\\s*\\(\\s*)+(?:\'[^\']+\'|\\2\\[\\d+\\])\\s*\\)?,\\s*array\\s*\\(\\s*\\)\\s*,\\s*array\\s*\\(\\s*["\'][^\'"]+[\'"]\\s*\\.\\s*(\\2\\[\\s*\\d+\\s*\\]\\s*\\(\\s*)+[\'"]([^\'"]+)[\'"]\\s*[\\)\\s]+\\.[\'"]//[\'"][\\s\\)]+;~msi',
    'id' => 'Obf_20200513_1',
  ),
  193 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\("[base64_decode"\\.]+\\);eval\\(\\1\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'Obf_20200526_1',
  ),
  194 => 
  array (
    'full' => '~error_reporting\\(0\\);define\\(\'\\w+\',\\s*__FILE__\\);define\\(\'\\w+\',\\s*fopen\\(__FILE__,\\s*\'r\'\\)\\);fseek\\(\\w+,\\s*__COMPILER_HALT_OFFSET__\\);((\\$\\w+="\\\\x[0-9a-f]+";)+(\\$\\w+="[^"]+";)+eval\\("\\?>"\\.(\\$\\w+\\()+"([^"]+)"\\)+;)+(?:/\\*\\w+\\*/)?__halt_compiler\\(\\);[\\w#|>^%\\[\\.\\]\\\\/=]+~msi',
    'id' => 'Obf_20200527_1',
  ),
  195 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\("[base64_decode]+"\\)\\.str_replace\\(\'(\\w+)\',\'\',\'\\w+\'\\);\\s*eval\\(\\1\\(\\$\\w+\\)\\);~msi',
    'id' => 'Obf_20200602_1',
  ),
  196 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*base64_decode\\(\\1\\);\\s*eval\\(\\3\\);~msi',
    'id' => 'Obf_20200720_1',
  ),
  197 => 
  array (
    'full' => '~[\'".]+(\\$\\w+\\s*=\\s*[\'"]\\w+[\'"];)+(\\$\\w+=\\$\\w+[\'.]+\\$\\w+;)+(\\$\\w+=(str_rot13|base64_decode|gzinflate)\\(\\$\\w+\\);)+eval\\(\\$\\w+\\);~msi',
    'id' => 'flamux',
  ),
  198 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\{\\s*return\\s*"([^"]+)";\\s*\\}\\s*eval\\("([^"]+)"\\.\\1\\(\\)\\."([^"]+)"\\);~msi',
    'id' => 'bypass',
  ),
  199 => 
  array (
    'full' => '~(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+(echo)\\s*"(?:[<\\w\\\\>\\/\\s={:}#]+);(?:[\\\\\\w\\-:]+;)+(?:[\\\\\\w}:{\\s#]+;)+(?:[\\\\\\w}:{#\\-\\s]+;)+[\\\\\\w}<\\/]+";\\$\\w+=["\\\\\\w]+;(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+\\$\\w+=["\\\\\\w]+;\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";error_reporting\\(\\d\\);\\$\\w+=["\\\\\\w]+;\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";\\$\\w+=["\\\\\\w]+;set_time_limit\\(\\d\\);\\$\\w+=["\\\\\\w]+;(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+if\\(empty\\([\\$_\\w\\["\\\\\\]]+\\)\\){\\${\\${"[^"]+"}\\["[^"]+"\\]}=[\\w()]+;}else{\\${\\${"[^"]+"}\\["[^"]+"\\]}=[\\$_\\w\\["\\\\\\]]+;}chdir\\(\\${\\$\\w+}\\);\\${\\${"[^"]+"}\\["[^"]+"\\]}=htmlentities.*?\\1"[^"]+"\\.\\${\\${"[^"]+"}\\["[^"]+"\\]}[."<\\w>\\\\=&]+\\${\\$\\w+}[.">\\w\\\\\\/<]+;(?:\\1["\\\\\\w\\s=.\\${}\\[\\]&\':\\/<>]+;)+}else{(?:\\$\\w+=["\\\\\\w]+;){2}\\${\\${"[^"]+"}\\["[^"]+"\\]}=scandir\\(\\${\\$\\w+}\\);(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";){2}\\${\\${"[^"]+"}\\["[^"]+"\\]}=count\\(\\${\\${"[^"]+"}\\["[^"]+"\\]}\\)\\-\\d;\\1"[^"]+"\\.\\${\\${"[^"]+"}\\["[^"]+"\\]}[."<\\w>\\\\=&]+\\/\\w+>";\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";\\1["<\\\\\\w>.\\s=]+\\${\\${"[^"]+"}\\["[^"]+"\\]}[."\\\\\\w\\s=<\\/]+;(?:\\1["\\\\\\w\\s=.\\${}\\[\\]&\':\\/<>]+;){3}}}\\1["\\\\\\w:\\s.\\$\\[\\]>()_\'<\\/%]+;~msi',
    'id' => 'darkShell',
  ),
  200 => 
  array (
    'full' => '~((\\$\\w+)=\'(\\d+)\';)?(\\$\\w+)=\'([\\w\\(;\\$\\)=\\s\\[\\/\\]."*,{}]+)\';(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?)+;(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?)+;(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?(?(2)\\2\\.|)?)+;(\\$\\w+)=\\s*"([\'\\w\\/+=]+)";(?:\\$\\w+=\'\';)?(\\$\\w+)\\.=\\7;\\11\\.=\\9;\\11\\.=\\8;@(\\$\\w+)=\\6\\(\\(\'+\\),\\s+\\(\\11\\)\\);@\\12\\(\\);~msi',
    'id' => 'wso',
  ),
  201 => 
  array (
    'fast' => '~(?:(?:@?\\s{0,10}error_reporting|@?\\s{0,10}set_time_limit)\\s*\\(\\s*\\d+\\s*\\);\\s*(?:header\\s*\\(\\s*"[^"]+"\\s*\\)\\s*;\\s*)?){1,2}function\\s*\\w+\\s*\\(\\s*(\\$\\w{1,50})\\s*\\)\\s*{\\s*(\\$\\w{1,50})\\s*=\\s*strlen\\s*\\(\\s*trim\\s*\\(\\s*\\1\\s*\\)\\s*\\)\\s*;\\s*(\\$\\w{1,50})\\s*=\\s*\'\'\\s*;\\s*(?:for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\$\\w+\\s*<\\s*\\2\\s*;\\s*\\$\\w+\\s*\\+=\\s*2\\s*\\)|\\$\\w+\\s*=\\s*0;\\s*while\\s*\\(+\\$\\w+\\s*<\\s*\\2\\)+)\\s*{\\s*\\3\\s*\\.=\\s*pack\\s*\\(\\s*"C"\\s*,\\s*hexdec\\s*\\(\\s*substr\\s*\\(\\s*\\1\\s*,\\s*\\$\\w+\\s*,\\s*2\\)\\)\\);\\s*(?:\\$\\w+\\s*\\+=\\s*2;)?\\s*}\\s*return\\s*\\3\\s*;\\s*}\\s*(?:header\\("\\w+-(?:\\w+:)?\\s\\w+\\/\\w+;\\s*charset=(\\w+)"\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*(?:(?:\\w+\\s*\\(\\s*"\\w+"\\s*\\)|\\$\\w{1,50}|\\w+\\s*\\(\\s*((?:\\s*\'\\w*\'\\s*\\.\\s*\\(\\d+[\\-\\+\\*\\/]\\d+\\)\\.?)+))\\s*\\.?\\s*)+(?:\\.?\'\'\\s*\\))*\\s*\\.\\s*\'([\\w\\/\\+=\\\\]+\'\\)\\)\\);)\'\\s*;\\s*(?:(\\$\\w{1,50})\\s*=\\w+\\((?:\\s*\'\\w*\'\\.\\s*\\(\\d+[\\+\\-\\*\\/]\\d+\\)\\.?)+\'\\w*\'\\);\\s*)*\\s*(?:(\\$\\w+)\\s*=\\s*(?:\\s*create_function|@?\\$\\w+)\\(\'\',\\s*\\6\\);\\s*(?:\\9|\\10)\\(\\);|\\$\\w+\\s*=\\s*@?eval\\s*\\(\\s*\\6\\s*\\)\\s*;)~msi',
    'full' => '~(?:(?:@?\\s{0,10}error_reporting|@?\\s{0,10}set_time_limit)\\s*\\(\\s*\\d+\\s*\\);\\s*(?:header\\s*\\(\\s*"[^"]+"\\s*\\)\\s*;\\s*)?){1,2}function\\s*\\w+\\s*\\(\\s*(\\$\\w{1,50})\\s*\\)\\s*{\\s*(\\$\\w{1,50})\\s*=\\s*strlen\\s*\\(\\s*trim\\s*\\(\\s*\\1\\s*\\)\\s*\\)\\s*;\\s*(\\$\\w{1,50})\\s*=\\s*\'\'\\s*;\\s*(?|for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\4\\s*<\\s*\\2\\s*;\\s*\\4\\s*\\+=\\s*2\\s*\\)|(\\$\\w+)\\s*=\\s*0;\\s*while\\s*\\(+\\4\\s*<\\s*\\2\\)+)\\s*{\\s*\\3\\s*\\.=\\s*pack\\s*\\(\\s*"C"\\s*,\\s*hexdec\\s*\\(\\s*substr\\s*\\(\\s*\\1\\s*,\\s*\\4\\s*,\\s*2\\)\\)\\);\\s*(?:\\4\\s*\\+=\\s*2;)?\\s*}\\s*return\\s*\\3\\s*;\\s*}\\s*(?:header\\("\\w+-(?:\\w+:)?\\s\\w+\\/\\w+;\\s*charset=(\\w+)"\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*(?:(?|\\w+\\s*\\(\\s*"(\\w+)"\\s*\\)|\\$\\w{1,50}|\\w+\\s*\\(\\s*((?:\\s*\'\\w*\'\\s*\\.\\s*\\(\\d+[\\-\\+\\*\\/]\\d+\\)\\.?)+))\\s*\\.?\\s*)+(?:\\.?\'\'\\s*\\))*\\s*\\.\\s*\'([\\w\\/\\+=\\\\]+\'\\)\\)\\);)\'\\s*;\\s*(?:(\\$\\w{1,50})\\s*=\\w+\\((?:\\s*\'\\w*\'\\.\\s*\\(\\d+[\\+\\-\\*\\/]\\d+\\)\\.?)+\'\\w*\'\\);\\s*)*\\s*(?:(\\$\\w+)\\s*=\\s*(?:\\s*create_function|@?\\$\\w+)\\(\'\',\\s*\\6\\);\\s*(?:\\9|\\10)\\(\\);|\\$\\w+\\s*=\\s*@?eval\\s*\\(\\s*\\6\\s*\\)\\s*;)~msi',
    'id' => 'anonymousFox',
  ),
  202 => 
  array (
    'full' => '~(\\$my_sucuri_encoding)\\s{0,10}=\\s{0,10}[\'"]([^\'"]+)[\'"];\\s{0,10}(\\$tempb64)\\s{0,10}=\\s{0,10}base64_decode\\(\\s{0,10}\\1\\);\\s{0,10}eval\\(\\s{0,10}\\3\\s{0,10}\\);~msi',
    'id' => 'wsoEval',
  ),
  203 => 
  array (
    'full' => '~(?:(?:(\\$\\w+)\\s*\\.?=\\s*["\'][assert]+["\'];)+\\s*(if\\s*\\(\\!\\@\\$\\w+\\)\\s*\\{\\$\\w+=1;)?\\s*@?\\1)(\\((?:\\w+\\()+\'[^;]+;\'\\)+;(?(2)}))~msi',
    'id' => 'assertStr',
  ),
  204 => 
  array (
    'full' => '~(function\\s\\w+\\(\\$\\w+,\\$\\w+,\\$\\w+\\){return\\sstr_replace\\(\\$\\w+,\\$\\w+,\\$\\w+\\);}\\s?){3}(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\2\\s=\\s(\\w+)\\(\'(\\w+)\',\'\',\\2\\);\\s(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\6\\s=\\s\\4\\(\'(\\w+)\',\'\',\\6\\);\\s(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\9\\s=\\s\\4\\(\'(\\w+)\',\'\',\\9\\);\\s(\\$\\w+)\\s=\\s\'(\\$\\w+)\';\\s(\\$\\w+)\\s=\\s\\6\\(\\12,\\9\\.\'\\(\'\\.\\2\\.\'\\(\'\\.\\12\\.\'\\)\\);\'\\);\\s\\14\\(\'(\\w+)\'\\);~msi',
    'id' => 'funcVar',
  ),
  205 => 
  array (
    'full' => '~(\\$\\w+)=[\'"]([\\w</,\\s()\\$\\+}\\\\\'"?\\[\\]{;%=^&-]+)[\'"];(\\$\\w+=(?:\\s?\\1\\[\\d+\\](?:\\s?\\.?))+;)+((?:\\$\\w+\\(\\d+\\);)?(\\$\\w+=(\\$\\w+)\\(["\']{2},(\\$\\w+\\(\\$\\w+\\(["\'][=\\w\\+\\/]+[\'"]\\)\\))\\);\\$\\w+\\(\\);|.*?if\\s?\\(isset\\(\\${(?:\\$\\w+\\[\\d+\\]\\.?)+}.*?function\\s\\w+.*?include\\s\\${(?:\\$\\w+\\[\\d+\\]\\.?)+}\\[(?:\\$\\w+\\[\\d+\\]\\.?)+\\];\\s?}))~msi',
    'id' => 'dictionaryVars',
  ),
  206 => 
  array (
    'full' => '~(?:(?<concatVar>\\$\\w+)\\s?=\\s?""\\s?;((?:\\s?(?P=concatVar)\\s?\\.=\\s?"[\\w]+"\\s?;\\s?)+))?(\\$\\w+)\\s?=\\s?(?:(?P=concatVar)|"(?<strVal>[\\w]+)")\\s?;\\s?if\\s?\\(\\s?!function_exists\\s?\\(\\s?"(\\w+)"\\)\\){\\s?function\\s\\5\\(\\s?(\\$\\w+)\\){\\s?(?:\\$\\w+\\s?=\\s?""\\s?;)?\\s?(\\$\\w+)\\s?=\\s?strlen\\s?\\(\\s?\\6\\s?\\)\\s?\\/\\s?2\\s?;\\s?for\\s?\\(\\s?(\\$\\w+)\\s?=0\\s?;\\s?\\8\\s?<\\s?\\7\\s?;\\s?\\8\\+\\+\\s?\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?chr\\s?\\(\\s?base_convert\\s?\\(\\s?substr\\s?\\(\\s?\\6\\s?,\\s?\\8\\s?\\*\\s?2\\s?,\\s?2\\s?\\)\\s?,\\s?16\\s?,\\s?10\\s?\\)\\s?\\)\\s?;\\s?}\\s?return\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?create_function\\s?\\(\\s?null\\s?,\\s?\\5\\(\\s?\\3\\)\\)\\s?;\\s?\\3\\(\\)\\s?;~msi',
    'id' => 'concatVarFunc',
  ),
  207 => 
  array (
    'full' => '~function\\s?(\\w+)\\(\\){(((\\$\\w+)\\.?="\\w+";)+)return\\seval\\(\\4\\(\\w+\\(\\)\\)\\);}function\\s(\\w+)\\((\\$\\w+)\\){((?:(\\$\\w+)\\.?="\\w+";)+)return\\s\\8\\(\\6\\);}function\\s?(\\w+)\\(\\){((\\$\\w+)\\.?="([\\w\\/+=]+)";)return\\s(\\w+)\\(\\11\\);}function\\s\\13\\((\\$\\w+)\\){(\\$\\w+)=(\\w+)\\((\\w+)\\((\\w+)\\(\\14\\)\\)\\);return\\s\\15;}function\\s\\17\\(\\14\\){(((\\$\\w+)\\.?="\\w+";)+)return\\s\\21\\(\\14\\);}\\1\\(\\);function\\s\\16\\(\\14\\){(((\\$\\w+)\\.?="\\w+";)+)return\\s\\24\\(\\14\\);}~msi',
    'id' => 'concatVarFuncFunc',
  ),
  208 => 
  array (
    'full' => '~(?:(?:\\s?\\$\\w+\\s?=\\s?strrev\\([\'"][^\'"]+[\'"]\\);\\s?)|(?:\\s?\\$\\w+\\s?=\\s?strrev\\([\'"][^\'"]+[\'"]\\);\\s?)|(?:\\s?eval\\((?:\\$\\w+)?\\([\'"][^\'"]+[\'"]\\)\\);\\s?)|(?:\\s?eval\\(\\$\\w+\\(\\$\\w+\\([\'"][^\'"]+[\'"]\\)\\)\\);\\s?)){3,4}~msi',
    'id' => 'evalVarDoubled',
  ),
  209 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?(\\w+)\\("([\\w+\\/=]+)"\\);\\s?echo\\s?\\1;~msi',
    'id' => 'varFuncsEcho',
  ),
  210 => 
  array (
    'full' => '~(\\$\\w+)="";\\s*(?:do\\s?{[^}]+}\\s?while\\s?\\(\\d+>\\d+\\);\\s*\\1=\\1\\."[^"]+";)?.*?\\s?.*?(\\$\\w+)=(\'[^\']+\'\\s?\\.\\s?(?:\'[^\']+\'\\s?\\.?\\s?)+);\\s?.*?(?:\\s(\\$\\w+)=((?:\\4\\[?{?\\d+\\]?}?\\.?)+);\\s?|\\$\\w{1,50}->\\w{1,50}\\(\\);)?\\s*(?:function\\s\\w+\\(\\){(?:.*?);\\s}\\s?\\1=\\w+\\(\\1,"\\w+"\\);\\s?|\\$\\w+=array\\((?:\'\\w+\',?)+\\);\\s?|\\1=\\w+\\(\\1,\\sjoin\\(\'\',\\s\\$\\w+\\)\\s?\\);\\s?|\\s?\\$\\w+\\+=\\d+;\\s?|\\1=\\w+\\(\\1,\\w+\\(\\)\\);\\s?|function\\s\\w+\\(\\){\\s?|do{\\s?if\\s?\\(\\d+<\\d+\\)\\s?{\\s?)*.*?(?:\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]{2},\\s?\\$\\w+\\(\\$\\w+(?:\\(\\1\\),\\s?(?:\\$\\w+\\[\'\\w+\'\\]\\)\\s?)?|\\)\\s?)\\);\\s?\\$\\w+\\(\\);)(?:\\s?function\\s\\w+\\((?:\\$\\w+,\\s?\\$\\w+)?\\)(?:.*?);\\s}|\\s?class\\s\\w+\\s?{(?:.*?);(?:\\s}){1,2})+~msi',
    'fast' => '~function\\s+\\w+\\(\\)\\{\\s*global\\s*(\\$\\w+);\\s*return\\s*(\\1[\\[{]\\d+[\\]}]\\.?){15};\\s*}~msi',
    'id' => 'varFuncsMany',
  ),
  211 => 
  array (
    'fast' => '~((\\$(?:GLOBALS|{"[\\\\\\w]+"})\\[[\'"]\\w+["\']\\])\\s?=\\s?[\'"]+([\\\\\\w]+)["\'];)\\s?(?:(\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+;\\s?)+(?:(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s[\\$_\\w]+;\\s)+(?:@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?,\\s?\\w+\\s?\\);\\s?)+@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\d+\\);\\s{0,50}(?:if\\s?\\(!(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\)\\)\\s{\\s{0,50}(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+,\\s(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)*\\d*\\);\\s{0,50}}?\\s{0,50})*(?:\\$\\w+\\s?=\\s?\\w+;\\s?)*(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+;\\s?global\\s?\\$\\w+;\\s?function\\s\\w+\\(\\$\\w+,\\s\\$\\w+\\)\\s{\\s?\\$\\w+\\s?=\\s?["\']{2};\\s?for\\s?\\(\\$\\w+\\s?=\\d+;\\s?\\$\\w+\\s?<\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\)\\s?;\\s?\\)\\s?{\\s?for\\s?\\(\\s?\\$\\w+=\\d+;\\s?\\$\\w+\\s?<\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\)\\s?&&\\s?\\$\\w+\\s?<(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\);\\s?\\$\\w+\\+{2},\\s?\\$\\w+\\+{2}\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\[\\$\\w+\\]\\)\\s?\\^\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\[\\$\\w+\\]\\)\\);\\s?}\\s?}\\s?return\\s\\$\\w+;\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\s?\\$\\w+\\)\\s?{\\s?global\\s?\\$\\w+;\\s?return\\s(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+,\\s?\\$\\w+\\),\\s?\\$\\w+\\)\\s?;\\s?}\\s?foreach\\s?\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\sas\\s\\$\\w+=>\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?if\\s?\\(!\\$\\w+\\)\\s?{\\s?foreach\\s?\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\sas\\s\\$\\w+\\s?=>\\s?\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(@?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\),\\s?\\$\\w+\\)\\);\\s?if\\s?\\(isset\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\]\\)\\s?&&\\s?\\$\\w+==\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\]\\)\\s?{\\s?if\\s?\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\s?==\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\)\\s?{\\s?\\$\\w+\\s?=\\s?array\\(\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?=>\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\),\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?=>\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+,\\s?\\);\\s?echo\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\);\\s?}\\s?elseif\\s?\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\s?==\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\)\\s?{\\s?eval\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\);\\s?}\\s?(?:exit\\(\\);)?\\s?}\\s?}?~msi',
    'full' => '~((\\$(?:GLOBALS|{"[\\\\\\w]+"})\\[[\'"]\\w+["\']\\])\\s?=\\s?[\'"]+([\\\\\\w]+)["\'];)\\s?(?:(\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s?\\g<5>+;\\s?)+(?:\\g<4>\\s?=\\s[\\$_\\w]+;\\s)+(?:@\\g<4>\\(\\g<5>+\\s?,\\s?\\w+\\s?\\);\\s?)+@\\g<4>\\(\\d+\\);\\s{0,50}(?:if\\s?\\(!\\g<4>\\s?\\(\\g<5>+\\)\\)\\s{\\s{0,50}\\g<4>\\(\\g<5>+,\\s\\g<5>*\\d*\\);\\s{0,50}}?\\s{0,50})*(?:\\$\\w+\\s?=\\s?\\w+;\\s?)*\\g<4>\\s?=\\s\\g<5>+;\\s?global\\s?\\$\\w+;\\s?function\\s\\w+\\(\\$\\w+,\\s\\$\\w+\\)\\s{\\s?\\$\\w+\\s?=\\s?["\']{2};\\s?for\\s?\\(\\$\\w+\\s?=\\d+;\\s?\\$\\w+\\s?<\\s?\\g<4>\\(\\$\\w+\\)\\s?;\\s?\\)\\s?{\\s?for\\s?\\(\\s?\\$\\w+=\\d+;\\s?\\$\\w+\\s?<\\s?\\g<4>\\(\\$\\w+\\)\\s?&&\\s?\\$\\w+\\s?<\\g<4>\\(\\$\\w+\\);\\s?\\$\\w+\\+{2},\\s?\\$\\w+\\+{2}\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?\\g<4>\\(\\g<4>\\(\\$\\w+\\[\\$\\w+\\]\\)\\s?\\^\\s?\\g<4>\\(\\$\\w+\\[\\$\\w+\\]\\)\\);\\s?}\\s?}\\s?return\\s\\$\\w+;\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\s?\\$\\w+\\)\\s?{\\s?global\\s?\\$\\w+;\\s?return\\s\\g<4>\\(\\g<4>\\(\\$\\w+,\\s?\\$\\w+\\),\\s?\\$\\w+\\)\\s?;\\s?}\\s?foreach\\s?\\(\\g<4>\\sas\\s\\$\\w+=>\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?if\\s?\\(!\\$\\w+\\)\\s?{\\s?foreach\\s?\\(\\g<4>\\sas\\s\\$\\w+\\s?=>\\s?\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?@\\g<4>\\(\\g<4>\\(@?\\g<4>\\(\\$\\w+\\),\\s?\\$\\w+\\)\\);\\s?if\\s?\\(isset\\(\\$\\w+\\[\\g<5>+\\]\\)\\s?&&\\s?\\$\\w+==\\$\\w+\\[\\g<5>+\\]\\)\\s?{\\s?if\\s?\\(\\$\\w+\\[\\g<5>\\]\\s?==\\s?\\g<5>\\)\\s?{\\s?\\$\\w+\\s?=\\s?array\\(\\s?\\g<5>+\\s?=>\\s?@\\g<4>\\(\\),\\s?\\g<5>+\\s?=>\\s?\\g<5>+,\\s?\\);\\s?echo\\s?@\\g<4>\\(\\$\\w+\\);\\s?}\\s?elseif\\s?\\(\\$\\w+\\[\\g<5>\\]\\s?==\\s?\\g<5>\\)\\s?{\\s?eval\\(\\$\\w+\\[\\g<5>\\]\\);\\s?}\\s?(?:exit\\(\\);)?\\s?}\\s?}?~msi',
    'id' => 'globalArrayEval',
  ),
  212 => 
  array (
    'full' => '~<\\?php\\s{0,30}(\\$\\w+)\\s{0,30}=\\s{0,30}"(.+?)";\\s{0,30}((?:\\$\\w+\\s{0,30}=\\s{0,30}(?:\\1\\[\'\\w\\s{0,30}\'\\s{0,30}\\+\\s{0,30}\\d+\\s{0,30}\\+\\s{0,30}\'\\s{0,30}\\w\'\\]\\s{0,30}\\.?\\s{0,30})+;\\s{0,30})+)(\\$\\w+)\\s{0,30}=\\s{0,30}"(\\d+)";\\s{0,30}(?:\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,30}"\\)\\s{0,30},\\s{0,30}"[\\w\\+]+"\\)\\s{0,30};\\s{0,30})+(?:\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\)\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}?\\$\\w+\\)\\s{0,30}\\)\\s{0,30};\\s{0,30})+\\$\\w+\\((?:\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,20}\\w\\s{0,20}"\\)\\s{0,30}\\.?\\s{0,30})+"\\(\\\\"\\w+\\\\"\\s{0,30},\\s{0,30}"\\s{0,30}\\.\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\(\\s{0,30}"\\d+"\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,20}"\\)\\s{0,30},\\s{0,30}"[\\d\\w=]+"\\)\\s{0,30}\\)\\s{0,30}\\.\\s{0,30}"\\s{0,30}\\)\\s{0,30};"\\)\\s{0,30};\\s{0,30}\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\w+\\)\\s{0,30};\\s{0,30}\\$\\w+\\(\\s{0,30}(?:\\$\\w+\\(\\s{0,30}"\\s{0,30}[?>]\\s{0,30}"\\)\\s{0,30}\\.\\s{0,30})+(\\$\\w+)\\(\\s{0,30}(\\$\\w+)\\(\\s{0,30}(\\$\\w+),\\s{0,30}(\\$\\w+)\\(\\s{0,30}"\\s{0,30}"\\)\\s{0,30},\\s{0,30}(\\$\\w+)\\(\\s{0,30}"([()\\w@|*#\\[\\]&\\/\\+=]+)"\\s{0,30},\\s{0,30}(\\$\\w+),\\s{0,30}(\\$\\w+)\\)\\s{0,30}\\)\\)\\s{0,30}\\)\\s{0,30};\\s{0,30}\\$\\w+\\s?=\\s?\\d+\\s?;\\s{0,30}\\?>~msi',
    'id' => 'tinkleShell',
  ),
  213 => 
  array (
    'full' => '~(?:\\$\\w+="\\w+";)+(\\$\\w+)="([\\w_)(;\\/\\.*]+)";\\$\\w+="\\w+";function\\s(\\w+)\\((?:\\$\\w+,?){3}\\){return\\s?""(?:\\.\\$\\w+\\.""){3};}(?:\\$\\w+=(?:(?:"\\w+")|(?:\\3\\((?:\\1\\[\\d+\\],?\\.?)+\\))|(?:(?:\\3\\()+(?:\\$\\w+\\,?(?:\\)\\,)?)+)(?:(?:(?:\\3\\()+)*(?:(?:\\$\\w+,?)+)*(?:\\),)*(?:\\)*))+);)+\\$\\w+=\\3\\((?:\\1\\[\\d+\\]\\.?)+(?:,"")+\\);(?:\\$\\w+=\\3\\(\\3\\(\\$\\w+,\\$\\w+,\\$\\w+\\),\\3\\((?:\\$\\w+,?)+\\),\\3\\(\\$\\w+,\\3\\(\\$\\w+,\\$\\w+,""\\),\\$\\w+\\)\\)\\."\'(?<str>[\\w\\/\\+]+)\'")\\.\\3\\((?:\\1\\[\\d+\\],?\\.?)+\\);\\$\\w+\\(\\$\\w+,array\\("","}"\\.\\$\\w+\\."\\/+"\\)\\);~msi',
    'id' => 'wsoFunc',
  ),
  214 => 
  array (
    'full' => '~\\$\\w+\\[\'\\w+\'\\]\\s?=\\s?"[\\w;\\/\\.*)(]+";\\s?\\$\\w+\\[\'\\w+\'\\]\\s?=\\s?(?:\\$\\w+\\[\'\\w+\'\\]\\[\\d+\\]\\.?)+;\\s?\\$\\w+\\s?=\\s?(?:"[\\w()]*"\\.chr\\([\\d-]+\\)\\.?)+"\\(";\\s?\\$\\w+\\s?=\\s?"[)\\\\\\w;]+";\\s?\\$\\w+\\s?=\\s?\\$\\w+\\."\'(?<str>[\\w\\/\\+]+)\'"\\.\\$\\w+;\\s?\\$\\w+\\[\'\\w+\'\\]\\((?:\\$\\w+\\[\'\\w+\'\\]\\[\\d+\\]\\.?)+,\\s?\\$\\w+\\s?,"\\d+"\\);~msi',
    'id' => 'wsoFunc',
  ),
  215 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+)\\)\\s{0,50}{\\s{0,50}\\2\\s?=\\s?gzinflate\\(base64_decode\\(\\2\\)\\);\\s{0,50}for\\s?\\(\\s?(\\$\\w+)\\s?=\\s?\\d+\\s?;\\s?\\3\\s?<\\s?strlen\\(\\2\\);\\s?\\3\\+\\+\\)\\s{0,50}{\\s{0,50}\\2\\[\\3\\]\\s?=\\s?chr\\(ord\\(\\2\\[\\3\\]\\)\\s?-\\s?(\\d+)\\);\\s{0,50}}\\s{0,50}return\\s?\\2;\\s{0,50}}\\s{0,50}(?:\\$\\w+\\s?=\\s?[\'"]\\w+[\'"];\\s?){0,}eval\\(\\1\\([\'"]([^\'"]+)[\'"]\\)\\);~msi',
    'id' => 'evalWanFunc',
  ),
  216 => 
  array (
    'full' => '~((?>\\$(?:GLOBALS\\[\')?\\w+(?:\'\\])?)(?>\\s{0,100}=\\s{0,100}array\\(\\s{0,100})(?>(?:\\s{0,100}\'[^\']+\'\\s{0,100}=>\\s{0,100}\'?[^\']+\'?,\\s{0,100})+)\\s{0,100}\\);\\s{0,100}(?>((?:\\$\\w+=(?:[\'"][^\'"]*[\'"]\\.?)+;)+)?)(?:if\\(!\\$?\\w+\\((?:\'\\w*\'\\.?|\\$\\w+)+\\)\\){function\\s{0,100}\\w+\\(\\$\\w+\\){.*?else{function\\s{0,100}\\w+\\(\\$\\w+\\){.*?return\\s{0,100}\\$\\w+\\(\\$\\w+\\);\\s?}}){2})\\$\\w+=(?:\'\\w*\'\\.?)+;\\s?(\\$\\w+)\\s{0,100}=\\s{0,100}@?\\$\\w+\\(\'\\$\\w+\',(?:\\$\\w+\\.\'\\(.\\.\\$\\w+\\.(?:\'[\\w(\\$);]*\'\\.?)+\\)|(?:\'[^\']+\'\\.?)+\\));.*?\\3\\([\'"]([^"\']+)[\'"]\\);~msi',
    'id' => 'gulf',
  ),
  217 => 
  array (
    'full' => '~(\\$\\w+)=(\\w+);\\$\\w+="(.+?)";(?:\\$\\w+=\\$\\w+;)?(\\$\\w+)=strlen\\(\\$\\w+\\);(\\$\\w+)=[\'"]{2};for\\((\\$\\w+)=\\d+;\\6<\\4;\\6\\+\\+\\)\\s?\\5\\s?\\.=\\s?chr\\(ord\\(\\$\\w+\\[\\6\\]\\)\\s?\\^\\s?\\1\\);eval\\("\\?>"\\.\\5\\."<\\?"\\);~msi',
    'id' => 'evalConcatAsciiChars',
  ),
  218 => 
  array (
    'full' => '~(?:\\$\\w+="[\\w=]+";\\s?)+(\\$\\w+)\\s?=\\s?str_replace\\((?:"\\w*",?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\1\\((?:"\\w*",?\\s?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\1\\((?:"\\w*",?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\3\\("",\\s?(\\2\\(\\2\\((\\1\\("([#;*,\\.]+)",\\s?"",\\s?((?:\\$\\w+\\.?)+)\\))\\)\\))\\);\\s?\\4\\(\\);~msi',
    'id' => 'evalPost',
  ),
  219 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?"e\\/\\*\\.\\/";\\spreg_replace\\(strrev\\(\\$\\w+\\),"([\\\\\\w]+)\'([\\w\\/\\+=]+)\'([\\\\\\w]+)","\\."\\);~msi',
    'id' => 'evalPregStr',
  ),
  220 => 
  array (
    'full' => '~\\$GLOBALS\\[\'\\w+\'\\]=array\\(\'preg_re\'\\s?\\.\'place\'\\);\\s?function\\s\\w+\\(\\$\\w+\\)\\s?{\\$\\w+=array\\("\\/\\.\\*\\/e","([\\\\\\w]+)\'([\\w\\/\\+]+)\'([\\\\\\w]+)","{2}\\);\\s?return\\s\\$\\w+\\[\\$\\w+\\];}\\s?\\$GLOBALS\\[\'\\w+\'\\]\\[\\d+\\]\\(\\w+\\(\\d+\\),\\w+\\(\\d+\\),\\w+\\(\\d+\\)\\);~msi',
    'id' => 'evalPregStr',
  ),
  221 => 
  array (
    'full' => '~class\\s?\\w+{\\s?function\\s?__destruct\\(\\){\\s?\\$this->\\w+\\(\'([\\w&]+)\'\\^"([\\\\\\w]+)",array\\(\\(\'([#\\w]+)\'\\^"([\\\\\\w]+)"\\)\\."\\(base64_decode\\(\'([\\w\\+\\/=]+)\'\\)\\);"\\)\\);\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\$\\w+\\){\\s?@array_map\\(\\$\\w+,\\$\\w+\\);\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?new\\s?\\w+\\(\\);~msi',
    'id' => 'classDestructFunc',
  ),
  222 => 
  array (
    'full' => '~\\$\\w+="([\\\\\\w]+)";\\s?\\$\\w+=\\$\\w+\\(\'([\\w\\+\\/=]+)\'\\);\\s?\\$\\w+\\s?=\\s?"([\\\\\\w]+)";\\s?\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]{2}.\\s?eval\\(\\$\\w+\\)\\);\\s?\\$\\w+\\([\'"]{2}\\);~msi',
    'id' => 'createFuncEval',
  ),
  223 => 
  array (
    'full' => '~((\\$\\w+)=((?:base64_decode\\(|urldecode\\()?[\'"][^\'"]+[\'"](?:\\)?));\\s*(?:\\$\\w+=\'\\d+\';\\s*)*\\s*((?:\\$\\w+=(?:\\2[[{]\\d+[}\\]]\\.?)+\\s?;\\s?)+)+)(?:header[^\\)]+\\);)?(?:\\$\\w+=)?(?:if\\(\\!function_exists\\([^}]+}};)?(?:\\$\\w{1,50}\\s?=\\s?)?.*?\\$\\w{1,50}\\s?=\\s?\\$\\{"[GLOBALSx0-9a-f\\\\]+"}(\\["[^"]+"\\])(?:(?:.*?\\5.+\\(\\);))+?(?:}}\\w+\\(\\$\\w+(?:,\\$\\w+)?\\);)?~msi',
    'id' => 'dictionaryCreateFuncs',
  ),
  224 => 
  array (
    'full' => '~((?:\\$\\w+=\'\\d+\';\\s{0,10})*\\s{0,10}(?:\\$\\w+="(?:\\\\x[0-9a-f]+)+"\\s?;\\s?)+)(?:header[^\\)]+\\);)?(?:\\$\\w+=)?(?:if\\(\\!function_exists\\([^}]+}};)?(?:\\$\\w{1,50}\\s?=\\s?)?.*?\\$\\w{1,50}\\s?=\\s?\\$\\{"[GLOBALSx0-9a-f\\\\]+"}(\\["[^"]+"\\])(?:(?:.*?\\2.+\\(\\);))+?(?:}}\\w+\\(\\$\\w+,\\$\\w+\\);)?~msi',
    'id' => 'nonDictionaryCreateFuncs',
  ),
  225 => 
  array (
    'full' => '~error_reporting\\(\\d\\);header\\([^\\)]+\\);\\$\\w+\\s*=\\s*\\d+;(\\$\\w+)="([^"]+)";(\\1=str_replace\\("([^"]+)","",\\1\\);(\\$\\w+)=base64_decode\\(\\1\\));((?:.{1,150}?\\5\\{\\d+\\})+\\)\\s*or\\s*die\\(\'[^\']+\'\\);fwrite\\(\\$\\w+,\\s*\\$\\w+\\);fclose\\(\\$\\w+\\);\\})~msi',
    'id' => 'dictionaryStrReplace',
  ),
  226 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?"([\\w\\s=]+)";\\s?(\\$\\w+)\\s?=\\s?array\\(((?:\\d+,?\\s?)+)\\);\\s?(\\$\\w+)\\s?=\\s?array\\(((?:"[\\w\\d\\s\\/\\.]+",?\\s?)+)\\);\\s?(\\$\\w+)\\s?=\\s?\'\';\\s?(?:\\$\\w+\\s=(?:\\s?\\5\\[\\d+\\]\\s?\\.?)+;\\s?)+(\\$\\w+)\\s?=\\s?\\$\\w+\\("\\\\r\\\\n",\\s?\\1\\);\\s?for\\((\\$\\w+)=0;\\9\\s?<\\s?sizeof\\(\\8\\);\\9\\+\\+\\){\\s?\\7\\s\\.=\\s?\\$\\w+\\(\\8\\[\\9\\]\\);\\s?}\\s?\\1\\s?=\\s?\\7;\\s?(\\$\\w+)\\s?=\\s?\\3;\\s?(\\$\\w+)\\s?=\\s?"";\\s?for\\((\\$\\w+)=0;\\s?\\12<sizeof\\(\\10\\);\\s?\\12\\+=2\\){\\s?if\\(\\12\\s?%\\s?4\\){\\s?\\11\\.=\\s?substr\\(\\1,\\10\\[\\12\\],\\10\\[\\12\\+1\\]\\);\\s?}else{\\s?\\11\\.=strrev\\(substr\\(\\1,\\10\\[\\12\\],\\10\\[\\12\\+1\\]\\)\\);\\s?}\\s?};\\s?\\1\\s?=\\s?\\$\\w+\\(\\11\\);\\s(\\$\\w+)\\s?=\\s?array\\(\\);\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?;?)+;\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s?(\\$\\w+)\\s?=\\s?\'\';\\s?for\\((\\$\\w+)=0;\\s?\\17<strlen\\(\\1\\);\\s?\\17\\+=32\\){\\s?\\13\\[\\]\\s?=\\s?substr\\(\\1,\\s?\\17,\\s?32\\);\\s?}\\s?(?:\\$\\w+\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+\\$\\w+\\s?=\\s?\'\';\\s?\\$\\w+\\s?=\\s?\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+\\)\\)\\)\\s?%\\s?sizeof\\(\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\[\\$\\w+\\];\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;(\\s?\\18\\s?=\\s?\\$_POST\\[\\18\\];\\s?(\\14\\s?=\\s?\\15\\(\\$_COOKIE\\[\\14\\]\\);)\\s?\\$\\w+\\s?=\\s?\\5\\[\\d+\\]\\s?\\.\\s?\\5\\[\\d+\\];\\s?(eval\\(\\$\\w+\\(\\18\\)\\);)\\s?if\\(!\\16\\){\\s?((?:\\$\\w+\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+)(\\$\\w+\\(\\$\\w+\\);\\s?echo\\(\\$\\w+\\);)\\s?})~msi',
    'fast' => '~(\\s?(\\$\\w+)\\s?=\\s?\\$_POST\\[\\2\\];\\s?((\\$\\w+)\\s?=\\s?\\$\\w+\\(\\$_COOKIE\\[\\4\\]\\);)\\s?(\\$\\w+)\\s?=\\s?(\\$\\w+)\\[\\d+\\]\\s?\\.\\s?\\6\\[\\d+\\];\\s?(eval\\(\\$\\w+\\(\\2\\)\\);)\\s?if\\(!\\5\\){\\s?((?:\\$\\w+\\s?=\\s?(?:\\6\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+)(\\$\\w+\\(\\$\\w+\\);\\s?echo\\(\\$\\w+\\);)\\s?})~msi',
    'id' => 'evalPostDictionary',
  ),
  227 => 
  array (
    'full' => '~(\\$\\w)\\s?=\\s?str_rot13\\("([^"]+)"\\);preg_replace\\("//e","\\1",""\\);~msi',
    'id' => 'strrotPregReplaceEval',
  ),
  228 => 
  array (
    'fast' => '~(\\$\\w+)\\s*=\\s*(?:\\$\\w+\\.)?(?:[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\\s*(?:if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)?\\s*(\\$\\w+)\\s*=\\s*(?:\'([^\']+)\'|"([^"]+)");\\s*(?:@chmod\\(\\1,\\s*\\d+\\);\\s*|if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)@file_put_contents\\(\\1,\\s*(?:base64_decode\\()+\\$\\w+\\)+;\\s*(?:@?chmod\\(\\1,\\s*\\d+\\);)?\\s*}\\s*(?:(\\$\\w+)\\s*=\\s*\\$\\w+\\."[^"]+";\\s*(\\$\\w+)\\s*=\\s*@?file_get_contents\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*preg_match\\("[^"]+",\\$\\w+\\)\\?true:false;\\s*if\\s*\\(!\\$\\w+\\){\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*preg_match_all\\("/"\\.base64_decode\\(\\$\\w+\\)\\."/i",\\$\\w+,\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\s*\\.\\s*substr\\(chunk_split\\(bin2hex\\(\\$\\w+\\),\\s*2,\\s*"\\\\x"\\),\\s*0,\\s*-2\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\$\\w+\\[\\d\\]\\[\\d\\],\\$\\w+\\[\\d\\]\\[\\d\\]\\.PHP_EOL.PHP_EOL.")?\\s*@?include\\s*(?:\\\\"\\$\\w+\\\\";",\\$\\w+\\);\\s*@?file_put_contents\\(\\$\\w+,\\$\\w+\\);\\s*\\}|\\1;)~msi',
    'full' => '~(\\$\\w+)\\s*=\\s*(?:\\$\\w+\\.)?(?|[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\\s*(?:if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)?\\s*(\\$\\w+)\\s*=\\s*(?|\'([^\']+)\'|"([^"]+)");\\s*(?|@chmod\\(\\1,\\s*\\d+\\);\\s*|if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)@file_put_contents\\(\\1,\\s*(?:base64_decode\\()+\\3\\)+;\\s*(?:@?chmod\\(\\1,\\s*\\d+\\);)?\\s*}\\s*(?:(\\$\\w+)\\s*=\\s*\\$\\w+\\."[^"]+";\\s*(\\$\\w+)\\s*=\\s*@?file_get_contents\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*preg_match\\("[^"]+",\\6\\)\\?true:false;\\s*if\\s*\\(!\\$\\w+\\){\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*preg_match_all\\("/"\\.base64_decode\\(\\$\\w+\\)\\."/i",\\$\\w+,\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\s*\\.\\s*substr\\(chunk_split\\(bin2hex\\(\\$\\w+\\),\\s*2,\\s*"\\\\x"\\),\\s*0,\\s*-2\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\$\\w+\\[\\d\\]\\[\\d\\],\\$\\w+\\[\\d\\]\\[\\d\\]\\.PHP_EOL.PHP_EOL.")?\\s*@?include\\s*(?|\\\\"\\7\\\\";",\\$\\w+\\);\\s*@?file_put_contents\\(\\5,\\8\\);\\s*\\}|\\1;)~msi',
    'id' => 'dropInclude',
  ),
  229 => 
  array (
    'fast' => '~()(?:(?:/\\*[^/]*/?\\*/)*)@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*(?:(?:/\\*[^/]*/?\\*/)*)\\((?:(?:/\\*[^/]*/?\\*/)*)(\'\',)?\\s*([\'"?>.\\s]+)?\\s*\\(?\\s*@?\\s*((?:(?:/\\*[^/]*/?\\*/)*)base64_decode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\((?:(?:/\\*[^/]*/?\\*/)*)|(?:(?:/\\*[^/]*/?\\*/)*)pack(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(\'H\\*\',|(?:(?:/\\*[^/]*/?\\*/)*)convert_uudecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)htmlspecialchars_decode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)stripslashes(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)gzinflate(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)strrev(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)str_rot13(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)gzuncompress(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)urldecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)rawurldecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)eval(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\()+.*?[^\'")]+(?:(?:/\\*[^/]*/?\\*/)*)(((?:(?:/\\*[^/]*/?\\*/)*)\\s*(?:(?:/\\*[^/]*/?\\*/)*)\\.?(?:(?:/\\*[^/]*/?\\*/)*)[\'"]((?:(?:/\\*[^/]*/?\\*/)*)[^\'";]+(?:(?:/\\*[^/]*/?\\*/)*)[\'"](?:(?:/\\*[^/]*/?\\*/)*)*\\s*)+(?:(?:/\\*[^/]*/?\\*/)*))?(?:(?:/\\*[^/]*/?\\*/)*)\\s*[\'"\\);]+(?:(?:/\\*[^/]*/?\\*/)*))+(?:(?:/\\*[^/]*/?\\*/)*)(\\s*\\2\\(\\);(?:(?:/\\*[^/]*/?\\*/)*))?~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*[^/]*/?\\*/)*))(?&c)@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*(?&c)\\((?&c)(\'\',)?\\s*([\'"?>.\\s]+)?\\s*\\(?\\s*@?\\s*((?&c)base64_decode(?&c)\\s*\\((?&c)|(?&c)pack(?&c)\\s*\\(\'H\\*\',|(?&c)convert_uudecode(?&c)\\s*\\(|(?&c)htmlspecialchars_decode(?&c)\\s*\\(|(?&c)stripslashes(?&c)\\s*\\(|(?&c)gzinflate(?&c)\\s*\\(|(?&c)strrev(?&c)\\s*\\(|(?&c)str_rot13(?&c)\\s*\\(|(?&c)gzuncompress(?&c)\\s*\\(|(?&c)urldecode(?&c)\\s*\\(|(?&c)rawurldecode(?&c)\\s*\\(|(?&c)eval(?&c)\\s*\\()+.*?[^\'")]+(?&c)(((?&c)\\s*(?&c)\\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\\s*)+(?&c))?(?&c)\\s*[\'"\\);]+(?&c))+(?&c)(\\s*\\2\\(\\);(?&c))?~msi',
    'id' => 'evalComments',
  ),
  230 => 
  array (
    'full' => '~\\@?error_reporting\\(0\\);\\@?set_time_limit\\(0\\);(?:\\s*rename\\([^;]+;)?\\s*(\\$\\w+)="([^"]+)";\\s*\\1=\\@?urldecode\\(\\1\\);\\1=\\@?strrev\\(\\1\\);\\@?eval\\(\\1\\);~msi',
    'id' => 'strrevUrldecodeEval',
  ),
  231 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*"\\w+";\\s*\\@?error_reporting\\(E_ERROR\\);\\s*\\@?ini_set\\(\'display_errors\',\'Off\'\\);\\s*\\@?ini_set\\(\'max_execution_time\',\\d+\\);\\s*header\\("[^"]+"\\);\\s*)?(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*pack\\("H\\*",str_rot13\\(\\2\\)+;\\s*(?:eval\\(\\4\\);|(\\$\\w+)=\\$\\w+\\(\'\',\\4\\);\\s*\\5\\(\\);)~msi',
    'id' => 'evalPackStrrot',
  ),
  232 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\{\\$\\w+\\s*=\\s*\'\';\\s*for[^{]+\\{([^}]+\\}){2}\\s*\\$\\w{1,40}\\s*=\\s*((\'[^\']+\'\\s*\\.?\\s*)+);\\s*\\$\\w+\\s*=\\s*Array\\(((\'\\w\'=>\'\\w\',?\\s*)+)\\);\\s*eval(?:/\\*[^/]\\*/)*\\(\\1\\(\\$\\w+,\\s*\\$\\w+\\)+;~msi',
    'id' => 'urlDecodeTable',
  ),
  233 => 
  array (
    'full' => '~((?:\\$\\w+=[\'"][^\'"]+[\'"];\\s?)+)((?:\\$\\w+=(?:\\$\\w+\\.?)+;)+)\\s{0,50}(eval\\((?:\\$\\w+\\()+\'[^\']+\'\\)+;)~msi',
    'id' => 'evalVarChar',
  ),
  234 => 
  array (
    'fast' => '~(\\$\\w+\\s*=\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|pack\\(\'H\\*\',\\s*)+(?:"([^"]+)"|\'([^\']+)\')\\);)\\s*eval\\("?(\\$\\w+)"?\\);~msi',
    'full' => '~(\\$\\w+\\s*=\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|pack\\(\'H\\*\',\\s*)+(?|"([^"]+)"|\'([^\']+)\')\\);)\\s*eval\\("?(\\$\\w+)"?\\);~msi',
    'id' => 'evalVarFunc',
  ),
  235 => 
  array (
    'full' => '~(?:/\\*[^=\\$\\{\\}/]{10,499}[^\\*\\$\\(;\\}\\{=]{1,99}\\*/\\s*)?(\\$[^\\w=(,${)}]{0,50})=\'(\\w{0,50})\';((?:\\$[^\\w=(,${)}]{0,50}=(?:\\1{\\d+}\\.?){0,50};){1,20})(\\$[^=]{0,50}=\\$[^\\w=(,${)}]{1,50}\\(\\$[^\\w=(,${)}]{1,50}\\(\'\\\\{2}\',\'/\',__FILE__\\)\\);(?:\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}]{0,50}\\);){2}\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}]{0,50}\\(\'\',\\$[^\\w=(,${)}]{0,50}\\)\\.\\$[^\\(]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\\d+,\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\'@ev\'\\)\\);\\$[^\\w=(,${)}]{0,50}=\\$[^\\(]{0,50}\\(\\$[^\\w=(,${)}]{0,50}\\);\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}=]{0,50}=\\$[^\\w=(,${)}]{0,50}=NULL;@eval\\(\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}(]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\'\',\\$[^\\w=(,${)}]{0,50}\\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\\){4};)unset\\((?:\\$[^,]{0,50},?){0,20};return;\\?>.+~msi',
    'id' => 'evalFileContent',
  ),
  236 => 
  array (
    'full' => '~echo\\s{0,50}"(\\\\\\${\\\\x\\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi',
    'id' => 'echoEscapedStr',
  ),
  237 => 
  array (
    'full' => '~file_put_contents\\((?:\\$\\w+\\[[\'"]\\w+[\'"]\\]\\.)?[\'"][/\\w]+\\.php[\'"],\\s*(base64_decode\\([\'"]([\\w=/]+)[\'"]\\))\\)~msi',
    'id' => 'filePutDecodedContents',
  ),
  238 => 
  array (
    'full' => '~eval\\(implode\\(array_map\\([\'"](\\w+)[\'"],str_split\\([\'"]([^\'"]+)[\'"]\\)\\)\\)\\);~msi',
    'id' => 'evalImplodedArrStr',
  ),
  239 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?\'(.*?NULL\\);)\';\\s*(\\$\\w+)\\s?=\\s?[\'"]([\\w\\\\]+)[\'"];\\s?\\3\\([\'"]/\\(\\.\\*\\)/e[\'"],\\s?[\'"]([\\w\\\\]+)[\'"],\\s?NULL\\);~msi',
    'id' => 'pregReplaceCodeContent',
  ),
  240 => 
  array (
    'full' => '~((?:\\$\\w+\\s*\\.?=\\s*"[^"]*";\\s*)+)(\\$\\w+)\\s*=\\s*str_replace\\(\\s*"([^"]+)",\\s*"",\\s*\\$\\w+\\s*\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\s*"([^"]+)",\\s*"",\\s*"([^"]+)"\\s*\\);\\s*(\\$\\w+)\\s*=\\s*\\4\\(\\s*\\2\\s*\\);\\s*\\7\\s*=\\s*"[^"]+\\7";\\s*eval\\(\\s*\\7\\s*\\);~msi',
    'id' => 'concatVarsReplaceEval',
  ),
  241 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?file_get_contents\\(__FILE__\\);\\s?\\1\\s?=\\s?base64_decode\\(substr\\(\\1,\\s?([+-]\\d+)\\)\\);\\s*\\1\\s?=\\s?gzuncompress\\(\\1\\);\\s*eval\\(\\1\\);\\s*die\\(\\);\\?>\\s*([^"\']+)~msi',
    'fast' => '~\\$\\w{1,50}\\s?=\\s?file_get_contents\\(__FILE__\\);\\s?\\$\\w{1,50}\\s?=\\s?base64_decode\\(substr\\(\\$\\w{1,50},\\s?([+-]\\d+)\\)\\);\\s*\\$\\w{1,50}\\s?=\\s?gzuncompress\\(\\$\\w{1,50}\\);\\s*eval\\(\\$\\w{1,50}\\);\\s*die\\(\\);\\?>\\s*([^"\']+)~msi',
    'id' => 'decodeFileContent',
  ),
  242 => 
  array (
    'full' => '~((\\$\\w+\\s*=\\s*\\(?(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\()*((?:"([^"]+)";\\s*)|(?:\\$\\w+)\\)*;\\s*))+)(eval\\("?(\\$\\w+)"?\\);)~msi',
    'id' => 'evalVarFunc2',
  ),
  243 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*"([^"]+)";)\\s*((\\$\\w+)\\s*=\\s*array\\(((\\s*\\d+,?)+)\\);)\\s*((\\$\\w+)\\s*=\\s*array\\(((\\s*"[^"]+",?)+)\\);)\\s*(\\$\\w+)\\s*=\\s*\'\';(\\s*\\$\\w+\\s*=\\s*(?:\\9\\[\\d+\\]\\s*\\.?\\s*)+;)+(.+?(\\s*\\$\\w+\\s*=\\s*\\w+\\((?:\\9\\[\\d+\\]\\s*\\.?\\s*)+)\\);\\s*eval\\(\\$\\w+\\);\\s*\\})~msi',
    'fast' => '~((\\s*(\\$\\w+)\\s*=\\s*\\w+\\((\\$\\w+)\\[\\d+\\]\\s*\\.\\s*(?:\\4\\[\\d+\\]\\s*\\.?\\s*)+)\\);\\s*eval\\(\\3\\);\\s*\\})~msi',
    'id' => 'evalArrays',
  ),
  244 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?preg_replace\\([\'"]/([^\'"/]+)/\\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\\);~msi',
    'id' => 'pregReplaceVar',
  ),
  245 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+),\\s?(\\$\\w+)\\){\\s?(\\$\\w+)=[\'"]{2};\\s?for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\2\\);\\)\\s?for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\3\\);\\$\\w+\\+\\+,\\s?\\$\\w+\\+\\+\\)\\s?\\4\\s?\\.=\\s?\\2{\\$\\w+}\\s?\\^\\s?\\3{\\$\\w+};\\s?return\\s?\\4;\\s?};eval\\(\\1\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\),[\'"]([^\'"]+)[\'"]\\)\\);~msi',
    'id' => 'evalFuncTwoArgs',
  ),
  246 => 
  array (
    'full' => '~function\\s(\\w+)\\(\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?[\'"]{2};\\s?unset\\(\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w+\\s?=\\s?preg_replace\\("/([^"]+)/",\\s?[\'"]{2},\\s?\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?(?:(?:[\'"]\\w+[\'"]|\\$\\w+)\\.?)+;\\s?\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]\\$\\w+[\'"],\\s?\\$\\w+\\);\\s?@?\\$\\w+\\(\\$\\w+\\);\\s?}\\s?function\\s?(\\w+)\\(\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?[\'"](.*?)[\'"];\\s?\\$\\w+\\s?=\\s?preg_replace\\("/([^\'"]+)/",\\s?[\'"]{2},\\s?\\$\\w+\\);\\s?return\\s?\\$\\w+\\(\\$\\w+\\);\\s?}\\s?\\1\\(\\4\\(\\s?join\\([\'"]([^\'"]+)[\'"],\\s?array\\(((?:[\'"][^\'"]+[\'"][,\\s]*)+)\\)+;~msi',
    'id' => 'evalPregReplaceFuncs',
  ),
  247 => 
  array (
    'full' => '~error_reporting\\(0\\);((?:\\$\\w+=\'[^;]+;)+)error_reporting\\(0\\);((?:\\$\\w+=\\$\\w+\\(\\$\\w+\\(\'([^\']+)\'\\)\\);)+\\$\\w+=(?:\\$\\w+\\()+\'([^\']+)\'\\)+\\.(?:\\$\\w+\\()+\'([^\']+)\'\\)+;\\$\\w+=(?:\\$\\w+\\()+\'([^\']+)\'\\)+;\\$\\w+=(?:\\$\\w+\\()+"\\\\n",\\s*\'\',\\s*\'([^\']+)\'\\)+;(?:[^}]+\\})+}\\s*echo\\s*(?:\\$\\w+\\()+\'([^\']+)\'\\)+);exit;~msi',
    'id' => 'urlMd5Passwd',
  ),
  248 => 
  array (
    'full' => '~((?:\\$\\w+\\s?=\\s?\'(?:[^\']+)\';\\s?)+)((?:\\$\\w+\\s?=\\s?(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+;)+\\$\\w+\\s?=\\s?\\$\\w+\\s?\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+\\);\\s*\\$\\w+\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?[.,]?\\s?)+\\);)~msi',
    'fast' => '~((?:\\$\\w+\\s?=\\s?(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+;)+\\$\\w+\\s?=\\s?\\$\\w+\\s?\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+\\);\\s*\\$\\w+\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?[.,]?\\s?)+\\);)~msi',
    'id' => 'ManyDictionaryVars',
  ),
  249 => 
  array (
    'full' => '~(?:\\$\\w+\\s?=\\s{0,10}(?:[\'"][\\\\\\w]+[\'"]\\(\\d+\\s?[-+]\\s?\\d+\\)\\s?\\.?\\s?|[\'\\. strev]+)+;)*\\s?(?:\\s{0,10}\\$\\w+\\s?=\\s?\\$\\w+\\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\\);\\s{0,10})*function\\s(\\w+)\\((?:\\$\\w+\\s*,?\\s*){1,4}\\)\\s?{\\s?(?:\\$\\w+\\s?=\\s?(?:[\'"][\\\\\\w]+[\'"]\\(\\d+\\s?[-+]\\s?\\d+\\)\\s?\\.?\\s?)+;)*\\s?(?:\\$\\w+\\s?=\\s?\\$\\w+\\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\\);\\s?)*\\s*\\$\\w+\\s?=\\s?\\$\\w+\\(array\\(((?:\\s?"[^"]+",?)+)\\),\\s?[\'"]{2},\\s?\\$\\w+\\);\\s*return\\s?(?:\\$\\w+\\(){2}\\$\\w+\\)\\);\\s*}\\s*(\\$\\w+\\s?=\\s?[\'"]\\w*[\'"];)?\\s?ob_start\\(\\);\\s?\\?>(.*?)<\\?php\\s*\\$\\w+\\s?=\\s?ob_get_clean\\(\\);\\s?eval\\(\\1\\((?:\\$\\w+\\s*,?\\s*){1,4}\\)\\);\\s?\\?>~msi',
    'id' => 'evalBuffer',
  ),
  250 => 
  array (
    'full' => '~((?:\\$\\w+\\s?=\\s?[\'"]\\w*[\'"];\\s?){0,50}(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];(?:\\$\\w+\\s?\\.?=\\s?(?:\\$\\w+{\\d+}\\.?)+;)+)\\s?(eval\\((\\$\\w+)\\([\'"]([^\'"]+)[\'"]\\)\\);)~msi',
    'id' => 'evalDictionaryVars',
  ),
  251 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?[\'"]([^\'"]+)[\'"];(?:\\$\\w+\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);)+\\$\\w+\\s?=\\s?\\$\\w+\\(\\$\\w+\\(\\$\\w+\\)\\);\\$\\w+\\s?=\\s?\\$\\w+\\(\\$\\w+\\);(\\$\\w+)\\s?=\\s?[\'"]{2};for\\(\\$\\w+\\s?=\\s?0\\s?;\\s?\\$\\w+\\s?<\\s?\\$\\w+\\s?;\\s?\\$\\w+\\+\\+\\){\\2\\s?\\.=\\s?\\$\\w+\\(\\(\\$\\w+\\(\\$\\w+\\[\\$\\w+\\]\\)\\^(\\d+)\\)\\);}eval\\(\\2\\);return;~msi',
    'id' => 'evalFuncXored',
  ),
  252 => 
  array (
    'full' => '~[\'"]-;-[\'"];(.*?\\(\'\\\\\\\\\',\'/\',__FILE__\\)\\);.*?,[\'"];[\'"]\\),[\'"]"[\'"]\\);.*?)[\'"]-;-[\'"];((\\$\\w+)=[\'"]([^\'"]+)[\'"];.*?\\$\\w+\\s?\\.\\s?\\3,\\s?[\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\)\\)\\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi',
    'id' => 'evalFuncExplodedContent',
  ),
  253 => 
  array (
    'full' => '~(\\$\\w{0,100}\\s?=\\s?(?:chr\\(\\w{1,10}\\)\\s?\\.?\\s?){1,100};\\s?(?:\\$\\w{0,100}\\s?=\\s?(?:\\s?(?:[\'"][\\\\\\w]{1,10}[\'"]|[\\d\\.]{1,5}\\s[*\\+\\-\\.]\\s\\d{1,5})\\s?\\.?)+?;\\s?){1,10}(?:\\$\\w{0,100}\\s?=\\s?(?:chr\\(\\w{1,10}\\)\\s?\\.?){1,100};)?\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\((?:[\'"][^\'"]{1,500}[\'"]\\s?\\.?\\s?)+\\),\\s?(?:[\'"][^\'"]{1,500}[\'"]\\s?\\.?\\s?)+,\\s?substr\\(hash\\([\'"]SHA256[\'"],(?:\\s?[\'"]\\d{1,15}[\'"]\\s?\\.?){2},\\s?true\\),\\s?(\\d{1,10}),\\s?(\\d{1,10})\\),\\s?OPENSSL_RAW_DATA,\\s?\\$\\w{1,50}\\);.*?)(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"],\\s*[\'"]{2},\\s*[\'"]([^\'"]+)[\'"]\\);\\s?return\\s?@eval\\(((?:\\$\\w{1,50}\\s?\\()+\\$\\w{1,50}(?:\\)\\s?)+);\\s?exit;~msi',
    'id' => 'evalEncryptedVars',
  ),
  254 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)[^)]+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\\2;\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*strlen\\(\\$\\w+\\);\\)\\s*{\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*strlen\\(\\3\\)\\s*&&\\s*\\$\\w+\\s*<\\s*strlen\\(\\$\\w+\\);\\s*\\$\\w+\\+\\+,\\s*\\$\\w+\\+\\+\\)\\s*{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\]\\s*\\^\\s*\\3\\[\\$\\w+\\];\\s*}\\s*}\\s*return \\$\\w+;\\s*}\\s*\\$\\w+\\s*=\\s*["\'][^"\']+[\'"];\\s*\\$\\w+\\s*=\\s*[\'"]([^\'"]+)["\'];\\s*(?:\\$\\w+\\s*=\\s*["\']+;\\s*)+(?:foreach[^{]+{[^}]+}\\s*)+(\\$\\w+)\\s*=\\s*\\$\\w+\\([create_funion\'. "]+\\);\\s*(\\$\\w+)\\s*=\\s*\\5\\(["\'][^"\']*[\'"],\\s*\\$\\w+\\(\\1\\(\\$\\w+\\(\\$\\w+\\),\\s*["\']([^\'"]+)["\']\\)+;\\s*\\6\\(\\);~msi',
    'id' => 'xoredKey',
  ),
  255 => 
  array (
    'full' => '~(\\$\\w+)=str_rot13\\(\'[^\']+\'\\);(\\$\\w+)=str_rot13\\(strrev\\(\'[^\']+\'\\)\\);(\\s*eval\\(\\1\\(\\2\\(\'([^\']+)\'\\)+;)+~msi',
    'id' => 'evalGzB64',
  ),
  256 => 
  array (
    'full' => '~(function\\s*(_\\d+)\\((\\$\\w+)\\)\\s*{(\\$\\w+)=Array\\(\'[^)]+\'\\);return\\s*base64_decode\\(\\4\\[\\3\\]\\);\\})(.+?\\2\\(\\d+\\))+[^;]+;exit;~msi',
    'id' => 'evalArrayB64',
  ),
  257 => 
  array (
    'full' => '~http_response_code\\(\\d{1,3}\\);function\\s?(\\w{1,100})\\(\\$\\w{1,50}\\){if\\s?\\(empty\\(\\$\\w{1,50}\\)\\)\\s?return;\\$\\w{1,50}\\s?=\\s?"[^"]{1,500}";(?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]{0,2}){1,4};){1,2}\\$\\w{1,50}\\s?=\\s?0;\\$\\w{1,50}\\s?=\\s?"";\\$\\w{1,50}\\s?=\\s?preg_replace\\("[^"]{1,50}",\\s?"",\\s?\\$\\w{1,50}\\);do{.*?while\\s?\\(\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\);return\\s?\\$\\w{1,50};}eval\\(\\1\\(hex2bin\\("(\\w{1,30000})"\\)\\)\\);~msi',
    'id' => 'evalFuncBinary',
  ),
  258 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s?=\\s?\'\\w{1,500}\';){1,5}\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?){1,10};\\$\\w{1,50}=\\$\\w{1,50}\\([\'"]H\\*[\'"],[\'"](\\w{1,200})[\'"]\\);\\s?\\$\\w{1,50}\\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\\);~msi',
    'id' => 'evalPackFuncs',
  ),
  259 => 
  array (
    'full' => '~parse_str\\s*\\(((?:\\s?[\'"][^\\,]+[\'"]\\s?\\.?\\s?){1,500}),\\s?(\\$\\w{1,50})\\s?\\)\\s?;\\s?@?\\s?((?:eval\\s?\\()?\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?\\(\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?(?:,\\s?array\\s?\\(\\s?\\)\\s?,\\s?array\\s?\\(\\s?[\'"]([^\']{1,10})[\'"]\\s?\\.(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d+\\s?\\]\\s?\\(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d\\s?\\]\\s?\\(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d{1,2}\\s?\\]\\s?\\(\\s?)|\\(\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?\\())\\s?([\'"][^\']+[\'"]\\s?)(\\)\\s*)?\\)\\s*\\)\\s*\\.\\s?[\'"]([^\'"]{1,10})[\'"]\\s?\\)\\s?\\)\\s?;~msi',
    'id' => 'parseStrFunc',
  ),
  260 => 
  array (
    'full' => '~eval\\("\\\\(\\$\\w+)=(gz[^\\)]+\\)\\);)"\\);eval\\("\\?>"\\.\\1\\);~msi',
    'id' => 'evalGzinflate',
  ),
  261 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?\\("([^"]{1,500})"\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"|\\$\\w{1,50}|[\'"]{2});\\s?)+for\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}<strlen\\(\\$\\w{1,50}\\);\\s?\\)\\s?{\\s?for\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\(\\$\\w{1,50}<strlen\\(\\2\\)\\s?&&\\s?\\$\\w{1,50}<strlen\\(\\$\\w{1,50}\\)\\);\\s?\\$\\w{1,50}\\+\\+,\\$\\w{1,50}\\+\\+\\){\\s?(?:\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?){1,2}\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}{\\$\\w{1,50}}\\s?\\^\\s?\\$\\w{1,50}{\\$\\w{1,50}};\\s?\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?}\\s?}\\s?return\\s?\\$\\w{1,50};\\s?}\\s?(\\$\\w{1,50})\\s?=\\s?preg_replace\\("([^"]+)",\\s?"",\\s?"([^"]+)"\\);\\s?(?:\\s?\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"|\\w{1,50}\\(\\$\\w{1,50}\\("[^"]+"\\)\\)|\\$\\w{1,50}\\(\\)\\.\\s?\\w{1,50}\\(\\$\\w{1,50}\\("[^"]+"\\)\\)|"[^"]+"\\s*\\.\\s*\\w+\\(\\$\\w+\\("[^"]+"\\)\\));\\s?){1,50}(\\$\\w{1,50}\\(\\$\\w{1,50},(?:\\$\\w{1,50}\\.?)+\\);)\\s?(?:\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?|include\\s?\\$\\w{1,50};\\s){1,50}~msi',
    'id' => 'funcVars',
  ),
  262 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";(?:\\$\\w+\\s*=\\s*(?:\\1\\[\\d+\\][\\.;])+)+@?(?:\\$\\w+[\\(,])+((?:\\1\\[\\d+\\][\\.;\\)])+)\\)\\),\\$\\w+\\[\\d+\\],\\$\\w+\\[\\d+\\]\\);~msi',
    'id' => 'dictVars',
  ),
  263 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'\'|\\.|chr\\(\\d+\\)|\'\\w+\')+\\s?;\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',array\\(((?:"[^"]+",?)+)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?(?:\'\'|\\.|chr\\(\\d+\\)|\'\\w+\')+\\s?;)+\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',\\$\\w{1,50}\\(((?:\'[^\']+\'\\s?\\.?)+)\\)\\);\\$\\w{1,50}\\(\\);\\$\\w{1,50}\\(\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\);~msi',
    'id' => 'decodedDoubleStrSet',
  ),
  264 => 
  array (
    'full' => '~(\\$\\w{1,100})=[\'"]([^"\']+)[\'"];(\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\([\'"]([^"\']+)[\'"]\\);\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\(\'\\1\',\\$\\w{1,100}\\);\\$\\w{1,100}\\(\\1\\);)~msi',
    'fast' => '~(\\$\\w{1,100})=[\'"]([^"\']+)[\'"];(\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\([\'"]([^"\']+)[\'"]\\);\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\(\'\\$\\w{1,100}\',\\$\\w{1,100}\\);\\$\\w{1,100}\\(\\$\\w{1,100}\\);)~msi',
    'id' => 'createFuncStrrev',
  ),
  265 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*create_function\\(\'\\$\\w+\',strrev\\(\'[^\']+\'\\)\\);\\s*\\1\\(strrev\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'strrevBase64',
  ),
  266 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";if\\(!function_exists\\("([^"]+)"\\)\\){function\\s*\\3\\(\\$\\w+\\)\\{\\$\\w+=(\\d+);foreach\\(array\\(((?:"[0-9a-f]+",?)+)\\)as\\$\\w+=>\\$\\w+\\)[^}]+\\}\\}\\3\\(\\1\\."([^"]+)"\\);~msi',
    'id' => 'customDecode',
  ),
  267 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*[abcdehnoprstux\\._64\'"]+;\\s*)+)(\\$\\w+="?\\w+["\\(\\)]*;\\s*)+\\$\\w+="[^"]+";\\s*\\$\\w+=(\\$\\w+\\("([^"]+)"\\);)[^/]+/pre>\';~msi',
    'id' => 'expDoorCode',
  ),
  268 => 
  array (
    'full' => '~include\\((base64_decode\\(\'([^\']+)\'\\))\\);~msi',
    'id' => 'includeB64',
  ),
  269 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(\'nib2xeh\'\\);(\\$\\w+)=array\\(((?:\'[^\']+\',?)+)\\);(\\$\\w+)\\s*=\\s*\'\';for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*\\d+;\\s*\\$\\w+\\+\\+\\)\\s*\\{\\4\\s*\\.=\\s*str_replace\\(array\\(((?:\'([^\']*)\',?)+)\\),\\s*array\\(((?:\'[^\']*\',?)+)\\),\\s*\\2\\[\\$\\w+\\]\\);\\}(?:(?:\\$\\w+=)+(?:true;|hex2bin))?(?:eval\\(\\1\\(\\4\\)\\);)*~msi',
    'id' => 'nib2xeh',
  ),
  270 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*\\$\\w+\\s*=\\s*"[0-9a-f]{32}";\\s*((\\$\\w+)\\s*=\\s*((?:\\w+\\()+)\'([^\']+)\'\\)+;\\$\\w+\\s*=\\s*"";for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*120;\\s*\\$\\w+\\+\\+\\)[^}]+}\\$\\w+\\s*=\\s*strlen\\(\\2\\);\\$\\w+\\s*=\\s*strlen\\(sha1\\(hash\\(str_rot13\\("fun256"\\),\\s*md5\\(\\$\\w+\\)+;for[^}]+}[^}]+}eval\\(\\$\\w+\\);)~msi',
    'id' => 'fun256',
  ),
  271 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*((?:\\$?\\w+\\()+)\'([^\']+)\'\\)+;\\s*if\\s*\\(\\s*\'\\w{40,40}\'\\s*==\\s*sha1\\(\\s*\\1\\s*\\)\\s*\\)\\s*{\\s*\\1\\s*=\\s*gzinflate\\s*\\(\\s*gzinflate\\s*\\((?:\\s*base64_decode|\\$\\w+)\\(\\s*\\1\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\w{1,10}\\s*=\\s*""\\s*;for\\s*\\([^)]+\\)\\s*{[^}]+}\\s*(?:\\s*\\$[^;]+;\\s*)+for\\s*\\([^)]+\\)\\s*{\\s*\\$[^;]+;\\s*if\\s*\\([^)]+\\)\\s*{[^}]+}(?:\\s*\\$[^;]+;\\s*)+}\\s*eval\\s*\\(\\s*\\$\\w+\\s*\\)\\s*;[^}]*}\\s*else\\s*{[^}]+}~msi',
    'id' => 'fun256',
  ),
  272 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?\'([^\']+)\';\\s?(\\$\\w+\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?(?:(?:\\$\\w+\\s?=\\s?(?:\\$\\w+\\()+(?:(?:\\1\\[\\d+\\])\\.?|"[^"]+"\\.?)+)\\)+;\\s?)+)(\\$\\w+\\s?=\\s?\\$\\w+\\(\'H\\*\',\\s?\\$\\w+\\(\'/\\[([^]]+)\\]\\+/\\w\',\'\',\\s?(\\$\\w+)\\(\\1\\)\\)\\);\\s?eval\\(\\$\\w+\\);)~msi',
    'id' => 'evalPackPreg',
  ),
  273 => 
  array (
    'full' => '~((?:\\$_\\w{1,50}\\s?=\\s?"[^"]{1,100}";)+)@eval\\("\\?>"\\.(\\$_\\w{1,50}\\((/\\*.*?\\*\\/)\\$\\w{1,50}\\("[^"]+"\\)\\))\\);~msi',
    'id' => 'evalVarWithComment',
  ),
  274 => 
  array (
    'fast' => '~()(\\$\\w+)=create_function\\((((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+),(((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+)\\);\\4\\(base64_decode\\((((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+)\\)\\);~msi',
    'full' => '~(?(DEFINE)(?\'s\'((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+))(\\$\\w+)=create_function\\(((?P>s)),((?P>s))\\);\\4\\(base64_decode\\(((?P>s))\\)\\);~msi',
    'id' => 'createFuncObf',
  ),
  275 => 
  array (
    'full' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~mis',
    'fast' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~mis',
    'id' => 'base64Array',
  ),
  276 => 
  array (
    'full' => '~((?:\\$[\\w]{1,34}\\s*=\\s*[\'"](?:[\\\\\\w]{1,32}\\\\[\\\\\\w]{1,32})[\'"]\\s*;\\s*){1,2}\\s*(?:\\$[\\w]{1,34}\\s*=\\s*[\'"][^\'"]+[\'"];){1,3})\\s*@?eval\\s*\\(\\s*([^;]{0,100})\\);~msi',
    'id' => 'simpleVarsAndEval',
  ),
  277 => 
  array (
    'full' => '~(if\\(defined\\(\'PHP_MAJOR_VERSION\'\\)[^{]{1,30}{\\s*if[^}]+}\\s*}\\s*.*?if\\s*\\(\\s*!\\s*function_exists\\s*\\(\\s*\'nel\'\\s*\\)\\s*\\)\\s*{\\s*)(function\\s*nel\\s*\\(\\s*\\$i\\s*\\)\\s*{\\s*\\$[\\w]+\\s*=\\s*array\\(([^)]+)\\);[^}]+})(.*}\\s*exit\\s*;\\s*}\\s*})~mis',
    'id' => 'replaceFuncWithBase64DecodeArray',
  ),
  278 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'[^\']+\'\\.?)+;\\$\\w{1,50}\\s?=\\s?create_function\\(\'\\$\\w{1,50}\',\\$\\w{1,50}\\);((?:\\$\\w{1,50}\\s?=\\s?(?:\'[^\']+\'\\.?)+;)+)\\$\\w{1,50}\\(((?:\\$\\w{1,50}\\()+"[^"]+"\\)+;)~msi',
    'id' => 'createFuncVars',
  ),
  279 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?json_decode\\((base64_decode\\([\'"][^\'"]+[\'"]\\))\\);~msi',
    'id' => 'jsonDecodedVar',
  ),
  280 => 
  array (
    'full' => '~if\\s?\\(file_put_contents\\(\\$\\w{1,50}\\.[\'"][^\'"]+[\'"],(base64_Decode\\([\'"][^\'"]+[\'"]\\))\\)\\)echo\\s?[\'"][^\'"]+[\'"];~msi',
    'id' => 'filePutPureEncodedContents',
  ),
  281 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\((\\$\\w{1,50})\\){for\\s?\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\3\\s?<=\\s?strlen\\(\\2\\)-1;\\s?\\3\\+\\+\\s?\\){(\\$\\w{1,50})\\s?\\.=\\s?\\2{strlen\\(\\2\\)-\\3-1};}return\\(\\4\\);}((?:eval\\(\\1\\(\'[^\']+\'\\)\\);)+)~msi',
    'id' => 'evalFuncReverse',
  ),
  282 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{return\\s?base64_decode\\(\\$\\w{1,50}\\);}(?:.*?\\1\\("[^"]+"\\))+~msi',
    'fast' => '~function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{return\\s?base64_decode\\(\\$\\w{1,50}\\);}(?:.*?\\w{1,50}\\("[^"]+"\\))+~msi',
    'id' => 'base64decodeFuncs',
  ),
  283 => 
  array (
    'full' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?eval\\s?\\(\\3\\s?\\("((?:\\\\x\\w{1,50})+)"\\s?\\([\'"]{1,2}([^"\']+)[\'"]{1,2}\\)\\)\\);\\s?create_function\\(\'\',\\s?\'}\'\\.\\4\\.\'//\'\\);~msi',
    'fast' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\[\\d+\\]\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?eval\\s?\\(\\$\\w{1,50}\\s?\\("((?:\\\\x\\w{1,5})+)"\\s?\\([\'"]{1,2}([^"\']+)[\'"]{1,2}\\)\\)\\);\\s?create_function\\(\'\',\\s?\'}\'\\.\\$\\w{1,50}\\.\'//\'\\);~msi',
    'id' => 'evalCreateFuncWithDictionaryVar',
  ),
  284 => 
  array (
    'full' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w+)\\s?=\\s?"([^"]+)";(?:\\$\\w+\\s?=\\s?(?:\\$\\w+\\[\\d+\\]\\.?)+;)+function\\s\\w+\\((?:\\$\\w+,?){5}\\){\\s*return\\s?(?:\\$\\w+\\.?){5};}(?:\\$\\w+\\s?=\\s?(?:[\'"][^\'"]*[\'"]\\.?)+;)+\\$\\w+\\s?=\\s?\\w+\\((?:\\$\\w+,?){5}\\);(?:\\$\\w+\\s?=\\s?(?:[\'"][^\'"]*[\'"]\\.?)+;)+function\\s(\\w+)\\((?:\\$\\w+,?){3}\\){\\s*return\\s?(?:\\$\\w+\\.?){3};}\\$\\w+\\s?=\\s?((?:\\3\\((?:(?:\\$\\w+|\\.?[\'"][^"\']*[\'"]\\.?)+,?){3}\\)\\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\\.\\$\\w+);\\$\\w+\\(\'\',\\s?\'}\'\\.\\$\\w+\\.\'//\'\\);~msi',
    'id' => 'evalCreateFuncWithVars',
  ),
  285 => 
  array (
    'fast' => '~()error_reporting\\([^)]+\\);define\\(\'([^\']+)\',\\s*\'[^\']+\'\\);\\$(?:_GET|GLOBALS)\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*)\',([0-9a-fx]+),\\s*([0-9\\-]+)\\)\\)\\);(?:.{1,250}(?:(?:\\$(?:_GET|GLOBALS)\\{\\2\\}[\\{\\[][a-fx\\d]+[\\}\\]])|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\\s*(\\$\\w+\\((?:\\$\\w+\\.?)+\\);|eval\\(\\$\\w+\\);\\s*\\}\\s*function\\s*\\w+[^1]+!1\\);\\s*return\\s*curl_exec\\(\\$\\w+\\);)?[^;]+;)~msi',
    'full' => '~(?(DEFINE)(?\'v\'(?:\\$(?:_GET|GLOBALS)\\{\\2\\}[\\{\\[][a-fx\\d]+[\\}\\]])))error_reporting\\([^)]+\\);define\\(\'([^\']+)\',\\s*\'[^\']+\'\\);\\$(?:_GET|GLOBALS)\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*)\',([0-9a-fx]+),\\s*([0-9\\-]+)\\)\\)\\);(?:.{1,250}(?:(?&v)|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\\s*(\\$\\w+\\((?:\\$\\w+\\.?)+\\);|eval\\(\\$\\w+\\);\\s*\\}\\s*function\\s*\\w+[^1]+!1\\);\\s*return\\s*curl_exec\\(\\$\\w+\\);)?[^;]+;)~msi',
    'id' => 'explodeSubstrGzinflate',
  ),
  286 => 
  array (
    'full' => '~error_reporting\\([^)]+\\);header\\([^)]+\\);ini_set\\([^)]+\\);ini_set\\([^)]+\\);define\\(\'PASSWD\',\'[^)]+\\);define\\(\'VERSION\',\'Bypass[^)]+\\);define\\(\'THISFILE\'[^;]+;define\\(\'THISDIR\',[^;]+;define\\(\'ROOTDIR\',[^;]+;(((?:\\$\\w+=\'[^\']+\';)+)((?:\\$\\w+=str_replace\\(\'[^\']+\',\'\',\'[^\']+\'\\);)+)(\\$\\w+)=\\$\\w+\\(\\$\\w+\\(\'[^\']+\'\\),\\$\\w+\\(\'[^\']+\'\\)\\);\\4\\(((?:\\$\\w+\\.?)+)\\);)~msi',
    'id' => 'base64Vars',
  ),
  287 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\$\\w+,\\$\\w+\\)\\s*\\{\\$\\w+=array\\(\\);for\\(\\$\\w+=0;\\$\\w+<256;\\$\\w+\\+\\+\\)(?:[^}]+}){2}return\\s*\\$res;\\s*}\\s*function\\s*(\\w+)\\(\\)\\s*{(?:[^}]+}){12}(?:\\$\\w+=(?:chr\\([0-9b]+\\)\\.?)+;)+\\2\\(\\);@?eval\\(\\$\\w+\\(\\1\\(\\$\\{\'[^\']+\'\\.(?:\\(\'.\'\\^\'.\'\\)\\.?)+}\\[\\(\'.\'\\^\'.\'\\)\\.\\(\'.\'\\^\'.\'\\)\\],\\$\\w+\\("([^"]+)"\\)\\)\\)\\);exit;~msi',
    'id' => 'chr0b',
  ),
  288 => 
  array (
    'full' => '~@?error_reporting\\(0\\);\\s*@?ini_set\\(\'error_log\',NULL\\);\\s*@?ini_set\\(\'log_errors\',0\\);\\s*(\\$\\w+)=strrev\\([base64_decode\'\\.]+\\);(\\$\\w+)=gzinflate\\(\\1\\(\'([^\']+)\'\\)\\);\\s*create_function\\("","}\\2//"\\);~msi',
    'id' => 'createFuncPlugin',
  ),
  289 => 
  array (
    'full' => '~((?:(\\$\\w+)\\s*=\\s*(?:str_replace\\((?:"[^"]+"|\'[^\']+\'),\\s*(?:""|\'\'),\\s*(?:"[^"]+"|\'[^\']+\')\\);\\s*|\'([^\']+)\';))+)\\s*(eval\\s*\\((?:\\$\\w+\\()+(?:\'([^\']+)\'|\\$\\w+)\\)+;)~msi',
    'id' => 'strreplaceEval',
  ),
  290 => 
  array (
    'full' => '~(\\$\\w+)\\s*\\s*=\\s*"[a-f0-9]{32,40}";\\s*(\\$\\w+)\\s*=\\s*"[create_fution".]+;\\s*(\\$\\w+)=@?\\2\\(\'(\\$\\w+),(\\$\\w+)\',\'[eval\'\\.]+\\("\\\\\\1=\\\\"\\5\\\\";\\?>"[gzinflate\\.\']+\\(\\s*[base64_decode\'\\.]+\\(\\4\\)+;\'\\);\\s*@?\\$\\w+\\("([^"]+)",\\1\\);~msi',
    'id' => 'hackM19',
  ),
  291 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*strrev\\("[create_funtio"\\.\\s]+\\);\\s*(\\$\\w+)\\s*=\\s*\\1\\(\'(\\$\\w+)\',\\s*strrev\\(\';\\)+\\w+\\$\\([bas64_dcode\'\\.\\s]+\\([bzdecompres\'\\.\\s]+">\\?"\\([eval\\.\'\\s]+\\)\\);\\s*\\2\\("([^"]+)"\\);~msi',
    'id' => 'ev404',
  ),
  292 => 
  array (
    'full' => '~class\\s+(_\\w+)\\s*{\\s*private\\s+static\\s*\\$\\w{1,5}\\s*;\\s*public\\s*static\\s*function\\s*(\\w+)[^}]{1,1000}\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,10}\\s*\\(\\s*\\)\\s*{self::\\$\\w{1,5}\\s*=\\s*array\\s*\\(\\s*([^)]+)\\s*\\);\\s*}\\s*}\\s*class\\s+(_\\w+)\\s*{\\s*private\\s+static\\s*\\$\\w{1,5}\\s*;\\s*public\\s*static\\s*function\\s*(\\w+)[^}]{1,1000}\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,10}\\s*\\(\\s*\\)\\s*{self::\\$\\w{1,5}\\s*=\\s*array\\s*\\(\\s*([^)]+)\\s*\\);\\s*}\\s*}\\s*(.{1,5000}exit\\s*;\\s*})~mis',
    'id' => 'twoHashFunc',
  ),
  293 => 
  array (
    'full' => '~(\\s*function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\$\\w+\\s*=\\s*[gzinflatebs64_dco\'\\.]+;\\s*)+\\3\\s*=\\s*(?:\\$\\w+\\()+\\3\\)+;\\s*return\\s*\\3;}(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*(\\$\\w+)\\s*=\\s*\'\\2\';\\s*\\3\\s*=\\s*\\6\\(\'[^)]+\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'\',\\6\\(\\4\\)+;\\7\\(\\);)\\s*\\w+\\(\\d+(,\'[^\']+\',\'[^\']+\')?\\);~msi',
    'id' => 'setVars',
  ),
  294 => 
  array (
    'full' => '~(?:\\$\\w+=\'[gzuncompresbae64_dtfi\\.\']+;\\s*)+\\$\\w+=\\$\\w+\\(\'(\\$\\w+)\',\'[eval\'\\.]+\\(\\1\\);\'\\);\\s*(\\$\\w+)=\'([^\']+)\';\\s*\\$\\w+\\("\\?>"\\.(\\$\\w+\\()+\\2\\)+;~msi',
    'id' => 'createFuncGzB64',
  ),
  295 => 
  array (
    'full' => '~(\\$\\w{1,50})=(?:[\'"][create_funcion]+[\'"]\\.?)+;\\$\\w{1,50}=\\1\\([\'"](\\$\\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\\.?)+[\'"][decode(]+\\2\\)+;[\'"]\\);\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\);~msi',
    'id' => 'createFuncGzB64',
  ),
  296 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(\'[base64_dco]+\'\\);\\s?(\\$\\w+)=gzinflate\\(\\1\\(\'([^\']+)\'\\)\\);\\s?create_function\\("","}\\2//"\\);~msi',
    'id' => 'createFuncGzInflateB64',
  ),
  297 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(\\(?\\s*gzinflate\\s*\\(\\s*base64_decode\\s*)\\(\\s*\'([^\']+)\'\\s*\\)\\s*\\)\\s*\\)?\\s*;\\s*\\$\\w+\\s*=\\s*@?create_function\\(\'([^\']*)\',\\s*(?:\\1|\'@?eval\\(\\4\\)[^\']+\')\\)\\s*;\\s*@?\\$\\w+(?:\\(\\)|\\(\\1\\));~msi',
    'id' => 'createFuncGzInflateB64',
  ),
  298 => 
  array (
    'full' => '~(\\$\\w+)="((?:\\\\\\w+)+)";((\\$\\w+)=\\1\\("[^"]+"\\);)@(eval\\(\\1\\("[^"]+"\\)\\);)(\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)((\\$\\w+)=(\\$\\w+)\\(\\1\\("([^"]+)"\\),-1\\);)((?:\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)+)@(eval\\(\\$\\w+\\(\\1\\("[^"]+"\\)\\)\\));~msi',
    'id' => 'wsoShellDictVars',
  ),
  299 => 
  array (
    'full' => '~error_reporting\\(\\d+\\);(\\$\\w+)="([^"]+)";(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);foreach\\(\\3\\sas\\s\\$\\w+=>\\$\\w+\\){\\$\\w+=preg_split\\("//",\\$\\w+,-1,[^)]+\\);\\3\\[\\$\\w+\\]=implode\\("",array_reverse\\(\\$\\w+\\)\\);}(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);foreach\\(\\6\\sas\\s\\$\\w+=>\\$\\w+\\){\\${\\$\\w+}=\\3\\[\\$\\w+\\];}function\\s(\\w+)\\(\\$\\w+,\\$\\w+\\){\\$\\w+=\\${"[^"]+"}\\["([^"]+)"\\]\\("//",\\$\\w+,-1,[^)]+\\);foreach\\(\\$\\w+\\sas\\s\\$\\w+=>\\$\\w+\\){\\$\\w+\\[\\$\\w+\\]=\\${"[^"]+"}\\["([^"]+)"\\]\\(\\${"[^"]+"}\\["([^"]+)"\\]\\(\\$\\w+\\)\\+\\$\\w+\\);}\\$\\w=\\${"[^"]+"}\\["([^"]+)"\\]\\("",\\$\\w+\\);return\\s\\$\\w+;}(\\$\\w+)=\\9\\(\\14,-2\\);@ini_set\\(\'[^\']+\',\'[^\']+\'\\);((?:\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)(\\$\\w+)=(?:\\$\\w+\\[\\d+\\]\\.?)+;)function\\s(\\w+)\\(\\$\\w+\\){\\$\\w+=\\9\\(\\$\\w+,1\\);\\$\\w+=strtr\\(\\$\\w+,"([^"]+)","([^"]+)"\\);return\\s\\$\\w+;}((?:\\$\\w+\\.?=(?:\\$\\w+\\[\\d+\\]\\.?)+;)+)(\\$\\w+)=\\${"[^"]+"}\\["[^"]+"\\]\\(\'(?:\\$\\w+,?)+\',(\\$\\w+)\\(\\17\\("([^"]+)"\\)\\)\\);@\\${"[^"]+"}\\["[^"]+"\\]\\((?:@\\$\\w+,?)+\\);~msi',
    'id' => 'funcDictVars',
  ),
  300 => 
  array (
    'full' => '~((\\$\\w{1,10})\\s*=\\s*\\(\\s*[\'"]([^\'"]{40,50000})[\'"]\\s*\\)\\s*;\\s*(\\$\\w{1,10})\\s*=\\s*base64_decode\\s*\\(\\s*\\2\\s*\\)\\s*;)\\s*(\\$\\w{1,10}\\s*=\\s*fopen\\s*[^;]+;\\s*echo\\s*fwrite[^;]+;\\s*fclose[^;]+;)~msi',
    'id' => 'funcFile2',
  ),
  301 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\2=((?:\\w+\\()+)\\2(\\)+);\\s*for\\(\\$\\w=0;\\$\\w+<strlen\\(\\2\\);\\$\\w+\\+\\+\\)\\s*\\{\\s*\\2\\[\\$\\w+\\]\\s*=\\s*chr\\(ord\\(\\2\\[\\$\\w+\\]\\)-(\\d+)\\);\\s*\\}\\s*return\\s*\\2;\\s*\\}eval\\(\\1\\(("[^"]+")\\)\\);~msi',
    'id' => 'sec7or',
  ),
  302 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*class\\s*(\\w+)\\{\\s*private\\s*\\$\\w+=\\s*array\\(\\s*((?:"[^"]+"=>"[^"]+",?\\s*)+)\\)\\s*;\\s*public\\s*function\\s*(\\w+)\\s*\\(\\s*\\$\\w+,\\s*\\$\\w+\\s*\\)\\s*{[^}]+}\\s*public\\s*function\\s*(\\w+)\\s*\\(\\$\\w+,\\$\\w+\\)\\s*{[^}]+}\\s*private\\s*function\\s*\\w+\\((?:\\$\\w+,?){7}\\)\\s*{[^}]+}return\\s*array\\((?:\\$\\w+,?){3}\\);}}\\s*(\\$\\w+)=new\\s*\\1;\\s*(\\$\\w+)=\\5->\\3\\(\'tmhapbzcerff\',array\\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\\)\\);\\5->\\4\\(\\6,\'\'\\);\\s*die\\(\\);~msi',
    'id' => 'classWithArrays',
  ),
  303 => 
  array (
    'full' => '~error_reporting\\(0\\);(\\s*(\\$\\w+)="[asert\\."]+;\\s*\\$(\\w+)=\\2\\(strrev\\("([^"]+)"\\)\\);\\s*\\$\\{\'\\3\'\\};)~msi',
    'id' => 'assertStrrev',
  ),
  304 => 
  array (
    'full' => '~error_reporting\\(0\\);\\$\\w+\\="[^"]+";\\$\\w+\\=explode\\("[^"]+","[^"]+"\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\w+\\=preg_split\\("//",\\$\\w+,\\-1,PREG_SPLIT_NO_EMPTY\\);\\$\\w+\\[\\$\\w+\\]\\=implode\\("",array_reverse\\(\\$\\w+\\)\\);\\}\\$\\w+\\=explode\\("[^"]+","[^"]+"\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\{\\$\\w+\\}\\=\\$\\w+\\[\\$\\w+\\];\\}function \\w+\\(\\$\\w+,\\$\\w+\\)\\{\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\("//",\\$\\w+,\\-1,PREG_SPLIT_NO_EMPTY\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\w+\\[\\$\\w+\\]\\=\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\(\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(\\$\\w+\\)\\+\\$\\w+\\);\\}\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\("",\\$\\w+\\);return \\$\\w+;\\}\\$\\w+\\=\\w+\\(\\$\\w+,\\-2\\);@ini_set\\(\'memory_limit\',\'1024M\'\\);(?:\\$\\w+\\=(?:\\$\\w+\\{\\d+\\}\\.?)+;)+function \\w+\\(\\$\\w+\\)\\{\\$\\w+\\=\\w+\\(\\$\\w+,(\\d+)\\);\\$\\w+\\=strtr\\(\\$\\w+,"([^"]+)","([^"]+)"\\);return \\$\\w+;\\}(?:\\$\\w+\\.?=(?:\\$\\w+\\{\\d+\\}\\.?)+;)+\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(\'\\$\\w+,\\$\\w+,\\$\\w+,\\$\\w+\',\\$\\w+\\(\\w+\\("([^"]+)"\\)\\)\\);@\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+\\);~msi',
    'id' => 'b64strtr',
  ),
  305 => 
  array (
    'full' => '~error_reporting\\(\\d\\);function\\s(\\w{1,50})\\(\\$\\w{1,50},\\$\\w{1,50}\\){if\\(file_exists\\("[^"]+"\\)\\){touch\\(__FILE__,filemtime\\("[^"]+"\\)\\);}\\$\\w{1,50}=str_replace\\(array\\(\'([^\']+)\',\'([^\']+)\'\\),array\\(\'([^\']+)\',\'([^\']+)\'\\),\\$\\w{1,50}\\);\\$\\w{1,50}=strrev\\(\'[base64]+\'\\)\\."_"\\.strrev\\(\'[decode]+\'\\);\\$\\w{1,50}=\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\$\\w{1,50}=strrev\\(\'[gzinflate]+\'\\);return@\\$\\w{1,50}\\(\\$\\w{1,50}\\);}\\s?\\$\\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\\(\'#\\6\\(\\.\\*\\)">#\',\\$\\w{1,50},\\$\\w{1,50}\\);\\$\\w{1,50}=\\$\\w{1,50}\\[1\\];\\$\\w{1,50}=\\1\\(\\$\\w{1,50},\\$\\w{1,50}\\);if\\(isset\\(\\$\\w{1,50}\\)\\){eval\\(\\$\\w{1,50}\\);}~msi',
    'id' => 'gzB64strReplaceDataImage',
  ),
  306 => 
  array (
    'full' => '~(\\$\\w{1,50})=array\\((?:base64_decode\\([\'"][^\'"]+[\'"]\\),?){2}base64_Decode\\(strrev\\(str_rot13\\(explode\\(base64_decode\\([\'"][^\'"]+[\'"]\\),file_get_contents\\(__FILE__\\)\\)\\[1\\]\\){4};preg_replace\\(\\1\\[0\\],serialize\\(eval\\(\\1\\[2\\]\\)\\),\\1\\[1\\]\\);exit\\(\\);\\s?\\?>\\s*([^\\s]{1,})~msi',
    'id' => 'serializeFileContent',
  ),
  307 => 
  array (
    'full' => '~(function\\s\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{\\s?global\\s(?:\\$\\w{1,50},?\\s*)+;\\s*\\$\\w{1,50}\\(\\$\\w{1,50},\\s?\\$\\w{1,50},\\s?\\$\\w{1,50}\\(\\)\\s?\\+\\s?\\w{1,50}\\(\\$\\w{1,50}\\),\\s?(?:\\$\\w{1,50}\\s?,?\\.?\\s*)+\\);\\s*}\\s*global\\s?(?:\\$\\w{1,50},?\\s*)+;\\s*(?:\\$\\w{1,50}\\s?=\\s?\'[^\']+\';\\s*)+function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s{\\s*global\\s?(?:\\$\\w{1,50},?\\s*)+;.*?return\\s\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\s}\\s*(?:\\$\\w{1,50}\\s?=\\s?\'[^\']*\';\\s*)+(?:function\\s\\w{1,50}\\(.*?(?:\\$\\w{1,50}\\s?=\\s?\'[^\']*\';\\s*)+)+(?:\\$\\w{1,50}\\s\\.?=\\s\\$\\w{1,50};\\s*)+.*?extract\\(\\w{1,50}\\(get_defined_vars\\(\\)\\)\\);)\\s*(\\$\\w{1,50}\\(\\d\\);\\s*\\$\\w{1,50}\\(\\$\\w{1,50},\\s?0\\);\\s*\\$\\w{1,50}\\s=\\s\\$\\w{1,50}\\(\\$_REQUEST,\\s?\\$_COOKIE,\\s?\\$_SERVER\\);.*?\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\s*echo\\s?\\$\\w{1,50};)~msi',
    'id' => 'globalVarsManyReplace',
  ),
  308 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?~msi',
      1 => '~\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
      2 => '~(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)~msi',
      3 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)~msi',
      4 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
    ),
    'full' => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
    'id' => 'concatVarsPregReplace',
  ),
  309 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"\\.?)+;)+\\s?echo\\sjson_encode\\(array\\([\'"][^"\']+[\'"]=>@\\$\\w{1,50}\\(__FILE__,(\\$\\w{1,50}\\([\'"][^"\']+[\'"]\\)\\))>0,[\'"][^"\']+[\'"]=>__FILE__\\)\\);exit;~msi',
    'id' => 'filePutContentsB64Decoded',
  ),
  310 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$_POST\\[[\'"][^\'"]+[\'"]\\]\\.[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?fopen\\([\'"][^\'"]+[\'"]\\.\\$\\w{1,50},\\s?[\'"]w[\'"]\\);\\s?fwrite\\(\\$\\w{1,50},\\1\\);~msi',
    'id' => 'fwriteB64DecodedStr',
  ),
  311 => 
  array (
    'full' => '~file_put_contents\\(\\$_SERVER\\[\'[^\']+\'\\]\\.\'[^\']+\',base64_decode\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'filePutContentsB64Content',
  ),
  312 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s?=\\s?((?:chr\\(\\d{1,5}\\)\\.?)+);)(\\$\\w{1,50})\\s?=\\s?(?:\\2\\[\\d{1,5}\\]\\.?)+;(\\$\\w{1,50})\\s?=\\s?(?:\\2\\[\\d{1,5}\\]\\.?)+;\\4\\(\\5\\(null,\\s?((?:\\2\\[\\d{1,5}\\]\\.?)+)\\)\\);~msi',
    'id' => 'chrDictCreateFunc',
  ),
  313 => 
  array (
    'full' => '~(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50}\\,?)+\\){return\\sstr_replace\\((?:\\$\\w{1,50}\\,?)+\\);}\\s?){3}(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\([\'"]([^\'"]+)[\'"],\'\',\\1\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\([\'"][^\'"]+[\'"],\'\',\\$\\w{1,50}\\);\\s?){2}\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\.\'\\(\'\\.\\1\\.\'\\(\'\\.\\$\\w{1,50}\\.\'\\)\\);\'\\);\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\);~msi',
    'id' => 'strReplaceFuncsEvalVar',
  ),
  314 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?"\\\\x[^"]+";\\${\\$\\w{1,50}}\\s?=\\s?base64_decode\\("(.*?\\\\x[^"]+")\\);\\s?eval\\(".*?\\\\x[^\\$]+\\$\\w{1,50}\\\\"\\);"\\);~msi',
    'id' => 'B64SlashedStr',
  ),
  315 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?array\\((?:[\'"][base64_dco]+[\'"],?\\s?)+\\);\\s?array_splice\\(\\1,\\s?4,\\s?0,\\s?8\\*8\\);\\s?(\\$\\w{1,50})\\s?=\\s?implode\\(\'\',\\s?array_reverse\\(\\1\\)\\);\\s?(\\$\\w{1,50})\\s?=\\s?\\2\\([\'"]([^\'"]+)[\'"]\\);\\s?eval\\(\\3\\);~msi',
    'id' => 'B64ArrayStrEval',
  ),
  316 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?@\\$\\w{1,50}\\((?:\\1\\[\\d+\\]\\.?)+,(?:\\1\\[\\d+\\]\\.?)+"\\("\\.(?:\\1\\[\\d+\\]\\.?)+\'\\([\'"]([^\'"]+)[\'"]\\)\\);\',"\\."\\);~msi',
    'id' => 'DictVarsPregReplaceB64',
  ),
  317 => 
  array (
    'full' => '~(if\\s*\\(\\!function_exists\\s*\\("([^"]+)"\\)\\)\\s*\\{\\s*function\\s*\\2\\s*\\((\\$\\w+)\\)\\s*\\{\\s*(\\$\\w+)\\s*=\\s*"";\\s*(\\$\\w+)\\s*=\\s*0;\\s*\\$\\w+\\s*=\\s*strlen\\s*\\(\\3\\);\\s*while\\s*\\(\\$\\w+\\s*<\\s*\\$\\w+\\)\\s*\\{\\s*if\\s*\\(\\3\\[\\5\\]\\s*==\\s*\'\\s\'\\)\\s*\\{\\s*\\4\\s*\\.=\\s*"\\s";\\s*\\}\\s*else\\sif\\s*\\(\\3\\[\\5\\]\\s*==\\s*\'!\'\\)\\s*\\{\\s*\\4\\s*\\.=\\s*chr\\s*\\(\\s*\\(ord\\s*\\(\\3\\[\\5\\+\\d\\]\\)-ord\\s*\\(\'A\'\\)\\)\\*16\\+\\s*\\(ord\\s*\\(\\3\\[\\5\\+\\d\\]\\)-ord\\s*\\(\'a\'\\)\\)\\);\\s*\\5\\s*\\+=\\s*2;\\s*\\}\\s*else\\s*\\{\\s*\\4\\s*\\.=\\s*chr\\s*\\(ord\\s*\\(\\3\\[\\5\\]\\)\\+1\\);\\s*\\}\\s*\\5\\+\\+;\\s*\\}\\s*return\\s*\\4;\\s*\\}\\s*\\}\\s*)eval\\s*\\(\\2\\s*\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'decodeAChar',
  ),
  318 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";(\\$\\w+)="[str_eplac"\\.]+";((?:\\$\\w+\\s*=\\s*\\3\\("([^"]+)","","[^"]+"\\);)+)(\\$\\w+)\\s*=\\s*\\$\\w+\\(\'\',\\s*((?:\\$\\w+\\()+\\1\\)\\))\\);\\6\\(\\);~msi',
    'id' => 'strReplaceCreateFunc',
  ),
  319 => 
  array (
    'fast' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\2\\)+;\\s*\\$\\w+\\s*=\\s*\'\';(?:\\s*for\\s*\\()?\\s*(\\$\\w+)\\s*=\\s*0;\\s*(?:while\\s*\\(\\(\\()?(?:if\\s*\\()?\\$\\w+\\s*<\\s*\\$\\w+(?:\\)+)?(?:;\\s*\\3\\s*\\+=\\s*[0x]*2\\))?\\s*\\{\\s*(\\$\\w+)\\s*\\.=\\s*pack\\([\'"]C[\'"],\\s*hexdec\\(substr\\(\\2,\\s*\\3,\\s*[0x]*2\\)\\)\\);(?:\\s*\\3\\s*\\+=\\s*2;)?\\s*\\}\\s*(?:else\\s*\\{\\s*\\}\\s*)?return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\([\'"]([0-9a-f]+)[\'"]\\)\\s*\\.\\s*(?:\'([^\']+\'\\)+;)|\\"([^\\"]+\\"\\)+;))(?:\\s*\'\\);)?~msi',
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\2\\)+;\\s*\\$\\w+\\s*=\\s*\'\';(?:\\s*for\\s*\\()?\\s*(\\$\\w+)\\s*=\\s*0;\\s*(?:while\\s*\\(\\(\\()?(?:if\\s*\\()?\\$\\w+\\s*<\\s*\\$\\w+(?:\\)+)?(?:;\\s*\\3\\s*\\+=\\s*[0x]*2\\))?\\s*\\{\\s*(\\$\\w+)\\s*\\.=\\s*pack\\([\'"]C[\'"],\\s*hexdec\\(substr\\(\\2,\\s*\\3,\\s*[0x]*2\\)\\)\\);(?:\\s*\\3\\s*\\+=\\s*2;)?\\s*\\}\\s*(?:else\\s*\\{\\s*\\}\\s*)?return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\([\'"]([0-9a-f]+)[\'"]\\)\\s*\\.\\s*(?|\'([^\']+\'\\)+;)|\\"([^\\"]+\\"\\)+;))(?:\\s*\'\\);)?~msi',
    'id' => 'evalbin2hex',
  ),
  320 => 
  array (
    'full' => '~function\\s\\w{1,50}\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\)\\s?{\\s?return;\\s?}\\s?function\\s\\w{1,50}\\((?:\\$\\w{1,50}\\s?=\\s?"",?\\s?){2}\\)\\s?{.*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+function\\s\\w{1,50}\\(\\).*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+function\\s\\w{1,50}\\(\\).*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+(?:header\\(\\w{1,50}\\([\'"][^\'"]+[\'"]\\)\\);\\s?)+define.*?PDO\\(.*?\\$\\w{1,50}\\s?=\\s?0;\\s?function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{\\s?global.*?function\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?"";\\s?for\\s?\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\s?-\\s?1;\\s?\\$\\w{1,50}\\s?\\+=2\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?chr\\(hexdec\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\s?\\.\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\s?\\+\\s?1\\]\\)\\s?\\^0x66\\);\\s?}\\s?return\\s\\$\\w{1,50};\\}(?:.*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+)+~msi',
    'id' => 'manyFuncsWithCode',
  ),
  321 => 
  array (
    'full' => '~(\\$[0o]+)="([\\\\x0-9a-f]+)";(\\$[0o]+)=@?\\1\\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\\);@?\\3\\("([^"]+)"\\);~msi',
    'id' => 'gzB64Func',
  ),
  322 => 
  array (
    'full' => '~(?:(?:session_start|error_reporting|set_time_limit)\\(\\d*\\);\\s?)+(?:@?ini_set\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);\\s?)+((\\$\\w{1,50})\\s?=\\s?(?:[\'"][base64_dco]+[\'"]\\.?)+;\\s(\\$\\w{1,50})\\s?=\\s?\\2\\(((?:[\'"][^\'"]+[\'"]\\.?)+)\\);)\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:(?:\\s?\\3\\((?:[\'"][^\'"]+[\'"]\\.?)+\\)(?:\\.?)?|\\3|\\2|(?:chr\\(\\d+\\)\\.?))+,\\s?)+\\${(?:chr\\(\\d+\\)\\.?)+}\\[(?:chr\\(\\d+\\)\\.?)+\\])\\);\\s?(?:.*?\\5\\[\\d+\\])+~msi',
    'id' => 'dictArrayFuncVars',
  ),
  323 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\(\\){\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\);(\\$\\w{1,50})\\s?=\\s?@\\$\\w{1,50}\\(\'\',\\s?pack\\(\'H\\*\',\\s?\\$\\w{1,50}\\)\\);\\s?\\4\\(\\);\\s?}\\1\\(\\);~msi',
    'id' => 'createFuncPackStrRot13',
  ),
  324 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s?(?:\\s?function\\s(\\w{1,50})\\((?:\\$\\w{1,50}\\,?\\s?){3}\\)\\s?{\\s?return\\s?[\'"]{2}\\s?\\.\\s?(?:\\$\\w{1,50}\\s?\\.\\s?[\'"]{2}\\s?\\.?\\s?)+;\\s*}|\\s?(?:\\w{1,50}:)?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";){2}\\s?(?:\\s?(?:\\w{1,50}:)?\\$\\w{1,50}\\s?=\\s?\\1\\((?:\\2\\[0\\d{1,5}\\][,.\\s\'"]*)+\\);\\s?)+\\s?(?:print_r\\(\\2\\[0\\d{1,5}\\]\\);\\s?echo\\s?"[^"]+";)?\\s*(\\$\\w{1,50})=\\1\\((?:\\1\\((?:(?:\\$\\w{1,50}|""),?)+\\),?\\.?)+\\)\\."\'([^\'"]+)\'"\\.\\1\\((?:\\2\\[0\\d{1,5}\\],?)+\\."",\\2\\[0\\d{1,5}\\]\\);\\s?print_r\\(\\$\\w{1,50}\\);\\s?(?:\\$\\w{1,50}=\\1\\((?:\\2\\[0\\d{1,5}\\][.,]?)+\\);\\s?)+\\$\\w{1,50}=\\1\\(\\1\\((?:\\$\\w{1,50},?)+\\),\\$\\w{1,50},\\1\\((?:\\$\\w{1,50},?)+\\)\\);\\s?\\$\\w{1,50}\\(create_function,array\\("","}"\\.\\4\\."//"\\)\\);~msi',
    'id' => 'dictVarsCreateFunc',
  ),
  325 => 
  array (
    'full' => '~(?:function\\s(\\w{1,50})\\((?:\\$\\w{1,50}\\,?\\s?){3}\\)\\s?{\\s?return\\s?[\'"]{2}\\s?\\.\\s?(?:\\$\\w{1,50}\\s?\\.\\s?[\'"]{2}\\s?\\.?\\s?)+;\\s*}\\s?|(?:\\w{1,50}:)?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s?){2}(?:\\s?\\$\\w{1,50}\\s?=\\s?\\1\\((?:(?:(?:\\2\\[\\d+\\])?[,.\\s\'"]*)+|(?:\\s?\\1\\((?:\\$\\w{1,50}[,.\\s\'"]*)+\\),?)+)\\);)+\\s?(\\$\\w{1,50})\\s?=\\s?\\1\\((?:\\s?\\1\\((?:\\$\\w{1,50}[,.\\s\'"]*)+\\),?)+\\)\\s?\\.\\s?"\'([^"]+)\'"\\s?\\.\\s?\\1\\((?:(?:\\2\\[\\d+\\])?[,.\\s\'"]*)+\\);\\s?\\$\\w{1,50}\\(\\$\\w{1,50},\\s?array\\(\'\',\\s?"}"\\s?\\.\\s?\\4\\s?\\.\\s?"//"\\)\\);~msi',
    'id' => 'dictVarsCreateFunc',
  ),
  326 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50})\\)\\s?{.*?\\$\\w+\\s?=\\s?"[^"]+";\\$\\w{1,50}\\s?=\\s?str_split\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?array_flip\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?0;\\$\\w{1,50}\\s?=\\s?"";\\$\\w{1,50}\\s?=\\s?preg_replace\\("[^"]+",\\s?"",\\s?\\$\\w{1,50}\\);do\\s?{(?:\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\[\\$\\w{1,50}\\+\\+\\]\\];){4}\\$\\w{1,50}\\s?=\\s?\\(\\$\\w{1,50}\\s?<<\\s?2\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?4\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?15\\)\\s?<<\\s?4\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?2\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?3\\)\\s?<<\\s?6\\)\\s?\\|\\s?\\$\\w{1,50};\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}}\\s?while\\s?\\(\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\);return\\s?\\$\\w{1,50};}\\s?.*?function\\s(\\w{1,50})\\(\\){\\$\\w{1,50}\\s?=\\s?@file_get_contents\\(\\w{1,50}\\(\\)\\);.*?(\\$\\w{1,50})\\s?=\\s?"([^"]{1,20000})";.*?\\4\\s?=\\s?@unserialize\\(\\1\\(\\4\\)\\);.*?(function\\s(\\w{1,50})\\(\\$\\w{1,50}=NULL\\){foreach\\s?\\(\\3\\(\\)\\s?as.*?eval\\(\\$\\w{1,50}\\);}}}).*?(\\7\\(\\);)~msi',
    'id' => 'decodedFileGetContentsWithFunc',
  ),
  327 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?\\.?=\\s?"\\\\[^"]+";)+)((?:\\$\\w{1,50}=\\$\\w{1,50}\\(\\$\\w{1,50}\\);){3})(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];if\\(function_exists\\(\\$\\w{1,50}\\)\\){\\$\\w{1,50}=@\\$\\w{1,50}\\(\'\\3,\\$\\w{1,50}\',(\\$\\w{1,50}\\(\\$\\w{1,50}\\()\\5\\)\\)\\);if\\(\\$\\w{1,50}\\)\\3=@\\$\\w{1,50}\\(\\3,\\$\\w{1,50}\\);\\s?}else{.*?};if\\(function_exists\\(\\$\\w{1,50}\\)\\)\\s?{\\$\\w{1,50}=@\\$\\w{1,50}\\("",\\7\\3\\)\\)\\);if\\(\\$\\w{1,50}\\)@\\$\\w{1,50}\\(\\);}else{.*?};~msi',
    'id' => 'createFuncVarsCode',
  ),
  328 => 
  array (
    'full' => '~(\\$\\w+)=\'[preg_lac.\']+\';\\1\\(\'[#\\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\\);~msi',
    'id' => 'pregConcat',
  ),
  329 => 
  array (
    'fast' => '~()(?:\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*"[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+";\\s*)+\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*\\(\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*\\(\\s*\'([^\']+)\'\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}="[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+";\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*@?\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\'[^\']+\',\\s*"[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+"\\)\\s*;@?\\${"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\);~msi',
    'full' => '~(?(DEFINE)(?\'c\'\\s*/\\*[^\\*]+\\*/\\s*))(?:\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*"[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+";\\s*)+\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*\\(\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*\\(\\s*\'([^\']+)\'\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}="[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+";\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*@?\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\'[^\']+\',\\s*"[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+"\\)\\s*;@?\\${"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\);~msi',
    'id' => 'xoredStrings',
  ),
  330 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\'([^\']+)\';\\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi',
    'id' => 'commentWithAlgo',
  ),
  331 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*set_time_limit\\(0\\);\\s*ini_set\\(\'memory_limit\',\\s*\'-1\'\\);\\s*if\\(isset\\(\\$_POST\\[\'pass\']\\)\\)\\s*{\\s*function\\s*[^}]+}\\s*file_put_contents\\((\\$\\w+)\\."[^"]+",\\s*gzdeflate\\(file_get_contents\\(\\1\\),\\s*\\d\\)\\);\\s*unlink\\(\\1\\);\\s*copy\\(\'\\.htaccess\',\'[^\']+\'\\);\\s*(\\$\\w+)\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(?:\\$\\w+\\s*=\\s*str_replace\\(\'[^\']+\',\\s*[^;]+;\\s*)+\\$\\w+\\s*=\\s*\\$\\w+;\\s*(\\$\\w+)\\s*=\\s*"<\\?php[^;]+;\\s*\\?>";\\s*(\\$\\w+)\\s*=\\s*fopen\\(\'[^\']+\',\'w\'\\);\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\(\'[^\']+\',\\s*\'w\'\\);\\s*fwrite\\(\\6,\\s*\\5\\);\\s*fclose\\(\\6\\);\\s*echo\\s*"[^"]+";\\s*}\\s*function\\s*(\\w+)[^}]+}[^}]+[\\s}]+[^!]+!+\';[^!]+!+\';\\s*}\\s*exit\\(\\);\\s*}\\s*function\\s*\\w+\\(\\){~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  332 => 
  array (
    'full' => '~function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s*{(\\$\\w{1,50}=true;)?((?:\\$\\w{1,50}\\s?=\\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\\w{1,50}\\([\'"][^\'"]+[\'"]\\);~msi',
    'id' => 'base64decodedFuncContents',
  ),
  333 => 
  array (
    'fast' => '~((?:if\\(!function_exists\\(base64_[end]+code\\)\\)\\{function\\s*(\\w+)[^{]+({([^}]+})+)\\}\\s*else\\s*\\{function\\s*\\2\\((\\$\\w+)\\)\\s*\\{\\s*global\\s*base64_[end]+code;return\\s*base64_[end]+code\\(\\5\\);\\}\\})+).*?((?:function\\s*(\\w+)\\(\\$\\w+\\)\\{return\\s*\\w+\\(\\$\\w+\\);\\s*\\}\\s*)+).*?(eval\\(gzinflate\\(\\7\\(\'([^\']+)\'\\)\\)\\);)~msi',
    'full' => '~((?:if\\(!function_exists\\(base64_[end]+code\\)\\)\\{function\\s*(\\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\\}\\s*else\\s*\\{function\\s*\\2\\((\\$\\w+)\\)\\s*\\{\\s*global\\s*base64_[end]+code;return\\s*base64_[end]+code\\(\\5\\);\\}\\})+).*?((?:function\\s*(\\w+)\\(\\$\\w+\\)\\{return\\s*\\w+\\(\\$\\w+\\);\\s*\\}\\s*)+).*?(eval\\(gzinflate\\(\\7\\(\'([^\']+)\'\\)\\)\\);)~msi',
    'id' => 'definedB64',
  ),
  334 => 
  array (
    'fast' => '~()(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*(?:if\\s*\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\s*\\{\\s*echo\\s*(?:"[^"]+"|\\$_GET\\["[^"]+"\\]);\\s*die;\\s*\\}\\s*)*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\s*=\\s*\'\'\\)\\s*\\{\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+");\\s*)+[^\\^]+\\^\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\[(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\];\\s*\\}\\s*\\}\\s*return\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+");\\s*\\}\\s*(?:/\\*[^\\*]+\\*/\\s*)?(?:\\$\\w+\\s*=\\s*"[^"]+";)?\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"[^"]+";\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"[^"]+";)?\\s*(?:\\$\\w+ = "D";)?\\s*((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+"))\\s*=\\s*"([^"]+)";(?:\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)+(?:foreach\\s*\\((?:array\\(|\\[)([\\d\\s,]+)[\\)\\]]\\s*as\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\)\\s*\\{\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*\\.=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\[(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\];\\s*\\}\\s*(?:\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)?)+(?:/\\*[^\\*]+\\*/\\s*)?\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\([creat_fuion"\'\\s\\.]+\\);\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\("[^"]*",\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*\\(\\s*\\2\\((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\),\\s*"([^"]+)"\\)\\)\\);\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\(\\);~msi',
    'full' => '~(?(DEFINE)(?\'v\'(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")))(?:(?&v)\\s*=\\s*"\\w+";\\s*)*(?:if\\s*\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\s*\\{\\s*echo\\s*(?:"[^"]+"|\\$_GET\\["[^"]+"\\]);\\s*die;\\s*\\}\\s*)*(?:(?&v)\\s*=\\s*"\\w+";\\s*)*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\s*=\\s*\'\'\\)\\s*\\{\\s*(?:(?&v)\\s*=\\s*(?&v);\\s*)+[^\\^]+\\^\\s*(?&v)\\[(?&v)\\];\\s*\\}\\s*\\}\\s*return\\s*(?&v);\\s*\\}\\s*(?:/\\*[^\\*]+\\*/\\s*)?(?:\\$\\w+\\s*=\\s*"[^"]+";)?\\s*(?&v)\\s*=\\s*"[^"]+";\\s*(?:(?&v)\\s*=\\s*"[^"]+";)?\\s*(?:\\$\\w+ = "D";)?\\s*((?&v))\\s*=\\s*"([^"]+)";(?:\\s*(?&v)\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)+(?:foreach\\s*\\((?:array\\(|\\[)([\\d\\s,]+)[\\)\\]]\\s*as\\s*(?&v)\\)\\s*\\{\\s*(?:(?&v)\\s*=\\s*"\\w+";\\s*)*\\s*(?&v)\\s*\\.=\\s*(?&v)\\[(?&v)\\];\\s*\\}\\s*(?:\\s*(?&v)\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)?)+(?:/\\*[^\\*]+\\*/\\s*)?\\s*(?&v)\\s*=\\s*(?&v)\\([creat_fuion"\'\\s\\.]+\\);\\s*(?&v)\\s*=\\s*(?&v)\\("[^"]*",\\s*(?&v)\\s*\\(\\s*\\2\\((?&v)\\((?&v)\\),\\s*"([^"]+)"\\)\\)\\);\\s*(?&v)\\(\\);~msi',
    'id' => 'B64Xored',
  ),
  335 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?<<<FILE\\s*([\\w\\s+/=]+)FILE;\\s*(\\$\\w{1,50}\\s?=\\s?(base64_decode\\(\\1\\));)~msi',
    'id' => 'B64AssignedVarContent',
  ),
  336 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?\'([^\']+)\';((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\[[()\\d/+*-]+\\]\\.?)+;)+)\\$\\w{1,50}\\s?=\\s?"[^"]+";(?:\\$\\w{1,50}\\s?\\.?=\\s?\\$\\w{1,50};)+@?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\(\'\'\\),\\s?\\((\\$\\w{1,50})\\)\\);@?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'dictVarsWithMath',
  ),
  337 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s*class\\s?(\\w+){\\s*var\\s?\\$\\w{1,50};\\s*function\\s__construct\\(\\)\\s?{\\s?\\$this->\\w{1,50}\\(\\d+\\);\\s*}\\s*function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?\\$_SERVER\\[\'HTTP_USER_AGENT\'\\];\\s?if\\s?\\(\\s?preg_match\\(\'/\\s?Apple\\(\\.\\*\\)\\s?\\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\\s\\w{1,50}\\([^)]+\\){.*?(?:unpack|pack|\\$this->|fmod|chr))+.*?return\\s\\$\\w{1,50};[\\s}]+(\\$\\w{1,50})\\s?=\\s?hex2bin\\(\\1\\);\\s?\\$\\w{1,50}\\s?=\\s?new\\s?\\3\\(\\d+\\);\\s?(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}->\\4\\(\\5\\);\\s?eval\\(\\6\\);~msi',
    'id' => 'classDecryptedWithKey',
  ),
  338 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*str_rot13\\(base64_decode\\(\'([^\']+)\'\\)\\);\\s*(\\$\\w+)\\s*=\\s*str_rot13\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\)\\);\\s*\\$\\w+\\s*=\\s*[\'"][^\'"]+[\'"];)(?:\\s*\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);)?\\s*preg_match\\(\\$\\w+\\(\\$\\w+\\([\'"][^\'"]+[\'"]\\)\\),\\s*file_get_contents\\(__FILE__\\),\\s*\\$\\w+\\);\\s*(eval\\(\\$\\w+\\(\\$\\w+\\([\'"]([^\'"]+)[\'"]\\)\\)\\);)\\s*eval\\(\\$\\w+\\(\\$\\w+\\([\'"]([^\'"]+)[\'"]\\)\\)\\);\\s*unset\\((?:\\$\\w{1,50},?\\s*)+\\);\\s*__halt_compiler\\(\\);\\s*\\?>\\s*(?:\\[PHPkoru_Info\\]\\s*[^\\]]+\\]\\s*)?\\[PHPkoru_Code\\]\\s*([^\\[]+)\\[/PHPkoru_Code\\]~msi',
    'id' => 'PHPkoru',
  ),
  339 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*\\$this->(\\w+)\\("([^"]+)"\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'\',\\s*\\$this->\\4\\(\\1\\)\\);\\s*\\6\\(\\);~msi',
    'id' => 'JoomlaInject',
  ),
  340 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*[\'"]([^"\']+)[\'"];\\s*)(?>\\$\\w{1,50}\\s*=\\s*fopen\\([^)]+\\);\\s*\\$\\w{1,50}\\s*=\\s*fwrite\\s?\\(\\$\\w{1,50}\\s*|fwrite\\(fopen\\([^)]+\\)),\\s*(base64_decode\\(\\2\\))\\);~msi',
    'id' => 'fwriteB64Content',
  ),
  341 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*(\\$\\w{1,50})\\s*=\\s*base64_decode\\(\\1\\);\\s*(\\$\\w{1,50})\\s*=\\s*base64_decode\\("([^"]+)"\\);\\s*(\\$\\w{1,50}\\s*=(\\s*\\3\\s*\\.\\s*\\4);)~msi',
    'id' => 'B64concatedVars',
  ),
  342 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"(\\\\[\\w\\\\]+)";\\s*(\\$\\w{1,50})\\s*=\\s*@\\1\\([\'"](\\$\\w{1,50})[\'"]\\s*,\\s*"(\\\\[\\w\\\\]+)"\\);\\s*@\\3\\(([\'"][^\'"]+[\'"])\\);~msi',
    'id' => 'slashedCreateFunc',
  ),
  343 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";((?:\\$\\w{1,50}\\s*=\\s*(?:\\$\\w{1,50}\\[\\d+\\]\\.?)+;)+@?(?:\\$\\w{1,50}(?:\\[\\d+\\]\\.?)?[,()]*)+;)~msi',
    'id' => 'varDictCreateFunc',
  ),
  344 => 
  array (
    'full' => '~@call_user_func\\(create_function\\([\'"]\\s*[\'"],gzinflate\\(base64_decode\\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\\)\\)\\),[^)]+\\);~msi',
    'id' => 'callFuncGzB64',
  ),
  345 => 
  array (
    'full' => '~@?(\\$\\w{1,50})\\s*=\\s*"([^"]+)";@?(\\$\\w{1,50})\\s*=\\s*array\\((\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+)\\);@?(\\$\\w{1,50})\\s*=\\s*"([^"]+)";@?(\\$\\w{1,50})\\s*=\\s*[\'"]{2};for\\s*\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}\\s?<\\s?6;\\s?\\$\\w{1,50}\\+\\+\\)\\s*{@?\\$\\w{1,50}\\s?=\\s?@?\\3\\[@?\\$\\w{1,50}\\]\\s*;@?\\12\\.=\\s?@?\\1\\[@?\\$\\w{1,50}\\]\\s?;\\s*}@?\\12\\(((?:"\\\\x[^"]+"\\.?)+)\\);~msi',
    'id' => 'assertDictVarEval',
  ),
  346 => 
  array (
    'full' => '~function\\s+(\\w{1,50})\\((\\$\\w{1,50})\\)\\s*{\\s*\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?(?:(?:\\$\\w{1,50}\\s?=\\s?)+"";)+.*?<<\\s?2.*?<<\\s?6.*?!=\\s?64.*return\\s?\\$\\w{1,50};}\\s?function\\s+(\\w{1,50})\\(\\$\\w{1,50}\\){\\s*return\\s\\1\\(\\$\\w{1,50}\\);}\\s*eval\\(\\3\\(gzinflate\\(\\3\\("([^"]+)"\\),0\\)+~msi',
    'id' => 'B64FuncEvalGz',
  ),
  347 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*(\\$\\w{1,50})\\s?=\\s?(?:[\\d\\-+*])+;\\s*\\$\\w{1,50}\\s?=\\s?[\'"]base[\'"]\\s?\\.\\s?\\3\\.\\s?[\'"]_decode[\'"];\\s*\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\);(\\$\\w{1,50})\\s?=\\s?@?gzinflate\\(\\$\\w{1,50}\\);@?eval\\(("\\?>"\\.?)?\\4\\);~msi',
    'id' => 'B64Gz',
  ),
  348 => 
  array (
    'fast' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\2=gzinflate\\(base64_decode\\(\\2\\)\\);|\\$\\w+\\s*=\\s*base64_decode\\(\\2\\);\\s*\\2\\s*=\\s*gzinflate\\(\\$\\w+\\);|(\\$\\w+)\\s*=\\s*\'\';)\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\$\\w+\\s*<\\s*strlen\\s*\\(\\2\\);\\$\\w+(?:\\+\\+|\\s*\\+=\\s*1)\\)\\s*\\{?\\s*(?:\\2|\\3)(?:\\[\\$\\w+\\]|\\s*\\.)\\s*=\\s*chr\\(ord\\((?:\\2|\\3)\\[\\$\\w+\\]\\)\\s*(-?\\s*\\d+)\\);\\s*\\}?\\s*return\\s*(?:\\2|\\3);\\s*\\}\\s*(?:define\\("[^"]+",\\s*"\\w{32}"\\);)?(?:eval\\(|(\\$\\w+)\\s*=\\s*)\\1\\s*((?:\\(\\w+)*)\\((?:"([^"]+)"|\'([^\']+)\')\\)+;(?:\\s*call_user_func\\(create_function\\(\'\',\\s*\\5\\)+;)?~msi',
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\2=gzinflate\\(base64_decode\\(\\2\\)\\);|\\$\\w+\\s*=\\s*base64_decode\\(\\2\\);\\s*\\2\\s*=\\s*gzinflate\\(\\$\\w+\\);|(\\$\\w+)\\s*=\\s*\'\';)\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\$\\w+\\s*<\\s*strlen\\s*\\(\\2\\);\\$\\w+(?:\\+\\+|\\s*\\+=\\s*1)\\)\\s*\\{?\\s*(?:\\2|\\3)(?:\\[\\$\\w+\\]|\\s*\\.)\\s*=\\s*chr\\(ord\\((?:\\2|\\3)\\[\\$\\w+\\]\\)\\s*(-?\\s*\\d+)\\);\\s*\\}?\\s*return\\s*(?:\\2|\\3);\\s*\\}\\s*(?:define\\("[^"]+",\\s*"\\w{32}"\\);)?(?:eval\\(|(\\$\\w+)\\s*=\\s*)\\1\\s*((?:\\(\\w+)*)\\((?|"([^"]+)"|\'([^\']+)\')\\)+;(?:\\s*call_user_func\\(create_function\\(\'\',\\s*\\5\\)+;)?~msi',
    'id' => 'deltaOrd',
  ),
  349 => 
  array (
    'fast' => '~()(?:(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";)+function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?=gzinflate\\(base64_decode\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\)\\);\\$\\w+="[^"]+";for\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?=0;(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?<strlen\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\);(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\+\\+\\)\\s*\\{\\$\\w+="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\[\\$\\{\\$\\w+\\}\\]=chr()\\(ord\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\[(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\]\\)([\\-\\+]\\d+)\\);\\}return\\$\\{\\$\\w+\\};\\}()()eval\\(\\2\\("([^"]+)"\\)\\);~msi',
    'full' => '~(?(DEFINE)(?\'g\'(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?))(?:(?&g)="[^"]+";)+function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{(?&g)="[^"]+";(?&g)=gzinflate\\(base64_decode\\((?&g)\\)\\);\\$\\w+="[^"]+";for\\((?&g)=0;(?&g)<strlen\\((?&g)\\);(?&g)\\+\\+\\)\\s*\\{\\$\\w+="[^"]+";(?&g)="[^"]+";(?&g)\\[\\$\\{\\$\\w+\\}\\]=chr()\\(ord\\((?&g)\\[(?&g)\\]\\)([\\-\\+]\\d+)\\);\\}return\\$\\{\\$\\w+\\};\\}()()eval\\(\\2\\("([^"]+)"\\)\\);~msi',
    'id' => 'deltaOrd',
  ),
  350 => 
  array (
    'fast' => '~<\\?php\\s(?:eval\\(")?ob_start\\(\\);(?:"\\))?\\s\\?>(.*?)<\\?php\\s(eval\\(")?if\\(!function_exists\\("([^"]+)"\\)\\)\\{function\\s\\3\\(\\)\\{(\\$[^=]+)=str_replace\\(array\\(([^)]+)\\),array\\(([^)]+)\\),ob_get_clean\\(\\)\\);for\\((\\$[^=]+)=1,(\\$[^=]+)=ord\\(\\4\\[0\\]\\);\\7<strlen\\(\\4\\);\\7\\+\\+\\)\\4\\[\\7\\]=chr\\(ord\\(\\4\\[\\7\\]\\)-\\8-\\7\\);\\4\\[0\\]=\'\\s\';return\\s\\4;\\}\\}(?:"\\))?\\s\\?>(.*?)<\\?php\\s(\\$[^=]+)=\\3\\(\\);\\s*eval\\(\\10\\s*\\)\\s*(\\?>\\s*)+~msi',
    'full' => '~(?:<\\?php\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*\\?>\\s*)?<\\?php\\s(?:eval\\(")?ob_start\\(\\);(?:"\\))?\\s\\?>(.*?)<\\?php\\s(eval\\(")?if\\(!function_exists\\("([^"]+)"\\)\\)\\{function\\s\\3\\(\\)\\{(\\$[^=]+)=str_replace\\(array\\(([^)]+)\\),array\\(([^)]+)\\),ob_get_clean\\(\\)\\);for\\((\\$[^=]+)=1,(\\$[^=]+)=ord\\(\\4\\[0\\]\\);\\7<strlen\\(\\4\\);\\7\\+\\+\\)\\4\\[\\7\\]=chr\\(ord\\(\\4\\[\\7\\]\\)-\\8-\\7\\);\\4\\[0\\]=\'\\s\';return\\s\\4;\\}\\}(?:"\\))?\\s\\?>(.*?)<\\?php\\s(\\$[^=]+)=\\3\\(\\);\\s*eval\\(\\10\\s*\\)\\s*(\\?>\\s*)+~msi',
    'id' => 'outputBuffer',
  ),
  351 => 
  array (
    'fast' => '~\\s*(\\$\\w+)\\s*=\\s*[base64_decode"\\./\\-\\*]+;.*?\\1(?:.{0,300}?\\1\\((?:\\$\\w+|"[^"]+")\\))+[^\\}]+\\}~msi',
    'full' => '~(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\."/";)?\\$\\w+\\s*=\\s*"[^"]+";(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\."/";)?\\s*(\\$\\w+)\\s*=\\s*[base64_decode"\\./\\-\\*]+;.*?\\1(?:.{0,300}?\\1\\((?:\\$\\w+|"[^"]+")\\))+[^\\}]+\\}~msi',
    'id' => 'doorwayInstaller',
  ),
  352 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*str_replace\\((\\w),"","[^"]+"\\);\\s*\\3\\(\'[eval\'.]+\\(\'[base64_dcod\'.]+\\(\'[gzinflate.\']+\\(\'[base64_dcod\'.]+\\(\'[^\\)]+\\)[^;]+;~msi',
    'id' => 'strReplaceAssert',
  ),
  353 => 
  array (
    'full' => '~(?:(\\$\\{\'GLOBALS\'\\}\\[\'[^\']+\'\\])=\'\\w+\';\\s*)+.*\\1\\};\\}~msi',
    'id' => 'anaLTEAMShell',
  ),
  354 => 
  array (
    'fast' => '~(\\$\\w+)=\'[function_exis\'\\.]+;\\$\\w+=\'[charodet\'\\.]+;(\\$\\w+)=\'[eval\'\\.]+;(\\$\\w+)=\'[gzinflate\'\\.]+;(if\\(!\\1\\(\'[base64_dcon\'\\.]+\\)\\)({([^}]+})+)}else{function\\s*[^}]+\\}\\})+(\\$\\w+)=\'[create_funion\'\\.]+;(\\$\\w+)\\s*=\\s*\\7\\(\'([^\']+)\',\\2\\.\'\\(\'\\.\\3\\.\'\\(\'\\.\'[^(]+\\(\\9\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\8\\("([^"]+)"\\);~msi',
    'full' => '~(\\$\\w+)=\'[function_exis\'\\.]+;\\$\\w+=\'[charodet\'\\.]+;(\\$\\w+)=\'[eval\'\\.]+;(\\$\\w+)=\'[gzinflate\'\\.]+;(if\\(!\\1\\(\'[base64_dcon\'\\.]+\\)\\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\\s*[^}]+\\}\\})+(\\$\\w+)=\'[create_funion\'\\.]+;(\\$\\w+)\\s*=\\s*\\7\\(\'([^\']+)\',\\2\\.\'\\(\'\\.\\3\\.\'\\(\'\\.\'[^(]+\\(\\9\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\8\\("([^"]+)"\\);~msi',
    'id' => 'zeuraB64Gzinflate',
  ),
  355 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\{((?:(\\$\\w+)\\s*=\\s*str_replace\\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\\);\\s*)+)return\\s*(\\$\\w+\\(\'\',\\$\\w+\\(\\2\\)\\);)\\}(\\$\\w+)\\s*=\'([^\']+)\';(\\$\\w+)=\\1\\(\\6\\);\\8\\(\\);~msi',
    'id' => 'strReplaceFunc',
  ),
  356 => 
  array (
    'full' => '~(\\$\\w+)=array\\(array\\(((?:\'[^\']+\',?)+)\\)\\);\\s*(?:/\\*[^\\*]+\\*/)?(\\$\\w+)(?:/\\*[^\\*]+\\*/)?[^\\?]+\\?>\\s*\\.\\s*base64_decode\\s*\\(\\s*str_rot13\\s*\\(\\s*join\\s*\\(\\s*\'\'\\s*,\\s*\\3\\s*\\)\\s*\\)\\s*\\)\\s*\\.\\s*\'[^\']+\'\\s*\\);(?:/\\*[^\\*]+\\*/)?\\s*(\\$\\w+)=array_walk\\s*\\(\\1,\\$\\w+\\);~msi',
    'id' => 'arrayMapB64',
  ),
  357 => 
  array (
    'full' => '~preg_replace\\(\'/\\.\\+\\/e\',str_replace\\("([^"]+)","([^"])*","([^"]+)"\\),\'\\.\'\\);~msi',
    'id' => 'pregReplaceStrReplace',
  ),
  358 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\("([^"]+)"\\));\\s*(\\$\\w+)\\s*=\\s*(base64_decode\\("([^"]+)"\\));\\s*echo\\s*"[^"]+";\\s*if\\s*\\(\\$\\w+\\s*==\\s*"[^"]+"\\)\\s*\\$\\w+\\s*=\\s*"[^"]+"\\.\\4\\."[^"]+"\\.\\1;~msi',
    'id' => 'echoB64',
  ),
  359 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*"[^"]+"\\^"[^"]+";)+\\$\\w+\\s*=\\s*\\(?(?:@?\\$\\w+\\()+\'([^\']+)\'\\)+;(\\$\\w+\\s*=\\s*"[^"]+"\\^"[^;]+";)+(\\$\\w+)\\s*=\\s*\\(?(?:@?\\$\\w+\\()+\'\\$\\w+\',"[^"]+"\\^"[^"]+"\\);@?\\4\\(\\$\\w+\\);~msi',
    'id' => 'createFuncXored',
  ),
  360 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?array\\(((?:\'[^\']\',?)+)\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?)+(\\$\\w{1,50})\\s?=\\s?((?:\\$\\w{1,50}\\.?)+)\'(\\$\\w{1,50})\'\\.(?:\\1\\[\\d+\\]\\.?)+;\\5\\s?=\\s?"([^"]+)";\\s?@?eval\\(\\3\\);~msi',
    'id' => 'evalDictArrayConcat',
  ),
  361 => 
  array (
    'full' => '~(?:(?:\\$\\w+="[^"]+"|\\$\\w+="[a-f0-9\\\\x]+"\\^"[a-f0-9\\\\x]+"|\\$\\w+=(?:"[^"]+"\\.?)+);)+\\$\\w+=(?:\\$\\w+\\.?)+;\\s*(\\$\\w+)\\("/(\\w+)/e",(\\$\\w+),"\\2"\\);(?:\\s*\\1\\("/(\\w+)/e",(\\$\\w+),"\\4"\\);)?~msi',
    'id' => 'pregReplaceXored',
  ),
  362 => 
  array (
    'full' => '~\\$\\w{1,5}=\'([a-z0-9+/=]{1,100}\\s[a-z0-9+/=\\s]+)\';(\\$\\w)=["\']_COOK[\\\\x0-9]{1,10}";\\s*if\\(!empty\\(\\${\\2}\\[["\']key["\']\\]\\)\\){(?:\\$\\w=[^;]{1,30};\\s*){1,5}for\\([^)]{1,40}\\)(?:\\$\\w\\[?\\]?=[^;]{1,30};\\s*){1,5}for\\([^)]{1,40}\\){[^}]{1,150}}if[^;]{1,50};\\s*if\\(\\(\\$\\w=@?gzinflate\\(\\$\\w\\)\\)&&\\(md5\\(substr\\(\\$\\w,\\d,\\$\\w\\)\\)===\'([a-f0-9]{32})\'\\)\\){\\$\\w{1,5}=[^;]{1,100};if\\(PHP_VERSION<\'5\'\\){[^}]{1,1000}}@create_function\\(\'\',"[^"]{1,100}"\\.\\$\\w{1,5}\\.\'{\'\\);}}\\s*DIE\\(.{1,500}>"\\);~msi',
    'id' => 'base64EncryptedGz',
  ),
  363 => 
  array (
    'full' => '~error_reporting\\(0\\);function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*return\\s*strtr\\(\\2,\\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\',\\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\'\\s*\\);\\s*\\s*\\}eval\\(\\1\\(\'([^\']+)\'\\)\\);(\\$\\w+)\\s*=\\s*((?:\\$\\w+\\[\\d+\\]\\()+\'[^\']+\'\\)+;)\\$\\w+\\[\\d+\\]\\(\\6\\);~msi',
    'id' => 'Bloos3rpent',
  ),
  364 => 
  array (
    'full' => '~(@?eval\\(@?gzinflate\\(base64_decode\\(preg_replace\\(\'([^\']+)\',\\s*\'([^\']*)\',\\s*\'([^\']+)\'\\)+;)\\s*(preg_replace\\("/(\\w+)/e".\\s*\'\')@?eval\\(@?gzinflate\\(\\w+\\(base64_decode\\((preg_replace\\(\'([^\']+)\',\\s*\'([^\']*)\',\\s*)\'([^\']+)\'\\)+;(\'\',"\\6"\\);)~msi',
    'id' => 'doublePregReplace',
  ),
  365 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";(\\$\\w+)=array\\(((?:\\d+,?)+)\\);(\\$\\w+)="([^"]+)";(\\$\\w+)="";for\\s*\\((\\$\\w+)=0;\\8<\\d+;\\8\\+\\+\\)\\{(\\$\\w+)=\\3\\[\\8\\]\\s*;\\s*\\7\\.=\\s*\\1\\[\\9\\]\\s*;\\s*\\}\\7\\("eval\\(base64_decode\\(gzinflate\\(base64_decode\\(\\5\\),0\\)\\)\\)"\\);~msi',
    'id' => 'zeura2',
  ),
  366 => 
  array (
    'full' => '~(\\$\\w+)="([\\\\a-fx0-9])+";(\\$\\w+)="([\\\\a-fx0-9])+";(\\$\\w+)=\\1\\("",\\3\\("([^"]+)"\\)\\);\\5\\(\\);~msi',
    'id' => 'createFuncEscaped',
  ),
  367 => 
  array (
    'full' => '~error_reporting\\s*\\(0\\);\\s*function\\s*([^\\(]+)\\(\\)\\s*\\{\\s*\\$[^= ]+\\s*=\\s*[0-9a-fx]+;\\s*\\$[^= ]+\\s*=\\s*func_get_args\\s*\\(\\);\\s*if\\s*\\(+\\$[^}]+}\\s*if\\s*\\(+[^{]+\\{\\s*return\\(+parse_str\\("[^=]+=([^"]+)",[^}]+\\}\\s*\\}\\s*function\\s*([^(]+)\\(\\)\\{\\s*\\$[^=]+=func_get_args\\(\\);\\s*\\$[^=]+=[0-9a-fx]+;(\\s*if\\s*\\([^}]+\\})+\\s*\\}\\s*function\\s*([^(]+)\\(\\$[^)]+\\)\\s*{[^}]+\\}\\s*return\\s*\\$[^;]+;\\s*\\}\\s*eval\\(\\5\\(\\1\\([0-9a-fx]+,[0-9a-fx]+\\)+;~msi',
    'id' => 'maskedDeltaOrd',
  ),
  368 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?"((?:[^-]-m\\s+){10}[^"]+)";\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\(\\s?\\1\\s?\\(\\s?array\\("-m\\s",\\s?PHP_EOL\\),\\s?"",\\s?\\2\\)\\);\\s?function\\s?\\w{1,50}\\s?\\((\\$\\w{1,50})\\s?\\){\\s?.*?\\$\\w{1,50}\\(\\4\\);}\\s?\\$\\w{1,50}\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s?(\\$\\w{1,50})\\s?=\\s?array\\(\\);\\s?for\\s?\\((\\$\\w+)\\s?=0;\\s?\\8\\s?<\\s?256;\\s?\\+\\+\\8\\)\\s?{\\s?\\7\\s?\\[\\8\\]\\s?=\\s?\\8;\\s?}\\s?\\$\\w{1,50}\\s?=\\s?0;\\s?for\\s?\\(\\8\\s?=0;\\s?\\8\\s?<\\s?256;\\s?\\+\\+\\8\\)\\s?{.*?ord\\(\\$\\w{1,50}\\s?\\[\\$\\w{1,50}\\s?%\\s?(\\d+)\\]\\)\\)\\s?%\\s?256;.*?for\\s?\\(.*?<(\\d+);\\s?\\+\\+\\$\\w{1,50}\\).*?}\\s?\\$\\w{1,50}\\s?=\\s?\\4;\\s?\\$\\w{1,50}\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?\\$\\w{1,50}\\("/\\w+/e",\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+,"\\w+"\\);~msi',
    'id' => 'decodeStrMultiForDict',
  ),
  369 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?\'[^\']+\';\\s?)+(?:\\$\\w{1,50}\\s?=\\s?str_replace\\([\'"][^\'"]+[\'"],\\s?["\']{2},\\s?[\'"][^\'"]+[\'"]\\);\\s?){2}(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\),\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\)\\);\\s?\\1\\(((?:\\$\\w{1,50}\\s?\\.?)+)\\);~msi',
    'id' => 'B64ConcatedStrVars',
  ),
  370 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$\\w{1,50}\\s?=\\s?fputs\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?~msi',
    ),
    'full' => '~\\$\\w{1,50}\\s?=\\s?(\\w{1,50})\\s?\\(array\\((?:\\d+,?)+\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(array\\((?:\\d+,?)+\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?fopen\\(\\$\\w{1,50},\\s?\\1\\(array\\((?:\\d+,?)+\\)\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?fputs\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?function\\s?\\1\\(\\s?array\\s?(\\$\\w{1,50})\\)\\s?{\\s?if\\(\\2\\)\\s?{\\s?foreach\\s?\\(\\2\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?chr\\(\\$\\w{1,50}\\);\\s?}\\s?}\\s?return\\s?\\$\\w{1,50};\\s?}~msi',
    'id' => 'chrFuncVars',
  ),
  371 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"\\.?)+;)+)\\$\\w{1,50}\\((?:"[^"]+"\\.?)+,((?:\\$\\w{1,50}\\()+(?:"[^"]+"\\.?)+\\)\\))\\s?,\\s?(?:"[^"]+"\\.?)+\\);~msi',
    'id' => 'concatVarsFuncs',
  ),
  372 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$GLOBALS\\[\'(\\w+)\'\\];~msi',
      1 => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;~msi',
      2 => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;\\s*\\$\\1=\\$GLOBALS;~msi',
      3 => '~exit\\(\\);\\}~msi',
    ),
    'full' => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;\\s*\\$\\1=\\$GLOBALS;(\\$\\1\\[\'(\\w+)\']="([^"]+)";)\\s*(?:@?\\$\\1\\[(\\$\\1\\[\'\\3\'\\]\\[\\d+\\]\\.?)+\\]\\s*=(?:\\s*(?:\\$\\1\\[\'\\3\'\\]\\[\\d+\\]\\.?)+|\\$_POST|\\$_COOKIE);\\s*)+(?:.{1,120}\\$\\1\\[\'\\3\'\\])+[^}]+\\}exit\\(\\);\\}~msi',
    'id' => 'globalDictVar',
  ),
  373 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\'(\\w+)\'\\^[^;\']+;\\s*(\\$\\w+)\\s*=\\s*\\w+\\&\'[^\';]+\';\\s*.*?\\2\\&\\s*[^;]+;\\s*\\$\\w+\\s*=\\s*\\$\\w+\\&\\$\\w+;\\s*\\$\\w+\\s*=\\s*[^;]+;\\s*(?:\\$\\w+\\s*=\\s*\\$\\w+\\&\\$\\w+;\\s*)+if\\s*\\(\\!(?:\\$\\w+\\s*\\()+[^;]+;\\s*\'[^\']+\';~msi',
    'id' => 'garbageVars',
  ),
  374 => 
  array (
    'full' => '~\\$\\w+\\s*=(?:\\s*chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+;\\s*\\$\\w+\\s*=\\s*(?:<<<\'(\\w+)\'\\s*(.*?)\\1|"([^"]+)");\\s*\\$\\w+\\s*=\\s*(\\w+)\\((?:\\s*\\$\\w+\\s*\\(\\s*array\\("([^"]+)"\\),"",\\$\\w+\\)|\\s*\\$\\w+\\s*\\(\\$\\w+\\))\\);\\s*function\\s*\\4\\s*\\(\\$\\w+\\)\\s*\\{\\s*(?:\\$\\w+=(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?)+;\\s*)+\\$\\w+=\\&\\$\\w+;\\s*\\$\\w+\\.=\\$\\w+;return\\s*\\$\\w+\\(\\$\\w+\\);\\}\\s*\\$\\w+\\s*=(?:\\s*chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?)+;\\s*\\$\\w+\\s*=\\s*"([^"]+)";\\s*(?:\\s*\\$\\w+\\s*=\\s*array\\(\\);)?(?:(?:\\s*for\\s*\\(\\$\\w+=0;\\s*\\$\\w+<\\d+;\\s*\\+\\+\\$\\w+\\)\\s*\\{\\s*[^}]+\\}(?:\\s*\\$\\w+\\s*=\\s*(?:0;|\\$\\w+;))+)+|for\\(\\$\\w+\\s*=\\s*0;\\$\\w+<\\d+;\\+\\+\\$\\w+\\)\\{\\s*\\$\\w+\\{\\s*\\$\\w+\\}=\\$\\w+\\{\\s*\\$\\w+\\}\\^\\$\\w+\\{\\s*\\$\\w+%\\d+\\};\\}\\s*\\$\\w+\\s*=\\s*\\$\\w+;)\\s*\\$\\w+\\s*=\\s*(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+;\\s*\\$\\w+\\("/(\\w+)/e",\\s*(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+,"\\7"\\);~msi',
    'id' => 'chrMinXor',
  ),
  375 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^;]+;)";\\s*@assert\\(\\1\\);~msi',
    'id' => 'assertUrlDecode',
  ),
  376 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*array\\(\'([^\\)]+)\'\\);\\$\\w+\\s*=\\s*array\\(\'[base64_dco\'\\.,]+\\)\\s*;\\s*\\$\\w+\\s*=\\s*array\\([gzuncompres\'\\.,]+\\)\\s*;\\s*(?:\\$\\w+\\s*=\\s*\\$\\w+\\[\\d\\]\\.\\$\\w+\\[\\d\\];\\s*)+eval\\((?:\\$\\w+\\()+implode\\(\'\',\\s*\\1\\)+;~msi',
    'id' => 'implodeB64Gz',
  ),
  377 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*"\\w";\\s*)+)((?:\\$\\w+\\s*=(?:\\s*\\$\\w+\\s*\\.?)+;\\s*)+)(eval\\((?:\\$\\w+\\()+"[^"]+"\\)+;)~msi',
    'id' => 'X12',
  ),
  378 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*function\\((\\$\\w+)\\)\\s*\\{\\s*return\\s*strtr\\(\\2,\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*\\};\\$\\w\\s+=\\s*\\$\\w+\\("([^"]+)"\\);\\$\\w+\\s*=\\s*\\$\\w+\\(\\);\\$\\w+\\s*=\\s*\\$\\w+\\[\\1\\("([^"]+)"\\)\\];foreach\\s*\\(\\$\\w+\\s*as\\s*\\$\\w+\\s*=>\\s*\\$\\w+\\)\\s*\\{[^}]+\\}(?:if\\s*\\([^}]+})+\\}(\\$\\w+)\\s*=\\s*\\$\\w+\\("",\\s*(?:\\$\\w+\\()+"([^"]+)"\\)+;\\7\\(\\);~msi',
    'id' => 'WpNightmare',
  ),
  379 => 
  array (
    'full' => '~preg_replace\\(\'/(\\w+)/e\',strrev\\(\'\\)\\)\\\\\'([^\']+)\'\\([base64_dco(val]+\'\\),\'\\1\'\\);~msi',
    'id' => 'pregB64Strrev',
  ),
  380 => 
  array (
    'full' => '~global\\s(\\$[^;]+);if\\(!defined\\([\'"][^\'"]+[\'"]\\)\\){define\\([\'"][^\'"]+[\'"],__FILE__\\);function\\s?([^(]+)\\((\\$[^,]+),(\\$[^=]+)=[\'"]{2}\\){global\\s?\\1;\\3=base64_decode\\(\\3\\);if\\(empty\\(\\3\\)\\)\\s?return\\s?[\'"]{2};if\\(\\4==[\'"]{2}\\){return\\s?\\~\\3;}else{(\\$[^=]+)=\\1\\[\'([^\']+)\'\\]\\(\\3\\);\\4=\\1\\[\'([^\']+)\'\\]\\(\\4,\\5,\\4\\);return\\s?\\3\\^\\4;}}}((?:(?:\\1\\[\'[^\']+\'\\]=\\2\\(\'[^\']+\',\'[^\']*\')\\);)+)(?:\\1\\[\'[^\']+\'\\]=isset[^;]+;)+(eval\\(\\1\\[\'([^\']+)\'\\]\\(\'([^\']+)\'\\)\\);)return;\\?>~msi',
    'id' => 'utfCharVarsFuncEval',
  ),
  381 => 
  array (
    'precheck' => 
    array (
      0 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
      1 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;~msi',
      2 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\(~msi',
      3 => '~(?:\\$\\w{1,50}\\s?=\\s?(?|[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+~msi',
      4 => '~(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\)~msi',
      5 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\$\\w{1,50},\\s?[\'"][^\'"]+[\'"]\\);~msi',
      6 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);~msi',
    ),
    'fast' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);(?:\\$\\w{1,50}\\s?=\\s?(?:[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\([\'"]{2},\\s?\\3\\(\\$\\w{1,50}\\(\\5\\(\\6\\(\\7,\\s?[\'"](\\d+)[\'"]\\)\\)\\)\\)\\),\\$\\w{1,50}\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\s?function\\s\\2\\(.*return\\s\\$\\w{1,50};}(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);(?:\\$\\w{1,50}\\s?=\\s?(?|[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\([\'"]{2},\\s?\\3\\(\\$\\w{1,50}\\(\\5\\(\\6\\(\\7,\\s?[\'"](\\d+)[\'"]\\)\\)\\)\\)\\),\\$\\w{1,50}\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\s?function\\s\\2\\(.*return\\s\\$\\w{1,50};}(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
    'id' => 'manyVarFuncCreateFuncWrap',
  ),
  382 => 
  array (
    'full' => '~class\\s*(_\\w{1,20})\\s*{\\s*private\\sstatic\\s*\\$_\\w{1,10};\\s*static\\s*function\\s*(\\w{1,3})\\s*\\(\\$_\\w{1,20}\\)\\s*{\\s*if\\s*\\([^)]{1,20}\\)\\s*:\\s*self::\\w{1,2}\\(\\);\\s*endif;\\s*return\\s*self::\\$_\\w{1,10}\\[\\$_\\w{1,10}\\];\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,2}\\(\\)\\s*{\\s*self::\\$_\\w{1,10}=array\\(([^\\)]{1,500})\\);\\s*}\\s*}\\s*\\$GLOBALS\\[["\']([^\\]]{32,120})["\']\\]=array\\(([^)]{1,500})\\);((?:\\s*\\$GLOBALS\\["[_\\w\\d\\\\]{1,120}"\\]=base64_decode\\([^)]{1,140}\\)\\s*;\\s*)+)\\s*class\\s*(_\\w{1,10})\\s*{\\s*private\\s*static\\s*\\$_\\w{1,10};\\s*static\\s*function\\s*(\\w{1,10})\\([^)]{1,30}\\)\\s*{[^}]{1,900}\\s*}private\\s*static\\s*function\\s*\\w{1,10}\\(\\)\\s*{\\s*self::\\$_\\w{1,10}=array\\(([^)]{1,2300})\\);\\s*}\\s*}\\s*(.*;\\s*;)~msi',
    'id' => 'twoCalcClasses',
  ),
  383 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*array\\(((?:[\'"][\\w\\$\\)\\;\\(][\'"],?)+)\\);\\s*(\\$\\w+)\\s*=\\s*create_function\\(\'([\\$\\w\'\\.]+)\',((?:\\1\\[\\d+\\]\\.?)+)\\);\\s*\\3\\(\'([^\']+)\'\\);~msi',
    'id' => 'createFuncArray',
  ),
  384 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*function\\s*(\\w+)\\(\\)\\s*\\{\\s*return\\s*str_ireplace\\("([^"]+)",\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*\\}\\s*(\\$\\w+)=strtr\\("([^"]+)",\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\\);\\s*(\\$\\w+)\\s*=\\s*\\11\\(\'\',\\s*\\7\\(\\1\\)\\);\\s*\\12\\(\\);~msi',
    'id' => 'createFuncReplaceB64',
  ),
  385 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*([lr]?trim)\\(\'[^\']+\',\'[^\']+\'\\);\\s*)+)(\\$\\w+)\\s*=\\s*((?:\\$\\w+\\s*\\.?\\s*)+);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'([^\']+)\'\\);\\s*eval\\((\\$\\w+=\\&?)?\\5\\);~msi',
    'id' => 'evalTrim',
  ),
  386 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\s{\\s*(\\$\\w+\\s*=\\s*\'[^\']{32}\';\\s*)(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*(((\\$\\w+)\\s*=\\s*(?:\\3\\[\\d+\\]\\.?)+;\\s*)+)\\$\\w+\\(\\7,\\3\\[\\d+\\]\\."([^,]+)",\'\'\\);\\}\\s*@?\\1\\(\\);~msi',
    'id' => 'funcDictB64',
  ),
  387 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[base64dco_"\'.]+;\\s?(\\$\\w{1,50})\\s?=\\s?["\'gzinflate.]+;\\s?(\\$GLOBALS\\[\'[^\']+\'\\]\\s?=\\s?\\$\\w{1,50}\\s?=\\s?)unserialize\\(\\2\\(\\1\\(join\\(\'(\\w+)\',array\\(((?:\'[^\']*\',?\\s?)+)\\)+;~msi',
    'id' => 'unserializeB64GzJoinArr',
  ),
  388 => 
  array (
    'full' => '~(\\$\\w{1,50})=\\(?[\'"]([^\'"]+)[\'"]\\);\\s?((?:\\$\\w{1,50}=[\'"][^\'"]+[\'"];\\s?)*(?:\\$\\w{1,50}=(?:\\1{\\d{1,5}}\\.?)+;)+)\\$\\{"[^"]+"}\\["[^"]+"\\]\\(\\d\\);{1,2}(?:.*?echo\\s?.*?unset.*?exit\\(\\);)+[^;]+;\\${"[^"]+"}\\["[^"]+"]\\(\\);~msi',
    'id' => 'dictVarsContent',
  ),
  389 => 
  array (
    'full' => '~(\\${[\'"]GLOBALS[\'"]}\\[[\'"](\\w{1,50})[\'"]\\])=[\'"](\\w{1,50})[\'"];if\\(isset\\(\\$_GET\\[[\'"]\\w{1,50}[\'"]\\]\\)&&\\$_GET\\[[\'"]\\w{1,50}[\'"]\\]==[\'"]\\w{1,50}[\'"]\\){((\\${[\'"]GLOBALS[\'"]}\\[[\'"]\\w{1,50}[\'"]\\])=[\'"]\\w{1,50}[\'"];(\\${[\'"]GLOBALS[\'"]}\\[[\'"]\\w{1,50}[\'"]\\])=[\'"]\\w{1,50}[\'"];(?:\\$\\w{1,50}=[\'"]\\w{1,50}[\'"];)\\${\\1}=[\'".creat_funio]+;\\${\\5}=\\$\\3\\(\'(\\$\\w{1,50})\',[\'".eval]+\\(\\\\?\'\\?>\\\\?\'\\.[\'".base64_dco]+\\(\\7\\)\\);\'\\);\\${\\6}\\([\'"]([^\'"]+)[\'"]\\);)exit;}~msi',
    'id' => 'globalsCreateFuncEvalB64',
  ),
  390 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?["\']([^"\']+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?foreach\\s?\\(\\[[^]]+\\]\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\];\\s?}\\s?if\\s?\\(isset\\(\\$_REQUEST\\["{\\$\\w{1,50}}"\\]\\)\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?\\$_REQUEST\\["{\\$\\w{1,50}}"\\];\\s?(?:\\$\\w{1,50}\\s?=\\s?["\']{2};\\s?)+(?:foreach\\s?\\(\\[[^]]+\\]\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\];\\s?}\\s?)+\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\((?:[^)]+)\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\);\\s?\\$\\w{1,50}\\(\\);\\s?exit;\\s?}~msi',
    'id' => 'dictForeachVars',
  ),
  391 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'".\\sgzinflate\\dxa-fhr\\(\\)\\\\]+;\\s?(\\$\\w{1,50})\\s?=[\'".\\sbase64_dcod\\dxa-fhr\\(\\)\\\\]+;\\s?(\\$\\w{1,50})\\s?=\\s?\\1\\(\\2\\((?:str_replace\\("[^"]+",\\s?"",\\s?)?[\'"]([^\'"]+)[\'"]\\)\\)\\)?;\\s?echo\\s?(?:"{\\${)?\\s?eval\\(\\3\\)\\s?(?:}}")?;~msi',
    'id' => 'echoEvalGzB64Var',
  ),
  392 => 
  array (
    'full' => '~eval\\(((?:str_rot13|strrev))\\(\\s*\'((?:.*?\\\\\')+[^\']+)\'\\s?\\)\\);~msi',
    'id' => 'evalFuncCode',
  ),
  393 => 
  array (
    'full' => '~eval\\(openssl_decrypt\\(\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\),\\s?[\'"]([^\'"]+)[\'"],\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\),\\s?OPENSSL_RAW_DATA,\\s?base64_decode\\([\'"]([^\'"]+)[\'"][^;]+;~msi',
    'id' => 'evalOpenSslDecrypt',
  ),
  394 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?urldecode\\(\'([^\']+)\'\\);function\\s\\w{1,50}(?:.*?(?:\\1{\\d+}\\.?)+)+;~msi',
    'id' => 'urldecodedDictVarReplace',
  ),
  395 => 
  array (
    'full' => '~global\\s*\\$(\\w+);((?:\\$\\1\\[\'[^\']+\'\\]=base64_decode\\(\'[^\']+\'\\);)+)[\\s\\?\\>\\<ph]{0,10}((?:.+?\\$GLOBALS\\[\'\\1\'\\]\\[\'[^\']+\'\\][^;]+;)+}?(?:(?:if\\s*\\([^}]+})+return\\s*[^}]+\\}+|(?:.{1,250}?base64_decode\\(\'[^\']+\'\\))+[^}]+\\}+)?)~msi',
    'id' => 'zymdecrypt',
  ),
  396 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:(\\$\\w+)=strrev\\(\\2\\);\\s*\\2=base64_decode\\(\\3\\);\\s*)+return\\s*\\((?:"\\?\\>"\\s*\\.\\s*)?\\2\\);\\s*\\}\\s*(eval\\(\\1\\("[^"]+"\\)\\);)~msi',
    'id' => 'funcRevB64',
  ),
  397 => 
  array (
    'full' => '~error_reporting\\(\\d\\);\\s?(\\$\\w{1,50})=create_function\\(null,gzinflate\\(convert_uudecode\\("([^"]+)"\\)\\)\\);\\1\\(\\);~msi',
    'id' => 'createFuncGzConvertUudecode',
  ),
  398 => 
  array (
    'full' => '~\\$GLOBALS\\["[^"]+"\\]=Array\\(\\);\\s?\\?><\\?php\\sif\\s?\\(\\!function_exists\\("(\\w{1,50})"\\)\\)\\s?{function\\s?\\1\\(\\$\\w{1,50}\\){\\$\\w{1,50}=Array\\(((?:[\'"][^"\']+[\'"]\\s?\\.?)+)\\);return\\sbase64_decode\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\);}}\\s?\\?><\\?php\\s?if\\(isset\\(\\$GLOBALS\\[\\1\\(0\\)\\]\\)\\)return;\\s?\\?><\\?php\\sfunction\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\$\\w{1,50}=Array\\(((?:(?:[\'"][^"\']*[\'"]\\s?\\.?)+,?)+)\\);return\\sbase64_decode\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\);}\\s?(?:.*?\\3\\(\\d{1,5}\\))+.*?\\?>~msi',
    'id' => 'globalsArrayFuncs',
  ),
  399 => 
  array (
    'full' => '~ini_set\\([\'"][^\'"]+[\'"],\\s?[\'"][^\'"]+[\'"]\\);(\\$\\w{1,50})\\s?=\\s?array\\(((?:[\'"][^\'"]+[\'"]\\s?=>(?:\\s?(\\w{1,50})\\(\\d{1,5}\\)\\.?|\\s?\\$\\w{1,50})+,?)+)\\);.*?function\\s\\3\\(\\$\\w{1,50}\\){return\\schr\\(\\$\\w{1,50}\\);}(?:.*?\\1\\[[\'"][^\'"]+[\'"]\\])+.*?return\\s\\$\\w{1,50};}\\s?\\w{1,50}\\(\\);~msi',
    'id' => 'varArrayChrFunc',
  ),
  400 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?function\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?base64_decode\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?openssl_decrypt\\("\\$\\w{1,50}",\\s?[\'"]AES-256-CBC[\'"],\\s?[\'"]([^\'"]+)[\'"],\\s?0,\\s?[\'"]([^\'"]+)[\'"]\\);return\\s\\$\\w{1,50};\\s?}(\\$\\w{1,50})\\s?=\\s?([\'"][^\'"]+[\'"]);.*?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?eval\\(\\1\\(\\6\\)\\);~msi',
    'id' => 'evalOpensslDecryptStr',
  ),
  401 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?function\\s(\\w{1,50})\\(\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?((?:(?:\\2\\[\\d{1,5}\\]|[\'"][(_\\\\\'"]+[\'"])\\s?\\.?\\s?)+);\\sreturn\\s\\$\\w{1,50};\\s?}\\s?eval\\(\\1\\(\\)\\s?\\.\\s?([\'"][^\'"]+[\'"]\\)+;)[\'"]\\);~msi',
    'id' => 'evalDictionaryFuncVar',
  ),
  402 => 
  array (
    'full' => '~(?>\\$\\w+\\s?=\\s?base64_decode\\((?>(?>chr\\(\\d+\\)|"[\\w=]"|\'[\\w=]\')[\\s.]*)+\\);\\s?)+(?>(?>update_option\\(|\\$\\w+=)\\$\\w+\\([^;]+;|(?>eval\\(\\$\\w{1,50}\\(\\$_POST\\[base64_decode\\((?>.*?base64_decode\\((?>(?>chr\\(\\d+\\)|"[\\w=]"|\'[\\w=]\')[\\s.]*)+\\)\\s?)+[^;}]+[;}\\s]*))+~msi',
    'id' => 'manyBase64DecodeChr',
  ),
  403 => 
  array (
    'full' => '~define\\((?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+,\\s?__FILE__\\);\\s?\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\s?=\\s?(?:base64_decode\\([\'"][^\'"]+[\'"]\\));\\s?(?:\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\s?\\.?=\\s?(?:\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\[[\\d\\-\\+\\s(\\)]+\\]\\s?\\.?\\s?)+;\\s?)+eval\\(\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\([\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'manyB64CalcEval',
  ),
  404 => 
  array (
    'full' => '~(\\$[^ =]+)\\s{0,10}=\\s{0,10}\'([^\']+)\';\\s{0,10}([^(]+)\\(\\1\\);\\s*function\\s*\\3\\((\\$[^\\)]+)\\)\\{\\s*(\\$[^= ]+)\\s*=\\s*\'[base64_dco.\']+;\\s*(\\$[^= ]+)\\s*=\\s*array\\(((?:(?:\'[\\w+@\\)#%\\(\\$\\*;]\'|\\5\\(\'[^\']+\'\\)),?)+)\\);\\s*((?:(\\$[^= ]+)\\s*=\\s*(?:\\6\\[\\d+\\]\\.?)+;\\s*)+)(\\$[^= ]+)\\s*=\\s*([^;]+);return\\s*eval\\(\\10\\);\\s*\\}~msi',
    'id' => 'da7Q9RnPjm',
  ),
  405 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:[\'"][^\'"]+[\'"]|(?:str_replace|\\$\\w{1,50})\\([\'"][^\'"]+[\'"],\\s*[\'"][^\'"]*[\'"],\\s*[\'"][^\'"]+[\'"]\\));\\s*)+(\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s*((?:\\$\\w{1,50}\\()+)[\'"]([^\'"]+)[\'"],\\s?[\'"]{2},\\s?((?:\\$\\w{1,50}\\.?)+)\\)+;)~msi',
    'id' => 'strReplaceVarsCreateFunc',
  ),
  406 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\'[^\']+\';\\s*)+\\$\\w+=(?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?\\s*)+;\\s*(\\$\\w+)\\s*=\\s*\\$\\w+;\\s*(\\$\\w+)\\s*=\\s*\\$\\w+\\(\\1,(?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?\\s*)+\\);\\s*\\2\\s*\\((?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?,?\\s*)+\\);~msi',
    'id' => 'createFuncDict',
  ),
  407 => 
  array (
    'full' => '~(\\$\\w+)=\'create_function\';(\\$\\w+)=\'\\s*\';(\\$\\w+)=\\1\\(\\2,\'eval\\(array_pop\\(func_get_args\\(\\)+;\'\\);\\3\\((?:(\'[^\']+\',?)+)\\);~msi',
    'id' => 'createFuncArrayPop',
  ),
  408 => 
  array (
    'full' => '~error_reporting\\(\\d\\);\\s*(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*(?:\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?)+(?:\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\1\\);\\s?)+(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\(\\$\\w{1,50}\\s?=\\s?0\\s?;\\s?\\$\\w{1,50}\\s?\\<\\s?\\$\\w{1,50}\\s?;\\s?\\$\\w{1,50}\\+\\+\\s?\\){\\3\\s?\\.=\\s?(\\$\\w{1,50})\\({1,5}(\\$\\w{1,50})\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\)\\s?\\^\\s?(\\d{1,20})\\)+\\s?;\\s?}\\s?eval\\s?\\(\\3\\);\\s?return;~msi',
    'id' => 'chrOrdB64FuncVars',
  ),
  409 => 
  array (
    'full' => '~class\\s(\\w{1,50})\\s{0,10}{\\s{0,10}private\\sstatic\\s(\\$\\w{1,50});\\s{0,10}static\\sfunction\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?if\\s?\\(!self::(\\$\\w{1,50})\\):\\s?self::(\\w{1,50})\\(\\);\\s?endif;\\s?(\\$\\w{1,50})\\s?=\\s?strlen\\(\\5\\);\\s?(\\$\\w{1,50})\\s?=\\s?base64_decode\\(self::\\2\\[\\4\\]\\);\\s?for\\s?\\((\\$\\w{1,50})\\s?=\\s?0\\s?,\\s?(\\$\\w{1,50})\\s?=\\s?strlen\\(\\9\\);\\s?\\10\\s?!==\\s?\\11;\\s?\\+\\+\\10\\):\\s?\\9\\[\\10\\]\\s?=\\s?chr\\(ord\\(\\9\\[\\10\\]\\)\\s?\\^\\s?ord\\(\\5\\[\\10\\s?%\\s?\\8\\]\\)\\);\\s?endfor;\\s?return\\s\\9;\\s?\\}\\s?private\\sstatic\\sfunction\\s\\7\\(\\)\\s?{\\s?self::\\6\\s?=\\s?array\\(((?:[^=]+=>[^,]+)+)\\);\\s?}\\s?}((?:.*?\\1::\\3\\([^)]+\\))+[;}\\s]+)~msi',
    'id' => 'classArrayDictFunc',
  ),
  410 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?((?:\\2\\s?\\.=\\s?"[^"]+";\\s?)+)(\\$\\w{1,50})\\s?=\\s?"((?:[^";]+;?"?)+)"\\s?;\\s?(\\$\\w{1,50})\\s?=\\s?"((?:[^";]+;?"?)+)"\\s?;\\s?foreach\\(str_split\\(\\2\\)\\s?as\\s?(\\$\\w{1,50})\\)\\s?{\\s?\\1\\s?\\.=\\s?\\(strpos\\(\\6,\\s?\\8\\)\\s?===\\s?false\\)\\s?\\?\\s?\\8\\s?:\\s?\\4\\[strpos\\(\\6,\\s?\\8\\)\\];\\s?}\\s?\\1\\s?=\\s?"\\?>\\1"\\s?;\\s?eval\\(\\s?\\1\\s?\\);~msi',
    'id' => 'concatVarsIterDict',
  ),
  411 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\5\\s?<\\s?strlen\\(\\s?\\2\\s?\\)\\s?;\\s?\\)\\s?for\\((\\$\\w{1,50})\\s?=\\s?0\\s?;\\s?\\6\\s?<\\s?strlen\\(\\s?\\3\\s?\\);\\s?\\6\\+\\+,\\s?\\5\\+\\+\\s?\\)\\s?\\4\\s?\\.=\\s?\\2{\\5}\\s?\\^\\s?\\3{\\6}\\s?;\\s?return\\s\\4;\\s?}\\s?;\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)*eval\\(\\1\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\)\\s?,\\s?[\'"]([^\'"]+)[\'"]\\)\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)*~msi',
    'id' => 'funcB64TwoArgs',
  ),
  412 => 
  array (
    'full' => '~(?:\\$\\w+=base64_decode\\(\'[^\']+\'\\);)+(?:(\\$\\w+)=str_replace\\(base64_decode\\(\'[^\']+\'\\),\'\',(?:base64_decode\\(\'[^\']+\'\\)|(?:\\$\\w+\\.?)+)\\);)+(\\$\\w+)=\\$\\w+\\(\'\',\\1\\);\\2\\(\\);~msi',
    'id' => 'strReplaceB64',
  ),
  413 => 
  array (
    'full' => '~(\\$\\w+)=str_replace\\(\'([^\']+)\',\'\',\'([^\']+)\'\\);(\\$\\w+)=create_function\\(\'\',\\1\\);\\4\\(\\);~msi',
    'id' => 'createFuncStrReplace',
  ),
  414 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?base64_decode\\(\'([^\']+)\'\\);\\s?(\\$\\w+)\\s?=\\s?\'[\\w\\.]+\';\\s?(\\$\\w+)\\s?=\\s?\\(file_exists\\(\\3\\)\\)\\s?\\?\\s?fopen\\(\\3,\\s?"a\\+"\\)\\s?:\\s?fopen\\(\\3,\\s?"w\\+"\\);\\s?fwrite\\(\\4,\\s?\\1\\);\\s?fclose\\(\\4\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  415 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*"(\\\\[\\w\\\\]+)?";\\s*)+(?:error_reporting\\(0\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*\\$\\w+\\(([\'"][^\'"]+[\'"])\\);\\s*\\4\\s*=\\s*\\2\\(\\4\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\(\'[^\']+\',\\4\\);~msi',
    'id' => 'createFuncGzuncompressB64',
  ),
  416 => 
  array (
    'full' => '~(?:\\$\\{"[\\\\x0-9a-fGLOBALS]+"}\\["[^"]+"\\]="[^"]+";)+echo\\s*"[^"]+";if\\(isset\\(\\$_POST\\["[^"]+"\\]\\)\\)\\{date_default_timezone_set\\("[^"]+"\\);(?:(?:(?:\\$\\{)+"[\\\\x0-9a-fGLOBALS]+"}\\["[^"]+"\\]\\}?|\\$\\w+|\\$\\{\\$\\w+\\})=[^;]+;)+move_uploaded_file\\([^\\)]+\\);}if\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\{echo\\s*"[^;]+";exit\\(0\\);\\}~msi',
    'id' => 'globalsSlashed',
  ),
  417 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s{0,10}((?:\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?)+)\\s?\\1\\s?=\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\(\\1\\)\\);\\s?(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\\1\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\9\\s?<\\s?\\6;\\s?\\9\\+\\+\\s?\\)\\s?{\\8\\s?\\.=\\s?(\\$\\w{1,50})\\(\\((\\$\\w{1,50})\\(\\1\\[\\9\\]\\)\\s?\\^\\s?(\\d{1,10})\\)\\);}\\s?eval\\(\\8\\);\\s?return;~msi',
    'id' => 'b64VarsFuncEval',
  ),
  418 => 
  array (
    'full' => '~(?:\\@null;\\s*echo\\@null;\\s*)?((?:\\$\\w+=\'\\w+\';\\s*)+)((?:\\$\\w+=(?:\\$\\w+\\.?)+;\\s*)+)(eval\\((?:\\$\\w+\\()+(?:\'[^\']+\'|"[^"]+")\\)+;)(?:\\s*\\@null;)?(exit;)?~msi',
    'id' => 'nullEcho',
  ),
  419 => 
  array (
    'precheck' => 
    array (
      0 => '~exit\\(\\);~msi',
      1 => '~\\@header\\(\\$\\w{1,40}\\);~msi',
      2 => '~(\\$\\w{1,40})\\s?=\\s?\\(\\"(.+)\\"\\);~msi',
    ),
    'full' => '~(\\$\\w{1,40})\\s?=\\s?\\(\\"(.+)\\"\\);.*\\@header\\(\\$\\w{1,40}\\);.*exit\\(\\);~msi',
    'id' => 'arrayReplacing',
  ),
  420 => 
  array (
    'full' => '~((?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]\\w+[\'"];)+\\s*\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?)+;\\s*)+)eval\\((?:\\$\\w{1,50}\\(?)+[\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'varConcatedReplaceEval',
  ),
  421 => 
  array (
    'full' => '~(\\$\\w{1,50}+)\\s?=\\s?[\'"]{2};(?:(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];)+\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50};\\s?)+((?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]\\w+[\'"];\\s?)+\\s*\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?)+;\\s*)+)\\s?function\\s(\\w{1,50})\\((\\$\\w{1,50}+),\\s?(\\$\\w{1,50}+)\\)\\s?{\\s?return\\sstr_replace\\(\\5,\\s?[\'"]([^\'"]+)[\'"],\\s?\\4\\);\\s?}\\s*eval\\(((?:\\$\\w{1,50}\\()+)\\3\\(\\1,\\s?[\'"]([^\'"]+)[\'"]\\)+;~msi',
    'id' => 'varsConcatedFuncStrReplaceEval',
  ),
  422 => 
  array (
    'full' => '~error_reporting\\(E_ALL\\)\\;\\s?\\$\\w{1,50}\\s?=\\s?[\'"](.*)[\'"]\\;\\s?file_put_contents\\(\\$_SERVER\\[[\'"]DOCUMENT_ROOT[\'"]\\].+base64_decode.+~msi',
    'id' => 'b64putContents',
  ),
  423 => 
  array (
    'full' => '~(?:\\$\\w+=base64_decode\\(\'[^\']+\'\\);)+\\s*(?:\\$\\w+=\\$_SERVER\\[base64_decode\\(\'[^\']+\'\\)\\];)+\\$\\w+="[^"]+";(?:\\$\\w+\\.?=(?:base64_decode\\(\'[^\']+\'\\)\\.?)+;)+mail\\(base64_decode\\(\'[^\']+\'\\),\\$\\w+,\\$\\w+,\\$\\w+\\);\\s*eval(?:\\(\\$\\w+)+\\(+\\$\\w+\\)+;~msi',
    'id' => 'b64WSO',
  ),
  424 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\s*\\{\\s*(\\$\\w+)\\s*=\\s*\'([^\')]+)\';\\s*(\\$\\w+)\\s*=((?:\\s*(?:\\2\\[\\d+\\]|\'[^\';]+\'+)\\s*\\.?)+);\\s*return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\(\\)\\s*\\.\\s*\'([^\']+)\'\\)+;\\s*\'\\);~msi',
    'id' => 'evalFuncDict',
  ),
  425 => 
  array (
    'fast' => '~((\\$\\w+)=(?:urldecode\\(\'([^\']+)\'\\);|"([^"]+)";))((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)(?:eval\\(\\$\\w+\\(\'([^\']+)\'\\)\\);|\\$\\w+=\\$\\w+\\("",\\$\\w+\\("([^"]+)")(?:\\)\\);\\$\\w+\\(\\);)?~msi',
    'full' => '~((\\$\\w+)=(?|urldecode\\(\'([^\']+)\'\\);|"([^"]+)";))((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)(?|eval\\(\\$\\w+\\(\'([^\']+)\'\\)\\);|\\$\\w+=\\$\\w+\\("",\\$\\w+\\("([^"]+)")(?:\\)\\);\\$\\w+\\(\\);)?~msi',
    'id' => 'urldecodeEval',
  ),
  426 => 
  array (
    'full' => '~((?:\\$\\w+=\'[^\']+\';)+)(\\$\\w+)="([^"]+)";\\s*(eval\\(\'\\?>\'\\.(?:\\$\\w+\\()+\\$\\w+,\\$\\w+\\*\\d+\\),\\$\\w+\\(\\$\\w+,\\$\\w+,\\$\\w+\\),\\s*\\$\\w+\\(\\$\\w+,\\d+,\\$\\w+\\)+);~msi',
    'id' => 'strtrEval',
  ),
  427 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"[^"]+";(?:\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+\\s*"\\);\\s*)+\\$\\w+\\s*=\\s*fopen\\([^\\)]+\\)\\s*or\\s*die\\([^\\)]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+;\\s*fwrite\\(\\$\\w+,\\s*\\$\\w+\\);\\s*fclose\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^;]+;\\s*\\$\\w+\\s*=\\s*fopen\\(\\$\\w+,\\s*"w"\\)\\s*or\\s*die\\([^\\)]+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+\\s*"\\);\\s*fwrite\\(\\$\\w+,\\s*\\$\\w+\\);\\s*fclose\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*.*?\\1;\\s*(\\$\\w+)\\s*=\\s*"[^"]+";\\s*[^\\)]+\\);\\s*\\$\\w+\\s*=\\s*"https://api\\.telegram\\.org/bot\\2/sendmessage";\\s*.*?curl_close\\(\\$\\w+\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  428 => 
  array (
    'full' => '~(?:(?:if\\s?\\(file_exists\\("\\w+"\\)\\)\\s?{\\s?}\\s?else\\s?{\\s?)?\\$\\w+\\s?=\\s?fopen\\([\'"][^\'"]+\\.php[\'"],\\s?[\'"]w[\'"]\\);)?\\s?(\\$\\w+)\\s?=\\s?(?:base64_decode\\()?[\'"]([^\'"]+)[\'"]\\)?;\\s?(?:\\$\\w{1,50}\\s?=\\s?fopen\\([\'"][^\'"]+[\'"],\\s?[\'"]\\w[\'"]\\);\\s?)?(?:echo\\s?)?fwrite\\(\\$\\w{1,50}\\s?,\\s?(?:base64_decode\\()?\\$\\w{1,50}\\)?\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?}?~msi',
    'id' => 'funcFile',
  ),
  429 => 
  array (
    'full' => '~(?:\\$\\w+=\'[^\']+\';)*(\\$\\w+)=create_function\\("",base64_decode\\("([^\']+)"\\)\\);\\1\\(\\);~msi',
    'id' => 'createFuncB64',
  ),
  430 => 
  array (
    'full' => '~(\\$\\w+)=(\\d+);(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);(\\$\\w+)="";foreach\\(\\3\\s*as\\s*(\\$\\w+)\\)\\s*if\\s*\\(\\7!=""\\)\\s*\\6\\.=chr\\(\\7\\^\\1\\);\\s*eval\\(\\6\\);~msi',
    'id' => 'chrXor',
  ),
  431 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\1\\s*=((?:\\s*\\w+\\()+\\1\\)+);(\\$\\w+)\\s*=\\s*"[^"]+";\\s*file_put_contents\\(\\4,\\s*\\1\\);include\\(\\4\\);unlink\\(\\4\\);~msi',
    'id' => 'includeFilePutContents',
  ),
  432 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*function\\(\\$\\w+\\s*,\\s*\\$\\w+\\)\\s*\\{\\$\\w+="[^"]+";return\\s*\\$\\w+;\\s*\\};\\s*(\\$\\w+)=(\'([^\']+)\');\\$\\w+\\s*=\\s*function\\s*\\(\\)\\{\\s*\\$\\w+="[^"]+";return\\s*\\$\\w+;\\};\\s*function\\s*\\w+\\(\\$\\w+\\s*\\)\\s*\\{\\$\\w+\\s*=\\s*"[^"]+";\\$\\w+=\\$\\w+\\[[\\d\\s\\+\\-\\/\\*\\(\\)]+\\][^;]+;\\s*(?:\\$\\w+\\.=[^;]+;)+return\\s*\\$\\w+\\(\\$\\w+\\);\\}\\s*function\\s*\\w+\\s*\\(\\$\\w+\\)\\s*\\{\\$\\w+\\s*=[^}]+\\}\\s*\\1=\\w+\\(\\1\\);\\1\\s*=\\s*\\w+\\(\\1\\);\\s*eval\\s*\\(\\$\\w+\\);~msi',
    'id' => 'edoced_46esab_etalfnizg',
  ),
  433 => 
  array (
    'full' => '~function\\s(\\w{1,20})\\((\\$\\w{1,100})\\)\\s?{\\s{0,2}\\2\\s?=\\s?gzinflate\\(@base64_decode\\(\\2\\)\\);\\s{0,2}for\\(\\$\\w{1,10}=0;\\$\\w{1,10}<strlen\\(\\2\\);\\$\\w{1,10}\\+\\+\\)\\s{0,2}{\\s?\\2\\[\\$\\w\\]\\s?=\\s?chr\\(ord\\(\\2\\[\\$\\w\\]\\)-1\\);}\\s{0,2}return \\2;\\s{0,2}}\\s{0,2}define\\(["\']\\w{1,100}[\'"],\\s?[\'"]\\w{1,100}[\'"]\\);eval\\(\\1\\([\'"]([\\d\\w+=\\/]*)["\']\\)\\);~mis',
    'id' => 'gzinflateBase64Decode',
  ),
  434 => 
  array (
    'full' => '~(?:if\\s*\\(\\!defined\\("[^"]+"\\)\\)\\s*define\\("[^"]+",\\s*"[^"]+"\\);\\s*\\$GLOBALS\\[[^\\]]+\\]=explode\\("[^"]+",\\s*"[^"]+"\\);\\s*)+if\\(\\!defined\\(pack\\(\\$GLOBALS\\[[^]]+\\]\\[\\d+\\],\\s*\\$GLOBALS\\[[^]]+\\]\\[\\d+\\]\\)+\\s*define\\(.*pack\\(\\$GLOBALS\\[[^]]+\\]\\[[a-fx\\d]+\\],\\s*\\$GLOBALS\\[[^]]+\\]\\[[a-fx\\d]+\\]\\)+[^;]+;\\s*~msi',
    'id' => 'byteCodeData',
  ),
  435 => 
  array (
    'full' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);\\$GLOBALS\\[\\w+\\]=explode\\("([^"])+",\\s*"[^"]+"\\);if\\(!defined\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)\\s*define\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\),\\s*(?:ord\\(\\d+\\)|pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\))\\);)+\\$GLOBALS\\[\\w+\\]=explode\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\),pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);if\\(!defined\\(\'([^\']+)\'\\)\\)define\\(\'\\2\',__FILE__\\);\\s*\\$GLOBALS\\["(\\w+)"\\]=array\\("([^\\)]+)"\\);eval\\(\\$\\{"[^"]+"\\}\\["\\3"\\]\\[\\d+\\]\\("([^"]+)"\\)\\);if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);\\$GLOBALS\\[\\w+\\]=explode\\("([^"])+",\\s*"[^"]+"\\);if\\(!\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)\\s*\\{exit\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);while\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)require\\s*\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);\\}while\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(\\)<\\([\\w\\+\\-\\*\\/]+\\)\\)\\s*return;~msi',
    'id' => 'OESNS_cms',
  ),
  436 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?base64_decode\\(\\1\\);\\s?if\\s?\\(file_exists\\([\'"][^\'"]+[\'"]\\)\\)\\s?{header\\([\'"][^\'"]+[\'"]\\);\\s?}\\s?else\\s?{\\s?file_put_contents\\([\'"][^\'"]+[\'"],\\s?\\3\\);\\s?}~msi',
    'id' => 'filePutContentsB64Var',
  ),
  437 => 
  array (
    'fast' => '~(?:define\\([\'"][^\'"]+["\'],[\'"]{2}\\);\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\s?return\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(\\$\\w{1,50}\\);\\s?(\\w{1,100})\\(\\$\\w{1,50}\\);\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?[\'"]([^\'"]+)[\'"];\\sreturn\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?global\\s?\\$\\w{1,50};\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\5\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?\\@?eval\\((?:`[^`]+`\\s?\\.\\s?)?\\$\\w{1,50}\\s?\\.\\s?\\$\\w{1,50}\\([\'"]H\\*[\'"],\\s?\\$\\w{1,50}\\)\\.\\$\\w{1,50}\\);\\s?\\}\\s?\\2\\(\\)|function\\s*(\\w+)\\(\\)\\{\\s*\\$\\w+=call_user_func\\("[^"]+","[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*call_user_func\\("\\$\\w+","\\$\\w+"\\);\\s*return\\s*\\$\\w+;\\s*\\}\\s*(\\$\\w+)=\\w+\\(\\);\\s*class\\s*(\\w+)\\s*\\{\\s*public\\s*\\$(\\w+)\\s*=\\s*\'\';\\s*function\\s*__destruct\\(\\)\\{\\s*\\$\\w+=&(\\$\\w+)\\."";\\s*\\$\\w+="\\$this->\\w+";\\s*eval\\([^\\)]+\\);\\s*\\}\\s*\\}\\s*(\\$\\w+)=pack\\(\'H\\*\',\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*new\\s*\\w+;\\s*\\$\\w+->\\w+\\s*=\\s*"\\$\\w+");~msi',
    'full' => '~(?|define\\([\'"][^\'"]+["\'],[\'"]{2}\\);\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\s?return\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(\\$\\w{1,50}\\);\\s?(\\w{1,100})\\(\\$\\w{1,50}\\);\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?[\'"]([^\'"]+)[\'"];\\sreturn\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?global\\s?\\$\\w{1,50};\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\5\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?\\@?eval\\((?:`[^`]+`\\s?\\.\\s?)?\\$\\w{1,50}\\s?\\.\\s?\\$\\w{1,50}\\([\'"]H\\*[\'"],\\s?\\$\\w{1,50}\\)\\.\\$\\w{1,50}\\);\\s?\\}\\s?\\2\\(\\)|function\\s*(\\w+)\\(\\)\\{\\s*\\$\\w+=call_user_func\\("[^"]+","[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*call_user_func\\("\\$\\w+","\\2"\\);\\s*return\\s*\\$\\w+;\\s*\\}\\s*(\\$\\w+)=\\1\\(\\);\\s*class\\s*(\\w+)\\s*\\{\\s*public\\s*\\$(\\w+)\\s*=\\s*\'\';\\s*function\\s*__destruct\\(\\)\\{\\s*\\$\\w+=&(\\$\\w+)\\."";\\s*\\7="\\$this->\\6";\\s*eval\\([^\\)]+\\);\\s*\\}\\s*\\}\\s*(\\$\\w+)=pack\\(\'H\\*\',\\4\\);\\s*(\\$\\w+)\\s*=\\s*new\\s*\\5;\\s*\\9->\\6\\s*=\\s*"\\8");~msi',
    'id' => 'strRot13PackFuncs',
  ),
  438 => 
  array (
    'full' => '~if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);\\s?\\$GLOBALS\\[(\\w{1,50})\\]\\s?=\\s?explode\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?if\\(\\!defined\\(pack\\(\\$GLOBALS\\[\\w{1,50}\\]\\[\\w+\\],\\s?\\$GLOBALS\\[\\w{1,50}\\]{\\d+}\\)\\)\\)\\s?define\\(pack\\(\\$GLOBALS\\[\\w{1,50}\\]\\[\\w+\\],\\s?\\$GLOBALS\\[\\w{1,50}\\]{\\d+}\\),\\s?ord\\(\\d+\\)\\);\\s?if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"]\\s?,\\s?__FILE__\\);\\s?\\$GLOBALS\\[[\'"]([^\'"]+)[\'"]\\]\\s?=\\s?array\\(((?:"[^\'"]+"\\s?,?\\s?)+)\\);\\s?(eval\\(\\$GLOBALS\\["\\4"\\]\\[(\\d+)\\]\\("(.*)"\\)\\);)\\s?if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"]\\s?,\\s?[\'"][^\'"]+[\'"]\\);\\s?\\$GLOBALS\\[(\\w+)\\]\\s?=\\s?explode\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?(?:.*?\\$GLOBALS\\[\\9\\][[{]\\d+[]}])+\\)+;~msi',
    'id' => 'definedGlobalsEval',
  ),
  439 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*(\\$[^=]+)=\'([^\']+)\';((?:\\$[^=]+=(?:\\1\\[\\d+\\]\\.?)+;)+)\\$[^=]+=(?:\\$[^\\(]+\\()+\'\\\\\\\\\',\'/\',__FILE__\\)+;\\$[^=]+=\\$[^\\(]+\\(\\$[^)]+\\);\\$[^=]+=\\$[^;]+;\\$[^=]+=\\$[^\\(]+\\(\'\',\\$[^\\)]+\\)\\.\\$[^\\(]+\\(\\$[^,]+,0,\\$[^\\(]+\\([^,]+,\'@?ev\'\\)\\);(\\$[^=]+)=\\$[^\\(]+\\([^;]+;(?:\\$[^=]+=)+NULL;eval\\((\\$[^\\(]+)\\((\\$[^\\(]+)\\(\\4,\'\',(\\$[^\\(]+)\\(\'([^\']+)\',\'([^\']+)\',\'([^\']+)\'\\)\\)\\)\\);unset\\(\\$[^\\)]+\\);return;\\?>\\s*(.*)~msi',
    'id' => 'evalB64Strtr',
  ),
  440 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*return\\s*base64_decode\\(\\2\\);\\s*\\}\\s*function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\s*\\{\\s*\\4\\s*=\\s*\\1\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*strlen\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*strlen\\(\\$\\w+\\);\\s*if\\s*\\(\\6\\s*\\<=\\s*\\7\\)\\s*\\{\\s*return\\s*\\4\\s*\\^\\s*\\5;\\s*\\}\\s*for\\s*\\((\\$\\w+)\\s*=\\s*0;\\s*\\8\\s*\\<\\s*\\6;\\s*\\+\\+\\8\\)\\s*\\{\\s*\\4\\[\\8\\]\\s*=\\s*\\4\\[\\8\\]\\s*\\^\\s*\\5\\[\\8\\s*\\%\\s*\\7\\];\\s*\\}\\s*return\\s*\\4;\\s*\\}\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*\\3\\(\\9,\\11\\);\\s*eval\\s*\\(\\13\\);~msi',
    'id' => 'evalXorKey',
  ),
  441 => 
  array (
    'fast' => '~(?>((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*))(?>(\\$\\w{1,100})=\'([^\']+)\';\\s*)((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\s*\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\s*eval\\s*\\(\\2\\);+\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*);~msi',
    'full' => '~(?>((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*))(?>(\\$\\w{1,100})=\'([^\']+)\';\\s*)(?1)\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*(?1)\\s*\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*(?1)\\s*eval\\s*\\(\\2\\);+\\s*(?1);~msi',
    'id' => 'evalB64Gzinflate',
  ),
  442 => 
  array (
    'fast' => '~(?:\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)?(?:(\\${"([\\w\\\\]+)"}\\["[\\w\\\\]+"])="[\\w\\\\]+";){2}(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]})=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]};(?:\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]}=\\w{1,5};)?\\(count\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)==\\d+&&in_array\\(gettype\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)\\.count\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\),\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)\\)\\?\\(\\((\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\])=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\.\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\&\\&\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\)\\&\\&\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\],\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\)\\)\\&\\&\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\(\\)\\):\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]};~msi',
    'full' => '~(?:\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)?(?:(\\${"([\\w\\\\]+)"}\\["(?2)"])="(?2)";){2}(\\${(?1)})=(?3);(?:\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]}=\\w{1,5};)?\\(count\\((?3)\\)==\\d+&&in_array\\(gettype\\((?3)\\)\\.count\\((?3)\\),(?3)\\)\\)\\?\\(\\(((?3)\\[\\d+\\])=(?4)\\.(?4)\\)\\&\\&\\((?4)=(?4)\\((?4)\\)\\)\\&\\&\\((?3)=(?4)\\((?4),(?4)\\((?4)\\)\\)\\)\\&\\&(?3)\\(\\)\\):(?3);~msi',
    'id' => 'onelineBackdoor',
  ),
  443 => 
  array (
    'fast' => '~(?:\\$\\w+\\s*=\\s*\'[urldeco]+\';)+\\s*(?:(\\$\\w+)=(?:\\$\\w+\\.?)+;)?(\\$\\w+)\\s*=\\s*\\1\\([\'"]([%0-9a-f]+)[\'"]\\);\\s*(((\\$\\w+)\\s*\\.?=(\\s*\\$\\w+\\{\\d+\\}\\.?)+;\\s*)+)\\s*eval\\(\\6\\("([^"]+)"\\)\\);~msi',
    'full' => '~(?:\\=@null;)?(?:\\$\\w+\\s*=\\s*\'[urldeco]+\';)+\\s*(?:(\\$\\w+)=(?:\\$\\w+\\.?)+;)?(\\$\\w+)\\s*=\\s*\\1\\([\'"]([%0-9a-f]+)[\'"]\\);\\s*(((\\$\\w+)\\s*\\.?=(\\s*\\$\\w+\\{\\d+\\}\\.?)+;\\s*)+)\\s*(eval\\(\\6\\("([^"]+)"\\)\\);)~msi',
    'id' => 'urlDecodeDict',
  ),
  444 => 
  array (
    'full' => '~class\\s*lutucope\\s*\\{\\s*(var\\s*\\$(\\w+)\\s*=\\s*"([^"]+)";\\s*)(var\\s*\\$(\\w+)\\s*=\\s*array\\(([^\\)]+)\\);\\s*)(public\\s*\\$(\\w+)\\s*=\\s*array\\("([^\\)]+)"\\);\\s*)public\\s*\\$(\\w+)\\s*=\\s*false;\\s*public\\s*\\$(\\w+)\\s*=\\s*false;\\s*public\\s*\\$(\\w+)\\s*=\\s*false;\\s*var\\s*\\$\\w+\\s*=\\s*null;\\s*var\\s*\\$\\w+\\s*=\\s*null;\\s*(var\\s*\\$(\\w+)\\s*=\\s*"([^"]+)";\\s*)(var\\s*\\$\\w+\\s*=\\s*"([^"]+)";).*?\\11\\s*=\\s*\\$\\w+;\\s*return\\s*true;.*?\\11\\)\\s*\\{\\s*@?eval\\(\\$\\w+\\-\\>\\11\\);.*?\\11\\s*\\)\\s*\\{\\s*@?eval\\(\\$\\w+\\-\\>\\11\\);\\s*\\}\\s*else\\s*\\{\\s*@eval\\(\\$\\w+\\-\\>\\10\\);\\s*\\}\\s*\\}~msi',
    'id' => 'wpMlwPluginGegelShell',
  ),
  445 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s?\\@include\\s?(?:\\1\\[\\d{1,5}\\]\\.?)+;~msi',
    'id' => 'dictVarRange',
  ),
  446 => 
  array (
    'fast' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);(\\$GLOBALS\\[\\w+\\])=explode\\(\'([^"])+\',\\s*\'[^\']+\'\\);)+if\\(!defined\\((pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\))\\)\\)(call_user_func\\(pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\),pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\),pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\)\\);).*?call_user_func_array\\(\'explode\',.*?call_user_func_array\\("pack",.*?call_user_func_array\\("is_object",.*?array_merge\\(array\\(\\$\\w+\\),\\$GLOBALS\\[[^}]+}[^}]+}~msi',
    'full' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);(\\$GLOBALS\\[\\w+\\])=explode\\(\'([^"])+\',\\s*\'[^\']+\'\\);)+if\\(!defined\\((pack\\(((?1)\\[[\\w]+\\]),\\s*(?4)\\))\\)\\)(call_user_func\\((?3),(?3),(?3)\\);).*?call_user_func_array\\(\'explode\',.*?call_user_func_array\\("pack",.*?call_user_func_array\\("is_object",.*?array_merge\\(array\\(\\$\\w+\\),\\$GLOBALS\\[[^}]+}[^}]+}~msi',
    'id' => 'thinkPHP_cms',
  ),
  447 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?function\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][base64_decode]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\2\\)\\s?;\\s?}\\s?;.*?(\\$\\w{1,50})\\s?=\\s?function\\s?\\(\\s?\\$\\w{1,50}\\s?\\)\\s?{\\s?eval\\s?\\(\\$\\w{1,50}\\);[^}]+}\\s?;\\s?.*?function\\s(\\w{1,50})\\s?\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][gzinflate]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\5\\);\\s?}\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\$\\w{1,50}\\s?=\\s?\\1\\(\\6\\);\\s?\\6\\s?=\\s?\\4\\(\\6\\);\\s?\\3\\s?\\(\\6\\);+~msi',
    'id' => 'varFuncsCallEvalV1',
  ),
  448 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?function\\s?\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][base64_decode]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\4\\)\\s?;\\s?}\\s?;.*?\\1\\s?=\\s?\\3\\(\\1\\);\\s?\\1\\s?=\\s?(\\w+)\\(\\1\\);\\s?(\\w+)\\s?\\(\\1\\);.*?function\\s\\6\\s?\\(\\$\\w{1,50}\\s?\\)\\s?{\\s?eval\\s?\\(\\$\\w{1,50}\\);\\s?return\\s?[^;]+;\\s?}\\s?function\\s?\\5\\((\\$\\w{1,50})\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][gzinflate]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\7\\);\\s?}\\s?;~msi',
    'id' => 'varFuncsCallEvalV2',
  ),
  449 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"(\\\\[x\\d][^"]+)";\\s?((?:\\$\\w{1,50}\\s?=(?:\\s?\\1\\[[\\d\\s/+\\-*()]+\\]\\s?\\.?)+;\\s?)+)(\\$\\w{1,50})\\s?=\\s?"(\\\\[x\\d][^"]+)";\\s?((?:(\\$\\w{1,50})\\s?\\.?=\\s?\\$\\w{1,50};\\s)+)\\@?\\(\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s?\\7\\)\\);\\s?\\@?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'dictStrippedVarsCreateFunc',
  ),
  450 => 
  array (
    'full' => '~\\$GLOBALS\\[\'[^\']+\'\\]=\'[^\']+\';((\\$\\w+)="([^"]+)";(\\$\\w+)=substr\\(\\2,\\s*\\2\\[(\\d+)\\],\\s*\\2\\[(\\d+)\\]\\);(\\$\\w+)=substr\\(\\2,\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\],\\2\\[(\\d+)\\]\\);\\s*(\\$\\w+)=substr\\(\\2,\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\]\\);)\\s*(define\\(\'([^\']+)\',\'[^\']+\'\\);\\$_SERVER\\[\\16\\]=\\4\\(\'([^\']+)\',\\7\\(substr\\(\\11\\(\'([^\']+)\'\\),(0x\\w+),\\s*(\\-\\d+)\\)+;).+?((.+?\\$_SERVER\\[\\16\\]\\[[0-9a-fx]+\\]).+?)+[^}]+\\}\\}\\}[^}]+\\}return\\s*\\$\\w+;\\}~msi',
    'id' => 'dictFuncsSubstr',
  ),
  451 => 
  array (
    'full' => '~error_reporting\\(0\\);@?set_time_limit\\(0\\);ini_set\\(\'memory_limit\',\\s*\'-?\\d+\'\\);(\\$\\w+)\\s*=\\s*\'[^\']+\';(\\$\\w+)\\s*=\\s*array\\(([^\\)])+\\);function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\5\\)\\);\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\s*\\([^{]+\\{\\s*\\$\\w+\\s*\\.=\\s*pack\\("C",\\s*hexdec\\(substr\\(\\5,\\s*\\$\\w+,\\s*2\\)\\)\\);\\s*\\}\\s*return\\s*\\$\\w+;\\}if\\s*\\((?:md5\\()+\\$_SERVER\\[\'[^\']+\'\\]\\)+\\s*\\!==\\s*\\1\\)\\s*\\{\\s*header\\(\'HTTP/1\\.1 404 Not Found\'\\);\\s*header\\("status: 404 Not Found"\\);\\s*exit\\(\\);\\}((\\$\\w+)\\s*=\\s*\'\\4\';(?:\\$\\w+\\s*=\\s*\\7\\(\'[^\']+\'\\);\\s*|\\$\\w+\\s*=\\s*"";)+if\\s*\\(!function_exists\\(\\$\\w+\\)\\)\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+,[^}]+\\}\\s*do\\s*\\{[^}]+\\}\\s*while\\s*[^}]+\\}\\}\\s*else\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+;\\s*return\\s*\\$\\w+\\(\\$\\w+\\);\\s*\\}\\}if\\s*\\(!function_exists\\(\\$\\w+\\)\\)\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+,[^}]+\\}\\s*[^}]+\\}[^}]+\\}\\s*while\\s*\\([^}]+\\}\\}\\s*else\\s*\\{\\s*function\\s*\\w+\\([^}]+\\}\\}(\\$\\w+)\\s*=\\s*\\7\\(\'[^\']+\'\\);(\\$\\w+)\\s*=\\s*@?\\8\\(\'([^\']+)\',\\s*\\$\\w+\\.\'\\(\'\\.\\$\\w+\\.(?:\'[^\')]*\'\\.)+\'\\(\\10\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\9\\(\'([^\']+)\'\\);)~msi',
    'id' => 'gulf2',
  ),
  452 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s*(?:(\\$\\w+)=\\$\\{(?:\\1\\[\\d+\\]\\.?)+\\};)+(?:if\\(in_array\\(gettype\\(\\4\\)\\."\\d+",\\4\\)\\)\\{\\4\\[(\\d+)\\]=(?:\\4\\[\\d+\\]\\.?)+;\\4\\[(\\d+)\\]=\\4\\[\\5\\]\\(\\4\\[\\6\\]\\);@?\\4=\\4\\[\\6\\]\\(\\4\\[\\d+\\],\\4\\[\\5\\]\\(\\$\\{\\4\\[\\d+\\]\\}\\[\\d+\\]\\)\\);\\4\\(\\);\\}|@?\\(count\\(\\4\\)==\\d+&&in_array\\(gettype\\(\\4\\)\\.count\\(\\4\\),\\4\\)\\)\\?\\(\\(\\4\\[\\d+\\]=(?:\\4\\[\\d+\\]\\.?)+\\)&&\\(\\4\\[\\d+\\]=\\4\\[\\d+\\]\\(\\4\\[\\d+\\]\\)\\)&&\\(@?\\4=\\4\\[\\d+\\]\\(\\4\\[\\d+\\],\\4\\[\\d+\\]\\(\\$\\{\\4\\[\\d+\\]\\}\\[\\d+\\]\\)\\)\\)&&\\4\\(\\)\\):\\4;\\s*)\\s*(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);(\\$\\w+)\\s*=\\s*array\\((@?\\$\\{(?:\\7\\[\\d+\\]\\.?)+\\}\\[(?:\\7\\[\\d+\\]\\.?)+\\],\\s*(?:(?:\\7\\[\\d+\\]\\.?)+,?\\s*)+@?\\$\\{(?:\\7\\[\\d+\\]\\.?)+\\}\\[(?:\\7\\[\\d+\\]\\.?)+\\]),\\);\\s*(\\$\\w+\\s*=\\s*\\10\\[\\d+\\][^}]+\\})~msi',
    'id' => 'dictVarRange2',
  ),
  453 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s*(\\$\\w+)=(?:\\1\\[\\d+\\]\\.?)+;\\s*(\\$\\w+)=@?\\4\\((?:\\1\\[\\d+\\]\\.?)+,(?:\\1\\[\\d+\\]\\.?)+\\);@?\\5\\("([^"]+)"\\);~msi',
    'id' => 'dictVarRange2',
  ),
  454 => 
  array (
    'fast' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$\\w+\\s*=\\s*"\\w+";\\s*error_reporting\\([^\\)]+\\);\\s*set_time_limit\\(\\d+\\);\\s*\\$\\w+\\s*=\\s*\\d+;\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";.*?\\3,\\s*base64_decode\\(\\1\\),\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^}]+}~msi',
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$\\w+\\s*=\\s*"\\w+";\\s*error_reporting\\([^\\)]+\\);\\s*set_time_limit\\(\\d+\\);\\s*\\$\\w+\\s*=\\s*\\d+;\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";.*?\\3,\\s*base64_decode\\(\\1\\),\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^}]+}~msi',
    'id' => 'fileInjector',
  ),
  455 => 
  array (
    'full' => '~((?:(?>(?:\\$\\s?\\{\\s?)?\\$\\w{1,50}\\s?\\}?\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)|(?>\\$\\s?{\\s?(?:\\$\\s?\\{)?\\s?"GLOBALS"\\s?}\\s?\\[[\'"][^\'"]+[\'"]\\]\\s?}?\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)|(?>echo\\s?"[^"]*";\\s?))+(?:\\${\\${[\'"]GLOBALS[\'"]}\\[[\'"][^\'"]+[\'"]\\]}\\s?=\\s?(?:\\$\\w{1,50}\\s?\\.?\\s?|\\${\\${[\'"]GLOBALS[\'"]}\\[[\'"][^\'"]+[\'"]\\]}\\s?\\.?\\s?)+;\\s?)*)eval\\((?:(?:(?:\\$\\s?\\{\\s?\\$\\w+\\s?\\}\\s?\\()?\\$\\s?{\\s?\\$\\s?{\\s?[\'"]GLOBALS[\'"]\\s?}\\s?\\[\\s?[\'"][^\'"]+[\'"]\\s?\\]\\s?}\\s?\\()+(?:[\'"][^\'"]+[\'"]|\\(\\$\\s?\\{\\s?\\$\\s?\\{\\s?"GLOBALS"\\s?\\}\\s?\\["[^"]+"\\]\\s?\\})\\)+\\));~msi',
    'id' => 'globalsEvalFuncs',
  ),
  456 => 
  array (
    'fast' => '~(\\$[^\\s=\\[\\]]+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?([\\w\\W][^\\s(]+)\\(\\1\\);\\s?function\\s\\3\\((\\$[^\\s)]+)\\)\\s?{\\s?(\\$[^\\s)]+)\\s?=\\s?[\'"base64dco_.]+;\\s?(\\$[^\\s)]+)\\s?=\\s?array\\(((?:(?:[\'"][\\w\\+@()#_%\\$*;][\'"]\\s?,?|\\5\\([\'"][^\'"]+[\'"]\\),?)+))\\);\\s?((?:(?:\\$[^\\s)]+)\\s?=\\s?(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?)+)\\s?(\\$[^\\s)]+)\\s?=\\s?((?:\\$[^.]+\\.?)+)\'\\4\'\\.(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?return\\seval\\(\\9\\);\\s?(?:error_reporting\\(\\d\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?NULL\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?\\d\\);\\s?})?~msi',
    'full' => '~(\\$[^\\s=\\[\\]]+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?([\\w\\W][^\\s(]+)\\(\\1\\);\\s?function\\s\\3\\((\\$[^\\s)]+)\\)\\s?{\\s?(\\$[^\\s)]+)\\s?=\\s?[\'"base64dco_.]+;\\s?(\\$[^\\s)]+)\\s?=\\s?array\\(((?:(?|[\'"][\\w\\+@()#_%\\$*;][\'"]\\s?,?|\\5\\([\'"][^\'"]+[\'"]\\),?)+))\\);\\s?((?:(?:\\$[^\\s)]+)\\s?=\\s?(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?)+)\\s?(\\$[^\\s)]+)\\s?=\\s?((?:\\$[^.]+\\.?)+)\'\\4\'\\.(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?return\\seval\\(\\9\\);\\s?(?:error_reporting\\(\\d\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?NULL\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?\\d\\);\\s?})?~msi',
    'id' => 'arrayDictCharsConcatStr',
  ),
  457 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"(\\\\[\\\\\\w]+)";\\s?((?:\\$\\w{1,50}\\s?=\\s?substr\\(\\1,\\s?(?:\\1\\[\\d+\\]\\+?\\s?)+(?:,\\s?\\1\\[\\d+\\])?\\);)+)define\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);(\\$\\w{1,50}\\[\\w{1,50}\\])\\s?=\\s?(\\$\\w{1,50})\\([\'"]([^"\']+)[\'"],\\s?(\\$\\w{1,50})\\(substr\\((\\$\\w{1,50})\\([\'"]([^\'"]+)[\'"]\\)\\s?,([\\d\\w]+)\\s?,\\s?(-?\\d{1,5})\\)+;\\s*((?:.*?\\4\\[[\\dx]+\\])+[^;}]+[;}]*)~msi',
    'id' => 'slashedDictFuncGetVar',
  ),
  458 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?=\\s?[\'"][^\\\\\'"]+[\'"];\\s?)+)(\\$\\w{1,50})\\s?=\\s?"([\\\\\\w]+)";\\s?\\2\\s?\\.?=\\s?"([\\\\\\w]+)";\\s?(\\$\\w{1,50})\\s?=\\s?((?:\\$\\w{1,50}\\.?)+);\\s?for\\((\\$\\w{1,50})=(\\d+);\\7<=(\\d+);\\7\\+\\+\\)\\s?\\5\\s?=\\s?\\2\\(\\5\\);\\s?eval\\(\\5\\);~msi',
    'id' => 'concatVarsInLoopEval',
  ),
  459 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+[\'"]{2};\\s?foreach\\(\\2\\sas\\s(\\$\\w{1,50})\\)\\s?{\\s?\\5[\\s.=]+\\3\\[\\6\\];\\s?}\\s?return\\s\\5;\\s?}\\s?function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})[\\s=]+array\\(((?:\\d+,?)+)\\);\\s?(\\$\\w{1,50})[\\s=]+\\1\\(\\10\\);\\s?(\\$\\w{1,50})[\\s=]+\\12\\(\\13\\);\\s?(\\$\\w{1,50})[\\s=]+array\\(((?:\\d+,?)+)\\);\\s?(\\$\\w{1,50})[\\s=]+\\1\\(\\14\\);\\s?(\\$\\w{1,50})[\\s=]+\\16\\(\\13\\);\\s?(\\$\\w{1,50})[\\s=]+\\16\\(\\9\\);\\s?if\\s?\\(\\17\\s<=\\s\\18\\)\\s?{\\s?return\\s\\13\\s\\^\\s\\9;\\s?}\\s?for\\s?\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\19\\s<\\s\\17;\\s?\\+\\+\\19\\)\\s?{\\s?\\13\\[\\19\\]\\s?=\\s?\\13\\[\\19\\]\\s?\\^\\s?\\9\\[\\19\\s%\\s?\\18\\];\\s?}\\s?return\\s\\13;\\s?}\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+\\7\\(\\20,\\s?\\22\\);\\s?eval\\s?\\(\\24\\);~msi',
    'id' => 'twoFuncStrDecodeVars',
  ),
  460 => 
  array (
    'full' => '~(\\$\\w{1,50})[=\\s]+range\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?(\\$\\w{1,50})[=\\s]+\\$({(?:\\1\\[\\d+\\][\\s\\.]*)+});\\s?(if\\s?(?:.*?\\4\\[\\d+\\])+[^;]+;})class(\\w+){static\\s?function(\\w+)\\((\\$\\w{1,50}),(\\$\\w{1,50})\\s?=\\d+\\){\\$\\w{1,50}[\\s=]+range\\([\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\\);\\$\\w{1,50}[\\s=]+explode\\([\'"]([^\'"]+)[\'"],\\9\\);\\s?foreach\\(\\$\\w{1,50}\\sas\\s\\$\\w{1,50}=>\\$\\w{1,50}\\)\\$\\w{1,50}\\.=\\$\\w{1,50}\\[\\$\\w{1,50}-\\$\\w{1,50}\\];\\s?return\\s\\$\\w{1,50};}\\s?static\\s?function\\s?(\\w+)\\(.*?curl_exec\\(\\$\\w{1,50}\\);\\s?return\\s[^;]+;}\\s?static\\s?function\\s?(\\w+)\\(\\){\\$\\w{1,50}\\s?=\\s?new\\s?self\\(\\);((\\$\\w{1,50})\\s?=\\s?array\\(([^)]+)\\);foreach\\(\\17\\sas\\s\\$\\w{1,50}\\)(\\$\\w{1,50})\\[\\]\\s?=\\s?\\$\\w{1,50}->\\8\\(\\$\\w{1,50}\\);)((?:.*?\\19\\[\\d+\\])+)[^}]+}+\\7::\\15\\(\\);~msi',
    'id' => 'classArrayFuncReplaces',
  ),
  461 => 
  array (
    'full' => '~(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+\\$\\w+\\s*=\\s*"[^"]+";\\s*\\$\\w+\\s*=\\s*file_get_contents\\("php://input"\\);\\s*(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+if\\s*\\(substr\\([^\\)]+\\)\\s*==\\s*"[^"]+"\\)\\s*\\{\\s*(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\s*=\\s*gzinflate\\(substr\\([^\\)]+\\)+;\\s*@?\\(\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\s=\\s*\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\);\\s*try\\s*\\{\\s*eval\\([^\\)]+\\);\\s*\\}\\s*catch[^}]+\\}\\s*\\}~msi',
    'id' => 'onelineBackdoor',
  ),
  462 => 
  array (
    'full' => '~(function ([a-z]{1,20})\\((\\$\\w{1,20})\\){\\s*(\\$\\w{1,20})\\s?=\\s?["\'](\\w{1,100})["\'];\\s*(\\$\\w{1,20})\\s?=\\s?["\']["\'];\\s*foreach\\(\\3\\s?as\\s?(\\$\\w{1,20})\\){\\s*\\6\\s?.=\\s?\\4\\[\\7\\];\\s*}\\s*return\\s\\6;\\s*})\\s*function \\w{1,20}\\(\\){\\s*if\\s?\\(isset\\(\\$_GET\\[\'\\w{1,100}\'\\]\\)\\){\\s*[^}]{1,200}}\\s*}\\s*add_action\\([^)]{1,100}\\);\\s*function \\w{1,20}\\([^)]{1,50}\\){(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,20}if\\s?\\([^)]{1,50}\\)\\s?{[^}]{1,200}}\\s*for\\s?\\([^)]{1,100}\\)\\s?{[^}]{1,100}}\\s*return \\$\\w{1,20};\\s*}\\s*function\\s\\w{1,20}\\(\\){\\s*\\$\\w{1,20}\\s?=\\s?["\']\\w{1,20}["\'];\\s*(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,10}if\\s\\(isset\\([^)]{1,30}\\)\\){(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,20}(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$\\w{1,20}\\[\\d{1,20}\\];\\s*){1,10}if\\([^)]{1,30}\\){\\s*if\\([^)]{1,50}\\){\\s*[^;]{1,100};\\s*}else{\\s*[^;]{1,100};\\s*}\\s*if\\(\\$\\w{1,20}\\([^)]{1,30}\\)\\){\\s*[^;]{1,100};\\s*}\\s*[^;]{1,100};\\s*}\\s*(?:\\$[^;]{1,100};)\\s*(?:\\s*curl_setopt\\([^)]{1,150}\\);\\s*){1,10}\\s*(?:\\$[^;]{1,100};){1,10}\\s*curl_close\\(\\$\\w{1,20}\\);\\s*if\\s?\\([^)]{1,30}\\)\\s?{\\s*if\\([^)]{1,50}\\){\\s*if\\(\\$\\w{1,20}\\([^)]{1,50}\\)\\){[^}]{1,100}}\\s*\\$[^;]{1,100};\\s*}else{\\s*if\\(\\$\\w{1,20}\\(\\$\\w{1,20}\\)\\){\\s*\\$[^;]{1,100};\\s*}\\s*\\$[^;]{1,100};\\s*}\\s*if\\([^)]{1,50}\\){[^}]{1,100}}\\s*}\\s*}\\s*}\\s*add_action\\(\'init\',\\s?\'\\w{1,30}\'\\);~mis',
    'id' => 'oneFuncStrDecodeVars',
  ),
  463 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)+(?:file_put_contents\\(\\$\\w+,\\s*file_get_contents\\(\\$\\w+\\)\\);\\s*)+\\$\\w+\\s*=\\s*filemtime\\(\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+"\\);\\s*(?:(?:touch\\(\\$\\w+,\\s*\\$\\w+\\);\\s*)+@?chmod\\(\\$\\w+,\\s*\\d+\\);\\s*)+\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)+(?:file_put_contents\\(\\$\\w+,\\s*str_replace\\("function[^"]+",\\s*\\$\\w+\\s*\\.\\s*"function[^"]+",\\s*file_get_contents\\(\\$\\w+\\)+;\\s*(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)?)+(?:touch\\(\\$\\w+,\\s*\\$\\w+\\);\\s*)+\\$\\w+\\s*=\\s*__FILE__;\\s*\\$\\w+\\s*=\\s*realpath\\(dirname\\(\\$\\w+\\)+;\\s*(?:\\$\\w+\\s*=\\s*str_replace\\([^\\)]+\\);\\s*)+~mis',
    'id' => 'manyBase64DecodeContent',
  ),
  464 => 
  array (
    'full' => '~((<script[^>]*>)\\s*.{0,800}?)?(eval\\()?String\\.fromCharCode\\(([\\d,\\s]+)\\)(?(3)\\);+|)((?(2)\\s*.{0,800}?</script>|))~msi',
    'fast' => '~String\\.fromCharCode\\([\\d,\\s]+\\)~msi',
    'id' => 'JS_fromCharCode',
  ),
  465 => 
  array (
    'full' => '~(?:eval\\()?unescape\\(\'([^\']+)\'\\)\\);\\s{0,50}eval\\(unescape\\(\'([^\']+)\'\\)\\s{0,50}\\+\\s{0,50}\'([^\']+)\'\\s{0,50}\\+\\s{0,50}unescape\\(\'[^\']+\'\\)\\);~msi',
    'fast' => '~unescape\\(\'([^\']+)\'\\)\\);\\s{0,50}eval\\(unescape\\(\'([^\']+)\'\\)\\s{0,50}\\+\\s{0,50}\'([^\']+)\'\\s{0,50}\\+\\s{0,50}unescape\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'JS_unescapeContentFuncWrapped',
  ),
  466 => 
  array (
    'full' => '~var\\s*(\\w+)=\\s*\\[((?:\'[^\']+\',?)+)\\];\\(function\\(\\w+,\\w+\\)\\{var\\s*\\w+=function\\(\\w+\\)\\{while\\(--\\w+\\)\\{\\w+\\[\'push\'\\]\\(\\w+\\[\'shift\'\\]\\(\\)\\);\\}\\};.*?\\(\\1,(0x\\w+)\\)\\);var\\s*(\\w+)=function\\s*\\((\\w+),(\\w+)\\)\\s*\\{\\5=\\5-0x\\d+;var\\s*\\w+=\\w+\\[\\5\\];if\\(\\4\\[\'\\w+\']===undefined\\)\\{\\(function\\(\\)\\{var\\s*(\\w+);try\\{var\\s*(\\w+)=Function\\(\'[^;]++;\'\\);\\7=\\8\\(\\);\\}catch\\(\\w+\\)\\{\\7=window;\\}var\\s*\\w+=\'[^\']+\';\\7\\[\'atob\'\\]\\|\\|\\(\\7\\[\'atob\'\\]=function\\(\\w+\\)\\{[^}]+\\}return\\s*\\w+;\\}\\);\\}\\(\\)\\);var\\s*\\w+=function\\(\\w+,\\w+\\)\\{var\\s*\\w+=.+?String\\[\'fromCharCode\'\\].+?return\\s*\\w+;\\};\\4\\[\'\\w+\'\\]=\\w+;\\4\\[\'\\w+\'\\]=\\{\\};\\4\\[\'\\w+\'\\]=!!\\[\\];\\}var\\s*\\w+=\\4\\[\'\\w+\'\\]\\[\\w+\\];.+?((.+?\\4\\(\'0x\\d+\',\'[^\']+\'\\)).+?)+[^\\s]+~msi',
    'fast' => '~var\\s*(\\w+)=\\s*\\[((?:\'[^\']+\',?)+)\\];\\(function\\(\\w+,\\w+\\)\\{var\\s*\\w+=function\\(\\w+\\)\\{while\\(--\\w+\\)\\{\\w+\\[\'push\'\\]\\(\\w+\\[\'shift\'\\]\\(\\)\\);\\}\\};.*?var\\s*(\\w+)=function\\s*\\((\\w+),(\\w+)\\)\\s*\\{\\4=\\4-0x\\d+;var\\s*\\w+=\\w+\\[\\4\\];if\\(\\3\\[\'\\w+\']===undefined\\)\\{\\(function\\(\\)\\{var\\s*(\\w+);try\\{var\\s*(\\w+)=Function\\(\'[^;]++;\'\\);\\6=\\7\\(\\);\\}catch\\(\\w+\\)\\{\\6=window;\\}var\\s*\\w+=\'[^\']+\';\\6\\[\'atob\'\\]\\|\\|\\(\\6\\[\'atob\'\\]=function\\(\\w+\\)\\{[^}]+\\}return\\s*\\w+;\\}\\);\\}\\(\\)\\);var\\s*\\w+=function\\(\\w+,\\w+\\)\\{var\\s*\\w+=.+?String\\[\'fromCharCode\'\\].+?return\\s*\\w+;\\};\\3\\[\'\\w+\'\\]=\\w+;\\3\\[\'\\w+\'\\]=\\{\\};\\3\\[\'\\w+\'\\]=!!\\[\\];\\}var\\s*\\w+=\\3\\[\'\\w+\'\\]\\[\\w+\\];.+?((.+?\\3\\(\'0x\\d+\',\'[^\']+\'\\)).+?)+[^\\s]+~msi',
    'id' => 'JS_ObfuscatorIO',
  ),
  467 => 
  array (
    'full' => '~<script\\s(?:language|type)=[\'"]?(?:text/)?javascript[\'"]?>\\s*(?:(?:<!--.*?-->)?\\s?<!--\\s*)?document\\.write\\((unescape|atob)?\\(?[\'"]([^\'"]+)[\'"]\\)\\)?;?(?:\\s*//-->)?(?:(\\w+)\\(\'([^\']+)\'\\))?\\s*</script>~msi',
    'id' => 'JS_documentWriteUnescapedStr',
  ),
  468 => 
  array (
    'full' => '~eval\\(function\\(p,a,c,k,e,(?:d|r)\\)\\{.*?}\\(\'(.*)\', *(\\d+), *(\\d+), *\'(.*?)\'\\.split\\(\'\\|\'\\),\\d,\\{\\}\\)\\);~msi',
    'id' => 'JS_deanPacker',
  ),
  469 => 
  array (
    'fast' => '~\\(function\\s*\\(\\$,\\s*document\\)\\s*({(.*?:var\\s*\\w+=document;break;}}}))\\)\\(\\(function\\s*\\((\\w),\\s*(\\w)\\)\\s*\\{\\s*function\\s*(\\w)\\((\\w+)\\)\\s*\\{\\s*return\\s*Number\\(\\6\\)\\.toString\\(36\\)\\.replace\\(/\\[0\\-9\\]/g,\\s*function\\s*\\((\\w)\\)\\s*\\{\\s*return\\s*String\\.fromCharCode\\(parseInt\\(\\7,\\s*10\\)\\s*\\+\\s*65\\);\\s*\\}\\s*\\);\\s*\\}\\s*var\\s*\\w+\\s*=\\s*\\{\\s*\\$:\\s*function\\s*\\(\\)\\s*\\{\\s*var\\s*\\w+\\s*=\\s*\\{\\};\\s*[^}]+\\}\\s*return\\s*\\w;\\s*\\}\\s*\\};\\s*\\3\\s*=\\s*\\3\\.split\\(\'\\+\'\\);\\s*for\\s*\\(var\\s*\\w\\s*=\\s*0;\\s*\\w\\s*<\\s*(\\d+);\\s*\\w\\+\\+\\)\\s*\\{\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*Object\\.defineProperty\\(\\w,\\s*\\5\\(\\w\\),\\s*\\{\\s*get:\\s*function\\s*\\(\\)\\s*\\{\\s*return\\s*\\w\\[\\w\\]\\[0\\]\\s*\\!==\\s*\';\'\\s*\\?\\s*\\4\\(\\w\\[\\w\\]\\)\\s*:\\s*parseFloat\\(\\w\\[\\w\\]\\.slice\\(1\\),\\s*10\\);\\s*\\}\\s*\\}\\);\\s*\\}\\(\\w\\)\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\(\'([^\']+)\',\\s*function\\s*\\(\\w\\)\\s*\\{\\s*for\\s*\\(var\\s*(\\w)\\s*=\\s*\'([^\']+)\',\\s*(\\w)\\s*=\\s*\\[([^\\]]+)\\],\\s*\\w\\s*=\\s*\'\'[^{]+\\{\\s*var\\s*(\\w)\\s*=\\s*\\10\\.indexOf\\(\\w\\[\\w\\]\\);\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*>\\s*\\-1\\s*&&\\s*0\\s*===\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*&&\\s*\\(\\w\\s*=\\s*0\\),\\s*\\14\\s*>\\s*-1\\s*&&\\s*\\(\\w\\s*\\+=\\s*String\\.fromCharCode\\(\\w\\s*\\*\\s*\\10\\.length\\s*\\+\\s*\\14\\),\\s*\\w\\s*=\\s*1\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\)\\),\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*var\\s*_\\s*=\\s*{};\\s*for\\s*\\(\\w\\s*in\\s*\\w\\)\\s*\\{\\s*try\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\]\\.bind\\(\\w\\);\\s*\\}\\s*catch\\s*\\(\\w\\)\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\];\\s*\\}\\s*\\}\\s*return\\s*_;\\s*\\}\\)\\(document\\)\\)~msi',
    'full' => '~\\(function\\s*\\(\\$,\\s*document\\)\\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\\)\\(\\(function\\s*\\((\\w),\\s*(\\w)\\)\\s*\\{\\s*function\\s*(\\w)\\((\\w+)\\)\\s*\\{\\s*return\\s*Number\\(\\6\\)\\.toString\\(36\\)\\.replace\\(/\\[0\\-9\\]/g,\\s*function\\s*\\((\\w)\\)\\s*\\{\\s*return\\s*String\\.fromCharCode\\(parseInt\\(\\7,\\s*10\\)\\s*\\+\\s*65\\);\\s*\\}\\s*\\);\\s*\\}\\s*var\\s*\\w+\\s*=\\s*\\{\\s*\\$:\\s*function\\s*\\(\\)\\s*\\{\\s*var\\s*\\w+\\s*=\\s*\\{\\};\\s*[^}]+\\}\\s*return\\s*\\w;\\s*\\}\\s*\\};\\s*\\3\\s*=\\s*\\3\\.split\\(\'\\+\'\\);\\s*for\\s*\\(var\\s*\\w\\s*=\\s*0;\\s*\\w\\s*<\\s*(\\d+);\\s*\\w\\+\\+\\)\\s*\\{\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*Object\\.defineProperty\\(\\w,\\s*\\5\\(\\w\\),\\s*\\{\\s*get:\\s*function\\s*\\(\\)\\s*\\{\\s*return\\s*\\w\\[\\w\\]\\[0\\]\\s*\\!==\\s*\';\'\\s*\\?\\s*\\4\\(\\w\\[\\w\\]\\)\\s*:\\s*parseFloat\\(\\w\\[\\w\\]\\.slice\\(1\\),\\s*10\\);\\s*\\}\\s*\\}\\);\\s*\\}\\(\\w\\)\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\(\'([^\']+)\',\\s*function\\s*\\(\\w\\)\\s*\\{\\s*for\\s*\\(var\\s*(\\w)\\s*=\\s*\'([^\']+)\',\\s*(\\w)\\s*=\\s*\\[([^\\]]+)\\],\\s*\\w\\s*=\\s*\'\'[^{]+\\{\\s*var\\s*(\\w)\\s*=\\s*\\10\\.indexOf\\(\\w\\[\\w\\]\\);\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*>\\s*\\-1\\s*&&\\s*0\\s*===\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*&&\\s*\\(\\w\\s*=\\s*0\\),\\s*\\14\\s*>\\s*-1\\s*&&\\s*\\(\\w\\s*\\+=\\s*String\\.fromCharCode\\(\\w\\s*\\*\\s*\\10\\.length\\s*\\+\\s*\\14\\),\\s*\\w\\s*=\\s*1\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\)\\),\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*var\\s*_\\s*=\\s*{};\\s*for\\s*\\(\\w\\s*in\\s*\\w\\)\\s*\\{\\s*try\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\]\\.bind\\(\\w\\);\\s*\\}\\s*catch\\s*\\(\\w\\)\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\];\\s*\\}\\s*\\}\\s*return\\s*_;\\s*\\}\\)\\(document\\)\\)~msi',
    'id' => 'JS_objectDecode',
  ),
  470 => 
  array (
    'full' => '~<script\\s*src="data:text/javascript;base64,([^"]+)"></script>~msi',
    'id' => 'JS_B64Embedded',
  ),
  471 => 
  array (
    'fast' => '~(?:var\\s*(_0x\\w+)=(_0x\\w+);)?(?:function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),|function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}|\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),)(?:function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}|(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;))(?:function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}|\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),)?(?:function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}|(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;))~msi',
    'full' => '~(?(DEFINE)(?\'p1\'var\\s*(_0x\\w+)=(_0x\\w+);))(?(DEFINE)(?\'p2\'function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?|(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}))(?(DEFINE)(?\'p3\'function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}))(?(DEFINE)(?\'p4\'\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),))(?(DEFINE)(?\'p5\'(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;)))(?:(?P>p1))?(?:(?P>p2)(?P>p4)|(?P>p2)|(?P>p4))(?:(?P>p3)|(?P>p5))(?:(?P>p2)|(?P>p4))?(?:(?P>p3)|(?P>p5))~msi',
    'id' => 'JS_parseIntArray',
  ),
  472 => 
  array (
    'full' => '~eval\\(compile\\(zlib\\.decompress\\(base64\\.b64decode\\([\'"]([^\'"]+)[\'"]\\)\\),[\'"]<string>[\'"],[\'"]exec[\'"]\\)\\)~msi',
    'id' => 'PY_evalCompileStr',
  ),
);

    private $full_source;
    private $text;
    private $cur;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;
    private $active_fragment;
    private $excludes;
    private $debugger;
    private $isDebugMode = false;
    private $error = 0;

    private $error_info = '';

    /**
     * @param string $text
     * @param string $origin_text
     * @param DebugMode|null $debugger
     * @param int $max_level
     * @param int $max_time
     */
    public function __construct($text, $origin_text = '', $debugger = null, $max_level = 30, $max_time = 5)
    {
        if (!isset(self::$signatures)) {
            self::$signatures = json_decode(file_get_contents(__DIR__ . '/deobfuscator_patterns.json'), true);
        }

        $this->text         = $text;
        $this->full_source  = $text;

        if ($origin_text != '' && $this->defineSpecificObfuscator($text, $origin_text)) {
            $this->text         = $origin_text;
            $this->full_source  = $origin_text;
        }

        $this->max_level            = $max_level;
        $this->max_time             = $max_time;
        $this->fragments            = [];
        $this->grabed_signature_ids = [];
        $this->excludes             = [];
        $this->debugger             = !is_object($debugger) ? new Debugger() : $debugger;
        $this->isDebugMode          = defined('DEBUG_PERFORMANCE') && DEBUG_PERFORMANCE ? true : false;
    }

    public function setIsDebugMode(bool $isEnable)
    {
        $this->isDebugMode = $isEnable;
    }

    public function getError()
    {
        return $this->error;
    }

    public function getErrorInfo()
    {
        return $this->error_info;
    }

    private function getPreviouslyDeclaredVars($string, $level = 0)
    {
        $foundVar = false;
        $str = null;
        foreach ($this->fragments as $frag => $fragment) {
            if ($foundVar || strpos($frag, '$codelock_lock') !== false) {
                break;
            }

            $subject = '';
            $pos     = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' ');
            if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) {
                $subject = substr($fragment, $pos);
            } else {
                $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' ');
                if ($pos !== false) {
                    $subject = substr($frag, $pos);
                } else {
                    $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' ');
                    if ($pos !== false) {
                        $subject = substr($this->full_source, $pos);
                    } else {
                        continue;
                    }
                }
            }

            if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $matches, PREG_SET_ORDER) > 0) {
                foreach ($matches as $m) {
                    if ($m[1] !== $string) {
                        continue;
                    }
                    if (isset($m[12]) && $m[12] !== '') {
                        $str = substr(@$m[2], 1, -1);
                        $foundVar = true;
                    }
                    if (isset($m[5]) && $m[5] !== '') {
                        $str = $this->unwrapFuncs($m[2], $level + 1);
                        $foundVar = true;
                    }

                    $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]);
                    break;
                }
            }
        }
        return $str;
    }

    private function defineSpecificObfuscator($text, $origin_text)
    {
        if (
            strpos($origin_text, '#!/') === 0                                                                                                       //not a php file
            || strpos($origin_text, '0=__FILE__;')
                && (strpos($origin_text, ';return;?>')
                || strpos($origin_text, 'This file is protected by copyright law and provided under'))  //lockit1 || evalFileContentBySize
            || strpos($origin_text, 'The latest version of Encipher can be obtained from')
            && strpos($origin_text, '\'@ev\'));')           //EvalFileContent
            || strpos($origin_text, 'substr(file_get_contents(__FILE__),')
            && strpos($origin_text, '__halt_compiler();')   //EvalFileContentOffset
            || strpos($origin_text, 'gzuncompress(strrev($')
            && strpos($origin_text, '__halt_compiler();')                 //GzuncompressStrrev
            || strpos($text, 'base64_decode(@stream_get_contents(')
            && strpos($text, '@fopen(__FILE__,')            //wpKey (eval)
            || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64')                                   //
            || strpos($origin_text, '/* Do not change this code')
            && strpos($origin_text, '));__halt_compiler();')                          //B64Chunks
        ) {
            return true;
        }

        $text_wo_ws = str_replace(' ', '', $text);
        if (
            strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(')      && strpos($text_wo_ws, '));__halt_compiler();') //zeura hack
            || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);')   && strpos($text_wo_ws, '__halt_compiler();')    //obf_20200527_1
            || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[')                                     //TinkleShell
        ) {
            return true;
        }

        return false;
    }

    private function checkObfuscatorExcludes($str, $type = false, $matches = [])
    {
        switch ($type) {
            case '':
                if (strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
                    return '';
                }
                if (strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
                    return '';
                }
                if (strpos($str, '<div class="header">Отчет сканера ') !== false) {
                    return '';
                }
                if (strpos($str, '$default_action="FilesMan"') !== false) {
                    return '';
                }
                break;
            case 'echo':
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (!isset($matches[5]) || $matches[5] === '') {
                    return '';
                }
                if (preg_match('~attachment;\s*filename=\\\\"\w+\.vbs~', $str)) {
                    return '';
                }
                break;
            case 'eval':
                if (strpos($matches[0], 'file_get_contents') !== false) {
                    return '';
                }
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                    return '';
                }
                if (@$matches[6] === '\'";') {
                    return '';
                }
                break;
            case 'goto':
                if (!preg_match('~\$[^\[\(\)\]=\+\-\"\']{1,20}~msi', $matches[0])) {
                    return '';
                }

                $offset = 0;
                $count = 0;
                while (preg_match('~goto\s*[^;]+;\s*[^:{}]+:\s*[^;]+;~msi', $matches[0], $m, PREG_OFFSET_CAPTURE, $offset)) {
                    $count++;
                    break;
                }
                if ($count === 0) {
                    return '';
                }
                break;
        }
        return $type;
    }

    public function getObfuscateType($str)
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        $ret = '';
        if ($l_UnicodeContent !== false) {
            if (FUNC_ICONV) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if ($this->checkObfuscatorExcludes($str) === '') {
            return '';
        }
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        foreach (self::$signatures as $signature) {
            if (isset($this->excludes[$str]) && in_array($signature['id'], $this->excludes[$str])) {
                continue;
            }

            if (!$this->runPreCheck($signature, $str)) {
                // Skip signature if the pre-check fails.
                continue;
            }

            $fast_regexp = isset($signature['fast']) ? $signature['fast'] : $signature['full'];
            $sig_type = isset($signature['fast']) ? self::TYPE_PREG_FAST : self::TYPE_PREG_FULL;
            $matches = $this->handlePregMatch($sig_type, $signature['id'], $fast_regexp, $str);
            if ($matches) {
                $ret = $this->checkObfuscatorExcludes($str, $signature['id'], $matches);
                break;
            }
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $ret;
    }

    private function getObfuscateFragment($str, $type)
    {
        foreach (self::$signatures as $signature) {
            if ($signature['id'] !== $type) {
                continue;
            }
            $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $signature['id'], $signature['full'], $str);
            if ($matches) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    /**
     * Runs pre-check for signatures with pre-check data available.
     *
     * The idea is to run a check before trying to match the whole regular expression to avoid unnecessary PCRE errors.
     * This check will take smaller fragments of the whole regular expressions and tries to find those.
     * If none of them exist, then we won't try to match the whole pattern later.
     *
     * @param array $signature Signature data.
     * @param string $value Value to check against the pre-check expressions.
     *
     * @return bool True if the pre-check passes, false otherwise.
     */
    private function runPreCheck($signature, $value)
    {
        if (!isset($signature[self::TYPE_PREG_PRECHECK])) {
            return true;
        }

        $patterns = $signature[self::TYPE_PREG_PRECHECK];
        if (!is_array($patterns)) {
            $patterns = [$patterns];
        }

        foreach ($patterns as $pattern) {
            if (!$this->handlePregMatch(self::TYPE_PREG_PRECHECK, $signature['id'], $pattern, $value)) {
                return false;
            }
        }

        return true;
    }

    private function grabFragments()
    {
        if ($this->cur === null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset(self::$signatures);
        while ($sign = current(self::$signatures)) {
            if (!$this->runPreCheck($sign, $str)) {
                // Skip to the next signature if the pre-check fails.
                next(self::$signatures);
                continue;
            }

            $fast = isset($sign[self::TYPE_PREG_FAST]);
            $matches = false;
            if (
                !$fast
                ||
                ($fast && $this->handlePregMatch(self::TYPE_PREG_FAST, $sign['id'], $sign[self::TYPE_PREG_FAST], $str))
            ) {
                $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $sign['id'], $sign[self::TYPE_PREG_FULL], $str);
            }

            if ($matches) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next(self::$signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (!count($this->fragments)) {
            return;
        }
        $i = 0;
        foreach ($this->fragments as $frag => $value) {
            if ($frag !== $value) {
                continue;
            }
            $this->active_fragment = $frag;
            $type = $this->getObfuscateType($value);

            while ($type !== '' && $i < 100) {
                $match  = $this->getObfuscateFragment($value, $type);
                if (!is_array($match)) {
                    break;
                }
                $this->grabed_signature_ids[$type] = 1;
                $find   = $match[0] ?? '';
                $func   = 'deobfuscate' . ucfirst($type);
                $temp = $this->handleFunc(self::TYPE_FUNC, ucfirst($type), $func, $find, $match);

                /** @phpstan-ignore-next-line */
                if (isset($temp) && $temp !== '' && $temp !== $find) {
                    $value = str_replace($find, $temp, $value);
                } else {
                    $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type;
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    continue;
                }

                $this->fragments[$frag] = $value;
                $type = $this->getObfuscateType($value);
                $value_hash = hash('sha256', $value);
                if ($prev_step === $value_hash) {
                    break;
                }
                $prev_step = $value_hash;
                $i++;
            }
            $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]);
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        $deobfuscated   = '';
        $this->run_time = Helpers::currentTime();
        $this->cur      = $this->text;

        $this->grabFragments();
        $this->deobfuscateFragments();

        $deobfuscated = $this->cur;

        if (count($this->fragments) > 0) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = Helpers::postProcess($deobfuscated);

        if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step === hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $deobfuscated;
    }

    public static function getSignatures()
    {
        return self::$signatures;
    }

    public function getDebugger()
    {
        return $this->debugger;
    }

    /**
     * @param string $sigType
     * @param $sigId
     * @param string $regex
     * @param string $content
     * @return false|array
     */
    private function handlePregMatch(string $sigType, $sigId, string $regex, string $content)
    {
        $start_time = Helpers::currentTime();
        $isMatch = preg_match($regex, $content, $match);
        if ($this->error === 0) {
            $this->error = preg_last_error();
            $this->error_info = $this->error !== 0 ? $regex : '';
        }

        if ($this->isDebugMode) {
            $time_elapsed = Helpers::currentTime() - $start_time;
            $this->debugger->addDeobfuscatorData($sigType, $sigId, $time_elapsed);
        }

        return $isMatch ? $match : false;
    }

    /**
     * @param string $type
     * @param string $funcId
     * @param string $func
     * @param string $find
     * @param array $match
     * @return string
     */
    private function handleFunc(string $type, string $funcId, string $func, string $find, array $match)
    {
        try {
            $start_time = Helpers::currentTime();
            $result = @$this->$func($find, $match);

            if ($this->isDebugMode) {
                $time_elapsed = Helpers::currentTime() - $start_time;
                $this->debugger->addDeobfuscatorData($type, $funcId, $time_elapsed);
            }
        } catch (Exception $e) {
            $result = '';
        }

        return $result;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $res = '';
        $close_tag = false;

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }
        if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) {
            if ($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            }
            $end = -2;
            if ($string[-3] === '\'') {
                $end = -3;
            }
            return substr($string, 1, $end);
        }

        if ($string[0] === '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string  = $string[0];
            return $this->getPreviouslyDeclaredVars($string, $level);
        }

        $pos      = strpos($string, '(');
        $function = substr($string, 0, $pos);
        $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);

        if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) {
            $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function);
            $close_tag = true;
        }
        $function = str_replace(['@', ' '], '', $function);
        $safe = Helpers::convertToSafeFunc($function);

        if ($safe) {
            if ($function === 'pack') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 1);
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1]]);
            } elseif ($function === 'unserialize') {
                $res = @Helpers::unserialize($arg);
            } elseif ($function === 'str_replace') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 0);
                if (trim($args[1]) === 'null') {
                    $args[1] = null;
                }
                $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2];
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1], $args[2]]);
            } elseif ($function === 'chr') {
                $res = @Helpers::executeWrapper($function, [(int)$arg]);
            } else {
                $res = @Helpers::executeWrapper($function, [$arg]);
            }
        } else {
            $res = $arg;
        }
        if ($close_tag) {
            $res = '?> ' . $res;
            $close_tag = false;
        }
        return $res;
    }

    /*************************************************************************************************************/
    /*                                          PHP deobfuscators                                                */
    /*************************************************************************************************************/

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGoto($str)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $matches1)) {
                        foreach ($matches1[1] as $k => $v) {
                            if ($v !== $matches[1]) {
                                continue;
                            }
                            $code = $matches1[2][$k];
                            $code = strrev($code);
                            if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                                foreach ($m as $item) {
                                    $code = str_replace($item[1], $item[2], $code);
                                }
                                $temp = base64_decode($code);
                            }
                            break;
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach ($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        if (strpos($str, 'hex2bin(') !== false) {
            $matches[4] = (int)hex2bin($matches[4]);
            $matches[6] = (int)hex2bin($matches[6]);
            $matches[8] = (int)hex2bin($matches[8]);
        }
        $res = strrev(gzinflate(base64_decode(substr($matches[14], (int)$matches[4] + (int)$matches[6], (int)$matches[8]))));
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v), 1, 1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str, $matches)
    {
        $data = $matches[1];
        $key = $matches[2];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[17];
        if (isset($matches[1]) && !empty($matches[1])) {
            $vars = Helpers::collectVars($matches[1], '\'');
            $code = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
            $code = Helpers::collectStr($code, '\'');
            $code = substr($code, strpos($code, '\'') + 1);
        }
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function ($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?: base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateTwoHashFunc($str, $matches)
    {
        $funcs = [
            $matches[1] . '::' . $matches[2] => [
                'data' => Helpers::prepareArray($matches[3]),
                'func' => null,
            ],
            $matches[4] . '::' . $matches[5] => [
                'data' => Helpers::prepareArray($matches[6]),
                'func' => null,
            ],
        ];

        $code = Helpers::normalize($matches[7]);

        foreach ($funcs as $name => &$params) {
            $data = $params['data'];
            if (isset($data[0]) && intval($data[0])) {
                $params['func'] = function ($n, $k) use ($data) {
                    if (!isset($data[$n])) {
                        return false;
                    }
                    return $data[$n];
                };
            } else {
                $params['func'] = function ($n, $k) use ($data) {
                    $l = strlen($k);
                    if (!isset($data[$n])) {
                        return false;
                    }
                    $r = base64_decode($data[$n]);
                    for ($i = 0, $c = strlen($r); $i !== $c; ++$i) {
                        $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l]));
                    }
                    return '\'' . $r . '\'';
                };
            }
        }
        unset($params);

        $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) {
            $original       = $m[0];
            $class_name     = $m[1];
            $method_name    = $m[2];
            $vars           = str_replace(['"', "'"], '', $m[3]);

            list($var1, $var2) = explode(',', $vars);
            $func_name = $class_name . '::' . $method_name;
            if (!isset($funcs[$func_name]['func'])) {
                return $original;
            }
            return $funcs[$func_name]['func']($var1, $var2);
        }, $code);
        return MathCalc::calcRawString($new_code);
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*', $matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*', $matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $res = str_replace($var[0], '', $res);
            }
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $code = str_replace($var[0], '', $code);
            }
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach ($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) {
            if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) {
                return $m[0];
            }
            return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:(?:\$\w+)="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach ($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach ($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function ($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback(
            '~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::convertToSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @Helpers::executeWrapper($func, [$vars[$match[3]]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            },
            $res
        );

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace([$matches[5], $matches[1]], [');', 'eval('], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_Decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while (preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) {
                $match = $matches[1];
            }
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } elseif ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach ($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str, $matches)
    {
        return Helpers::someDecoder3($matches[1]);
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        foreach ($matches[1] as $k => &$m) {
            if ($m !== $var) {
                unset($matches[2][$k]);
            }
        }
        $res = base64_decode(Helpers::someDecoder4($matches[2], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if (strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateVarsEvalFuncs($str, $matches)
    {
        $result = $str;
        $dict_var_name = $matches[1];

        $vars = Helpers::collectConcatedVars($result);

        $calced_vars = Helpers::replaceVarsFromDictionary($dict_var_name, $vars[$dict_var_name], $result);
        $calced_vars = Helpers::collectConcatedVars($calced_vars);

        $unwrapFunctions = function ($vars, $str) {
            $str = Helpers::replaceVarsFromArray($vars, $str);
            $str = preg_replace('~\(([^\(\)]{1,500})\)~mis', '("\1")', $str);
            return $this->unwrapFuncs($str);
        };

        $result = $unwrapFunctions($calced_vars, $result);
        $result = $unwrapFunctions($calced_vars, $result);
        return $result;
    }

    private function deobfuscateLockIt3($str, $matches)
    {
        $totalLength = (int)$matches[1];
        $res = $this->unwrapFuncs($matches[2]);
        $encodedStr = $matches[3];

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);while\(\-\-\$\w{1,50}\)fgets\(\$\w{1,50},\d+\);fgets\(\$\w{1,50},\d+\);\$\w{1,50}\s?=\s?\(?((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},(\d+)\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);eval\(\$\w{1,50}\);~msi', $res, $m)) {
            $length = (int)$m[2];
            $res = substr($encodedStr, 0, $length);
            $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[3], $m[4]) . $m[5]);

            if (
                preg_match(
                    '~((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},\$\w{1,50}\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);~msi',
                    $res,
                    $m
                )
            ) {
                $res = substr($encodedStr, $length, $totalLength);
                $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[2], $m[3]) . $m[4]);
                return $res;
            }
        }

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);\$\w{1,50}=(?:intval\([\'"])?(\d+)\)?(?:[\'"]\))?;fseek\(\$\w{1,50},(?:intval\([\'"])?(\d+)(?:[\'"]\))?\);eval\(base64_decode\(strtr\(fread\(\$\w{1,50},(\d+)\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;return;~msi', $res, $m)) {
            $lengthSeek = (int)$m[1] - (int)$m[2];
            $length = (int)$m[3];
            $res = substr($encodedStr, 0, $length);
            $res = base64_decode(strtr($res, $m[4], $m[5]));

            if (preg_match('~\(base64_decode\(strtr\(gzuncompress\(base64_decode\(fread\(\$\w{1,50},\$\w{1,50}\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;~msi', $res, $m)) {
                $res = substr($encodedStr, $lengthSeek, $totalLength);
                $res = base64_decode(
                    strtr(
                        gzuncompress(base64_decode($res)),
                        $m[1],
                        $m[2]
                    )
                );
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = str_replace($matches[8], stripcslashes($matches[9]), $str);
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function ($matches2) use (&$funcs) {
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*', substr($substr_array, $offset));
        $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [$matches[6]]) : $matches[6];
        $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($matches) use ($eval, $substr_array, $func) {
            if ($matches[1] !== $func) {
                return $matches[0];
            }
            $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [substr($substr_array, $matches[2], $matches[3])]) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);
        $res = str_rot13(@gzuncompress($res) ?: $res);

        if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp)) {
            $tmp = explode(';', $tmp[2]);
            foreach ($tmp as $entry) {
                if ($entry === '') {
                    continue;
                }
                preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts);
                $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res);
            }
            if (isset($parts) && is_array($parts) && isset($parts[3])) {
                $func_decrypt = $parts[3];
            } else {
                $func_decrypt = null;
            }
            $hangs = 20;
            while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) {
                $end = strpos($res, '\'', $start + strlen($func_decrypt) + 2) + 1;
                $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1));
                $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($matches) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            return '$' . $matches[2];
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        list($find, $var, $alph) = $matches;
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches);
        foreach ($matches[2] as &$pat) {
            if ($pat[0] === '[') {
                $pat = substr($pat, 1, -1);
            }
        }
        unset($pat);
        $res = str_replace($matches[2], $matches[3], $res);
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $matches, PREG_SET_ORDER)) {
            preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $matches, PREG_SET_ORDER);
        }
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = substr($match[2], 1, -1);
        }

        $res = preg_replace_callback(
            '~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi',
            static function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] === 'str_replace') {
                    $str_replace = $matches[1];
                }
                return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
            },
            $res
        );

        if ($str_replace !== '') {
            $res = preg_replace_callback(
                '~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
                static function ($matches) use (&$vars, &$base64_decode, $str_replace) {
                    if ($matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $vars[$matches[1]] = str_replace($matches[3], "", $matches[4]);
                    if ($vars[$matches[1]] === 'base64_decode') {
                        $base64_decode = $matches[1];
                    }
                    return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                },
                $res
            );

            $res = preg_replace_callback(
                '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
                static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                    if ($matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $tmp = explode('.', $matches[4]);
                    foreach ($tmp as &$item) {
                        $item = $vars[$item];
                    }
                    unset($item);
                    $tmp = implode('', $tmp);
                    $layer = base64_decode(str_replace($matches[1], "", $tmp));

                    return $matches[0];
                },
                $res
            );
        }

        if ($base64_decode !== '') {
            $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi';
        } else {
            $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi';
        }
        preg_replace_callback(
            $regex,
            static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                if ($base64_decode !== '' && $matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                    return $matches[0];
                }
                $tmp = preg_split('~\s*\.\s*~msi', $matches[4]);

                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                unset($item);
                $tmp = implode('', $tmp);
                $layer = str_replace($matches[3], "", $tmp);
                if ($base64_decode !== '') {
                    $layer = base64_decode($layer);
                }
                return $matches[0];
            },
            $res
        );
        $res = str_replace($find, $layer, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find           = $matches[0];
        $res            = $str;
        $vars           = [];
        $base64_decode  = '';
        $layer          = '';
        $gzuncompress   = '';

        preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $var_name   = $match[1];
            $var_val    = trim($match[2]);
            if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) {
                $var_val = Helpers::normalize($var_val);
            }
            $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val);
            $vars[$var_name] = trim($var_val);
            if ($var_val === 'base64_decode') {
                $base64_decode = $var_name;
            }
        }

        $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($matches) use (&$vars, &$gzuncompress, $base64_decode) {
            if ($matches[1] !== $base64_decode) {
                return $matches[0];
            }
            if (!isset($vars[$matches[2]])) {
                return $matches[2];
            }
            $tmp = base64_decode($vars[$matches[2]]);
            if ($tmp === 'gzuncompress') {
                $gzuncompress = $matches[2];
            }
            $vars[$matches[2]] = $tmp;
            return " = '{$tmp}'";
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback(
                '~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer, $base64_decode) {
                    if ($matches[1] !== $gzuncompress && $matches[2] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[3]])) {
                        return $matches[3];
                    }
                    $tmp = gzuncompress(base64_decode($vars[$matches[3]]));
                    $layer = $matches[3];
                    $vars[$matches[3]] = $tmp;
                    return "'{$tmp}'";
                },
                $res
            );
            $res = $vars[$layer];
        } elseif (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback(
                '~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer, $base64_decode) {
                    if ($matches[1] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[2]])) {
                        return $matches[2];
                    }
                    $tmp = base64_decode($vars[$matches[2]]);
                    $layer = $matches[2];
                    $vars[$matches[2]] = $tmp;
                    return "'{$tmp}'";
                },
                $res
            );
            $res = $vars[$layer];
        }
        return str_replace($find, $res, $str);
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (
            Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval'
        ) {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::convertToSafeFunc($func)) {
                    $final_code = @Helpers::executeWrapper($func, [$final_code]);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateGotoShell($str, $matches)
    {
        $str = Helpers::normalize($str);

        $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str);

        $vars = Helpers::collectVars($str, '\'');
        $need_remove_vars = [];
        foreach ($vars as $name => $value) {
            $last_str = $str;
            $str = str_replace('${' . $name . '}', '$' . $value, $str);
            if ($last_str != $str) {
                $need_remove_vars[$name] = $value;
            }
        }

        foreach ($need_remove_vars as $name => $value) {
            if (substr_count($str, $name) != 1) {
                continue;
            }
            $str = str_replace($name . '=\'' . $value . '\';', '', $str);
        }
        return $str;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function ($matches) use (&$vars) {
            $tmp = str_replace('\' . \'', '', $matches[0]);
            $tmp = str_replace('\'.\'', '', $tmp);
            $value = str_replace('\' . \'', '', $matches[2]);
            $value = str_replace('\'.\'', '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach ($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . ' = \'' . $var . '\';', '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function ($matches) use (&$vars) {
            $tmp = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[0]);
            $value = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[2]);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $res = preg_replace_callback('~\("([^\)]+)\'\)~msi', function ($m) {
            return '(\'' . preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $m[1]) . '\'\)';
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $before = substr($res, 0, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach ($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = str_replace($matches[14], '', $res);
        }
        $res = $this->deobfuscateEval($res, []);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = $matches[14] . $res;
        }
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        return $before . $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function ($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach ($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) {
            $res = base64_decode(strtr(substr($match[1], 52 * 2), substr($match[1], 52, 52), substr($match[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) {
            $res = gzinflate(base64_decode($matchEval[2]));
            for ($i = 0, $iMax = strlen($res); $i < $iMax; $i++) {
                $res[$i] = chr(ord($res[$i]) - 1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        if (
            preg_match(
                '~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi',
                $matches[6],
                $match
            )
        ) {
            $res = stripcslashes($match[0]);
            $dictionaryValue = urldecode($matches[3]);
            $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str);
            $res = Helpers::replaceVarsFromArray($vars, $res);
            $res = Helpers::replaceCreateFunction($res);

            preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m);
            $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) {
                if ($calls[1] !== $m[1]) {
                    return $calls[0];
                }
                $temp1 = substr($calls[2], $m[3], $m[4]);
                $temp2 = substr($calls[2], $m[5]);
                $temp3 = substr($calls[2], $m[6], strlen($calls[2]) - $m[7]);
                return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
            }, $res);
            return $res;
        }

        if (preg_match('~((?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];\s*)+)error_reporting\(\d\);\s*(\$\w{1,50})\s*=\s*(\$\w{1,50})\([\'"]([^\'"]+)[\'"]\);\s*\2\s*=\s(\$\w{1,50})\(\2\);\s*\$\w{1,50}\s*=\s*\$\w{1,50}\([\'"]\$\w{1,50}[\'"]\s*,\2\);~msi', $res, $match)) {
            $vars = Helpers::collectVars($match[0]);

            $func1 = $vars[$match[3]] ?? null;
            $func2 = $vars[$match[5]] ?? null;
            if (Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
                $res = Helpers::executeWrapper($func2, [
                    Helpers::executeWrapper($func1, [$match[4]])
                ]);
            }

            if (substr_count($res, 'goto ') > 100) {
                $res = Helpers::unwrapGoto($res);
            }

            return $res;
        }

        $res = str_replace($find, ' ?>' . $res, $str);

        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while (preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        preg_match_all('~(\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res);
        }

        return $res;
    }

    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if ($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for ($i = 0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
                if ($i < 16) {
                    $temp[$matches[3][$i]] = $i;
                } else {
                    $res .= @chr(($temp[$matches[3][$i]] << 4) + ($temp[$matches[3][++$i]]));
                }
            }
        }
        if (!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res ^ "\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if (substr($res, 0, 12) == "\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else {
            return $str;
        }
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi', $str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = (int)$matches[8] + (int)$matches[9];
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateZeuraFourArgs($str, $matches)
    {
        $offset = $matches[6] * -1;
        $res    = gzinflate(base64_decode(substr(trim($str), $offset)));

        return $res;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded -= $temp;
            }
            $res .= chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . '].',
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . ']'
            ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);
        $vars = [];
        $func = [];
        foreach ($funcs[1] as $k => $var) {
            if ($var !== $matches[1]) {
                continue;
            }
            $vars[] = $funcs[2][$k];
            $func[] = $funcs[3][$k];
        }

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = (int)Helpers::calc($matches[5]);
        $matches[6] = (int)Helpers::calc($matches[6]);

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i = 0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i]) - 1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off = 0;
        $funcs = [];

        for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) {
            if ($i === 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[] = substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 === 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = count($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = count($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsetsEval($str, $matches)
    {
        $arg1 = explode(chr(Helpers::calculateMathStr($matches[4])), $matches[5]);
        $arg2 = $matches[2];
        $code = null;

        for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) {
            $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]);
        }

        $res = str_replace(
            chr(Helpers::calculateMathStr($matches[20])),
            chr(Helpers::calculateMathStr($matches[21])),
            $code
        );

        $arg1 = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[7]),
            Helpers::calculateMathStr($matches[8])
        );

        $func = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[23]),
            Helpers::calculateMathStr($matches[24])
        );

        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $str = str_replace('\\\'', '@@quote@@', $str);
        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]);
            if (isset($match[3])) {
                $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]);
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if ($match[2] !== '.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            } else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str, $matches)
    {
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find       = $matches[0];
        $res        = $str;
        $funclist   = [];
        $strlist    = [];

        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $res = Helpers::replaceMinMaxRound($res, 111);
        $res = Helpers::replaceBase64Decode($res, '"');
        $replace_from = [];
        $replace_to   = [];
        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                foreach ($funclist as $var => $funcs) {
                    foreach ($funcs as $k => $func) {
                        $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']';
                        $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']';
                        $replace_to[] = $func;
                        $replace_to[] = $func;
                    }
                }
                $replace_from[] = $found[0];
                $replace_to[] = '';
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }

        $array_temp = [];
        while (preg_match('~function\s*(\w{1,60})\(\$\w+\)\s*{\s*\$\w{1,60}\s*=\s*Array\((.{1,40000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) {
            $strlist = explode(',', $found[2]);
            $array_temp[$found[1]] = array_map('base64_decode', $strlist);
            $replace_from = [];
            $replace_to = [];
            foreach ($array_temp[$found[1]] as $k => $v) {
                $replace_from[] = $found[1] . '(' . $k . ')';
                $replace_to[] = '\'' . $v . '\'';
            }
            $replace_from[] = $found[0];
            $replace_to[] = '';
            $res = str_replace($replace_from, $replace_to, $res);
        }

        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);
        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $replace_from = [];
                $replace_to = [];
                foreach ($array_temp[$found[1]] as $k => $v) {
                    $replace_from[] = $found[1] . '(' . $k . ')';
                    $replace_to[] = '\'' . $v . '\'';
                }
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str, $matches)
    {
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str)));
        $result = $str;
        $offset = 0;
        $dictName = $matches[1];
        $dictVal = urldecode($matches[2]);
        $vars = [$dictName => $dictVal];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str);

        if (preg_match('~eval\(~msi', $matches[15])) {
            $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[15])));
        }

        if ($matches[7] !== '' && preg_match('~eval\(~msi', $matches[7])) {
            $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[7])));
            $vars = Helpers::collectVars($phpcode2, "'", $vars);
        }

        if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches)) {
            $needles = Helpers::getNeedles($phpcode);
            $needle        = $needles[0];
            $before_needle = $needles[1];
            $strToDecode = base64_decode($matches[1]);
            return '<?php ' . strtr($strToDecode, $needle, $before_needle);
        }

        $count = 0;
        preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER);
        if (count($offsetMatches) === 2) {
            foreach ($offsetMatches as $offsetMatch) {
                if (strpos($offsetMatch[1], '0x') !== false && isset($str[$offset + hexdec($offsetMatch[1])])) {
                    $count++;
                    $offset += hexdec($offsetMatch[1]);
                } elseif (isset($str[$offset + (int)$offsetMatch[1]])) {
                    $count++;
                    $offset += (int)$offsetMatch[1];
                }
            }
        }

        $finalOffset = 0;
        if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) {
            if (strpos($match[2], '0x') !== false) {
                $finalOffset = hexdec($match[2]);
            } else {
                $finalOffset = (int)$match[2];
            }
        }

        $result = substr($str, $offset);
        if ($finalOffset > 0) {
            $result = substr($result, 0, $finalOffset);
        }

        if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) {
            $result = strtr($result, $needleMatches[1], $needleMatches[2]);
        }

        $result = base64_decode($result);

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        $found = true;
        $hop = 50;
        while ($found && $hop > 0) {
            $found = false;

            if (preg_match('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            if (preg_match('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            $hop--;
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        return '<?php ' . $result;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] === '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end - 1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($matches) use ($subst_array) {
            if (isset($matches[5])) {
                return $subst_array[hexdec($matches[4])] . '(';
            }
            return "'" . $subst_array[hexdec($matches[4])] . "'";
        }, $res);
        $res = str_replace($find, $res, $str);

        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [$matches[1] . '[' . $i . '].', $matches[1] . '[' . $i . ']'],
                ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];


        preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[2]); $i <= $iMax; $i++) {
            if ($matches[1][$i] !== $var) {
                continue;
            }
            if (@function_exists($matches[2][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[2][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[2][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] === "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] === 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [
                    $matches[2] . '[' . $i . '].',
                    $matches[2] . '[' . $i . ']',
                    $matches[2] . '{' . $i . '}.',
                    $matches[2] . '{' . $i . '}'
                ],
                [
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            $res = str_replace(
                ['$' . $matches[$i][1] . '(' , '${"GLOBALS"}["' . $matches[$i][1] . '"]' . '('],
                $matches[$i][2] . '(',
                $res,
                $c
            );
            $res = str_replace(
                ['$' . $matches[$i][1], '${"GLOBALS"}["' . $matches[$i][1] . '"]'],
                "'" . $matches[$i][2] . "'",
                $res,
                $cc
            );

            if ($c > 0 || $cc > 0) {
                $res = str_replace([
                    "'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "=" . $matches[$i][2] . ';',
                    $matches[$i][0] . ';'
                ], '', $res);
            }
        }

        $res = Helpers::replaceCreateFunction($res);

        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($matches) {
            if ($calls[1] !== $matches[1]) {
                return $calls[0];
            }
            $temp1 = substr($calls[2], $matches[3], $matches[4]);
            $temp2 = substr($calls[2], $matches[5]);
            $temp3 = substr($calls[2], $matches[6], strlen($calls[2]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode3($str, $matches)
    {
        $dictionaryKey = $matches[4];
        $dictionaryVal = urldecode($matches[3]);

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);

        return $result;
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarSpecific($str, $matches)
    {
        $res = $str;

        if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) {
            $res = stripcslashes($res);

            preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi', $res, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res);
            }
        }

        $vars = Helpers::collectVars($res);

        if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) {
            $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]])));
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);

        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (strpos($evalVar, '${$') === 0) {
            return Helpers::postProcess($str);
        }
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }

        $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str);
        $val = '';
        $index = 0;
        if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $matches)) {
            $matches[1] = array_reverse($matches[1], true);
            $index = array_search($evalVar, $matches[1], true);
            if ($index !== false) {
                $val = @$matches[2][$index];
            }
        }

        $string = $str;
        if ($val !== '') {
            $string = str_replace($matches[0][$index], '', $string);
            $val = substr($val, 1, -1);
            $var_index = substr_count($string, $evalVar . ' = ');
            $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
            preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $matches, PREG_OFFSET_CAPTURE);
            $matches = array_reverse($matches[1]);
            foreach ($matches as $match) {
                if ($match[0] === $evalVar) {
                    $string = substr_replace($string, $text, $match[1], strlen($match[0]));
                    break;
                }
            }

            $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function ($m) use ($evalVar, $text) {
                if ($m[1] !== $evalVar) {
                    return $m[0];
                }
                return '(' . $text;
            }, $string);
        }

        $string = str_replace('assert(', 'eval(', $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $string = str_replace("eval(''.", 'eval(', $string);
        $res = str_replace($find, $string, $str);
        if (strpos($string, 'gzinflate(\'') !== false) {
            $res = $this->deobfuscateEval(stripcslashes($res), []);
        }
        return $res;
    }

    private function deobfuscateEvalGlobalVarFuncWrapped($str, $matches)
    {
        //Sample: evalGlobalVarFuncWrapped_1.php

        if (stripcslashes($matches[1]) !== stripcslashes($matches[3])) {
            return $str;
        }

        $varName = stripcslashes($matches[2]);
        $decodeData = htmlspecialchars_decode(gzinflate(base64_decode(stripcslashes($matches[5]))));

        $code = str_replace('$' . $varName, '"' . stripcslashes($matches[4]) . '"', $decodeData);
        $code = stripcslashes($this->unwrapFuncs($code));

        if (
            preg_match(
                '~@?eval\(fgets\(fopen\((urldecode\(base64_decode\([\'"][^"\']+[\'"]\)\))[^;]+;~msi',
                $code,
                $match
            )
        ) {
            $code = str_replace($match[1], '\'' . $this->unwrapFuncs($match[1]) . '\'', $code);
        }

        return $code;
    }

    private function deobfuscateEval($str, $matches)
    {
        if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) {
            $res = explode(').', $str);
            $res = implode(')); eval(', $res);
            return $res;
        }

        if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $matches)) {
            if (preg_match('~<\?php\s/{2}[\w\s]+\$\w{1,50}\s?=\s?@?\$_SERVER.*?(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m, PREG_OFFSET_CAPTURE)) {
                $initialOffset = $m[0][1];
                $offset = hexdec($m[2][0]);
                $end = substr($this->full_source, $initialOffset + $offset);
                $res = str_replace($matches[0], '\'' . $end . '\'', $str);
                return $res;
            }
        }

        $res = $str;
        $group = '';
        if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            if (strpos(stripcslashes($matches[1]), '(.*)') !== false || strpos(stripcslashes($matches[1]), '(.+)') !== false) {
                $group = substr(stripcslashes($matches[2]), 2, -1);
            }
            $res = str_replace([$matches[1], $matches[2]], ['eval(', ''], $res);
            if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) {
                $res = stripcslashes($res);
                $res = str_replace('\1', $group, $res);
            }
            return $res;
        }

        if (
            strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\'\$]+[\'\$].*?[\'\)]\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }

        $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3);

        $string = substr($res, 5, -2);
        $res = $this->unwrapFuncs($string);

        if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) {
            $code = base64_decode($match[1]);
            if (strpos($code, 'error_reporting(') !== false) {
                $res = '?> ' . $code;
            }
        }

        if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) {
            $res = Helpers::normalize($res);
        }

        if (preg_match('~(?|//[^\n]+\n|\#[^\n]+\n|/\*[^\*]*\*/)\?><\?php~msi', $res)) {
            $res = preg_replace_callback('~'
                . '(\'(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+\')'       //match all '' strings to exclude it from comments
                . '|("(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+")'        //match all "" strings to exclude it from comments
                . '|(//[^\n\r]*[\n\r])'                             //match // comments
                . '|(/\*(?:.*?)\*/)'                                //match /**/ comments
                . '|(#[^\n\r]*[\n\r])'                              //match # comments
                . '~msi', function ($m) {

                    if (isset($m[1]) && !empty($m[1])) {
                        return $m[1];
                    }
                    if (isset($m[2]) && !empty($m[2])) {
                        return $m[2];
                    }
                    if ((isset($m[3]) && !empty($m[3])) || (isset($m[4]) && !empty($m[4])) || (isset($m[5]) && !empty($m[5]))) {
                        return '';
                    }
                }, $res);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*[base64_dco\\\\x1253f"\. ]+;\s*(\$\w+)\s*=\s*\3\s*\(\2\);\s*(\$\w+)\s*=\s*[gzinflate\\\\x6715"\.]+;\s*return\s*\5\(\4\);\s*\}~msi', $res, $matches)) {
            $res = preg_replace_callback('~\b(\w+)\s*\(\s*\'([^\']+)\'\s*\)~msi', function ($m) use ($matches) {
                if ($m[1] !== $matches[1]) {
                    return $m[0];
                }

                return '\'' . gzinflate(base64_decode($m[2])) . '\'';
            }, $res);
        }

        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, -2);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (
            preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res) ||
            strpos($matches[5], 'file_get_contents') !== false
        ) {
            return $res;
        }
        $string = substr($string, 5);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $eval = Helpers::getEvalCode($phpcode);
        $b64_count = substr_count($eval, $matches[1]);
        $b64 = Helpers::getTextInsideQuotes($eval);
        for ($i = 0; $i < $b64_count; $i++) {
            $b64 = base64_decode($b64);
        }
        $phpcode = $b64;
        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            $array = end($matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array)))));
            $old = '';
            $hangs = 0;
            while (
                ($old != $phpcode) && (strpos($phpcode, 'eval($') !== false)
                   && (strpos($phpcode, '__FILE__') === false) && $hangs < 30
            ) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) === 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) === 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = (int)$matches[1] - 21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            static function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {
            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        return stripcslashes($matches[0]);
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[11];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[5];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[9]] = $matches[10];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s*=\s*(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        if (preg_match('~function\s*(\w+)\s*\((\$\w+)\)\s*\{\s*return\s*(\w+)\s*\(\2,(\d+)\);\s*\}~msi', $result, $match)) {
            $result = preg_replace_callback('~' . $match[1] . '\s*\(\'([^\']+)\'\)~msi', function ($m) {
                return '\'' . Helpers::decodeUCSDelta($m[1]) . '\'';
            }, $result);
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $string = $matches[7];
        $string = MathCalc::calcRawString($string);
        $string = preg_replace('~[^0-9a-f]~msi', '', $string);
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8];
        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace(array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        return 'eval' . $matches[3];
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        return Helpers::decrypt_T_func(base64_decode($matches[15]));
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $dictionary = str_replace("\'", "'", $dictionary);
        $dictionary = str_replace('\"', '"', $dictionary);
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        $content = Helpers::replaceVarsFromDictionary($matches[1], $dictionary, $content);

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $content = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) {
            return '$' . $m[1];
        }, $content);

        $content = str_replace("''}", "\''}", $content);

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2]);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::convertToSafeFunc($func_name)) {
                $str = @Helpers::executeWrapper($func_name, [$str]);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[3]]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result          = $matches[0];
        $strName         = $matches[1];
        $dictionaryName  = $matches[2];
        $dictionaryValue = Helpers::collectStr("$matches[3]", "'");

        $funcs = [];
        $vars  = [];

        $result = preg_replace_callback(
            '~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi',
            function ($m) use (&$vars, $dictionaryValue) {
                $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0]));
                return '';
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = implode("", [$match[2], $match[3], $match[4]]);
                $replace    = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace      = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace      = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $dictionaryName, $dictionaryValue) {
                $str      = "";
                $isConcat = false;

                if (
                    preg_match(
                        '~return\s[\'"]([\w+\/+=]+)[\'"];~msi',
                        $match[0],
                        $returnCode
                    )
                ) {
                    $str = $returnCode[1];
                } else {
                    if (
                        preg_match(
                            '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                            $match[0],
                            $concatCode
                        )
                    ) {
                        $str      = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (
                            preg_match(
                                '~global\s(\$' . substr(
                                    $dictionaryName,
                                    1
                                ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                                $match[0],
                                $returnCode
                            )
                        ) {
                            $str      = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str      = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str']    = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr(
                $dictionaryName,
                1
            ) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::convertToSafeFunc($match[2])) {
                    $res = @Helpers::executeWrapper($match[2], [$str[$dictionaryName], $match[4]]);
                }

                if (Helpers::convertToSafeFunc($match[1]) && function_exists($match[1])) {
                    $args   = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $res = @Helpers::executeWrapper($match[1], $args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace(
            'mainVar',
            $strName,
            '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi'
        );

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code   = $result;
        $result = base64_decode($strToDecode);

        if (
            preg_match(
                '~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
                $code,
                $codeMatch
            )
        ) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf(
                "function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1),
                $codeMatch[5],
                $initialCode,
                $codeMatch[2],
                $result,
                substr($codeMatch[4], 1),
                $codeMatch[2],
                $codeMatch[9]
            );
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace(
                [$varMatch[0][$index], $varMatch[1][$index]],
                ["", $varMatch[2][$index]],
                $result
            );
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::convertToSafeFunc($func)) {
                $value = @Helpers::executeWrapper($func, [$arg1, $arg2 === 'trim' ? "" : $arg2, $argStr]);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[11], $vars[$matches[12]] ?? "", $decodeKey]);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$vars[$matches[8]] ?? '', "", $result]);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$result]);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateFuncFile2($str, $matches)
    {
        $var_fragment   = $matches[1];
        $decoded_code   = base64_decode($matches[3]);
        $var_name       = $matches[4];
        $new_fragment   = "$var_name = '$decoded_code';";
        return str_replace($var_fragment, $new_fragment, $str);
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace('\'.\'', '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[2]]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        if (!(isset($matches[4]) && $matches[4] !== '')) {
            $arr = [
                0 => $matches[5],
                1 => $matches[6],
                2 => $matches[13],
            ];

            $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
            if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                $arr[2] = $matches[10];
                $result = Helpers::decodeEvalCreateFunc_2($arr);
                return $result;
            }
        }

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;
        $matches[1] = MathCalc::calcRawString($matches[1]);
        $matches[1] = str_replace([' ', "'.", '.\'', '".', '."'], '', $matches[1]);
        $vars = [];
        Helpers::collectFuncVars($matches[1], $vars, false);
        foreach ($vars as &$var) {
            $vars2 = [];
            Helpers::collectFuncVars($var, $vars2, false);
        }
        if (isset($vars2) && is_array($vars2)) {
            $vars = array_merge($vars, $vars2);
        }
        Helpers::collectVars($matches[1], ['"', '\''], $vars);
        foreach ($vars as &$var) {
            $var = '\'' . $var . '\'';
        }
        unset($var);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if (strpos($result, 'eval') !== false) {
            $result = $this->unwrapFuncs($result);
        }
        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $dict = $matches[3];
        if (stripos($dict, 'base64_decode') !== false) {
            $dict = Helpers::replaceBase64Decode($dict);
        }
        if (stripos($dict, 'urldecode') !== false) {
            $dict = urldecode(substr($dict, 11, -2));
        }
        $dict = trim($dict, '\'"');

        $vars = Helpers::getVarsFromDictionary($dict, $matches[4]);
        $result = str_replace($matches[4], '', $str);

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateNonDictionaryCreateFuncs($str, $matches)
    {
        $result = str_replace($matches[1], '', $str);

        $vars = Helpers::collectVars(stripcslashes($matches[1]));

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        if (isset($matches[8]) && $matches[8] !== '') {
            return base64_decode($matches[4]);
        }
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", '\'.\''], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i = 0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1]);
        preg_match_all('~(\$\w+)=((?:\$\w+\.?)+);~msi', $matches[2], $varMatches, PREG_SET_ORDER);
        $finalVars = [];
        foreach ($varMatches as $varMatch) {
            $finalVars[$varMatch[1]] = Helpers::concatStr(
                Helpers::replaceVarsFromArray($vars, $varMatch[2], false, true)
            );
        }
        $res = Helpers::replaceVarsFromArray($finalVars, $matches[3], true);

        return $res;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1], $var, false, true);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1], '"', $vars, true);
        $matches[3] = $matches[3] === '' ? $matches[5] : 'eval(' . $matches[4] . ');';

        $res = Helpers::replaceVarsFromArray($vars, $matches[3], false, true);
        $parts = array_filter(array_map('trim', explode(';', $res)));
        $hangs = 10;
        foreach ($parts as &$part) {
            while (strpos($part, 'eval') === 0 && $hangs--) {
                $part = preg_replace_callback(
                    '~\$\w+\b(?!\s*=)~msi',
                    function ($m) use ($vars) {
                        return isset($vars[$m[0]]) ? '\'' . $vars[$m[0]] . '\'' : $m[0];
                    },
                    $part
                );
                if (substr_count($part, 'eval(') > 1) {
                    $tmp = array_filter(array_map('trim', explode(';', $part)));
                    foreach ($tmp as &$item) {
                        $item = preg_replace_callback(
                            '~\$\w+\b(?!\s*=)~msi',
                            function ($m) use ($vars) {
                                return isset($vars[$m[0]]) ? $vars[$m[0]] : $m[0];
                            },
                            $item
                        );
                        $item = $this->deobfuscateEval($item, []);
                        Helpers::collectConcatedVars($item, '"', $vars, true);
                    }
                    unset($item);
                    $part = implode($tmp);
                } else {
                    $part = $this->deobfuscateEval($part, []);
                }
            }
        }
        if (count($parts) > 1) {
            $parts[0] = Helpers::replaceVarsFromArray($vars, $parts[0]);
        }
        unset($part);
        $res = implode($parts);
        $res = preg_replace_callback('~hex2bin\s*\("([a-f0-9]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (
            preg_match(
                '~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
                $res,
                $match
            )
        ) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (
                preg_match(
                    '~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                    $res,
                    $match
                )
            ) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[3]);
        $array2 = [];
        $arrayStr = (isset($matches[2]) && $matches[2] !== '') ? base64_decode($matches[2]) : $matches[1];

        if (
            preg_match(
                '~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
                $arrayStr,
                $match
            )
        ) {
            preg_match_all(
                '~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi',
                $match[0],
                $arrayMatches
            );

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace([$matches[1], $matches[8], $matches[10]], [$matches[2], 0, 0], $matches[7]);

        if (Helpers::convertToSafeFunc($matches[4])) {
            $code = @Helpers::executeWrapper($matches[4], [$matches[6]]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    private function deobfuscateEchoEscapedStr($str, $matches)
    {
        $i = 1;
        $result = $matches[1];
        $result = str_replace('\\\\\\', '\\\\', $result);

        while ($i < 3) {
            if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) {
                break;
            }

            $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) {
                return stripcslashes($m[1]);
            }, $result);

            $i++;
        }

        $result = stripslashes($result);
        $vars = Helpers::collectVars($result);

        $result = preg_replace_callback(
            '~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi',
            function ($m) use (&$vars) {
                $vars['$' . $m[1]] = $m[2];

                return '';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result);

        foreach ($vars as $name => $val) {
            $result = str_replace("$val=\"$val\";", '', $result);
        }

        return $result;
    }

    private function deobfuscateFilePutDecodedContents($str, $matches)
    {
        $res = $str;
        $content = base64_decode($matches[2]);
        $res = str_replace($matches[1], $content, $res);

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $res);

        $res    = Helpers::concatStringsInContent($res);
        $res    = Helpers::replaceBase64Decode($res, '\'');
        $vars   = Helpers::collectVars($res);
        $res    = Helpers::replaceVarsFromArray($vars, $res);
        $res    = Helpers::removeDuplicatedStrVars($res);

        return $res;
    }

    private function deobfuscatePregReplaceStr($str, $matches)
    {
        return stripcslashes($matches[1]);
    }

    private function deobfuscateEvalImplodedArrStr($str, $matches)
    {
        $split = str_split(stripcslashes($matches[2]));
        $map = array_map(static function ($str) {
            return chr(ord($str) - 1);
        }, $split);
        return implode($map);
    }

    private function deobfuscatePregReplaceCodeContent($str, $matches)
    {
        $func = stripcslashes($matches[5]);

        $res = $matches[2];

        if (
            preg_match(
                '~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi',
                $func,
                $match
            )
        ) {
            if ($match[3] === $matches[1]) {
                $res = str_replace($match[1], stripcslashes($match[2]), $res);
            }
        }

        $vars = [];

        $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) {
            $value = $m[3];
            if ($m[2] === '"') {
                $value = stripcslashes($value);
            }

            $vars[$m[1]] = $value;

            return sprintf('%s=\'%s\';', $m[1], $value);
        }, $res);

        $arrayVar = [];
        $arrayVarName = '';

        if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) {
            $arrayVarName = $m[1];

            preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER);
            if (isset($arrMatch[1])) {
                foreach ($arrMatch[1] as $arr) {
                    $arrayVar[] = $arr;
                }
            }
        }

        if (
            preg_match(
                '~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi',
                $res,
                $match
            )
        ) {
            $arrayVar2 = [];
            preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER);
            if (isset($arrMatch2[1])) {
                foreach ($arrMatch2[1] as $arr) {
                    $arrayVar2[] = $arr;
                }
            }

            if (
                isset($vars[$match[5]])
                && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m)
                    && $m[1] === $arrayVarName
                    && isset($vars[$m[2]])
                )
            ) {
                $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]);
            }
        }

        return $res;
    }

    private function deobfuscateSistemitComEnc($str, $matches)
    {
        $matches[4] = base64_decode(base64_decode($matches[4]));
        $res = gzinflate(base64_decode($matches[2]));
        preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $matches[4], $replace, PREG_SET_ORDER);
        $find = explode("','", substr($replace[0][1], 1, -1));
        $replace = explode("','", substr($replace[1][1], 1, -1));
        $res = str_replace($find, $replace, $res);
        return $res;
    }

    private function deobfuscateConcatVarsReplaceEval($str, $matches)
    {
        $res = Helpers::concatVariableValues($matches[1]);
        $res = str_replace($matches[5], '', $res);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalVarFunc2($str, $matches)
    {
        return $this->unwrapFuncs($matches[6]);
    }

    private function deobfuscateEvalArrays($str, $matches)
    {
        $res = str_replace('\'\'', '@@empty@@', $str);
        $vars = explode('", "', substr($matches[10], 1, -1));

        $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function ($m) use ($vars, $matches) {
            if ($m[1] !== $matches[9]) {
                return $m[0];
            }
            return "'" . $vars[(int)$m[2]] . "'";
        }, $res);
        $res = str_replace(['\'\'', '@@empty@@', $matches[8]], ['', '\'\'', ''], $res);
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $vars[$var[1]] = '\'' . $var[2] . '\'';
            $res = str_replace($var[0], '', $res);
        }
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscatePregReplaceVar($str, $matches)
    {
        $result = stripcslashes($matches[2]);

        $regex = stripcslashes($matches[1]);
        if ($regex === '.*') {
            return $result;
        }

        $result = preg_replace_callback($regex, static function ($m) {
            return '';
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBinHexVar($str, $matches)
    {
        $func1 = stripcslashes($matches[2]);
        $func2 = stripcslashes($matches[4]);
        $result = '';

        if (Helpers::convertToSafeFunc($func2) && Helpers::convertToSafeFunc($func1)) {
            $result = '?>' . @Helpers::executeWrapper($func1, [@Helpers::executeWrapper($func2, [$matches[6]])]);
        } else {
            $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $matches[6]);
        }

        return $result;
    }

    private function deobfuscateEvalFuncTwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[5]);
        $arg2 = $matches[6];

        $result = "";
        for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) {
            for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) {
                $result .= $arg1[$o] ^ $arg2[$u];
            }
        }

        return $result;
    }

    private function deobfuscateEvalVarReplace($str, $matches)
    {
        $res = $matches[3];
        $replaces = explode(';', $matches[4]);
        foreach ($replaces as $replace) {
            if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) {
                $res = str_replace($m[2], $m[3], $res);
            }
        }
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalPregReplaceFuncs($str, $matches)
    {
        $func1Str = preg_replace('/' . $matches[3] . '/', "", $matches[2]);
        $func2Str = preg_replace('/' . $matches[6] . '/', "", $matches[5]);

        $strToDecode = '';
        preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $matches[8], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $index => $strMatch) {
            if ($index > 0) {
                $strToDecode .= PHP_EOL;
            }
            $strToDecode .= $strMatch[1];
        }

        $result = '';
        if (Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
        }

        if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
            $result = stripcslashes($result);
            $vars = Helpers::collectVars($result);
            if (
                preg_match(
                    '~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi',
                    $result,
                    $m
                )
            ) {
                $result = $m[0];
            }
            $result = Helpers::replaceVarsFromArray($vars, $result);
            $result = preg_replace_callback(
                '~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi',
                function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[1])));
                },
                $result
            );
        }

        return $result;
    }

    private function deobfuscateEvalVarSlashed($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateUrlMd5Passwd($str, $matches)
    {
        while (preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $matches2)) {
            $vars = Helpers::collectVars($matches2[1], "'");
            $str = Helpers::replaceVarsFromArray($vars, $str, true);
            $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function ($m) {
                return "'" . str_rot13(urldecode($m[1])) . "'";
            }, $str);
            $str = str_replace($matches2[0], '', $str);
        }
        return $str;
    }

    private function deobfuscateBlackScorpShell($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], "'");
        $vars2 = Helpers::collectVars($matches[3], "'");
        array_walk($vars2, static function (&$var) {
            $var = "'$var'";
        });
        $str = gzinflate(base64_decode($vars2[$matches[5]]));
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        $str = Helpers::replaceVarsFromArray($vars2, $str);
        $str = str_ireplace('assert', 'eval', $str);
        return $str;
    }

    private function deobfuscateManyDictionaryVars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], "'");
        $result = $matches[2];

        foreach ($vars as $dictName => $dictVal) {
            $result = preg_replace_callback(
                '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi',
                static function ($m) use ($dictVal, $dictName) {
                    if ($m[1] !== $dictName) {
                        return $m[0];
                    }
                    return "'" . $dictVal[(int)$m[2]] . "'";
                },
                $result
            );
        }
        $result = Helpers::replaceVarsFromArray($vars, $result, true, true);
        $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) {
            return $m[2];
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBuffer($str, $matches)
    {
        $result = $matches[4];

        preg_match_all('~"([^"]+)"~msi', $matches[2], $arrMatches, PREG_SET_ORDER);

        $array = [];
        foreach ($arrMatches as $arrMatch) {
            $array[] = stripcslashes($arrMatch[1]);
        }

        $result = str_replace($array, '', $result);

        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalArrayWalkFunc($str, $matches)
    {
        $result = stripcslashes($matches[1]) . '?>' . PHP_EOL;
        $encodedStr = '';

        preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $matches[2], $arrayMatches, PREG_SET_ORDER);

        foreach ($arrayMatches as $arrayMatch) {
            $encodedStr .= stripcslashes($arrayMatch[1]);
        }

        $result .= base64_decode(str_rot13($encodedStr));

        return $result;
    }

    private function deobfuscateEvalDictionaryVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[2]] = $matches[3];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $matches[1]);

        $func = $vars[$matches[5]] ?? null;
        if ($func && Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[6]]);
        }

        $result = Helpers::replaceVarsFromArray($vars, $result);

        return $result;
    }

    private function deobfuscateEvalSubstrVal($str, $matches)
    {
        $result = strtr(
            substr($matches[2], (int)$matches[3] * (int)$matches[4]),
            substr($matches[2], (int)$matches[5], (int)$matches[6]),
            substr($matches[2], (int)$matches[7], (int)$matches[8])
        );

        return '?> ' . base64_decode($result);
    }

    private function deobfuscateEvalFuncXored($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str);
        $result = Helpers::replaceVarsFromArray($vars, $str);

        if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) {
            $encodedStr = gzinflate(base64_decode($matches[1]));
            $len = strlen($encodedStr);
            $result = '';
            for ($i = 0; $i < $len; $i++) {
                $result .= chr((ord($encodedStr[$i]) ^ (int)$matches[3]));
            }
        }

        return $result;
    }

    private function deobfuscateEvalFileContentOffset($str, $matches)
    {
        $result = $matches[1];

        $encodedStr = substr($str, (int)$matches[3]);
        $result = str_replace($matches[2], "'$encodedStr'", $result);

        return '<?php ' . $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalFuncExplodedContent($str, $matches)
    {
        $decodedStr = trim(trim($matches[7], ";"), '"');
        $strMD5 = md5($matches[1]);

        $result = base64_decode(
            str_replace($strMD5, '', strtr($decodedStr . $matches[4], $matches[5], $matches[6]))
        );

        return $result;
    }

    private function deobfuscateEvalEncryptedVars($str, $matches)
    {

        $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) {
            $res = (double)($m[1]) * (int)$m[2];

            return "'$res'";
        }, $matches[1]);

        $vars_str = str_replace('"', "'", Helpers::normalize($vars_str));

        $vars = Helpers::collectVars($vars_str, "'");
        $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str);
        $vars = Helpers::collectFuncVars($vars_str, $vars);
        $vars_str = Helpers::removeDuplicatedStrVars($vars_str);

        if (
            $a = preg_match(
                '~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi',
                $vars_str,
                $varMatch
            )
        ) {
            $vars[$varMatch[1]] = openssl_decrypt(
                base64_decode($varMatch[2]),
                'AES-256-CBC',
                substr(hash('SHA256', $varMatch[3], true), 0, 32),
                OPENSSL_RAW_DATA,
                $varMatch[4]
            );
        }

        $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $matches[7]));
        $result = str_replace($matches[4], str_replace($matches[5], '', "'$matches[6]'"), $result);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalLoveHateFuncs($str, $matches)
    {
        $result = $matches[7];
        $result .= gzinflate(base64_decode($matches[4]));

        /* hate function */
        $finalPHPCode = null;
        $problems = explode(".", gzinflate(base64_decode($matches[2])));
        for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($matches[6])) {
            for ($hug = 0, $hugMax = strlen($matches[6]); $hug < $hugMax; $hug++) {
                $past = (int)$problems[$mistake + $hug];
                $present = (int)ord(substr($matches[6], $hug, 1));
                $sweet = $past - $present;
                $finalPHPCode .= chr($sweet);
            }
        }

        $finalPHPCode = gzinflate(base64_decode($finalPHPCode));

        $result .= PHP_EOL . $finalPHPCode;

        return $result;
    }

    private function deobfuscateXoredKey($str, $matches)
    {
        $encrypted = base64_decode($matches[4]);
        $key = $matches[7];
        $res = Helpers::xorWithKey($encrypted, $key);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalGzB64($str, $matches)
    {
        $res = '';
        preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER);
        foreach ($m as $match) {
            $res .= gzuncompress(base64_decode($match[1])) . "\n";
        }
        return $res;
    }

    private function deobfuscateEvalArrayB64($str, $matches)
    {
        if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) {
            $strlist = explode("','", $found[4]);
            $res = preg_replace_callback(
                '|(\w+)\((\d+)\)|smi',
                function ($m) use ($strlist, $found) {
                    if ($m[1] !== $found[1]) {
                        return $m[0];
                    }
                    return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'";
                },
                $str
            );
            $res = str_replace($matches[1], '', $res);
            return $res;
        }
    }

    private function deobfuscateManyBase64DecodeContent($str)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateEvalEscapedCharsContent($str, $matches)
    {
        $res = $matches[2] . "'" . stripcslashes($matches[1]) . "')";

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalFuncBinary($str, $matches)
    {
        $binaryVals = hex2bin($matches[2]);
        $res = Helpers::decodeEvalFuncBinary($binaryVals);

        return $res;
    }

    private function deobfuscateEvalPackFuncs($str, $matches)
    {
        return stripcslashes($matches[3]) . $matches[4];
    }

    private function deobfuscateParseStrFunc($str, $matches)
    {
        $matches[1] = preg_replace('~(?<=\.)\/\*[^\*]+\*\/|//[^\']+(?=\.\')~msi', '', $matches[1]);
        parse_str(Helpers::concatStr($matches[1]), $vars);
        $funcs = ($matches[5] && $matches[5] !== '') ? $matches[5] : $matches[3];
        $res = Helpers::replaceVarsByArrayName($matches[2], $vars, $funcs);
        $res = $this->unwrapFuncs($res . $matches[6] . ')');
        if (strpos($res, '0+0') !== false) {
            $res = MathCalc::calcRawString($res);
        }

        return $res;
    }

    private function deobfuscateEvalGzinflate($str, $match)
    {
        $res = stripcslashes($match[2]);
        $res = str_replace('"."', '', $res);
        return 'eval(' . $res . ');';
    }

    private function deobfuscateFuncVars($str, $matches)
    {
        $key = $matches[3];
        $res = $matches[7];
        $vars = [$matches[4] => preg_replace($matches[5], "", $matches[6])];

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $matches[4] . '\(("[^"]+")\)\);~msi',
            $str,
            $match,
            PREG_SET_ORDER
        );
        foreach ($match as $matchVar) {
            $value = Helpers::decodeFuncVars($key, $this->unwrapFuncs($vars[$matches[4]] . '(' . $matchVar[3] . ')'));
            if ($matchVar[2] !== '') {
                $func = $vars[$matchVar[2]] ?? $matchVar[2];
                $value = $func . '() . \'' . $value . '\'';
            }
            $vars[$matchVar[1]] = $value;
        }

        foreach ($vars as $name => $val) {
            $res = str_replace($name, $val, $res);
        }
        return $res;
    }

    private function deobfuscateDictVars($str, $match)
    {
        $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]);
        $res = gzinflate(base64_decode(substr($res, 2, -3)));
        return $res;
    }

    private function deobfuscateGotoStrRot13Vars($str, $matches)
    {
        if (isset($matches[2])) {
            $vars = Helpers::collectVars($str);

            preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                if (isset($vars[$m[1]])) {
                    $vars[$m[1]] = str_rot13($vars[$m[1]]);
                }
            }

            preg_match_all('~(\$\w{1,50})~msi', $matches[2], $match, PREG_SET_ORDER);
            $strToDecode = '';
            foreach ($match as $var) {
                if (isset($vars[$var[1]])) {
                    $strToDecode .= $vars[$var[1]];
                }
            }

            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateDecodedDoubleStrSet($str, $matches)
    {
        $strToDecode1 = '';
        $strToDecode2 = '';

        preg_match_all('~"([^"]+)"~msi', $matches[1], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode2 .= $m[1];
        }
        preg_match_all('~\'([^\']+)\'~msi', $matches[2], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode1 .= $m[1];
        }

        return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2);
    }

    private function deobfuscateCreateFuncStrrev($str, $matches)
    {
        $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) {
            return '"' . strrev($m[1]) . '"';
        }, $matches[3]);

        $res = Helpers::concatStringsInContent($res);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $res);
        $res = Helpers::removeDuplicatedStrVars($res);

        if (
            preg_match(
                '~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi',
                $res
            )
        ) {
            $funcs = base64_decode($matches[5]);
            $res = str_replace($matches[1], '\'' . $matches[2] . '\'', $funcs);
        }

        return $res;
    }

    private function deobfuscateStrrevBase64($str, $matches)
    {
        return strrev($matches[2]);
    }

    private function deobfuscateCustomDecode($str, $matches)
    {
        return str_rot13($matches[2] . $matches[6]);
    }

    private function deobfuscateExpDoorCode($str, $matches)
    {
        $str = str_replace(
            [
                    $matches[1],
                    $matches[3]
                ],
            [
                    str_replace(['"."', '\'.\''], '', $matches[1]),
                    "'" . addcslashes(base64_decode($matches[4]), "'") . "'"
                ],
            $str
        );
        return $str;
    }

    private function deobfuscateAgustus1945($str, $matches)
    {
        return str_replace($matches[1], $matches[4] . '"' . $matches[7] . '"' . $matches[5], $str);
    }

    private function deobfuscateIncludeB64($str, $matches)
    {
        return str_replace($matches[1], "'" . base64_decode($matches[2]) . "'", $str);
    }

    private function deobfuscateDecodeFileContent($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateBase64decodedFuncContents($str, $matches)
    {
        $vars   = Helpers::collectVars($matches[2]);
        $res    = str_replace($matches[2], '', $str);
        $res    = Helpers::replaceVarsFromArray($vars, $res);

        return Helpers::replaceBase64Decode($res, '\'');
    }

    private function deobfuscateEvalVarWithComment($str, $matches)
    {
        $res = str_replace($matches[3], '', $matches[2]);
        $vars = Helpers::collectVars($matches[1]);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        return '?> ' . $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalPackPreg($str, $matches)
    {
        $varsStr = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($varsStr, "'");
        if (isset($vars[$matches[6]]) && Helpers::convertToSafeFunc($vars[$matches[6]])) {
            $strToDecode = @Helpers::executeWrapper($vars[$matches[6]], [$matches[2]]);
            $strToDecode = preg_replace('~[' . $matches[5] . ']~i', '', $strToDecode);
            $strToDecode = pack('H*', $strToDecode);

            return $strToDecode;
        }

        return $str;
    }

    private function deobfuscateNib2xeh($str, $matches)
    {
        $matches[3] = str_replace("'", '', $matches[3]);
        $matches[5] = str_replace("'", '', $matches[5]);
        $matches[7] = str_replace("'", '', $matches[7]);
        $replace_from = explode(',', $matches[5]);
        $replace_from[] = ',';
        $replace_to = explode(',', $matches[7]);
        $replace_to[] = '';
        $hex = str_replace($replace_from, $replace_to, $matches[3]);
        return hex2bin($hex);
    }

    private function deobfuscateFun256($str, $matches)
    {
        $need_encode_twice  = !isset($matches[4]);
        $replace            = $need_encode_twice ? $str : $matches[1];
        $code               = $need_encode_twice ? $matches[3] : $matches[4];

        $chr = '';
        for ($i = 0; $i < 120; $i++) {
            $chr .= chr($i);
        }
        $encoded = gzinflate(gzinflate(base64_decode($code)));
        if ($need_encode_twice) {
            $encoded = gzinflate(gzinflate(base64_decode($encoded)));
        }
        $encoded_len = strlen($encoded);
        $hash = sha1(hash('sha256', md5($chr)));
        $hash_len = strlen($hash);
        $j = null;
        $result = '';
        for ($i = 0; $i < $encoded_len; $i += 2) {
            $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16));
            if ($j === $hash_len) {
                $j = 0;
            }
            $delta = ord($hash[$j]);
            $j++;
            $result .= chr($char - $delta);
        }
        $result = str_replace($replace, $result, $str);
        return $result;
    }

    private function deobfuscateCreateFuncObf($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($matches[7], '\'');
        $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $str);
        $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function ($m) {
            return '\'' . Helpers::calc($m[0]) . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        return base64_decode(substr($str, 1, -1));
    }

    private function deobfuscateEvalFileContentBySize($str, $matches)
    {
        $res = $str;
        $mainContent = str_replace(["\r", "\n"], '', $str);
        $mainContentLen = strlen($mainContent);
        $main_key = $matches[2] . $mainContentLen;

        $str_to_code = base64_decode($matches[3]);
        $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key);

        if (
            preg_match(
                '~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi',
                $code,
                $match
            )
        ) {
            preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER);

            $find = '';
            foreach ($chrMatches as $chrMatch) {
                $find .= chr((int)$chrMatch[1]);
            }
            $pos = strpos($mainContent, $find);
            $content = substr($mainContent, 0, $pos);

            $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key);
            if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) {
                $key = md5($content) . $mainContentLen;
                $content = base64_decode(substr($mainContent, $pos + (int)$match[3]));
                $res = Helpers::decodeEvalFileContentBySize($content, $key);
            }
        }

        return '<?php ' . $res;
    }

    private function deobfuscateBase64Array($str, $matches)
    {
        $var_name   = $matches[1];
        $el0        = base64_decode($matches[2]);
        $el1        = Helpers::replaceBase64Decode($matches[3], '\'');
        $code       = $matches[4];

        $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code);
        $code = str_replace($var_name . '[1]', $el1, $code);
        $code = Helpers::replaceBase64Decode($code, '\'');

        return $code;
    }

    private function deobfuscateSimpleVarsAndEval($str, $matches)
    {
        $vars_content = $matches[1];
        $eval_content = $matches[2];

        $vars = Helpers::collectVars($vars_content);
        $code = Helpers::replaceVarsFromArray($vars, $eval_content);

        $code = preg_replace_callback('~\(([\w+/=:\.]{20,})\)~msi', function ($m) {
            return '("' . $m[1] . '")';
        }, $code);

        if (strpos($code, 'base64_decode') === 0) {
            $code = 'eval(' . $code . ')';
        }

        if ($this->getObfuscateType($code) !== '') {
            $code = $this->unwrapFuncs($code);
        }
        return $code;
    }

    private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $matches)
    {
        $nel_function_content   = $matches[3];
        $other_content          = $matches[1] . $matches[4];
        $array_elements         = str_replace('\'.\'', '', $nel_function_content);

        $elements = array_map('base64_decode', explode(',', $array_elements));

        $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function ($match) use ($elements) {
                $index = $match[1];
                $value = isset($elements[$index]) ? $elements[$index] : null;
            if (!is_null($value)) {
                if ($value === "\r") {
                    return '"\\r"';
                }
                return "'" . addcslashes($value, "'\\") . "'";
            }
                return $match[0];
        }, $other_content);

        return Helpers::replaceMinMaxRound($result);
    }

    private function deobfuscateCreateFuncVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateJsonDecodedVar($str, $matches)
    {
        $decodedStr = Helpers::replaceBase64Decode($matches[1], 'QUOTE');
        $decodedStr = str_replace("'", "\'", $decodedStr);
        $decodedStr = str_replace("QUOTE", "'", $decodedStr);

        $res = str_replace($matches[1], $decodedStr, $str);

        return $res;
    }

    private function deobfuscateFilePutPureEncodedContents($str, $matches)
    {
        return $this->deobfuscateJsonDecodedVar($str, $matches);
    }

    private function deobfuscateEvalFuncReverse($str, $matches)
    {
        $decodedContent = $matches[5];
        $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) {
            $strLen = strlen($m[2]);
            $res = '';

            for ($i = 0; $i <= $strLen - 1; $i++) {
                $res .= $m[2][$strLen - $i - 1];
            }

            return str_replace($m[1], $res, $m[0]);
        }, $decodedContent);

        return str_replace($matches[5], $decodedContent, $str);
    }

    private function deobfuscateBase64decodeFuncs($str, $matches)
    {
        $res = $str;
        $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) {
            return "'" . base64_decode($m[1]) . "'";
        }, $res);

        return $res;
    }

    private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);
        $vars = Helpers::collectVars($res, "'");
        $func = stripcslashes($matches[5]);

        return sprintf('eval(%s(%s(\'%s\'))));', $vars[$matches[3]] ?? $matches[3], $func, $matches[6]);
    }

    private function deobfuscateEvalCreateFuncWithVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectVars($res, false);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $res = Helpers::concatStringsInContent($res);
        $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) {
            return str_replace(',', '.', $m[1]);
        }, $res);
        $res = Helpers::concatStringsInContent($res);

        return trim($res, "'");
    }

    private function deobfuscateExplodeSubstrGzinflate($str, $matches)
    {
        $obfuscated = explode($matches[3], gzinflate(substr(stripcslashes($matches[4]), hexdec($matches[5]), (int)$matches[6])));
        $str = str_replace($matches[1], '', $str);
        $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]]\]?(\()?~msi', function ($m) use ($obfuscated) {
            $index = hexdec($m[1]);
            $func = (isset($m[2]) && $m[2] !== '');
            if ($func) {
                return $obfuscated[$index] . '(';
            } else {
                return '\'' . $obfuscated[$index] . '\'';
            }
        }, $str);
        $str = preg_replace('~define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);~msi', '', $str);
        $str = Helpers::normalize($str);
        return $str;
    }

    private function deobfuscateBase64Vars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], '\'');
        $code = Helpers::replaceVarsFromArray($vars, $matches[5], false, true);
        $code = Helpers::collectStr($code, '\'');
        $code = base64_decode($code);
        $code = str_replace($matches[1], $code, $str);
        return $code;
    }

    private function deobfuscateChr0b($str, $matches)
    {
        $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function ($m) {
            if (isset($m[2]) && $m[2] === '0b') {
                return '\'' . chr(bindec($m[1])) . '\'';
            }
            if (isset($m[2]) && $m[2] === '0x') {
                return '\'' . chr(hexdec($m[1])) . '\'';
            }
            return '\'' . chr($m[1]) . '\'';
        }, $str);

        $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function ($m) {
            return '\'' . ($m[1] ^ $m[2]) . '\'';
        }, $str);

        $str = str_replace('\'.\'', '', $str);
        $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str);
        $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) {
            return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';';
        }, $str);
        return $str;
    }

    private function deobfuscateCreateFuncPlugin($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateStrreplaceEval($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1]);
        return Helpers::replaceVarsFromArray($vars, $matches[4]);
    }

    private function deobfuscateHackM19($str, $matches)
    {
        return gzinflate(base64_decode($matches[6]));
    }

    private function deobfuscateEv404($str, $matches)
    {
        return bzdecompress(base64_decode($matches[4]));
    }

    private function deobfuscateSetVars($str, $matches)
    {
        return str_replace($matches[1], gzinflate(base64_decode($matches[5])), $str);
    }

    private function deobfuscateCreateFuncGzB64($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateCreateFuncGzInflateB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateWsoShellDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $vars              = Helpers::collectFuncVars($res, $vars, false);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $finalCode         = $this->unwrapFuncs($res);

        $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $matches[6]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);
        if (isset($vars[$matches[9]]) && $vars[$matches[9]] === 'rotencode') {
            $vars[$matches[8]] = Helpers::rotencode(base64_decode($matches[10]), -1);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[8], $vars[$matches[8]] ?? '', $matches[11]);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $dictVar);
            $vars    = Helpers::collectVars($dictVar, "'", $vars);

            $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[12]));

            $count = 10;
            while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) {
                $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res));
                $count--;
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateFuncDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);

        $vars[$matches[3]] = explode($matches[4], $matches[5]);
        foreach ($vars[$matches[3]] as $i => $k) {
            $temp          = preg_split("//", $k, -1, PREG_SPLIT_NO_EMPTY);
            $vars[$matches[3]][$i] = implode("", array_reverse($temp));
        }

        $iterVar = explode($matches[7], $matches[8]);
        foreach ($iterVar as $i => $k) {
            $vars[$k] = $vars[$matches[3]][$i];
        }

        $vars[$matches[1]] = Helpers::decodefuncDictVars($vars[$matches[1]], -2);
        $dictVar = Helpers::replaceVarsFromDictionary($matches[1], $vars[$matches[1]] ?? '', $matches[15]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $matches[20]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $res = Helpers::decodefuncDictVars($matches[23], 1);
        if (isset($vars[$matches[22]]) && Helpers::convertToSafeFunc($vars[$matches[22]])) {
            $res = @Helpers::executeWrapper($vars[$matches[22]], [$res]);
            $res = Helpers::replaceVarsFromArray($vars, $res);
        }

        if (
            preg_match(
                '~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi',
                $res,
                $match
            )
        ) {
            $res = '?> ' . gzuncompress(base64_decode(
                strtr(
                    substr($match[1], (int)Helpers::calculateMathStr($match[2])),
                    substr($match[1], (int)$match[3], (int)$match[4]),
                    substr($match[1], (int)$match[5], (int)$match[6])
                )
            ));
        }

        return $res;
    }

    private function deobfuscateSec7or($str, $matches)
    {
        $res = $this->unwrapFuncs($matches[3] . $matches[6] . $matches[4] . ';');
        for ($i = 0, $iMax = strlen($res); $i < $iMax; $i++) {
            $res[$i] = chr(ord($res[$i]) - (int)$matches[5]);
        }
        return $res;
    }

    private function deobfuscateLinesCond($str, $matches)
    {
        $vars_str = $this->unwrapFuncs($matches[1]);
        preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $func = base64_decode($var[2]);
            $tmp = explode('=', $var[1]);
            array_pop($tmp);
            $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func));
        }
        $vars = array_merge(...$vars);
        $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) {
            while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) {
                $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0]));
            }
            return $m[0];
        }, $matches[3]);
        $tmp = [];
        $vars = Helpers::collectVars($res, '"', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $vars = Helpers::collectVars($res, '\'', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateClassWithArrays($str, $matches)
    {
        preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $matches[2], $m);
        $data = implode('', array_reverse($m[1]));
        $data = gzuncompress(base64_decode($data));

        $numberSubstr = 14;
        if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) {
            $numberSubstr = (int)Helpers::calculateMathStr($calcMatch[1]);
        }
        for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) {
            if (isset($data[$i])) {
                $param3 = ord($data[$i]);
                $data[$i] = chr($param3 - $numberSubstr);
            }
        }
        $res = gzuncompress(base64_decode(strrev(gzinflate($data))));
        return $res;
    }

    private function deobfuscateGotoBase64Decode($str)
    {
        $res = $str;
        $hop = 5;

        while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) {
            $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $code = base64_decode(stripcslashes($match[1]));
                return '"' . Helpers::unwrapGoto($code) . '"';
            }, $res);

            $hop--;
        }

        return $res;
    }

    private function deobfuscateGotoB64Xor($str, $matches)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateAssertStrrev($str, $matches)
    {
        return str_replace($matches[1], strrev($matches[4]), $str);
    }

    private function deobfuscateB64strtr($str, $matches)
    {
        $code = $matches[4];
        $delta = (int)$matches[1];
        $code = str_split($code);
        foreach ($code as &$c) {
            $c = chr(ord($c) + $delta);
        }
        $code = implode('', $code);
        $code = strtr($code, $matches[2], $matches[3]);
        $code = base64_decode($code);
        preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m);
        $code = gzuncompress(base64_decode(strtr(substr($m[2], 52 * 2), substr($m[2], 52, 52), substr($m[2], 0, 52))));
        $res = Helpers::unwrapGoto($code);
        return $res;
    }

    private function deobfuscateGzB64strReplaceDataImage($str, $matches)
    {
        $strToDecode = str_replace([$matches[2], $matches[3]], [$matches[4], $matches[5]], $matches[7]);

        $res = gzinflate(base64_decode($strToDecode));

        return $res;
    }

    private function deobfuscateSerializeFileContent($str, $matches)
    {
        return base64_decode(strrev(str_rot13($matches[2])));
    }

    private function deobfuscateGlobalVarsManyReplace($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);

        foreach ($vars as &$var) {
            $var = base64_decode(strrev(str_rot13($var)));
        }

        $res = Helpers::replaceVarsFromArray($vars, $matches[2], true, true);

        return $res;
    }

    private function deobfuscateConcatVarsPregReplace($str, $matches)
    {
        $vars = [];

        $vars = Helpers::collectConcatedVars($str, '"', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[3], true, true);
        $res = $this->unwrapFuncs($res);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Decoded($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectConcatedVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);
        $res = Helpers::replaceBase64Decode($res, '"');

        return $res;
    }

    private function deobfuscateFwriteB64DecodedStr($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectFuncVars($res, $vars, false, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Content($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, "'");

        return $res;
    }

    private function deobfuscateChrDictCreateFunc($str, $matches)
    {
        $vars = [];

        preg_match_all('~chr\((\d+)\)~msi', $matches[3], $chrs, PREG_SET_ORDER);

        $dictVar = '';
        foreach ($chrs as $chr) {
            $dictVar .= chr((int)$chr[1]);
        }

        $res = Helpers::replaceVarsFromDictionary($matches[2], $dictVar, $matches[6]);
        $res = str_replace('\\\'', "'", $res);
        $res = Helpers::replaceBase64Decode($res, "'");
        $res = substr($res, 1);
        $res = substr($res, 0, -1);

        return $res;
    }

    private function deobfuscateStrReplaceFuncsEvalVar($str, $matches)
    {
        $func = str_replace($matches[3], '', $matches[2]);

        if ($func === 'base64_decode') {
            return base64_decode($matches[4]);
        }

        return $str;
    }

    private function deobfuscateB64SlashedStr($str, $matches)
    {
        return stripcslashes(base64_decode(stripcslashes($matches[1])));
    }

    private function deobfuscateB64ArrayStrEval($str, $matches)
    {
        return base64_decode($matches[4]);
    }

    private function deobfuscateDictVarsPregReplaceB64($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);

        if (
            strpos($res, 'preg_replace') &&
            strpos($res, 'eval') &&
            strpos($res, 'base64_decode')
        ) {
            return base64_decode($matches[3]);
        }

        return $res;
    }

    private function deobfuscateEvalVarB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateDecodeAChar($str, $matches)
    {
        $res = str_replace($matches[1], '', $str);
        while (strpos($res, 'eval(' . $matches[2] . '(\'') !== false) {
            $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) {
                return Helpers::decodeACharCustom($m[1]);
            }, $res);
        }
        $vars = Helpers::collectVars($res, '\'');
        foreach ($vars as $var => $value) {
            if (strpos($res, $matches[2] . '(' . $var . ')') !== false) {
                $res = str_replace($var . '=\'' . $value . '\';', '', $res);
                $res = str_replace($matches[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res);
            }
        }
        return $res;
    }

    private function deobfuscateStrReplaceCreateFunc($str, $matches)
    {
        $res = $matches[7];
        $funcs = str_replace($matches[3], 'str_replace', $matches[4]);
        $vars = Helpers::collectFuncVars($funcs, $vars, false);
        $vars[$matches[1]] = '\'' . $matches[2] . '\'';
        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
        }
        return 'eval(' . $res . ');';
    }

    private function deobfuscateEvalbin2hex($str, $matches)
    {
        $res = hex2bin($matches[5]) . $matches[6];
        $res = $this->unwrapFuncs($res);
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }

        if (substr_count($res, 'goto ') > 50) {
            $res = Helpers::unwrapGoto($res);
        }
        if (strpos($res, 'document.write(unescape(\'') > 0) {
            $res = preg_replace_callback('~<script type=\'text/javascript\'>document\.write\(unescape\(\'([^\']+)\'\)\)</script>~msi', function ($m) {
                return urldecode($m[1]);
            }, $res);
        }
        return $res;
    }

    private function deobfuscateManyFuncsWithCode($str, $matches)
    {
        $funcs = [$matches[1] => 'decode'];

        preg_match_all(
            '~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi',
            $str,
            $funcMatches,
            PREG_SET_ORDER
        );

        foreach ($funcMatches as $funcMatch) {
            $funcs[$funcMatch[1]] = 'single_var';
        }

        $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) {
            $func = $funcs[$m[1]] ?? false;
            if (!$func) {
                return $m[0];
            }
            if ($func === 'decode') {
                $decoded = "";
                for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) {
                    $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66);
                }

                return '"' . $decoded . '"';
            } elseif ($func === 'single_var') {
                return '"' . $m[2] . '"';
            }
        }, $str);

        return $res;
    }

    private function deobfuscateManyGlobals($str, $matches)
    {
        $vars = [];
        foreach ([$matches[1], $matches[2], $matches[3]] as $m) {
            $hangs = 50;
            $part = $m;
            while (strpos($part, 'base64_decode') !== false && $hangs--) {
                $part = Helpers::replaceVarsFromArray($vars, $part);
                $part = Helpers::replaceBase64Decode($part);
            }
            $ops = explode(';', $part);
            foreach ($ops as $v) {
                if ($v === '') {
                    continue;
                }
                $tmp = explode('=', $v, 2);
                $vars[$tmp[0]] = $tmp[1];
            }
        }
        $res = str_replace([$matches[1], $matches[2], $matches[3]], '', $str);
        $hangs = 50;
        while (strpos($res, '$GLOBALS') !== false && $hangs--) {
            $res = str_replace(array_keys($vars), array_values($vars), $res);
        }
        $res = str_replace('base64_decode(\'\')', '\'\'', $res);
        return $res;
    }

    private function deobfuscateB64xoredkey($str, $matches)
    {
        $b64 = Helpers::collectConcatedVars($matches[2]);
        $b64 = $b64[key($b64)];
        $res = Helpers::xorWithKey(base64_decode($b64), $matches[10]);
        return $matches[1] . $res;
    }

    private function deobfuscateGzB64Func($str, $matches)
    {
        $res = Helpers::normalize($matches[5]);
        $res = str_replace($matches[4], '"' . $matches[6] . '"', $res);
        return $res;
    }

    private function deobfuscateDictArrayFuncVars($str, $matches)
    {
        $dictName = $matches[5];

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $matches[6]);


        $vars[$matches[2]] = 'base64_decode';
        $vars[$matches[3]] = base64_decode(Helpers::concatStr($matches[4]));

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) {
            return '\'' . str_rot13($match[1]) . '\'';
        }, $res);

        $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) {
            preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings);
            $strVar = "";
            foreach ($concatStrings[2] as $index => $concatString) {
                if ($concatStrings[1][$index] === '.') {
                    $strVar .= $concatString;
                } else {
                    $strVar = $concatString;
                }
            }

            return '\'' . $strVar . '\'';
        }, $res);

        $arrayVarDict = [];

        preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER);

        foreach ($arrMatches as $arrMatch) {
            if ($arrMatch[1] === '') {
                continue;
            }
            $arrayVarDict[] = $arrMatch[1];
        }

        $res = str_replace([$matches[1], $matches[6]], '', $str);
        $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) {
            if ($dictName === $match[1]) {
                $res = $arrayVarDict[$match[2]] ?? $match[0];
                if (!Helpers::convertToSafeFunc($res) && $res !== 'json_decode' && $res !== 'create_function' && strpos($res, '$') === false) {
                    $res = '"' . $res . '"';
                }
                return $res;
            }
            return $match[0];
        }, $res);

        return $res;
    }

    private function deobfuscateCreateFuncPackStrRot13($str, $matches)
    {
        return pack('H*', str_rot13($matches[2]));
    }

    private function deobfuscateDictVarsCreateFunc($str, $matches)
    {
        $res = $str;
        $dictName = $matches[2];
        $dictVal = stripcslashes($matches[3]);
        $vars = [];

        $res = preg_replace_callback(
            '~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi',
            function ($m) use (&$vars, $dictName, $dictVal) {
                $varName = $m[1];
                $dictResultStr = '';

                preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER);
                foreach ($dictVars as $dictVar) {
                    if ($dictVar[1] !== $dictName) {
                        continue;
                    }

                    if ((int)$dictVar[2][0] === 0) {
                        $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? '';
                    } else {
                        $dictResultStr .= $dictVal[$dictVar[2]] ?? '';
                    }
                }

                $vars[$varName] = $dictResultStr;

                return '';
            },
            $str
        );

        $codeStr = '';
        preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER);
        foreach ($varsMatch as $var) {
            $codeStr .= $vars[$var[1]] ?? '';
        }

        if (strpos($codeStr, 'eval(base64_decode') !== false) {
            return base64_decode($matches[5]);
        }

        if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) {
            return gzinflate(base64_decode($matches[5]));
        }

        return $str;
    }

    private function deobfuscateDecodedFileGetContentsWithFunc($str, $matches)
    {
        $res = str_replace($matches[6], '', $str);

        $resCode = implode(' ', @Helpers::unserialize(base64_decode($matches[5])));

        if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) {
            $uid = $configs[1];
            $cfg = $configs[2];

            $resCode = preg_replace_callback(
                '~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi',
                static function ($m) use ($uid, $cfg) {
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]);
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid);
                    $configCodeArray = @Helpers::unserialize($configCodeArray);
                    $configCodeArray = var_export($configCodeArray, true);

                    return str_replace($m[1], $configCodeArray, $m[0]);
                },
                $resCode
            );
        }

        $res = str_replace($matches[8], $resCode, $res);

        return $res;
    }

    private function deobfuscateCreateFuncVarsCode($str, $matches)
    {
        $vars = Helpers::collectConcatedVars(stripcslashes($matches[1]));

        $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) {
            $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true));

            $vars[$m[1]] = $var;
        }, $matches[2]);

        $func = Helpers::replaceVarsFromArray($vars, $matches[7], true);
        $code = $this->unwrapFuncs("$func'$matches[6]))");

        if (
            preg_match(
                '~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi',
                $code,
                $codeMatches
            )
        ) {
            $res      = "";
            $arrayNum = [];

            preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $numbers, PREG_SET_ORDER);
            foreach ($numbers as $number) {
                $arrayNum[] = $number[1];
            }

            for ($i = 0; $i < sizeof($arrayNum); $i += 2) {
                if ($i % 4) {
                    $res .= substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]);
                } else {
                    $res .= strrev(substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]));
                }
            };

            $res = $this->unwrapFuncs("$func'$res))");
            if ($res) {
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscatePregConcat($str, $matches)
    {
        return Helpers::normalize($matches[2]);
    }

    private function deobfuscateUndefinedDFunc($str, $matches)
    {
        return 'eval(gzinflate(str_rot13(base64_decode(' . $matches[2] . '))));';
    }

    private function deobfuscateXoredStrings($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\s*(?:\s*/\*[^\*]+\*/\s*)?\^(?:\s*/\*[^\*]+\*/\s*)?\s*"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function ($m) {
            return '$' . $m[1];
        }, $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, false);

        if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) {
            $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m);
        }
        $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function ($m) {
            return '';
        }, $res);
        $res = str_replace('\\\'', '@@slaapos@@', $res);
        preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m);
        $res = str_replace('@@slaapos@@', '\\\'', $m[1]);
        $res = stripcslashes($res);

        $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $res);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function ($m) {
            return '$' . $m[1];
        }, $res);

        $replace = function ($m) use (&$vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $vars[$m[1]] . '(';
            }
            return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]];
        };

        Helpers::collectVars($res, '\'', $vars, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);
        Helpers::collectFuncVars($res, $vars, true, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);

        $res = preg_replace('~;+~msi', ';', $res);
        return $res;
    }

    private function deobfuscateCommentWithAlgo($str, $matches)
    {
        return str_replace($matches[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($matches[1])))))), '\''), $str);
    }

    private function deobfuscateDefinedB64($str, $matches)
    {
        return str_replace([$matches[1], $matches[6], $matches[8]], ['', '', gzinflate(base64_decode($matches[9]))], $str);
    }

    private function deobfuscateB64Xored($str, $matches)
    {
        return base64_decode(Helpers::xorWithKey(base64_decode($matches[4]), $matches[6]));
    }

    private function deobfuscateB64AssignedVarContent($str, $matches)
    {
        return str_replace($matches[4], "'" . (base64_decode($matches[2])) . "'", $matches[3]);
    }

    private function deobfuscateDictVarsWithMath($str, $matches)
    {
        $dictVal = $matches[2];

        $dictStrs = Helpers::calculateMathStr($matches[3]);
        $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs);
        $vars = Helpers::collectVars($str, '"', $vars);
        $vars = Helpers::collectConcatedVars($str, '"', $vars);

        return $vars[$matches[4]] ?? $str;
    }

    private function deobfuscateClassDecryptedWithKey($str, $matches)
    {
        $key = 'WebKit#58738Educ';

        $data = hex2bin($matches[2]);
        $res = Helpers::decodeClassDecryptedWithKey($data, 32, $key);

        if (strpos($res, 'error_reporting(') !== false) {
            return $res;
        }

        return $str;
    }

    private function deobfuscatePHPkoru($str, $matches)
    {
        $vars[$matches[2]] = str_rot13(base64_decode($matches[3]));
        $vars[$matches[4]] = str_rot13(base64_decode($matches[5]));
        $vars = Helpers::collectFuncVars($str, $vars, false);
        $vars = Helpers::collectVars($str, '\'', $vars);
        $code = $matches[6];
        while (strpos($code, 'eval') === 0) {
            $code = str_replace(array_keys($vars), array_values($vars), $code);
            $code = $this->unwrapFuncs($code);
        }
        $code = str_replace(array_keys($vars), array_values($vars), $code);
        $decoded = '';
        if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*(base64_decode\()?[\'"]([^"]+)[\'"]\)?,\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\),\s*(\d+),\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\)\)\);~msi', $code, $openssl_data)) {
            $data = base64_decode(trim($matches[9]));
            $algo = strpos($openssl_data[1], 'base64_decode') === false
                ? $openssl_data[2]
                : base64_decode($openssl_data[2]);
            $passphrase = base64_decode(str_rot13($openssl_data[3]));
            $iv = base64_decode(str_rot13($openssl_data[5]));
            $flags = $openssl_data[4];
            $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv);
            $decoded = str_rot13(base64_decode(str_rot13($decoded)));
        }
        return ' ?> ' . PHP_EOL . $decoded;
    }

    private function deobfuscateJoomlaInject($str, $matches)
    {
        $vars = Helpers::collectVars($matches[0]);
        preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data);
        preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $matches[0], $to_decode);
        foreach ($to_decode[1] as &$item) {
            if ($item[0] === '"' && $item[-1] === '"') {
                $item = substr($item, 1, -1);
            }
            $item = str_replace(array_keys($vars), array_values($vars), $item);
            $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'";
        }
        $res = str_replace($to_decode[0], $to_decode[1], $str);
        return $res;
    }

    private function deobfuscateFwriteB64Content($str, $matches)
    {
        $res = $str;

        $res = str_replace($matches[1], '', $res);
        $replace = base64_decode($matches[3]);

        $res = str_replace($matches[4], "'" . $replace . "'", $res);

        return $res;
    }

    private function deobfuscateB64concatedVars($str, $matches)
    {
        $res = $matches[6];

        $code = "'" . base64_decode($matches[2]) . base64_decode($matches[5]) . "'";

        $res = str_replace($matches[7], $code, $res);

        return $res;
    }

    private function deobfuscateSlashedCreateFunc($str, $matches)
    {
        $func = stripcslashes($matches[2]);

        if (strpos($func, 'create_function') !== false) {
            $code = stripcslashes($matches[5]);
            $code = str_replace($matches[4], $matches[6], $code);

            return $code;
        }

        return $str;
    }

    private function deobfuscateVarDictCreateFunc($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);

        $vars = [];
        $vars = Helpers::collectVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscatecallFuncGzB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[1]));
    }

    private function deobfuscateAssertDictVarEval($str, $matches)
    {
        $dict = $matches[2];
        $arr  = [];
        for ($i = 0; $i < 6; $i++) {
            $arr[] = (int)$matches[4 + $i];
        }

        $assertStr = "";
        for ($i = 0; $i < 6; $i++) {
            $temp      = $arr[$i];
            $assertStr .= $dict[$temp];
        }

        $funcs = Helpers::concatStringsInContent(stripcslashes($matches[13]));
        if ($assertStr === 'assert' && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) {
            return base64_decode(gzinflate(base64_decode($matches[11])));
        }

        $vars               = [];
        $vars[$matches[10]] = $matches[11];
        $vars[$matches[12]] = $assertStr;

        return Helpers::replaceVarsFromArray($vars, $funcs);
    }

    private function deobfuscateB64FuncEvalGz($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[4])));
    }

    private function deobfuscateB64Gz($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[2]));
        $break = isset($matches[5]) ? '?>' : '';

        return $break . $result;
    }

    private function deobfuscateSubstrEmpty($str, $matches)
    {
        $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) {
            return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"';
        }, $str);
        $str = str_replace(['"."', '"".'], '', $str);
        return $str;
    }

    private function deobfuscateDeltaOrd($str, $matches)
    {
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $funcs = array_reverse(array_filter(explode('(', $matches[6])));
            $str = $matches[7];
            foreach ($funcs as $func) {
                $str = Helpers::executeWrapper($func, [$str]);
            }
        } else {
            $str = gzinflate(base64_decode(stripcslashes($matches[7])));
        }

        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $str[$i] = chr(ord($str[$i]) + (int) $matches[4]);
        }
        return $str;
    }

    private function deobfuscateOutputBuffer($str, $matches)
    {
        $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[5], 1, -1)));
        $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[6], 1, -1)));
        $replace = array_map('stripcslashes', $replace);
        $buffer = str_replace($search, $replace, $matches[1] . $matches[9]);
        for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) {
            $buffer[$i] = chr(ord($buffer[$i]) - $j - $i);
        }
        $buffer[0] = ' ';
        return $buffer;
    }

    private function deobfuscateDoorwayInstaller($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '"', $vars, true);
        $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function ($m) use ($matches, $vars) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . base64_decode($m[2]) . '\'';
            }
            if (isset($m[3]) && isset($vars[$m[3]])) {
                return '\'' . base64_decode($vars[$m[3]]) . '\'';
            }
        }, $str);
        return $str;
    }

    private function deobfuscateStrReplaceAssert($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[2])));
    }

    private function deobfuscateAnaLTEAMShell($str, $matches)
    {
        preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m);
        $vars = array_combine($m[1], $m[2]);
        $str = str_replace($m[0], '', $str);
        $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function ($m) use ($vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            return '$' . $vars[$m[1]];
        }, $str);
        $str = Helpers::replaceBase64Decode($str);
        $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) {
            $res = str_replace($m[1], '', $m[0]);
            $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res);
            return $res;
        }, $str);
        $str = stripcslashes(stripcslashes($str));
        return $str;
    }

    private function deobfuscateZeuraB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[10]));
    }

    private function deobfuscateD5($str, $matches)
    {
        $content = explode(hex2bin($matches[4]), $str)[1];
        $tmp = [];
        for ($i = 0; $i < strlen($content); $i++) {
            $tmp[] = ord($content[$i]) xor $i;
        }
        $content = hex2bin(base64_decode(implode(array_map(hex2bin($matches[8]), $tmp))));
        return $content;
    }

    private function deobfuscateStrReplaceFunc($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[3], $vars, false, true);
        $cmd = Helpers::replaceVarsFromArray($vars, $matches[5]);
        if (strpos($cmd, 'create_function') === 0) {
            $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd);
        }
        $res = str_replace($matches[6], '\'' . $matches[7] . '\'', $cmd);
        return $res;
    }

    private function deobfuscateArrayMapB64($str, $matches)
    {
        $array = explode('\',\'', substr($matches[2], 1, -1));
        return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php ';
    }

    private function deobfuscatePregReplaceStrReplace($str, $matches)
    {
        return str_replace($matches[1], $matches[2], stripcslashes($matches[3]));
    }

    private function deobfuscateEchoB64($str, $matches)
    {
        return str_replace([$matches[2], $matches[5]], ['\'' . base64_decode($matches[3]) . '\'', '\'' . base64_decode($matches[6]) . '\''], $str);
    }

    private function deobfuscateCreateFuncXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = Helpers::collectVars($res, '\'', $vars, true);
        $res = gzinflate(base64_decode($matches[2]));
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        $code = $res;
        if (preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $code, $matches)) {
            $code = stripcslashes($matches[1]);
            $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function ($m) {
                return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
            }, $code);
            $code = MathCalc::calcRawString($code);
            $vars = [];
            $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function ($m) use (&$vars) {
                $vars['$' . $m[1] . '('] = $m[2] . '(';
                $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
                return '';
            }, $code);
            $vars['&& !$_0 '] = '&&';
            $vars['if($_0 '] = 'if(';
            krsort($vars);
            $code = str_replace(array_keys($vars), array_values($vars), $code);
        }

        if (preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m)) {
            $code = str_replace($m[0], '', $code);
            $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code);
        }
        $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $code);
        $vars = [];
        $code = preg_replace_callback('~(?|\$\{\'(\w+)\'\}\s*=\s*\'(\w+)\'|\$(\w+)\s*=\s*\'(\w+)\');+\s*~msi', function ($m) use (&$vars) {
            $vars['$' . $m[1] . '('] = $m[2] . '(';
            $vars['${\'' . $m[1] . '\'}' . '('] = $m[2] . '(';
            $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
            $vars['${\'' . $m[1] . '\'}'] = '\'' . $m[2] . '\'';
            return '';
        }, $code);
        $code = Helpers::replaceVarsFromArray($vars, $code);
        return $code;
    }

    private function deobfuscateCodeLockDecoder($str, $matches)
    {
        $codelock_stub = base64_decode($matches[1]);
        if (isset($matches[2]) && $matches[2] !== '') {
            $codelock_stub = gzinflate($codelock_stub);
            $hangs = 20;
            while (strpos($codelock_stub, 'eval') === 0 && $hangs--) {
                $codelock_stub = $this->UnwrapFuncs($codelock_stub);
            }
        }

        preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_active_key = $m[1];
        preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_usezlib = $m[1];
        $codelock_key_data = $matches[3];
        if ($codelock_usezlib === "^") {
            $codelock_key_data = base64_decode($codelock_key_data);
            $codelock_key_data = gzinflate($codelock_key_data);
        }
        if (substr($codelock_active_key, 0, 15) !== "codelock_active") {
            $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key);
        } else {
            preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m);
            $codelock_active_key = $m[1];
            $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key);
        }

        return $codelock_key_data;
    }

    private function deobfuscateEvalGzStrRotB64($str, $matches)
    {
        return gzinflate(str_rot13(base64_decode($matches[2])));
    }

    private function deobfuscateEvalDictArrayConcat($str, $matches)
    {
        $dictVal = '';
        preg_match_all('~[\'"]([^\'"])[\'"]~msi', $matches[2], $m, PREG_SET_ORDER);
        foreach ($m as $char) {
            $dictVal .= $char[1];
        }

        $replacedStr = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $str);
        $vars = Helpers::collectVars($replacedStr);

        $funcs = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $funcs = Helpers::concatStringsInContent($funcs);
        $funcs = strtolower($funcs);

        if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) {
            return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($matches[6])))));
        }

        return $str;
    }

    private function deobfuscatePregReplaceXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = [];
        $vars = Helpers::collectVars($res, '\"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $res = str_replace('\'.\'', '', $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = str_replace(['preg_replace("/' . $matches[2] . '/e",\'\'', '\'\',"' . $matches[2] . '");'], '', $res);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateR4C($str, $matches)
    {
        $vars = [];
        $res = $str;
        $hangs = 20;
        do {
            Helpers::collectConcatedVars($res, '"', $vars, true);
            $res = str_replace('"".$', '$', $res);
            Helpers::collectConcatedVars($res, '\'', $vars, true);
            $res = trim($res);
            $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
            $res = $this->unwrapFuncs($res);
        } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--);
        return $res;
    }

    private function deobfuscateBase64EncryptedGz($str, $matches)
    {
        $text       = $matches[1];
        $hash       = $matches[3];
        $key        = 'asdf';
        $key_len    = strlen($key);

        $text       = base64_decode(str_replace("\n", '', $text));
        $text_len   = strlen($text);

        $w = [];
        for ($i = 0; $i < $key_len; ++$i) {
            $w[] = $text_len - $key_len - ord($key[$i]);
        }

        for ($i = 0; $i < $text_len; ++$i) {
            $j          = abs($w[$i % $key_len] - $i);
            $x          = $text[$j];
            $text[$j]   = $text[$i];
            $text[$i]   = $x;
        }

        if ($key_len < 10) {
            $key_len *= $key_len & 1 ? 3 : 2;
        }

        if (($text = @gzinflate($text)) && (md5(substr($text, 0, $key_len)) === $hash)) {
            return substr($text, $key_len);
        }

        return '';
    }

    private function deobfuscateBloos3rpent($str, $matches)
    {
        $matches[3] = str_replace('\\\'', '\'', $matches[3]);
        $matches[4] = str_replace('\\\'', '\'', $matches[4]);
        $decoder = strtr($matches[5], $matches[3], $matches[4]);
        preg_match('~\$\w+\s*=\s*\[((?:\'[\da-fx]+\',?)+)\];~msi', $decoder, $funcs);
        $funcs = explode('\',\'', substr($funcs[1], 1, -1));
        $funcs = array_map('hex2bin', $funcs);
        preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*global\s*(\$\w+);\s*return\s*\3\[\d+\]\(\'([^\']+)\',function\(\$\w+\)\s*\{\s*if[^}]+\}return\s*\$\w+;\s*\}\s*else\{\s*return\s*chr[^}]+\}\},\$\w+\);\s*\}\s*function\s*(\w+)\(\$\w+\)\s*\{\s*global\s*\3;\s*eval\(\3\[\d+\]\(\$\w+\)\);\s*\}~msi', $decoder, $tmp);
        $strtr_func = $matches[1];
        $decode_code_func = $tmp[1];
        $eval_func = $tmp[5];
        $arr_funcs = $tmp[3];
        $code = Helpers::replaceVarsFromDictionary($arr_funcs, $funcs, $matches[7], false);
        $hangs = 20;
        while (preg_match('~(\w+)\(\'([^\']+)\'\)~msi', $code) && $hangs--) {
            $code = preg_replace_callback('~(\w+)\(\'([^\']+)\'\)~msi', function ($m) use ($strtr_func, $decode_code_func, $matches) {
                if ($m[1] === $strtr_func) {
                    return '\'' . strtr($m[2], $matches[3], $matches[4]) . '\'';
                }
                if ($m[1] === $decode_code_func) {
                    return '\'' . stripcslashes($m[2]) . '\'';
                }
                if (Helpers::convertToSafeFunc($m[1])) {
                    return '\'' . @Helpers::executeWrapper($m[1], [$m[2]]) . '\'';
                }
                return $m[0];
            }, $code);
        }
        $code = stripcslashes(substr($code, 1, -2));
        return $code;
    }

    private function deobfuscateDoublePregReplace($str, $matches)
    {
        $matches[2] = substr($matches[2], 1, -1);
        $decoder = @gzinflate(base64_decode(preg_replace('~' . $matches[2] . '~', $matches[3], $matches[4])));
        $res = str_replace($matches[1], $decoder, $str);
        $res = str_replace([$matches[11], $matches[5], $matches[7]], '', $res);
        $res = str_replace('\')))));', '\'))));', $res);
        return $res;
    }

    private function deobfuscateZeura2($str, $matches)
    {
        return 'eval(base64_decode(gzinflate(base64_decode(\'' . $matches[6] . '\'))));';
    }

    private function deobfuscateOneFuncStrDecodeVars($str, $matches)
    {
        $func_content_to_remove = $matches[1];
        $func_name = $matches[2];
        $dict = $matches[5];

        $dictConvert = function ($array_str) use ($dict) {
            $array = preg_split('~\s*,\s*~ms', $array_str);
            $result = '';
            foreach ($array as $item) {
                $result .= isset($dict[$item]) ? $dict[$item] : '';
            }
            return $result;
        };

        $vars = [];
        $str = preg_replace_callback('~(\$\w{1,20})\s?=\s?array\(([\d,]{1,200})\);\s*(\$\w{1,20})\s?=\s?(\w{1,20})\(\1\);~mis', function ($m) use ($func_name, $dictConvert, &$vars) {
            if ($m[4] != $func_name) {
                return $m[0];
            }
            $vars[$m[3]] = $dictConvert($m[2]);
            return '';
        }, $str);

        $str = preg_replace_callback('~(\$\w{1,20})\s*\(~mis', function ($item) use ($vars) {
            if (isset($vars[$item[1]])) {
                return $vars[$item[1]] . '(';
            }
            return $item[0];
        }, $str);

        return str_replace($func_content_to_remove, '', $str);
    }

    private function deobfuscateZeura4($str, $matches)
    {
        //Sample: zeura4_1.php, zeura4_2.php, zeura4_3.php, zeura4_4.php, zeura4_5.php

        $encrypted_string1 = $matches[2];
        $encrypted_string2 = $matches[5];

        $string1 = base64_decode($encrypted_string1);
        if (!preg_match('~array\(\d{1,10},(\d{1,10}),(\d{1,10})\)~mis', $string1, $m)) {
            return $str;
        }
        $key1 = $m[1];
        $key2 = $m[2];

        $offset = (int)$key1 + (int)$key2;
        $php = gzinflate(base64_decode(substr(trim($encrypted_string2), $offset)));
        if ($php === false) {
            return $str;
        }
        return stripcslashes($php);
    }

    private function deobfuscateCreateFuncEscaped($str, $matches)
    {
        return base64_decode($matches[6]);
    }

    private function deobfuscateMaskedDeltaOrd($str, $matches)
    {
        $matches[3] = '';
        $matches[7] = base64_decode($matches[2]);
        $matches[4] = '-1';
        return $this->deobfuscateDeltaOrd($str, $matches);
    }

    private function deobfuscatedecodeStrMultiForDict($str, $matches)
    {
        $strToDecode = str_replace(['-m ', ' ', PHP_EOL], '', $matches[3]);
        $strToDecode = base64_decode($strToDecode);

        $decodeArray = [];
        for ($i = 0; $i < 256; ++$i) {
            $decodeArray [$i] = $i;
        }

        $index = 0;
        for ($i = 0; $i < 256; ++$i) {
            $index                = ($index + $decodeArray [$i] + ord($matches[6] [$i % 63])) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
        }

        $i     = 0;
        $index = 0;
        for ($j = 0; $j < (int)$matches[10]; ++$j) {
            $i                    = ($i + 1) % 256;
            $index                = ($index + $decodeArray [$i]) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
            $strToDecode [$j]     = $strToDecode [$j] ^ chr($decodeArray [($decodeArray [$i] + $decodeArray [$index]) % 256]);
        }

        return $strToDecode;
    }

    private function deobfuscateB64ConcatedStrVars($str, $matches)
    {
        $vars        = Helpers::collectVars($str, "'");
        $code        = base64_decode($matches[2]);
        $strToDecode = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $strToDecode = Helpers::concatStringsInContent($strToDecode);
        if (preg_match('~(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?return\s?@?eval\(\1\);~msi', $code)) {
            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateChrFuncVars($str, $matches)
    {
        $result = preg_replace_callback('~' . $matches[1] . '\(array\(((?:\d+,?)+)\)\)~msi', function ($m) {
            $data = '';
            preg_match_all('~\d+~msi', $m[0], $nums, PREG_SET_ORDER);
            foreach ($nums as $num) {
                $data .= chr($num[0]);
            }
            return "'" . $data . "'";
        }, $str);

        return $result;
    }

    private function deobfuscateConcatVarsFuncs($str, $matches)
    {
        $concatedStr = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($concatedStr);
        $data = Helpers::concatStringsInContent($matches[2]);
        $data = Helpers::replaceVarsFromArray($vars, $data);

        $code = $this->unwrapFuncs($data);

        if (preg_match('~eval\(rawurldecode\("([^"]+)"~msi', $code, $m)) {
            return rawurldecode($m[1]);
        }

        return $code;
    }

    private function deobfuscateBlackshadow($str, $matches)
    {
        return ($matches[5] . '\'' . $matches[4] . $matches[2] . '\'' . $matches[7]);
    }

    private function deobfuscateGlobalDictVar($str, $matches)
    {
        $str = str_replace($matches[2], '', $str);
        $dict = stripcslashes($matches[4]);
        $str = preg_replace_callback('~\$\w+\[\'\w+\'\]\[(\d+)\]~msi', function ($m) use ($dict) {
            return '\'' . $dict[(int)$m[1]] . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        $vars = [];
        $str = preg_replace_callback('~(\$\w+\[\'(\w+)\'\])=(\'[^\']+\'|\$_POST|\$_GET|\$_COOKIE);(?!global)~msi', function ($m) use (&$vars) {
            if ($m[3][0] === '\'') {
                $m[3] = substr($m[3], 1, -1);
            }
            $vars[$m[1]] = $m[3];
            $vars['$' . $m[2]] = $m[3];
            return '';
        }, $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateGarbageVars($str, $matches)
    {
        $str = preg_replace('~"([\w@/:\?>,=\}\.]*)"~msi', '\'\1\'', $str);
        $str = preg_replace_callback('~(?:\'\s*\.\s*(\w+)|(\w+)\s*\.\s*\')~msi', function ($m) {
            if (isset($m[1]) && $m[1] !== '') {
                return '\' . \'' . $m[1] . '\'';
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . $m[2] . '\' . \'';
            }
        }, $str);

        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        $str = preg_replace_callback('~(?|\'([^\']+)\'|(\w+))\s*([\^\|\&])\s*(\~)?(?|\'([^\']+)\'|(\w+))~msi', function ($m) {
            if (isset($m[3]) && $m[3] !== '') {
                $m[4] = ~$m[4];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[4]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[4]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[4]) . '\'';
            }
        }, $str);

        $vars = Helpers::collectVars($str, '\'', $vars, true);

        $str = preg_replace_callback('~(?|\(\'([^\']+)\'\)|(\$\w+))([\^\&\|])(?|\(\'([^\']+)\'\)|(\$\w+))~msi', function ($m) use ($vars) {
            if ($m[1][0] === '$' && isset($vars[$m[1]])) {
                $m[1] = $vars[$m[1]];
            }
            if ($m[3][0] === '$' && isset($vars[$m[3]])) {
                $m[3] = $vars[$m[3]];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[3]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[3]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[3]) . '\'';
            }
        }, $str);

        Helpers::collectVars($str, '\'', $vars, true);
        foreach ($vars as $var => $val) {
            $str = str_replace($var . '(', $val . '(', $str);
            $str = str_replace($var, '\'' . $val . '\'', $str);
        }
        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        return $str;
    }

    private function deobfuscateChrMinXor($str, $matches)
    {
        $code = (isset($matches[2]) && $matches[2] !== '') ? convert_uudecode(str_replace($matches[5], '', $matches[2])) : base64_decode(strrev($matches[3]));
        $table = [];
        if (isset($matches[5]) && $matches[5] !== '') {
            for ($i = 0; $i < 256; ++$i) {
                $table[$i] = $i;
            }
            $j = 0;
            for ($i = 0; $i < 256; ++$i) {
                $j = ($j + $table[$i] + ord($matches[6][$i % (strlen($matches[6]) - 1)])) % 256;
                $tmp = $table[$i];
                $table[$i] = $table[$j];
                $table[$j] = $tmp;
            }
            $j = 0;
            $k = 0;
            for ($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $j = ($j + 1) % 256;
                $k = ($k + $table[$j]) % 256;
                $tmp = $table[$j];
                $table[$j] = $table[$k];
                $table[$k] = $tmp;
                $code[$i] = $code[$i] ^ chr($table[($table[$j] + $table[$k]) % 256]);
            }
        } else {
            for ($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $code[$i] = $code[$i] ^ $matches[6][$i % (strlen($matches[6]) - 1)];
            }
        }

        return $code;
    }

    private function deobfuscateFakeChop($str, $matches)
    {
        $offset = 2;
        $tmp = base64_decode($matches[2]);
        preg_match('~if\(\$\w+\)(\$\w+)=\$\w+\(\'([^\']+)\',\s*\(\(\$\w+\!=\d+\)\?\'[^\']+\':\'([^\']+)\'\),\1\);\$\w+\+=__LINE__\*1;~msi', $tmp, $m);
        $matches[3] = str_replace($m[2], $m[3], $matches[3]);
        $tmp = base64_decode(substr($matches[3], $offset));
        preg_match('~\w+=\'([^\']+)\';~msi', $tmp, $m);
        $code = base64_decode(substr($m[1], $offset));
        $dicts = [];
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\(pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\),pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\)\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode(pack($dicts[$m[2]][$m[3]], $dicts[$m[4]][$m[5]]), pack($dicts[$m[6]][$m[7]], $dicts[$m[8]][$m[9]]));
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]\[([xa-f\d]+)\](\()?~msi', function ($m) use ($dicts) {
            $offset = $m[2][1] === 'x' ? hexdec($m[2]) : ($m[2][0] === '0' ? octdec($m[2]) : $m[2]);
            return (isset($m[3]) && $m[3] !== '') ? $dicts[$m[1]][$offset] . '(' : '\'' . $dicts[$m[1]][$offset] . '\'';
        }, $code);
        $code = preg_replace_callback('~pack\(\'H\*\',\'([\da-f]+)\'\)~msi', function ($m) {
            return '\'' . pack('H*', $m[1]) . '\'';
        }, $code);
        preg_match('~\$[^=]+=array\(array\((\'[^\)]+)\)\);~msi', $code, $m);
        $m[1] = substr($m[1], 1, -1);
        $m[1] = str_replace('\',\'', '', $m[1]);
        $code = base64_decode(str_rot13($m[1]));
        return $code;
    }

    private function deobfuscateAssertUrldecode($str, $matches)
    {
        return $this->deobfuscateEval(stripcslashes($matches[2]), []);
    }

    private function deobfuscateImplodeB64Gz($str, $matches)
    {
        $b64str = str_replace('\',\'', '', $matches[2]);
        $code = gzuncompress(base64_decode($b64str));
        $code = MathCalc::calcRawString($code);
        $code = Helpers::normalize($code);
        $arr = [];
        $func = '';
        $code = preg_replace_callback('~if\(!function_exists\(\'(\w+)\'\)\)\{function\s*\1\((\$\w+)\)\s*\{(\$\w+)=array\(([^)]+)\);return\s*base64_decode\(\3\[\2\]\);\}~msi', function ($m) use (&$arr, &$func) {
            $arr = explode('\',\'', substr($m[4], 1, -1));
            $func = $m[1];
            return '';
        }, $code);
        foreach ($arr as $i => $data) {
            $code = str_replace($func . '(' . $i . ')', '\'' . base64_decode($data) . '\'', $code);
        }
        return $code;
    }

    private function deobfuscateEvalStrReplace($str, $matches)
    {
        return base64_decode(str_replace($matches[8], '', $matches[2]));
    }

    private function deobfuscateX12($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $matches[2] = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
        $matches[2] = Helpers::normalize($matches[2]);
        $funcs = Helpers::collectVars($matches[2], '\'');
        $matches[3] = Helpers::replaceVarsFromArray($funcs, $matches[3]);
        return $this->deobfuscateEval($matches[3], []);
    }

    private function deobfuscateWpNightmare($str, $matches)
    {
        return gzinflate(base64_decode($matches[8]));
    }

    private function deobfuscateXorGzUncompress($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], '\'');
        $code = array_pop($vars);
        $code = base64_decode($code);
        $code = Helpers::xorWithKey($code, $matches[10]);
        return gzuncompress($code);
    }

    private function deobfuscateEvalSubstr($str, $matches)
    {
        return base64_decode(substr(strrev($matches[2]), (int)$matches[3], (int)$matches[4]));
    }

    private function deobfuscateEvalStrrev($str, $matches)
    {
        $code = base64_decode(strrev($matches[2]));
        return $code;
    }

    private function deobfuscateStrRot13ConvertUUDecode($str, $matches)
    {
        $decode = str_rot13($matches[2]);
        $decode = stripcslashes($decode);
        if (preg_match('~eval\(convert_uudecode\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(convert_uudecode\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(strrev\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = strrev($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(str_rot13\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = str_rot13($decode);
        }

        $decode = $this->deobfuscateEval($decode, []);
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval\(convert_uudecode\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\\\\\\\\\)\);\\\\\1\s*\(verrts\(lave\'\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)|(\\\\\\\\))~m', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
                if (isset($g[3]) && $g[3] !== '') {
                    return '';
                }
            }, $m[2]);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'riny\(pbaireg_hhqrpbqr\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\)\);\1\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\))~msi', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
            }, $m[2]);
            $decode = convert_uudecode(str_rot13($decode));
        }
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\';\)\)\s*\\\\\'~msi', '~\\\\\'\s*\(verrts\(lave\'\s*\)\);~msi'], '', $decode);
            $decode = preg_replace_callback('~(?:(\\\\\')|(\\\\\\\\))~msi', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '';
                }
            }, $decode);
        }
        return $decode;
    }

    private function deobfuscateCreateFuncHex($str, $matches)
    {
        $decode = stripcslashes($matches[5]);
        $decode = str_replace($matches[4], '\'' . $matches[6] . '\'', $decode);
        return $decode;
    }

    private function deobfuscatePregB64Strrev($str, $matches)
    {
        return $this->deobfuscateEvalStrrev($str, $matches);
    }

    private function deobfuscatePregB64FuncImgStr($str, $matches)
    {
        $decodedStr = base64_decode($matches[13]);

        if (preg_match('~<img src="data:image/png;(.*)">~msi', $decodedStr, $foundB64) !== false) {
            $decodedStr = str_replace(
                [base64_decode($matches[4]), base64_decode($matches[5])],
                [base64_decode($matches[6]), base64_decode($matches[7])],
                $foundB64[1]
            );
            $decodedStr = gzinflate(base64_decode($decodedStr));

            return str_replace($matches[11], $decodedStr, $str);
        }

        return $str;
    }

    private function deobfuscateUtfCharVarsFuncEval($str, $matches)
    {
        $vars = [];
        $res = $str;
        $globalVarName = $matches[1];
        $funcName = $matches[2];

        $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);

        for ($i = 0; $i < 10; $i++) {
            $found = false;

            if (preg_match('~eval\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+(\s*[\'"\)]+)+\s*;~msi', $res, $matches)) {
                $unWrapped = $this->unwrapFuncs($matches[0]);
                $res = str_replace($matches[0], $unWrapped, $res);
                $found = true;
            } elseif (preg_match('~eval\(' . $funcName . '\(base64_decode\(\'([^\']+)\'\)+;~msi', $res, $funcMatch)) {
                $code = base64_decode($funcMatch[1]);
                $code = Helpers::utfCharVarsFuncEvalVarDecoder($code);
                $res = str_replace($funcMatch[0], $code, $res);
                $found = true;
            }
            if ($found) {
                $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);
            } else {
                break;
            }
        }
        $res = Helpers::replaceBase64Decode($res);

        return $res;
    }

    private function deobfuscateManyVarFuncCreateFuncWrap($str, $matches)
    {
        $createFuncCode = hex2bin(pack('H*', $matches[8]));
        if (strpos($createFuncCode, 'eval($') !== false) {
            return gzinflate(hex2bin(pack('H*', $matches[9])));
        }

        return $str;
    }

    private function deobfuscateTwoCalcClasses($str, $matches)
    {
        $func1_name     = $matches[1] . '::' . $matches[2];
        $func1_data     = Helpers::prepareArray($matches[3]);
        $array_name     = Helpers::normalize($matches[4]);
        $array          = Helpers::prepareArray($matches[5]);
        $global_list    = Helpers::replaceBase64Decode(Helpers::normalize($matches[6]));
        $func2_name     = $matches[7] . '::' . $matches[8];
        $func2_data     = Helpers::prepareArray(Helpers::normalize($matches[9]));
        $content        = Helpers::normalize($matches[10]);

        $list_of_globals = [];
        foreach (explode(";", $global_list) as $item) {
            if (empty($item)) {
                continue;
            }
            list($key, $value) = explode('=', $item, 2);
            $list_of_globals[$key] = trim($value, '\'');
        }

        $content = str_replace(array_keys($list_of_globals), array_values($list_of_globals), $content);

        $content = preg_replace_callback('~' . preg_quote($func1_name) . '\(([\d]*)\)~mis', function ($m) use ($func1_data) {
            $key = octdec($m[1]);
            $result = '';
            if (array_key_exists($key, $func1_data)) {
                $result = $func1_data[$key];
            }
            return $result;
        }, $content);


        $content = preg_replace_callback('~' . preg_quote($func2_name) . '\(["\']([^\'"]+)["\'],\s*["\']([^\'"]+)["\']\)~mis', function ($m) use ($func2_data) {
            $param1 = $m[1];
            $param2 = $m[2];

            $slen = strlen($param2);
            $decoded = base64_decode($func2_data[$param1]);
            for ($i = 0, $cslen = strlen($decoded); $i !== $cslen; ++$i) {
                $decoded[$i] = chr(ord($decoded[$i]) ^ ord($param2[$i % $slen]));
            }
            return "'" . $decoded . "'";
        }, $content);


        $content = preg_replace_callback('~\$GLOBALS\["' . preg_quote($array_name) . '"\]\[([0-9\-]+)\]~i', function ($m) use ($array) {
            $key = octdec($m[1]);
            return $array[$key];
        }, $content);

        return MathCalc::calcRawString($content);
    }

    private function deobfuscateCreateFuncArray($str, $matches)
    {
        $dict = substr(str_replace(['","', "','", '\',"', '",\''], '', $matches[2]), 1, -1);
        $func = substr(Helpers::replaceVarsFromDictionary($matches[1], $dict, $matches[5]), 1, -1);
        $codeVar = str_replace(['"."', '\'.\'', '\'."', '".\''], '', $matches[4]);
        $res = str_replace($codeVar, '\'' . $matches[6] . '\'', $func);
        return $res;
    }

    private function deobfuscateCreateFuncReplaceB64($str, $matches)
    {
        $func1 = str_ireplace($matches[4], $matches[5], $matches[6]);
        $func2 = strtr($matches[8], $matches[9], $matches[10]);
        if ($func1 === 'create_function') {
            $func1 = 'eval';
        }
        $code = $func1 . '(' . $func2 . '(\'' . $matches[2] . '\'' . '));';
        return $code;
    }

    private function deobfuscateEvalTrim($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1], $vars, false);
        $func = strtolower(substr(str_replace('\'.\'', '', Helpers::replaceVarsFromArray($vars, $matches[4], false, true)), 1, -1));
        return 'eval(' . $func . '(\'' . $matches[6] . '\'));';
    }

    private function deobfuscateUnserializeB64GzJoinArr($str, $matches)
    {
        $arr = [];
        preg_match_all('~\'([^\']*)\'~msi', $matches[5], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $strMatch) {
            $arr[] = $strMatch[1];
        }
        $string = join($matches[4], $arr);
        $res = gzinflate(base64_decode($string));
        Helpers::unserialize($res);

        return $res;
    }

    private function deobfuscateEvalStrrevCode($str, $matches)
    {
        return strrev($matches[1]);
    }

    private function deobfuscateEvalConvertUudecodeWithSlashedQuote($str, $matches)
    {
        return convert_uudecode(stripcslashes($matches[1]));
    }

    private function deobfuscateDictVarsContent($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($res, "'", $vars, false);

        $res = str_replace($matches[3], $res, $matches[0]);
        $res = stripcslashes($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);

        return $res;
    }

    private function deobfuscateGlobalsCreateFuncEvalB64($str, $matches)
    {
        return str_replace(
            $matches[4],
            '?> ' . base64_decode($matches[8]) . '<?php ',
            $str
        );
    }

    private function deobfuscateDictForeachVars($str, $matches)
    {
        $dictStr = $matches[2];
        $vars = [];
        $res = $str;

        preg_match_all('~foreach\s?\(\[([^]]+)\]\s?as\s?\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}~msi', $str, $foreachMatches, PREG_SET_ORDER);

        foreach ($foreachMatches as $foreachMatch) {
            preg_match_all('~\d+~msi', $foreachMatch[1], $numMatches, PREG_SET_ORDER);
            $val = '';
            foreach ($numMatches as $numMatch) {
                $val .= $dictStr[$numMatch[0]] ?? '';
            }
            $vars[$foreachMatch[2]] = $val;
            $res = str_replace($foreachMatch[0], '', $res);
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateEchoEvalGzB64Var($str, $matches)
    {
        return stripcslashes(gzinflate(base64_decode(stripcslashes($matches[4]))));
    }

    private function deobfuscateTwoEvalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStrCode = urldecode(hex2bin($matches[3]));
        $vars = Helpers::collectFuncVars($varsStrCode, $vars, false);
        $res = hex2bin($matches[4]);

        $unwrappedCode = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $unwrappedCode = str_replace($matches[1], $matches[2], $unwrappedCode);
        $unwrappedCode = $this->unwrapFuncs($unwrappedCode . ')');

        $res .= $unwrappedCode;

        return $res;
    }

    private function deobfuscateEvalFuncCode($str, $matches)
    {
        $function = $matches[1];
        $safe = Helpers::convertToSafeFunc($function);
        if ($safe) {
            return @Helpers::executeWrapper($function, [stripcslashes($matches[2])]);
        }

        return $str;
    }

    private function deobfuscateEvalOpenSslDecrypt($str, $matches)
    {
        return openssl_decrypt(
            base64_decode($matches[1]),
            $matches[2],
            base64_decode($matches[3]),
            OPENSSL_RAW_DATA,
            base64_decode($matches[4])
        );
    }

    private function deobfuscateUrldecodedDictVarReplace($str, $matches)
    {
        $dictVal = urldecode($matches[2]);
        $res = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $matches[0]);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateZymdecrypt($str, $matches)
    {
        $funcs = Helpers::replaceBase64Decode($matches[2]);
        $tmp = explode(';', $funcs);
        $funcs = [];
        foreach ($tmp as $func) {
            if (empty($func)) {
                continue;
            }
            $func = explode('=', $func);
            $funcs[str_replace(['$' . $matches[1] . '[\'', '\']'], '', $func[0])] = substr($func[1], 1, -1);
        }
        foreach ($funcs as $var => $func) {
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']\(', $func . '(', $matches[3]);
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']', $func, $matches[3]);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\{return\s*base64_decode\(\2\);~msi', $matches[3], $m)) {
            $matches[3] = str_replace($m[1] . '(', 'base64_decode(', $matches[3]);
        }
        $limit = 10;
        while (
            (
                strpos($matches[3], 'base64_decode(\'') !== false
                || strpos($matches[3], 'base64_decode("') !== false
            ) && $limit--
        ) {
            $matches[3] = Helpers::replaceBase64Decode($matches[3]);
        }
        return $matches[3];
    }

    private function deobfuscateFuncRevB64($str, $matches)
    {
        $code = str_replace(['eval(' . $matches[1] . '(', '));'], ['eval(base64_decode(strrev(base64_decode(strrev(', ')))));'], $matches[4]);
        return $code;
    }

    private function deobfuscateCreateFuncGzConvertUudecode($str, $matches)
    {
        return stripcslashes(gzinflate(convert_uudecode(stripcslashes($matches[2]))));
    }

    private function deobfuscateGlobalsArrayFuncs($str, $matches)
    {
        $globalFuncStr = base64_decode(Helpers::concatStr($matches[2]));
        $res = str_replace($matches[1] . '(0)', '\'' . $globalFuncStr . '\'', $str);
        preg_match_all('~(?:[\'"][^"\']*[\'"]\s?\.?)+~msi', $matches[4], $strings, PREG_SET_ORDER);
        $vars = [];
        foreach ($strings as $string) {
            $vars[] = base64_decode(Helpers::concatStr($string[0]));
        }
        $res = preg_replace_callback(
            '~' . $matches[3] . '\((\d+)\)~msi',
            static function ($m) use ($vars) {
                $str = str_replace('\\', '\\\\', $vars[$m[1]]);
                $str = str_replace('\'', '\\\'', $str);
                return '\'' . $str . '\'';
            },
            $res
        );
        $res = MathCalc::calcRawString($res);

        return $res;
    }

    private function deobfuscateVarArrayChrFunc($str, $matches)
    {
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>(?:((?:\s?\w{1,50}\(\d{1,5}\)\.?)+)|\s?(\$\w{1,50})),~msi',
            $str,
            $arrMatches,
            PREG_SET_ORDER
        );
        $vars = [];
        foreach ($arrMatches as $arrMatch) {
            $value = '';
            if (!empty($arrMatch[2])) {
                preg_match_all('~\d{1,5}~msi', $arrMatch[2], $numbers, PREG_SET_ORDER);
                foreach ($numbers as $number) {
                    $value .= $number[0] < 128 ? chr($number[0]) : '';
                }
            } else {
                $value = $arrMatch[3] ?? '';
            }
            $vars[$arrMatch[1]] = $value;
        }
        $str = preg_replace_callback(
            '~\\' . $matches[1] . '\[[\'"]([^\'"]+)[\'"]]([\[\](])~msi',
            static function ($m) use ($vars) {
                $value = $vars[$m[1]] ?? '';
                if ($m[2] === ']') {
                    $value = '\'' . $value . '\'';
                }
                return $value . $m[2];
            },
            $str
        );

        return $str;
    }

    private function deobfuscateFuncDictB64($str, $matches)
    {
        $matches[5] = Helpers::replaceVarsFromDictionary($matches[3], $matches[4], $matches[5]);
        $vars = Helpers::collectVars($matches[5], '\'');
        $code = stripcslashes($matches[8]) . ';';
        $code = Helpers::replaceVarsFromArray($vars, $code, true, false);
        $code = $this->deobfuscateEval($code, []);
        $code = $matches[2] . $code;
        return $code;
    }

    private function deobfuscateGzuncompressStrrev($str, $matches)
    {
        return gzuncompress(strrev($matches[4]));
    }

    private function deobfuscateEvalOpensslDecryptStr($str, $matches)
    {
        $code = openssl_decrypt(
            base64_decode($matches[7]),
            "AES-256-CBC",
            $matches[2],
            0,
            $matches[3]
        );
        $code = str_replace($matches[4], $matches[5], $code);

        return $code;
    }

    private function deobfuscateEvalDictionaryFuncVar($str, $matches)
    {
        $code = Helpers::concatStringsInContent(
            str_replace(
                '\\\'',
                '',
                Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[4])
            )
        );
        return substr($code, 1, -1) . stripcslashes($matches[5]);
    }

    private function deobfuscateDictionaryStrReplace($str, $matches)
    {
        $dict = base64_decode(str_replace($matches[4], '', $matches[2]));
        $code = Helpers::replaceVarsFromDictionary($matches[5], $dict, $matches[6]);
        return $code;
    }

    private function deobfuscateManyBase64DecodeChr($str, $matches)
    {
        //sample manyBase64DecodeChr.php
        $code = MathCalc::calcRawString($matches[0]);

        $hangs = 10;
        while (stripos($code, 'base64_decode') !== false && $hangs--) {
            $code = Helpers::normalize($code);
            $code = Helpers::replaceBase64Decode($code);
            $vars = Helpers::collectVars($code, '\'', $vars, true);
            $code = Helpers::replaceVarsFromArray($vars, $code);
        }
        return $code;
    }

    private function deobfuscateManyB64CalcEval($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $limit = 50;
        while (
            strpos($code, 'base64_decode(\'') !== false
            || strpos($code, 'base64_decode("') !== false
            || $limit--
        ) {
            $code = Helpers::replaceBase64Decode($code);
        }
        $code = str_replace(['{\'', '\'}'], '', $code);

        if (
            preg_match(
                '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?((?:\$\w{1,50}\s?\.?=\s?(?:\$\w{1,50}\[\d{1,5}\]\s?\.?\s?)+;\s?)+)eval\((\$\w{1,50})\s?\([\'"]([^\'"]+)[\'"]\)\);~msi',
                $code,
                $found
            )
        ) {
            $vars[$found[1]] = $found[2];
            $vars = Helpers::getVarsFromDictionaryDynamically($vars, $found[0]);
            $func = $vars[$found[4]];
            if (!Helpers::convertToSafeFunc($func)) {
                return $code;
            }
            $res = $func($found[5]);
            $res = Helpers::replaceVarsFromArray($vars, $res, true);

            if (
                preg_match(
                    '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];eval\(\'\?>\'\.base64_decode\(strtr\(substr\(\1,(\$\w{1,50})\*2\),substr\(\1,\3,\3\),substr\(\1,0,\3\)\)\)\);~msi',
                    $res,
                    $m
                )
            ) {
                if (isset($vars[$m[3]])) {
                    $num = (int)$vars[$m[3]];
                    return '?> ' . base64_decode(
                        strtr(
                            substr($m[2], $num * 2),
                            substr($m[2], $num, $num),
                            substr($m[2], 0, $num)
                        )
                    );
                }
            }
        }
        return $code;
    }

    private function deobfuscateDa7Q9RnPjm($str, $matches)
    {
        $dict = str_replace($matches[5], 'base64_decode', $matches[7]);
        $dict = Helpers::replaceBase64Decode($dict);
        $dict = explode('\',\'', substr($dict, 1, -1));
        foreach ($dict as $index => $item) {
            $matches[8] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[8]);
        }
        $matches[8] = Helpers::normalize($matches[8]);
        $tmp = explode(';', $matches[8]);
        $vars = [];
        foreach ($tmp as $var) {
            $parts = explode('=', $var);
            $vars[$parts[0]] = $parts[1];
        }
        $vars = array_filter($vars);
        foreach ($dict as $index => $item) {
            $matches[11] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[11]);
        }
        foreach ($vars as $var => $val) {
            $matches[11] = str_replace($var, $val, $matches[11]);
        }
        $code = substr(Helpers::normalize($matches[11]), 1, -1);
        $code = str_replace($matches[4], '\'' . $matches[2] . '\'', $code);
        return $code;
    }

    private function deobfuscateGarbageComments($str, $matches)
    {
        $res = preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
        $res = str_replace('\'.\'', '', $res);
        return $res;
    }

    private function deobfuscateEvalVarsB64Concated($str, $matches)
    {
        $vars = [];
        $code = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectFuncVars($code, $vars);
        $vars = Helpers::collectVars($code, '"', $vars);

        return Helpers::replaceVarsFromArray($vars, $matches[1]);
    }

    private function deobfuscateStrReplaceVarsCreateFunc($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:str_replace|\$\w{1,50})\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s*~msi',
            $str,
            $replaces,
            PREG_SET_ORDER
        );

        foreach ($replaces as $replace) {
            $vars[$replace[1]] = str_replace($replace[2], '', $replace[3]);
        }

        $strToDecode = Helpers::concatStringsInContent(
            Helpers::replaceVarsFromArray($vars, $matches[4], false, true)
        );
        $funcs = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if ($funcs === 'base64_decode(str_replace(') {
            return base64_decode(str_replace($matches[3], '', $strToDecode));
        }

        return $str;
    }

    private function deobfuscateLongVarConcatStrRot13B64Gz($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        $strToDecode = '';
        foreach ($vars as $var) {
            $strToDecode .= $var;
        }
        $res = $strToDecode;
        preg_match_all(
            '~str_rot13|base64_decode|gzinflate~msi',
            $str,
            $funcs,
            PREG_SET_ORDER
        );
        foreach ($funcs as $func) {
            if (Helpers::convertToSafeFunc($func[0])) {
                $res = @$func[0]($res);
            }
        }

        return $res;
    }

    private function deobfuscatecreateFuncDict($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'', $vars, true);
        $vars2 = [];
        foreach ($vars as $k => $v) {
            if (strlen($v) === 1) {
                $vars2[$k] = $v;
            } else {
                $tmp = str_split($v);
                foreach ($tmp as $i => $char) {
                    $vars2[$k . '[' . $i . ']'] = $char;
                    $vars2[$k . '[\'' . $i . '\']'] = $char;
                }
            }
        }
        $res = Helpers::replaceVarsFromArray($vars2, $str, false, true);
        $res = Helpers::normalize($res);
        return $res;
    }

    private function deobfuscateCreateFuncArrayPop($str, $matches)
    {
        return substr($matches[4], 1, -1);
    }

    private function deobfuscateChrOrdB64FuncVars($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[0]);
        $func1 = $vars[$matches[4]] ?? '';
        $func2 = $vars[$matches[5]] ?? '';
        if ($func1 === 'chr' && $func2 === 'ord') {
            $strDecode = base64_decode($matches[2]);
            $res = '';
            $len = strlen($matches[2]);
            for ($i = 0; $i < $len; $i++) {
                $res .= chr(ord($strDecode[$i]) ^ (int)$matches[6]);
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateSimpleEvalFunctions($str, $matches)
    {
        $func1 = trim(Helpers::normalize($matches[2]), "'\"");
        $func2 = trim(Helpers::normalize($matches[4]), "'\"");
        $data = $matches[6];
        if (Helpers::isSafeFunc($func1) && Helpers::isSafeFunc($func2)) {
            return $func1($func2($data));
        }
        return $str;
    }

    private function deobfuscateClassArrayDictFunc($str, $matches)
    {
        $arrayDict = [];
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>\s?((?:\s?[\'"][^\'"]*[\'"]\s?\.?)+)[,)]~msi',
            $matches[12],
            $dicts,
            PREG_SET_ORDER
        );
        foreach ($dicts as $dict) {
            $arrayDict[$dict[1]] = $dict[2] !== '' ? Helpers::concatStr($dict[2]) : '';
        }

        $res = $matches[13];

        $res = preg_replace_callback(
            '~' . $matches[1] . '::' . $matches[3] . '\(([^,]+),([^)]+)\)~msi',
            static function ($m) use ($arrayDict) {
                $arg1 = Helpers::concatStr($m[1]);
                $arg2 = Helpers::concatStr($m[2]);
                $n = strlen($arg2);

                $decoded  = base64_decode($arrayDict[$arg1]);

                for ($i = 0, $len = strlen($decoded); $i !== $len; ++$i) {
                    $decoded[$i] = chr(ord($decoded[$i]) ^ ord($arg2[$i % $n]));
                }

                return '\'' . $decoded . '\'';
            },
            $res
        );

        return $res;
    }

    private function deobfuscateConcatVarsIterDict($str, $matches)
    {
        $res = '';
        $strEncoded = '';
        $dict1 = stripcslashes($matches[5]);
        $dict2 = stripcslashes($matches[7]);

        preg_match_all('~"([^"]+)"~msi', $matches[3], $strings, PREG_SET_ORDER);
        foreach ($strings as $string) {
            $strEncoded .= stripcslashes($string[1]);
        }
        foreach (str_split($strEncoded) as $c) {
            $res .= (strpos($dict2, $c) === false) ? $c : $dict1[strpos($dict2, $c)];
        }
        $res = "?> $res";

        return $res;
    }

    private function deobfuscateFuncB64TwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[7]);
        $arg2 = $matches[8];

        $res = "";
        for ($i = 0; $i < strlen($arg1);) {
            for ($j = 0; $j < strlen($arg2); $j++, $i++) {
                $res .= $arg1[$i] ^ $arg2[$j];
            }
        }

        return $res;
    }

    private function deobfuscateStrReplaceB64($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str, $vars, true, true);
        $code = Helpers::replaceBase64Decode($str);
        Helpers::collectFuncVars($code, $vars, false, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, false, false);
        $code = Helpers::normalize($code);
        return $code;
    }

    private function deobfuscateCreateFuncStrReplace($str, $matches)
    {
        return str_replace($matches[2], '', $matches[3]);
    }

    private function deobfuscateCreateFuncB64StrRotChr($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $code = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $code);
        $code = Helpers::replaceBase64Decode($code);
        $code = Helpers::normalize($code);
        $code = Helpers::replaceBase64Decode($code);
        if (preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'eval\(\2\);\'\);\1\(\'([^\']+)\'\);~msi', $code, $m)) {
            $code = $m[3];
        }
        return $code;
    }

    private function deobfuscateCreateFuncGzuncompressB64($str, $matches)
    {
         $code = gzuncompress(base64_decode(substr($matches[5], 1, -1)));
        if (strpos($code, '1;}') === 0) {
            $code = substr($code, 3);
        }
        if (substr_count($code, 'goto ') > 100) {
            $code = Helpers::unwrapGoto($code);
        }
         return $code;
    }

    private function deobfuscateGlobalsSlashed($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateB64VarsFuncEval($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectFuncVars($matches[3]);
        $strToDecode = $matches[2];
        $func1 = $vars[$matches[4]] ?? null;
        $func2 = $vars[$matches[5]] ?? null;
        if (
            $func1 !== null && $func2 !== null
            && Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)
        ) {
            $strToDecode = Helpers::executeWrapper($func1, [
                Helpers::executeWrapper($func2, [$strToDecode])
            ]);
        }

        $len = strlen($strToDecode);
        $res = '';
        $func1 = $vars[$matches[10]] ?? null;
        $func2 = $vars[$matches[11]] ?? null;
        if ($func1 === 'chr' && $func2 === 'ord') {
            for ($i = 0; $i < $len; $i++) {
                $res .= $func1($func2($strToDecode[$i]) ^ (int)$matches[12]);
            }
        }

        return $res;
    }

    private function deobfuscateB64FuncEval($str, $matches)
    {
        $key    = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[8]
            : $matches[6];
        $data   = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[6]
            : (
                $matches[2] ? str_replace($matches[5], $matches[8], $matches[2]) : $matches[8]
            );
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $key = base64_encode($key);
        }

        $res = Helpers::xorWithKey(base64_decode($data), $key);
        if (isset($matches[4]) && $matches[4] === 'base64_decode(') {
            $res = base64_decode($res);
        }

        if (isset($matches[4]) && $matches[4] === 'gzuncompress(base64_decode(') {
            $res = gzuncompress(base64_decode($res));
        }

        return $res;
    }

    private function deobfuscateNullEcho($str, $matches)
    {
        $vars = [];
        Helpers::collectConcatedVars($str, '\'', $vars, true);
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        return $str;
    }

    private function deobfuscateEvalB64Chunks($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($str);
        if (preg_match('~eval\(\'function\s*(\w+)\((\$\w+),(\$\w+)\)\{(\$\w+)=array\(((?:\d+\,?)+)\);if\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\]\+\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\{\$\w+=trim\(substr\(\2,\4\[\d+\]\+\4\[\d+\]\+\4\[\d+\]\)\);}return\s*\$\w+;\}\'\);~msi', $str, $m)) {
            $offsets = explode(',', $m[5]);
            $offsets[0] = 1;
            $str = preg_replace_callback('~' . $m[1] . '\(\$\w+\[\d+\],(\d+)\)~msi', function ($m2) use ($m, $matches, $offsets) {
                $value = '';
                if ($m2[1] === $m[6]) {
                    $value = substr($matches[4], (int)$offsets[0] + (int)$offsets[1], $offsets[2]);
                } elseif ($m2[1] === $m[7]) {
                    $value = substr($matches[4], (int)$offsets[0], (int)$offsets[1]);
                } elseif ($m2[1] === $m[8]) {
                    $value = trim(substr($matches[4], (int)$offsets[0] + (int)$offsets[1] + (int)$offsets[2]));
                }
                return '\'' . $value . '\'';
            }, $str);
        }
        $str = Helpers::replaceBase64Decode($str);
        $code = '';
        if (preg_match('~eval\(\'if\(\!function_exists\("([^"]+)"\)\)\{function\s*\1\((\$\w+),(\$\w+),(\$\w+)\)\s*\{(\$\w+)=implode\(\4\);\5=preg_replace\("[^"]+","",\5\);if[^{]+{return\(*((?:\w+\()+)\2\)\)\);}else{die\("[^"]+"\);}}}\'\);~msi', $str, $m)) {
            preg_match('~eval\(' . $m[1] . '\(\'([^\']+)\',\'\w{32}\',\$\w+\)\);~msi', $str, $m2);
            $code = 'eval(' . $m[6] . '\'' . $m2[1] . '\'' . str_repeat(')', substr_count($m[6], '(')) . ');';
        }
        $code = $this->deobfuscateEval($code, []);
        return $code;
    }

    private function deobfuscateObStartFlushVar($str, $matches)
    {
        preg_match_all('~\d{1,5}~msi', $matches[4], $tcNums, PREG_SET_ORDER);
        preg_match_all('~\d{1,5}~msi', $matches[6], $trNums, PREG_SET_ORDER);

        $res = '';
        foreach ($trNums as $tval) {
            $res .= chr((int)$tcNums[(int)$tval[0]][0] + 32);
        }

        return '?> ' . $res;
    }

    private function deobfuscateArrayReplacing($str, $matches)
    {
        $dictionaryKey = $matches[1];
        $dictionaryVal = $matches[2];

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);
        preg_match_all('~\$(\w{1,40})\s?=\s?\'(\w+)\';~', $result, $array, PREG_SET_ORDER);
        foreach ($array as &$value) {
            $re = '~\$\{"GLOBALS"}\["' . $value[1] . '"\]~';
            $result = preg_replace($re, $value[2], $result);
        }
        return $result;
    }

    private function deobfuscateVarConcatedReplaceEval($str, $matches)
    {
        $tempStr = $matches[1];
        $vars = [];
        $vars = Helpers::collectVars($tempStr, '"', $vars, true);
        $tempStr = Helpers::replaceVarsFromArray($vars, $tempStr, false, true);
        $tempStr = Helpers::concatStringsInContent($tempStr);
        $vars = Helpers::collectVars($tempStr, "'", $vars);
        $result = str_replace($matches[1], '', $str);
        $result = Helpers::replaceVarsFromArray($vars, $result, false, true);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateVarsConcatedFuncStrReplaceEval($str, $matches)
    {
        $content = $str;
        $vars = [$matches[1] => ''];
        $vars = Helpers::collectVars($content, '"', $vars, true);
        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $content);
        $result = Helpers::replaceVarsFromArray($vars, $matches[7], true, false) .
            '"' .
            str_replace($matches[8], $matches[6], $vars[$matches[1]]) . '"));';

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateB64GlobalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStr = Helpers::replaceBase64Decode($matches[1], '"');
        $vars = Helpers::collectVars($varsStr, '"', $vars);
        $res = str_replace($matches[1], '', $str);

        return Helpers::replaceVarsFromArray($vars, $res, false, true);
    }

    private function deobfuscateB64putContents($str, $matches)
    {
        return base64_decode($matches[1]);
    }

    private function deobfuscateB64WSO($str, $matches)
    {
        $code = Helpers::replaceBase64Decode($str);
        $vars = [];
        Helpers::collectConcatedVars($code, '\"', $vars, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, true, true);
        return $code;
    }

    private function deobfuscateEvalFuncDict($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[5]);
        $res = preg_replace('~\'\s*\.\s*\'~', '', substr(trim($res), 1, -1));
        $res .= $matches[6] . '\'' . str_repeat(')', substr_count($res, '(')) . ';';
        return $res;
    }

    private function deobfuscateExplodeGzinflateSubstr($str, $matches)
    {
        $matches[4] = stripcslashes($matches[4]);
        $strings = explode($matches[3], gzinflate(substr($matches[4], hexdec($matches[5]), (int)$matches[6])));
        $res = str_replace($matches[1], '', $matches[0]);
        $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
            return '\'' . $strings[hexdec($m[1])] . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateUrldecodeEval($str, $matches)
    {
        $dict = strpos($matches[1], 'urldecode') ? urldecode($matches[3]) : stripcslashes($matches[3]);
        $tmp = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $data = [];
        Helpers::collectConcatedVars($tmp, '\'', $data);
        foreach ($data as $var => $value) {
            $tmp = Helpers::replaceVarsFromDictionary($var, $value, $tmp);
        }
        Helpers::collectConcatedVars($tmp, '\'', $data);
        $res = '';
        foreach ($data as $var => $value) {
            $res .= $var . '=' . '\'' . $value . '\';';
        }
        $res .= str_replace([$matches[1], $matches[4]], '', $str);
        $res = Helpers::replaceVarsFromArray($data, $res, true, false);
        return $res;
    }

    private function deobfuscateStrtrEval($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '\'', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4], false, false);
        return $res;
    }

    private function deobfuscateEvalStrtr($str, $matches)
    {
        $res = '?> ';
        $offset = (int) $matches[2];
        $res .= base64_decode(strtr(substr($matches[1], $offset * 2), substr($matches[1], $offset, $offset), substr($matches[1], 0, $offset)));
        return $res;
    }

    private function deobfuscateCreateFuncHex2Bin($str, $matches)
    {
        if (isset($matches[1]) && $matches[1] !== '') {
            $str = str_replace($matches[1], '', $str);
            $str = str_replace($matches[2] . '(', 'hex2bin(', $str);
        }
        $res = Helpers::replaceHex2Bin($str);
        $vars = [];
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        return $res;
    }

    private function deobfuscateCreateFuncB64($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateChrXor($str, $matches)
    {
        $data = explode($matches[4], $matches[5]);
        $res = '';
        foreach ($data as $chr) {
            if ($chr === '') {
                continue;
            }
            $res .= chr($chr ^ (int) $matches[2]);
        }
        return $res;
    }

    private function deobfuscateManyB64WithVarNorm($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, '"');
        if (strpos($res, '${$') !== false) {
            $res = Helpers::postProcess($res);
        }
        return $res;
    }

    private function deobfuscateIncludeFilePutContents($str, $matches)
    {
        return 'eval(' . str_replace($matches[1] . ')', '\'' . $matches[2] . '\')', $matches[3]) . ');';
    }

    private function deobfuscateGzinflateBase64Decode($str, $matches)
    {
        $result = gzinflate(@base64_decode($matches[3]));
        for ($i = 0; $i < strlen($result); $i++) {
            $result[$i] = chr(ord($result[$i]) - 1);
        }
        return $result;
    }

    private function deobfuscateByteCodeData($str, $matches)
    {
        $index = 0;
        $code = '';

        $patterns = [
            'DECRYPT'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;\4\[\+\+\5\]=\s*\'\'\s*;\$[^=]+=\2\[\3\+\([^\)]+[^]]+\];if\(\![^)]+\)\3\+\+;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^\.]+\.=\2\[\3\];if.*?if\([^\)]+\)\{\$[^=]+=\(int\)\$[^;]+;for\(\$[^;]+;[^)]+\){\4\[\5\]\.=\2\[\+\+\3\]\^\$GLOBALS\[\'[^\']+\'\]\((\([^\)]+\))\);',
            'EVAL_REPLACE'  => 'case\s*\'(.)\'\s*:\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\$GLOBALS\[\'[^\']+\']\(\d+\)\.\$GLOBALS\[\'[^\']+\']\(\d+\),[^;]+;\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\s*\'return\s*\'\s*,\s*\'return\s*\'\s*\.\s*[^\)]+\);eval\(\$',
            'EVAL'          => 'case\s*\'(.)\'\s*:eval\(\$[^\[]+\[\$[^\]]+\]\);break\s*1;',
            'GOTO'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?\3=\-\-\$[^;]+;',
            'VAR'           => 'case\s*\'(.)\'\s*:switch\(\$[^\)]+\)\{case\s*\'_SERVER\'\s*:case',
            'ASSIGN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?\4\[\5\]=\4\[\5\-\([^;]+;',
            'END_STMT'      => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4=array\(\);\5=\-[^;]+;',
            'ARRAY'         => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=array\(\);',
            'CALL_FUNC'     => 'case\s*\'(.)\'\s*:\$[^;]+;\$[^=]+=\$[^;]+;\$[^=]+=array\(\);for\(\$[^}]+}(?:\$[^;]+;){2}\s*if\(is_string\(\$[^\)]+\)&&strcasecmp\(\$[^,]+,\s*\'call_user_func_array\'\s*\)\)',
            'INVERT'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\!\4\[\5\-',
            'BOOL'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\(bool\)\4\[\5\-',
            'IF_GOTO'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?if\(\!\4\[\5\]\)\{\3\+=\(int\)\$[^;]+;',
            'GET_CONST'     => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{if\(strcasecmp\(\4\[\5\],\s*\'__file__\'\s*\)==\(',
            'APPEND'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\5\]=\(array\)\4\[\5\];\4\[\5\]=\&\4\[\5\]\[\];',
            'RET'           => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-[^;]+;if\(\$[^<]+<\(',
            'RETURN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-\((?:[^;]+;){2}\}\}',
            'MATH'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?eval\(\s*\'\4\[\5\]=\4\[\5\-2\]\'\s*\.\s*\4\[\5\]\s*\.\s*\'\4\[\5\-1\];\'\s*\);',
            'FETCH_INDEX'   => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?gettype\(\4\[\5\]\);if\(',
        ];

        $opcodes = [];
        $xor = 0;
        $data = '';
        $aliases = [];
        $str = preg_replace_callback('~if\s*\(\!defined\("([^"]+)"\)\)\s*define\("\1",\s*"([^"]+)"\);~msi', function ($m) use (&$aliases) {
            $aliases[$m[1]] = $m[2];
            return '';
        }, $str);
        $vars = [];
        $str = preg_replace_callback('~\$GLOBALS\[([^]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$vars, $aliases) {
            $vars[$aliases[$m[1]]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~\$[^=]+=\s*pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*;if\(@\$GLOBALS\[[^]]+\]\[[^]]+\]\[pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\]==pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\)\$App_Codes=\$GLOBALS~msi', $str, $m)) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            $data = pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]);
        }

        if (preg_match('~\$[^=]+=(\s*(?:pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*\.\s*)+pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*);\$GLOBALS\[pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\]\(__FILE__\);~msi', $str, $m)) {
            $m[1] = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function ($m) use ($vars, $aliases) {
                $m[2] = Helpers::NormalizeInt($m[2]);
                $m[4] = Helpers::NormalizeInt($m[4]);
                return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
            }, $m[1]);
            $data = preg_replace('~\'\s*\.\s*\'~msi', '', substr(trim($m[1]), 1, -1));
        }
        $str = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function ($m) use ($vars, $aliases) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
        }, $str);
        $int = [];
        if (preg_match('~if\(!defined\(\'([^\']+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }
        if (!$data) {
            return '';
        }

        foreach ($patterns as $opcode => $pattern) {
            if (preg_match('~' . $pattern . '~msi', $str, $m)) {
                if (strlen($m[1]) > 1) {
                    $m[1] = substr($m[1], -1, 1);
                }
                $opcodes[$opcode] = $m[1];
                if ($opcode === 'DECRYPT') {
                    $m[7] = str_replace(array_keys($int), array_values($int), $m[7]);
                    $m[7] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $m[7]);
                    $m[7] = MathCalc::calcRawString($m[7]);
                    $xor = (int)substr($m[7], 1, -1);
                }
            }
        }

        $arrays = [];
        $code = Helpers::reverseByteCode($data, $opcodes, $xor);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*explode\(\'([^,]+)\',\s*\'([^\)]+)\'\);\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function ($m) use (&$arrays) {
            $arrays[$m[4]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\],\s*\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\]\)~msi', function ($m) use (&$arrays) {
            if (isset($arrays[$m[1]]) && isset($arrays[$m[3]])) {
                return '\'' . pack($arrays[$m[1]][(int)$m[2]], $arrays[$m[3]][(int)$m[4]]) . '\'';
            }
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*\'([^\']+)\';\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function ($m) use (&$vars) {
            $vars[$m[3]] = $m[2];
            return '';
        }, $code);
        foreach ($vars as $key => $val) {
            if (is_array($val) && $val[0] === 'H*') {
                $val = pack($val[0], $val[1]);
            }
            $code = str_replace('$GLOBALS[\'' . $key . '\']', $val, $code);
        }
        $code = preg_replace_callback('~function\s*\w+\([^\)]+\)\s*\{\$__xend_args=array\([^)]+\);(return\s*[^}]+)\}\s*goto\s*(l_\d+)\s*\s*\s*(?:(.*)?\2:)~msi', function ($m) {
            $m[0] = str_replace($m[3], '', $m[0]);
            $m[0] = str_replace($m[1], "\n" . $m[3] . "\n", $m[0]);
            return $m[0];
        }, $code);

        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+)\s*[\+\-\*\/]+\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+);\s*)+~msi', function ($m) {
            $vars = [];
            $expressions = explode(';', $m[0]);
            foreach ($expressions as $expr) {
                if ($expr === '') {
                    continue;
                }
                $tmp = explode(' = ', $expr);
                $tmp[1] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $tmp[1]);
                $tmp[1] = str_replace(array_keys($vars), array_values($vars), $tmp[1]);
                $vars[trim($tmp[0])] = trim(MathCalc::calcRawString(' ' . $tmp[1]));
            }
            return $m[1] . ' = ' . $vars[$m[1]] . ';' . "\n";
        }, $code);

        $code = preg_replace_callback('~((\$\w+)\s*=\s*\'\d+\';)\s*(l_\d+):\s*(\$\w+)\s*=\s*([^;]+;)\s*if\s*\(\!\4\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*(.*?)(\2\s*=\s*[^;]+);\s*goto\s*\3\s*goto\s*\8\s*\8:~msi', function ($m) {
            return 'for (' . $m[1] . ' ' . $m[5] . ' ' . $m[10] . ') {' . "\n" . $m[9] . '}';
        }, $code);

        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\8:~msi', function ($m) {
            return $m[1] . ': ' . "\n";
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:(?:\s*goto\s*(l_\d+)\s*\8:)?~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*if\s*\(\![^)]+\)+\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\2:\s*goto\s*(l_\d+)\s*\3:\s*([^\n]+;\n)\s*goto\s*\1\s*goto\s*\4\s*\4:\s*~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*goto\s*(l_\d+)\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*goto\s*(l_\d+)\s*goto\s*\8\s*\8:\s*goto\s*(l_\d+)\s*\9:\s*return;\s*goto\s*\1\s*goto\s*\10\s*\10:~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*([^;]+);\s*if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\3:\s*goto\s*(l_\d+)\s*\4:\s*(.*?)\5:\s*~msi', function ($m) {
            $m[6] = preg_replace('~\s*goto\s*l_\d+\s*$~msi', '', $m[6]);
            $m[0] = 'if(' . $m[2] . ') {' . "\n" . $m[6] . "\n" . '}' . "\n";
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*([^;]+);\s*)+if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*\3:\s*l_\d+:\s*((?:[^\n]+;\n)+)l_\d+:(\s*((?:[^\n!]+;\n)+)l_\d+:)?~msi', function ($m) {
            if (isset($m[5]) && $m[5] !== '') {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '} else {' . "\n" . $m[5] . '}';
            } else {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '}';
            }
        }, $code);
        $code = preg_replace_callback('~(goto\s*l_\d+)\n~msi', function ($m) {
            return $m[1] . ';' . "\n";
        }, $code);
        return $code;
    }

    private function deobfuscateOESNS_cms($str, $matches)
    {
        $strings = [];
        $int = [];
        $str = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);
        $str = preg_replace_callback('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\'\w+\'\);\s*\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\'([^\']+)\'\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }

        $matches[4] = stripcslashes($matches[4]);
        $code = base64_decode($matches[5]);
        $code = preg_replace_callback('~\((?:(?:\w+|\d+)[\*+-/])+(?:\w+|\d+)\)~msi', function ($m) use ($int) {
            $m[0] = str_replace(array_keys($int), array_values($int), $m[0]);
            return MathCalc::calcRawString($m[0]);
        }, $code);
        $code = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(stripcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])])), '\\\'') . '\'';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}](\()?~msi', function ($m) use ($strings) {
            if (isset($m[3]) && $m[3] !== '') {
                return $strings[$m[1]][Helpers::NormalizeInt($m[2])] . '(';
            }
            return '\'' . addcslashes(stripcslashes($strings[$m[1]][Helpers::NormalizeInt($m[2])]), '\\\'') . '\'';
        }, $code);
        return $code;
    }

    private function deobfuscateFilePutContentsB64Var($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateStrRot13PackFuncs($str, $matches)
    {
        return pack('H*', str_rot13($matches[3]));
    }

    private function deobfuscateDefinedGlobalsEval($str, $matches)
    {
        $dictionary = explode($matches[2], $matches[3]);
        $result = $str;
        $mainNumberVal = 0;
        $mainNumberName = '';
        $result = preg_replace_callback(
            '~pack\(\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]],\s?\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]]\)|ord\((\d+)\)~msi',
            function ($m) use ($dictionary, &$mainNumberVal, &$mainNumberName) {
                if ($m[3] !== null) {
                    $mainNumberVal = ord($m[3]);
                    return $mainNumberVal;
                }
                $arg1 = $dictionary[Helpers::NormalizeInt($m[1])] ?? '';
                $arg2 = $dictionary[Helpers::NormalizeInt($m[2])] ?? '';
                $mainNumberName = pack($arg1, $arg2);
                return '"' . $mainNumberName . '"';
            },
            $result
        );

        preg_match_all('~"([^\'"]+)"~msi', $matches[5], $dictonarySet, PREG_SET_ORDER);
        if (!array_key_exists($matches[7], $dictonarySet)) {
            return $result;
        }
        $func = stripcslashes($dictonarySet[$matches[7]][1]);
        $code = sprintf('%s("%s")', $func, $matches[8]);
        $code = stripslashes($this->unwrapFuncs($code));
        $code = str_replace($mainNumberName, (int)$mainNumberVal, $code);

        $result = str_replace($matches[6], $code, $result);

        preg_match_all(
            '~\$GLOBALS\[(\w{1,100})\]\s?=\s?explode\([\'"]([^\'"]+)[\'"],\s?[\'"](H\*[^\'"]+)[\'"]\);~msi',
            $result,
            $globalMatches,
            PREG_SET_ORDER
        );

        foreach ($globalMatches as $globalMatch) {
            $dictonarySet = explode($globalMatch[2], $globalMatch[3]);
            $result = preg_replace_callback(
                '~pack\(\$GLOBALS\[' . $globalMatch[1] . '\][{[](\w+)[]}]\s*,\s*\$GLOBALS\['
                . $globalMatch[1] . '\][{[](\w+)[]}]\)~msi',
                function ($m) use ($dictonarySet) {
                    $key = Helpers::NormalizeInt($m[2]);
                    if (!array_key_exists($key, $dictonarySet)) {
                        return $m[0];
                    }
                    return '"' . pack('H*', $dictonarySet[$key]) . '"';
                },
                $result
            );
        }

        $result = MathCalc::calcRawString($result);

        return $result;
    }

    private function deobfuscateEvalB64Strtr($str, $matches)
    {
        $code = '';
        $decoder = base64_decode(strtr($matches[8], $matches[9], $matches[10]));
        if (preg_match('~eval\(\$[^\(]+\(\$[^\(]+\((\$[^,]+),\s*\'([^\']+)\',\s*\'([^\']+)\'\)\)\);\s*\1\s*=\s*NULL;~msi', $decoder, $m)) {
            $code = base64_decode(strtr($matches[11], $m[2], $m[3]));
        }
        return $code;
    }

    private function deobfuscateEvalXorKey($str, $matches)
    {
        return Helpers::xorWithKey(base64_decode($matches[10]), $matches[12]);
    }

    private function deobfuscateEvalB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateOnelineBackdoor($str, $matches)
    {
        if (strpos($str, ' = ') !== false) {
            $str = preg_replace('~\s*=\s*~', '=', $str);
        }
        return Helpers::postProcess($str);
    }

    private function deobfuscateUrldecodeDict($str, $matches)
    {
        $dict = urldecode($matches[3]);
        $funcs = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $vars = Helpers::collectConcatedVars($funcs);
        foreach ($vars as $var => $value) {
            $funcs = Helpers::replaceVarsFromDictionary($var, $value, $funcs);
        }
        $vars = Helpers::collectConcatedVars($funcs);
        $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[8]));
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscateWpMlwPluginGegelShell($str, $matches)
    {
        $strings[$matches[8]] = explode('", "', $matches[9]);
        $strings[$matches[2]] = $matches[3];
        $strings[$matches[14]] = $matches[15];
        $strings[$matches[17]] = $matches[18];
        $str = str_replace([$matches[1], $matches[7], $matches[13], $matches[16]], '', $str);
        $str = preg_replace_callback(
            '~\$this\-\>(\w+)\[(\d+)\]~msi',
            function ($m) use ($strings) {
                if (isset($strings[$m[1]])) {
                    return '\'' . $strings[$m[1]][(int)$m[2]] . '\'';
                }
                return $m[0];
            },
            $str
        );
        $str = str_replace('\' . \'', '', $str);
        $str = preg_replace_callback('~function\s*\w+\([^\)]*\)\s*(\{([^{}]*+(?:(?1)[^{}]*)*+)\})~msi', function ($m) use ($strings) {
            $vars = [];
            Helpers::collectVars($m[0], '"', $vars, true);
            $res = Helpers::replaceVarsFromArray($vars, $m[0]);
            $res = preg_replace_callback('~\$this\-\>(\w+)\s*=\s*strtr\(\$this\-\>\1,\s*array\(\s*\'([^\)]+)\'\s*\)\);\s*(\$\w+)\s*=\s*\$this->\w+\(\$this->\1,\s*false\);~msi', function ($m2) use ($strings) {
                $tmp = explode('\', \'', $m2[2]);
                $chars = [];
                foreach ($tmp as $entry) {
                    $entry = explode('\'=>\'', $entry);
                    $chars[$entry[0]] = $entry[1];
                }
                $res = $m2[1] . ' = \'' . Helpers::gegelShellDecode(strtr($strings[$m2[1]], $chars), false) . '\';';
                return $res;
            }, $res);
            return $res;
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange($str, $matches)
    {
        return Helpers::replaceVarsFromDictionary(
            $matches[1],
            implode(range(chr($matches[2]), chr($matches[3]))),
            $str
        );
    }

    private function deobfuscateEvalHex2Bin($str, $matches)
    {
        $code = Helpers::collectConcatedVars($matches[1]);
        return hex2bin($code[$matches[2]]);
    }

    private function deobfuscateThinkPHP_cms($str, $matches)
    {
        $strings = [];
        $int = [
            '~\bE_ERROR\b~'               => E_ERROR,
            '~\bE_RECOVERABLE_ERROR\b~'   => E_RECOVERABLE_ERROR,
            '~\bE_WARNING\b~'             => E_WARNING,
            '~\bE_PARSE\b~'               => E_PARSE,
            '~\bE_NOTICE\b~'              => E_NOTICE,
            '~\bE_STRICT\b~'              => E_STRICT,
            '~\bE_DEPRECATED\b~'          => E_DEPRECATED,
            '~\bE_CORE_ERROR\b~'          => E_CORE_ERROR,
            '~\bE_CORE_WARNING\b~'        => E_CORE_WARNING,
            '~\bE_COMPILE_ERROR\b~'       => E_COMPILE_ERROR,
            '~\bE_COMPILE_WARNING\b~'     => E_COMPILE_WARNING,
            '~\bE_USER_ERROR\b~'          => E_USER_ERROR,
            '~\bE_USER_WARNING\b~'        => E_USER_WARNING,
            '~\bE_USER_NOTICE\b~'         => E_USER_NOTICE,
            '~\bE_USER_DEPRECATED\b~'     => E_USER_DEPRECATED,
            '~\bE_ALL\b~'                 => E_ALL,
        ];

        $str = preg_replace(array_keys($int), array_values($int), $str);
        $str = MathCalc::calcRawString($str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function ($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $hangs = 10;
        while (preg_match('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', $str) && $hangs--) {
            $str = preg_replace_callback('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', function ($m) {
                return $m[1] . '(' . $m[2] . ')';
            }, $str);
        }

        $str = preg_replace_callback('~(?|if\(!defined\("(\w+)"\)\)|\$\w+=!defined\("([^"]+)"\);if\(\$\w+\)\{)\s*define\("\1","\w+"\);\s*(?|\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\s*\'([^\']+)\'\);|unset\(\$\w+\);\$\w+=explode\(\'([^\']+)\',\'([^\']+)\'\);\$GLOBALS\[\1\]=\$\w+;)~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\s*,\s*\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function ($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $str = preg_replace_callback('~call_user_func\(function\([^)]*\)\{.*?\},\s*\$GLOBALS\[(\w+)\]\[(\d+)\],\$GLOBALS\[(\w+)\]\[(\d+)\]\)~msi', function ($m) use ($strings) {
            return '\'' . pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]) . '\'';
        }, $str);

        return $str;
    }

    private function deobfuscateEvalHexFunc($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'');
        $func = stripcslashes($matches[3]);
        $vars[$matches[2]] = Helpers::executeWrapper($func, [stripcslashes($matches[4])]);
        $code = Helpers::executeWrapper(stripcslashes($matches[5]), [$vars[$matches[2]]]);
        return Helpers::replaceVarsFromArray($vars, $code);
    }

    private function deobfuscateCallUserFuncsPackDefinedVar($str, $matches)
    {
        $packDataArray = explode(
            $matches[3],
            gzinflate(substr(
                substr(stripcslashes($matches[4]), 0, -1),
                hexdec($matches[5]),
                (int)$matches[6]
            ))
        );

        $packDataArray = explode($matches[7], $packDataArray[hexdec($matches[8])]);
        $result = MathCalc::calcRawString($str);

        $result = preg_replace_callback(
            '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{' . $matches[1] . '})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
            function ($match) use ($packDataArray) {
                $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                if (isset($packDataArray[$index])) {
                    $result = pack('H*', $packDataArray[$index]);
                    if (is_callable($result)) {
                        return $result;
                    }
                    return '\'' . $result . '\'';
                }
                return $match[0];
            },
            $result
        );

        if (preg_match('~if\(\!\s?defined\(\s?\'([^\']+)\'\)\)\s?define\(\s?\'\1\',\s?\'[^\']+\'\)?;\s?call_user_func_array\([\'"\w\s]+,\s?array\(\d\)\);[^\$]+(\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s?explode\(\s?\'([^\']+)\',\s?gzinflate\(\s?substr\(\s?\'((?:[^\']+\')+),(\dx\w{1,50}),\s?(\-?[\w]{1,50})\)+;\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s*call_user_func_array\([^,]+,\s?array\(\s?\'([^\']+)\',\s?\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\[(0x\d+)\]\)+;)(?:.*?\$[GET_LOBALS]+{\s?[\'"]?\1[\'"]?})+[^;]+;~msi', $result, $match)) {
            $decoded = gzinflate(substr(
                substr(($match[4]), 0, -1),
                hexdec($match[5]),
                strpos($match[6], '-') !== false
                        ? -hexdec($match[6])
                        : hexdec($match[6])
            ));

            if (!$decoded) {
                return $match[0];
            }

            $packDataArray = explode(
                $match[3],
                $decoded
            );

            $packDataArray = explode($match[7], $packDataArray[hexdec($match[8])]);

            $result = str_replace($match[2], '', $result);
            $result = MathCalc::calcRawString($result);

            $result = preg_replace_callback(
                '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{\s?\'' . $match[1] . '\'})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
                function ($match) use ($packDataArray) {
                    $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                    if (isset($packDataArray[$index])) {
                        $result = pack('H*', $packDataArray[$index]);
                        if (is_callable($result)) {
                            return $result;
                        }
                        return '\'' . $result . '\'';
                    }
                    return $match[0];
                },
                $result
            );
        }

        $result = str_replace($matches[2], '', $result);

        return $result;
    }

    private function deobfuscateVarFuncsCallEvalV1($str, $matches)
    {
        return gzinflate(base64_decode($matches[7]));
    }

    private function deobfuscateVarFuncsCallEvalV2($str, $matches)
    {
        return gzinflate(base64_decode($matches[2]));
    }

    private function deobfuscateDictStrippedVarsCreateFunc($str, $matches)
    {
        $dictName = $matches[1];
        $dictVal = stripcslashes($matches[2]);

        $result = MathCalc::calcRawString($matches[3]);
        $code = Helpers::replaceVarsFromDictionary($dictName, $dictVal, $result);
        if (preg_match('~base64_decode[^;]+;[^=]+=gzinflate[^;]+;eval~msi', $code)) {
            return gzinflate(base64_decode(stripcslashes($matches[5])));
        }

        return $str;
    }

    private function deobfuscateDictFuncsSubstr($str, $matches)
    {
        $dict = stripcslashes($matches[3]);
        $vars[$matches[4]] = substr($dict, $dict[Helpers::NormalizeInt($matches[5])], $dict[Helpers::NormalizeInt($matches[6])]);
        $vars[$matches[7]] = substr($dict, $dict[Helpers::NormalizeInt($matches[8])] + $dict[Helpers::NormalizeInt($matches[9])], $dict[Helpers::NormalizeInt($matches[10])]);
        $vars[$matches[11]] = substr($dict, $dict[Helpers::NormalizeInt($matches[12])] + $dict[Helpers::NormalizeInt($matches[13])] + $dict[Helpers::NormalizeInt($matches[14])]);
        $str = str_replace($matches[1], '', $str);
        $str = str_replace($matches[15], Helpers::replaceVarsFromArray($vars, $matches[15]), $str);
        $str = preg_replace_callback('~0x[\da-f]+~msi', function ($m) {
            return Helpers::NormalizeInt($m[0]);
        }, $str);

        $hangs = 10;
        while (preg_match('~define\(\'([^\']+)\',\'[^\']+\'\);(\$_SERVER|\$GLOBALS)\[\'?\1\'?\]=explode\(\'([^\']+)\',gzinflate\(substr\(base64_decode\(\'([^\']+)\'\),(\d+),\s?\-(\d+)\)\)\);~msi', $str, $m) && $hangs--) {
            $str = str_replace($m[0], '', $str);
            $code = explode($m[3], gzinflate(substr(base64_decode($m[4]), Helpers::NormalizeInt($m[5]), -Helpers::NormalizeInt($m[6]))));
            $tmp = [];
            foreach ($code as $i => $val) {
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                if (preg_match_all('~(\$\w+)=&\$GLOBALS\[\'' . $m[1] . '\'\]~msi', $str, $m2)) {
                    $tmp = $m2[1] ?? [];
                    foreach ($m2[0] as $stmt) {
                        $str = str_replace($stmt . ';', '', $str);
                    }
                }
                foreach ($tmp as $var) {
                    $str = str_replace($var . '[' . $i . '](', $val . '(', $str);
                    $str = str_replace($var . '[' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                }
            }
        }
        $str = preg_replace_callback('~gzinflate\(base64_decode\(\'([^\']+)\'\)\)~msi', function ($m) {
            return '\'' . gzinflate(base64_decode($m[1])) . '\'';
        }, $str);
        return $str;
    }

    private function deobfuscateGulf2($str, $matches)
    {
        $str = str_replace($matches[6], '', $str);
        $str .= gzinflate(base64_decode($matches[11]));
        $str = preg_replace_callback('~eval\(gzinflate\((\w+)\(\'~msi', function ($m) {
            return str_replace($m[1], 'base64_decode', $m[0]);
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange2($str, $matches)
    {
        $dict = range(chr((int)$matches[2]), chr((int)$matches[3]));
        $str = Helpers::replaceVarsFromDictionary($matches[1], $dict, $str);
        if (preg_match('~\'(\$\w+)\',\'(eval\("\?>"\.(\w+\()+\1\)+;)\'~msi', $str, $m)) {
            $str = str_replace($m[1], '\'' . $matches[6] . '\'', $m[2]);
            return $str;
        }
        $dict2 = range(chr((int)$matches[8]), chr((int)$matches[9]));
        $str = Helpers::replaceVarsFromDictionary($matches[7], $dict2, $str);
        $dict3 = explode(',', Helpers::replaceVarsFromDictionary($matches[7], $dict2, $matches[11]));
        foreach ($dict3 as &$string) {
            $string = trim($string, ' \'');
        }
        $str = Helpers::replaceVarsFromDictionary($matches[10], $dict3, $str, false);
        return $str;
    }

    private function deobfuscateFileInjector($str, $matches)
    {
        return str_replace($matches[2], base64_decode($matches[2]), $str);
    }

    private function deobfuscateXxteaDecrypt($str, $matches)
    {
        return Helpers::Xxtea_decrypt($matches[6], $matches[7]);
    }

    private function deobfuscateSDCMS($str, $matches)
    {
        $res = Helpers::unwrapGoto($str);
        $res = preg_replace('~\$\w+=chr\(72\)\s*\.\s*chr\(42\);~msi', '', $res);
        $res = preg_replace_callback('~pack\(\$\w+,"([^"]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateGlobalsEvalFuncs($str, $matches)
    {
        $search = ['$ ', '{ ', ' }', ' [', '] ', '} '];
        $replace = ['$', '{', '}', '[', ']', '}'];
        $str = str_replace($search, $replace, $str);
        $res = $str;
        $vars = Helpers::collectVars($res, '"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        preg_match_all(
            '~(?|\${(\${)?[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?|()\$(\w+))\s?=\s?[\'"]([^"\']+)["\'];~msi',
            $res,
            $globalVars,
            PREG_SET_ORDER
        );

        foreach ($globalVars as $globalVar) {
            if ($globalVar[1] === '${' && isset($vars['$' . $globalVar[2]])) {
                $vars['$' . $vars['$' . $globalVar[2]]] = $globalVar[3];
            } else {
                $vars['$' . $globalVar[2]] = $globalVar[3];
            }

            $res = str_replace($globalVar[0], '', $res);
        }

        preg_match_all(
            '~\${\${[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?\s?=\s?((?:\$\w{1,50}\s?\.?\s?|\${\${[\'"]GLOBALS[\'"]}\[[\'"][^\'"]+[\'"]\]}\s?\.?\s?)+;\s?)~msi',
            $res,
            $varsToReplace,
            PREG_SET_ORDER
        );
        foreach ($varsToReplace as $varToReplace) {
            preg_match_all(
                '~(\$\w{1,50})|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}~msi',
                $varToReplace[2],
                $varData,
                PREG_SET_ORDER
            );

            $value = '';
            foreach ($varData as $var) {
                if ($var[1] !== '' && isset($vars[$var[1]])) {
                    $value .= $vars[$var[1]];
                }
                if ($var[2] !== '' && isset($vars['$' . $var[2]])) {
                    $value .= $vars['$' . $vars['$' . $var[2]]];
                }
            }

            $vars['$' . $vars['$' . $varToReplace[1]]] = $value;
            $res = str_replace($varToReplace[0], '', $res);
        }

        $res = preg_replace_callback(
            '~(?|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}|(?<=\()\$(\w+)(?=\())(\()?~msi',
            function ($m) use ($vars) {
                if ($m[1] !== '' && isset($vars['$' . $m[1]])) {
                    if (isset($m[2]) && $m[2] !== '') {
                        $ret = $vars['$' . $vars['$' . $m[1]]] ?? $vars['$' . $m[1]];
                        return $ret . '(';
                    } else {
                        return '"' . $vars['$' . $vars['$' . $m[1]]] . '"';
                    }
                }
                return $m[0];
            },
            $res
        );

        $res = trim(preg_replace('~echo "\s*";~', '', $res));
        return $this->unwrapFuncs($res);
    }

    private function deobfuscateDictVarsEval($str, $matches)
    {
        $dict = str_split($matches[3]);
        $str = str_replace($matches[1], '', $str);
        $str = Helpers::replaceVarsFromDictionary($matches[2], $dict, $str);
        $vars = Helpers::collectVars($str);
        $str = preg_replace('~((\$\w{1,50}\s*=\s*[\'"]\w{1,20}[\'"]\s*;\s*){1,})~msi', '', $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateEvalIter($str, $matches)
    {
        $varsConcated = Helpers::collectConcatedVars($matches[3]);
        $res = MathCalc::calcRawString($matches[5] . $matches[7]);
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($varsConcated, $res));
        $vars = Helpers::collectVars($res, "'");
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($vars, $matches[9]));
        $res = $this->deobfuscateEval($res, []);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        if (preg_match('~(eval\(gzuncompress\(base64_decode\(\'[^\']+\'\)\)\);)(eval\(gzuncompress\(strrev\(base64_decode\(\'[^\']+\'\)\)\)\);)~msi', $res, $m)) {
            $eval1 = $this->deobfuscateEval($m[1], []);
            $res = str_replace($m[1], $eval1, $res);

            $eval2 = $this->deobfuscateEval($m[2], []);
            for ($i = 0; $i < 101; $i++) {
                $eval2 = Helpers::replaceVarsFromArray($vars, $eval2);
                $eval2 = $this->deobfuscateEval($eval2, []);
            }

            if (preg_match('~((\$\w*)\s*=\s*\w*\s*\(\s*\$\w*,\s*\"(\w*)\"\s*\)\s*;)\s*eval\s*\(\2\)\s*;~msi', $eval2, $m2)) {
                $key = $m2[3];
                $var = $matches[2];

                $key = base64_encode($key);
                $var = base64_decode($var);
                $ATKQTP = "";
                $WWEMZR = "";
                $RHNLHB = 0;
                while ($RHNLHB < strlen($var)) {
                    for ($VGPJVG = 0; $VGPJVG < strlen($key); $VGPJVG++) {
                        $ATKQTP = chr(ord($var[$RHNLHB]) ^ ord($key[$VGPJVG]));
                        $WWEMZR .= $ATKQTP;
                        $RHNLHB++;
                        if ($RHNLHB >= strlen($var)) {
                            break;
                        }
                    }
                }
                $eval2 = str_replace($m2[1], '', $eval2);
                $eval2 = str_replace($m2[2], gzuncompress(base64_decode($WWEMZR)), $eval2);
                $eval2 = Helpers::normalize($eval2);

                if (preg_match('~eval\(\"[^\"]+\"\.gzuncompress\(base64_decode\(\"[^\"]+\"\)\)\);~msi', $eval2, $m3)) {
                    $subeval = $this->deobfuscateEval($m3[0], []);
                    $eval2 = str_replace($m3[0], $subeval, $eval2);
                }
                $res = str_replace($m[2], $eval2, $res);
            }
        }
        return $res;
    }

    private function deobfuscateArrayDictCharsConcatStr($str, $matches)
    {
        $varsStr = $matches[7];
        $varsStr = preg_replace_callback('~\$[^\s(]+\([\'"]([^\'"]+)[\'"]\)~msi', function ($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $varsStr);

        $vars = explode(',', $varsStr);
        array_walk($vars, function (&$val) {
            $val = trim($val, '\'');
        });

        $dictVars = $matches[8];
        $dictVars = preg_replace_callback(
            '~(?:\$[^\s[]+\[\d+\]\.?)+~msi',
            function ($m) use ($vars) {
                $res = '';
                preg_match_all('~\[(\d+)\]~ms', $m[0], $match, PREG_SET_ORDER);
                foreach ($match as $index) {
                    $res .= $vars[(int)$index[1]] ?? '';
                }
                return '\'' . $res . '\'';
            },
            $dictVars
        );

        $res = str_replace('.', '', $matches[10]);

        $vars = [];
        $closeBrackets = 0;
        preg_match_all('~(\$[^\s=]+)\s?=\s?[\'"]([^\'"]+)[\'"];~msi', $dictVars, $matchVars, PREG_SET_ORDER);
        foreach ($matchVars as $matchVar) {
            $res = str_replace($matchVar[1], strtolower($matchVar[2]), $res);
            $closeBrackets++;
        }

        return $this->unwrapFuncs($res . '\'' . $matches[2] . '\'' . str_repeat(')', $closeBrackets) . ';');
    }

    private function deobfuscateEvalFile($str, $matches)
    {
        $res = '';
        $file_content = $str;
        $func1_name = $matches[5];
        $func2_name = $matches[10];
        $eval1 = $matches[2];
        $eval2 = $matches[3];
        $eval3 = $matches[7];
        $eval3_arg = $matches[8];

        $eval1_res = $this->deobfuscateEval($eval1, []);
        $res = str_replace($eval1, $eval1_res, $str);

        if (preg_match('~' . $func1_name . '~msi', $eval1_res)) {
            $func1_call1 = Helpers::someDecoder5($file_content, $matches[6], $matches[6], $matches[12], $matches[14]);
            $func1_call2 = Helpers::someDecoder5($file_content, $matches[12], $matches[6], $matches[12], $matches[14]);
            $func1_call3 = Helpers::someDecoder5($file_content, $matches[14], $matches[6], $matches[12], $matches[14]);

            $eval2_res = $this->deobfuscateEval(str_replace($matches[4], '"' . $func1_call1 . '"', $eval2), []);
            $res = str_replace($eval2, $eval2_res, $res);

            if (preg_match('~' . $func2_name . '~msi', $eval2_res)) {
                $func2_call = Helpers::someDecoder6($func1_call2, $func1_call3);
                $eval3_arg = str_replace($matches[9], '"' . $func2_call . '"', $eval3_arg);
                $eval3_arg = trim(Helpers::normalize($eval3_arg), '"');
                $res = str_replace($eval3, $eval3_arg, $res);
                $res = str_replace($matches[15], '', $res);
            }
        }

        return $res;
    }

    private function deobfuscateSlashedDictFuncGetVar($str, $matches)
    {
        //Sample: slashedDictFuncGetVar_1.php
        $dictionary = stripcslashes($matches[2]);
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?substr\(\$\w{1,50},\s?((?:\$\w{1,50}\[\d+\]\+?\s?)+),?\s?(\$\w{1,50}\[\d+\])?\);~msi',
            $matches[3],
            $varMatches,
            PREG_SET_ORDER
        );

        $vars = [];
        foreach ($varMatches as $varMatch) {
            $argOneValue = 0;
            preg_match_all('~\d+~msi', $varMatch[2], $indexMatches, PREG_SET_ORDER);
            foreach ($indexMatches as $indexMatch) {
                $argOneValue += $dictionary[(int)$indexMatch[0]] ?? 0;
            }
            if (isset($varMatch[3]) && $varMatch[3] !== '') {
                $argTwoValue = 0;
                preg_match_all('~\d+~msi', $varMatch[3], $indexMatches, PREG_SET_ORDER);
                foreach ($indexMatches as $indexMatch) {
                    $argTwoValue += $dictionary[(int)$indexMatch[0]] ?? 0;
                }

                $vars[$varMatch[1]] = substr($dictionary, $argOneValue, $argTwoValue);
                continue;
            }

            $vars[$varMatch[1]] = substr($dictionary, $argOneValue);
        }

        $result = Helpers::replaceVarsFromArray($vars, $str, true);

        $hop = 10;
        $regex = '~(\$\w+\[[^]]+\])\s?=\s?explode\([\'"]([^\'"]+)[\'"]\s?,gzinflate\(substr\(base64_decode\([\'"]([^\'"]+)[\'"]\)\s?,(\w+),\s?([-\w]+)\)\)\);((?:.*?\1\[\w+\])+[^;}]+[;}]+)~msi';
        $finalDictionary = [];
        while ($hop !== 0 && preg_match($regex, $result, $matchPattern)) {
            $substrArg1 = @hexdec($matchPattern[4]) * (strpos($matchPattern[4], '-') !== false ? -1 : 1);
            $substrArg2 = @hexdec($matchPattern[5]) * (strpos($matchPattern[5], '-') !== false ? -1 : 1);
            $finalVariable = $matchPattern[1];
            // If $matchPattern[2] is an empty string explode will throw a ValueError.
            try {
                $finalDictionary = explode(
                    $matchPattern[2],
                    gzinflate(substr(base64_decode($matchPattern[3]), $substrArg1, $substrArg2))
                );
            } catch (\ValueError $e) {
                $finalDictionary = [];
            }

            $var = str_replace('[', '\[', $finalVariable);
            $var = str_replace(']', '\]', $var);
            $subRegex = '~\\' . $var . '\[([\dx\w]+)\](\s*\()?~msi';

            $result = $matchPattern[6];

            $subHop = 10;
            while ($subHop !== 0 && preg_match($subRegex, $result)) {
                $result = preg_replace_callback($subRegex, function ($m) use ($finalDictionary) {
                    $index = hexdec($m[1]);
                    if (!isset($finalDictionary[$index])) {
                        return $m[0];
                    }
                    if (isset($m[2]) && $m[2] !== '') {
                        return $finalDictionary[$index] . '(';
                    }

                    return '\'' . addslashes($finalDictionary[$index]) . '\'';
                },
                    $result);
                $subHop--;
            }

            $hop--;
        }

        $result = preg_replace_callback('~\$\w+\[([\d\w]+)\](\s*\()?~msi', function ($m) use ($finalDictionary) {
            $index = hexdec($m[1]);

            if (!isset($finalDictionary[$index])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $finalDictionary[$index] . '(';
            }

            return '\'' . addslashes($finalDictionary[$index]) . '\'';
        }, $result);

        return $result;
    }

    private function deobfuscateConcatVarsInLoopEval($str, $matches)
    {
        //Sample: concatVarsInLoopEval_1.php
        $vars = Helpers::collectVars($matches[1], "'");

        $result = str_replace('.', '', $matches[6]);
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $func = stripcslashes($matches[3] . $matches[4]);

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }

        for ($i = (int)$matches[8]; $i <= (int)$matches[9]; $i++) {
            $result = @$func($result);
        }

        return $result;
    }

    private function deobfuscateTwoFuncStrDecodeVars($str, $matches)
    {
        //Sample: twoFuncStrDecodeVars_1.php
        $dictionary = $matches[4];

        $set = explode(',', $matches[11]);
        $func = "";
        foreach ($set as $val) {
            $func .= $dictionary[$val];
        }

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }
        $result = @$func($matches[21]);

        $dataFirst = strlen($result);
        $dataSecond = strlen($matches[23]);

        if ($dataFirst <= $dataSecond) {
            return $result ^ $matches[23];
        }
        for ($i = 0; $i < $dataFirst; ++$i) {
            $result[$i] = $result[$i] ^ $matches[23][$i % $dataSecond];
        }

        return $result;
    }

    private function deobfuscateClassArrayFuncReplaces($str, $matches)
    {
        //Sample: classArrayFuncReplaces_1.php
        $result = $str;

        $dictionary = range($matches[2], $matches[3]);
        preg_match_all('~(\d+)~msi', $matches[5], $strings, PREG_SET_ORDER);
        $variableValue = '';
        foreach ($strings as $str) {
            $variableValue .= $dictionary[(int)$str[1]] ?? '';
        }

        $result = str_replace($matches[5], $variableValue, $result);

        $dictionary = Helpers::concatStringsInContent($matches[18]);
        preg_match_all('~(\w+)~msi', $dictionary, $strings, PREG_SET_ORDER);

        $variableValues = [];
        $dictionary = range($matches[11], $matches[12]);
        foreach ($strings as $str) {
            $variableValue = '';
            $arr = explode($matches[13], $str[1]);
            foreach ($arr as $key => $val) {
                $variableValue .= $dictionary[$val - 0];
            }
            $variableValues[] = $variableValue;
        }

        $result = str_replace($matches[16], '', $result);

        $result = preg_replace_callback(
            '~\\' . $matches[19] . '\[(\d+)\](\s?\()?~msi',
            function ($m) use ($variableValues) {
                $replace = $variableValues[(int)$m[1]] ?? $m[0];
                return (isset($m[2]) && $m[2] !== '') ? $replace . '(' : ('"' . $replace . '"');
            },
            $result
        );

        return $result;
    }

    private function deobfuscateGlobalsArrayDictFunc($str, $matches)
    {
        //Sample: globalsArrayDictFunc.php

        $globals_name   = $matches[1];
        $globals_array  = explode(',', str_replace(['"', "'"], '', Helpers::replaceBase64Decode(Helpers::normalize($matches[2]), '\'')));
        $function_name  = $matches[3];
        $function_dict  = explode(',', str_replace(['"', "'"], '', $matches[4]));
        $code           = $matches[5];

        $code = preg_replace_callback('~\$GLOBALS\[["\'](\w{1,100})["\']\]\[(\d{1,10})\]~mis', function ($matches) use ($globals_name, $globals_array) {
            if ($matches[1] !== $globals_name || !array_key_exists($matches[2], $globals_array)) {
                return $matches[0];
            }
            return $globals_array[$matches[2]];
        }, $code);

        $code = preg_replace_callback('~(\w{1,20})\((\d{1,3})\)~mis', function ($matches) use ($function_name, $function_dict) {
            if ($matches[1] !== $function_name || !array_key_exists($matches[2], $function_dict)) {
                return $matches[0];
            }
            return '\'' . base64_decode($function_dict[$matches[2]]) . '\'';
        }, $code);

        return $code;
    }

    private function deobfuscateDecryptWithUserAgent($str, $matches)
    {
        $hardcoded_key = '87.38';
        $funcs = explode('(', $matches[4]);
        $funcs = array_reverse($funcs);
        $code = $matches[11];
        foreach ($funcs as $func) {
            if ($func === '') {
                continue;
            }
            if (Helpers::convertToSafeFunc($func)) {
                $code = Helpers::executeWrapper($func, [$code]);
            }
        }
        $key = $hardcoded_key . $matches[10];
        $key = md5($key);
        $res = Helpers::xorWithPrevChar(Helpers::xorWithKey($code, $key));
        if (strpos($res, 'error_reporting') !== false) {
            return $res;
        }
        return '';
    }

    private function deobfuscateEvalChrVarsMany($str, $matches)
    {
        $vars = Helpers::collectVars($str, "'", $vars);
        $vars[$matches[1]] = 'chr';
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[3]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        if (
            !preg_match(
                '~(eval\(\$?\w{1,50}\(\$?\w{1,50}\([\'"][^\'"]+[\'"]\)\)\);)\s?(eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;)~msi',
                $res,
                $unwrapCode
            )
        ) {
            return $res;
        }

        $decodedContent = $unwrapCode[2];
        $hop = 200;
        while ($hop > 0 && preg_match('~eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;~msi', $decodedContent)) {
            $decodedContent = Helpers::replaceVarsFromArray($vars, $decodedContent, true);
            $decodedContent = $this->unwrapFuncs($decodedContent);
            $hop--;
        }

        $functionContent = Helpers::replaceVarsFromArray($vars, $unwrapCode[1], true);
        ;
        $functionContent = $this->unwrapFuncs($functionContent);
        $res = str_replace($unwrapCode[1], '', $res);

        if (
            !preg_match(
                '~function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s{0,50}{\s{0,50}\3\s?=\s?base64_encode\(\3\);\s{0,50}\2\s?=\s?base64_decode\(\2\);\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?0;\s{0,50}while\s?\(\6\s?<\s?strlen\(\2\)\)\s?{\s{0,50}for\s?\((\$\w{1,50})\s?=\s?0;\s?\7\s?<\s?strlen\(\3\);\s?\7\+\+\)\s?{\s{0,50}\4\s?=\s?chr\(ord\(\2\[\6\]\)\s?\^\s?ord\(\3\[\7\]\)\);\s{0,50}\5\s?\.=\s?\4;\s{0,50}\6\+\+;\s{0,50}if\s?\(\6\s?>=\s?strlen\(\2\)\)\s?break;[\s}]+return\sgzuncompress\(base64_decode\(\5\)\);[\s}]+~msi',
                $functionContent,
                $functionContentMatch
            )
        ) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if (
            !preg_match(
                '~(\$\w{1,50})\s?=\s?(\w{1,50})\((\$\w{1,50}),\s?["\']([^\'"]+)[\'"]\);\s{0,50}eval\s?\(\1\);~msi',
                $decodedContent,
                $decodedContentMatch
            )
        ) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if ($decodedContentMatch[2] === $functionContentMatch[1] && in_array($decodedContentMatch[3], array_keys($vars))) {
            $key = base64_encode($decodedContentMatch[4]);
            $decodedStr = base64_decode($vars[$decodedContentMatch[3]]);
            $chrOrd = "";
            $resultTemp = "";
            $incrementNum = 0;
            while ($incrementNum < strlen($decodedStr)) {
                for ($i = 0; $i < strlen($key); $i++) {
                    $chrOrd = chr(ord($decodedStr[$incrementNum]) ^ ord($key[$i]));
                    $resultTemp .= $chrOrd;
                    $incrementNum++;
                    if ($incrementNum >= strlen($decodedStr)) {
                        break;
                    }
                }
            }
            $res = str_replace($unwrapCode[2], gzuncompress(base64_decode($resultTemp)), $res);
        }

        return $res;
    }

    private function deobfuscateCreateFuncChrVarsMany($str, $matches)
    {
        $vars = [
            $matches[1] => 'chr'
        ];
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[4]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        $res = preg_replace('~\s?/\*.*?\*/~msi', '', $res);
        $res = preg_replace_callback(
            '~\s*(\$\w{1,50}\s?=\s?)(?://|##)[^\n]{0,50}\n([chr\'.]+)\s*(?://|##)[^\n]{0,50}\n([chr\'.]+;)~msi',
            function ($m) {
                return $m[1] . $m[2] . $m[3];
            },
            $res
        );

        return $res;
    }

    private function deobfuscateCookiePost($str, $matches)
    {
        $code = $matches[4];
        $code = str_replace($matches[2], 'chr', $code);
        $code = Helpers::replaceChrInStr($code);
        $code = Helpers::normalize($code);
        $vars = Helpers::collectVars($code, "\"", $vars);
        $res = $code;

        $func = $matches[5];
        $func = str_replace($matches[2], 'chr', $func);
        $func = str_replace('global chr;', '', $func);
        $func = Helpers::normalize($func);
        $res .= $func;

        $code2 = $matches[12];
        $code2 = str_replace($matches[2], 'chr', $code2);
        $code2 = Helpers::replaceChrInStr($code2);
        $code2 = Helpers::normalize($code2);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);
        $res .= $code2;

        return $res;
    }

    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        if (isset($matches[3]) && $matches[3] === 'eval(') {
            $chars = explode(',', $matches[4]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            if (isset($matches[1]) && $matches[1] !== '') {
                $result = $matches[1] . $result;
            }
            if (isset($matches[5]) && $matches[5] !== '') {
                $result = $result . $matches[5];
            }
            return $result;
        }

        $result = preg_replace_callback('~String\.fromCharCode\(([\d,\s]+)\)~msi', function ($m) {
            $chars = explode(',', $m[1]);
            $res = null;
            foreach ($chars as $char) {
                $res .= chr((int)trim($char));
            }
            return '\'' . $res . '\'';
        }, $str);

        return $result;
    }

    private function deobfuscateJS_unescapeContentFuncWrapped($str, $matches)
    {
        $result = '';

        $functionCode = urldecode($matches[1]);
        $functionName = urldecode($matches[2]);
        $strDecoded = $matches[3];

        if (
            preg_match(
                '~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+([-+]?\d{1,5})\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi',
                $functionCode,
                $match
            ) && strpos($functionName, $match[1])
        ) {
            $tmp = explode((string)$match[2], $strDecoded);
            $s = urldecode($tmp[0]);
            $k = urldecode($tmp[1] . (string)$match[3]);
            $kLen = strlen($k);
            $sLen = strlen($s);

            for ($i = 0; $i < $sLen; $i++) {
                $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) + (int)$match[4]);
            }
        } else {
            $result = $matches[3];
            $result = str_replace([$matches[1], $matches[2]], [$functionCode, $functionCode], $result);
        }

        return $result;
    }

    private function deobfuscateJS_ObfuscatorIO($str, $matches)
    {
        $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi';
        preg_match_all($detectPattern, $str, $detectMatch);
        $detectMatch = array_unique($detectMatch[1]);
        if (count($detectMatch) !== 1) {
            return $str;
        }

        preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE);
        $index = $index[0][1];

        $bo = 0;
        $bc = 0;
        $strSize = strlen($str);
        $mainCode = '';
        while ($index < $strSize) {
            if ($str[$index] === '{') {
                $bo++;
            }
            if ($str[$index] === '}') {
                $bc++;
            }
            if ($bc === $bo && $bo !== 0) {
                $mainCode = substr($str, $index + 2);
                break;
            }
            $index++;
        }
        $array = explode('\',\'', substr($matches[2], 1, -1));

        $shuffle = hexdec($matches[3]);
        while ($shuffle--) {
            $array[] = array_shift($array);
        }
        $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) {
            return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\'';
        }, $mainCode);
        return Helpers::normalize($mainCode);
    }

    private function deobfuscateJS_documentWriteUnescapedStr($str, $matches)
    {
        if ($matches[1] === 'atob') {
            return base64_decode($matches[2]);
        }
        if (strpos($matches[2], '\u00') !== false) {
            $matches[2] = str_replace('\u00', '%', $matches[2]);
        }
        $res = urldecode($matches[2]);
        if (
            isset($matches[3]) && isset($matches[4]) && $matches[3] !== ''
            && strpos($res, 'function ' . $matches[3]) !== false && $matches[4] !== ''
            && preg_match('~var\s*(\w+)=unescape\((\w+)\.substr\(0,\2\.length-1\)+;\s*var\s*(\w+)=\'\';for\((\w+)=0;\4<\1\.length;\4\+\+\)\3\+=String\.fromCharCode\(\1\.charCodeAt\(\4\)-s\.substr\(\2\.length-1,1\)+;document\.write\(unescape\(\3\)+;~msi', $res)
        ) {
            $tmp = urldecode($matches[4]);
            $res = '';
            for ($i = 0, $iMax = strlen($tmp); $i < $iMax; $i++) {
                $res .= chr(ord($tmp[$i]) - (int)substr($matches[4], -1, 1));
            }
            $res = urldecode($res);
        }
        return $res;
    }

    private function deobfuscateJS_deanPacker($str, $matches)
    {
        $payload = $matches[1];
        // Words
        $symtab = explode('|', $matches[4]);
        // Radix
        $radix = (int)$matches[2];
        // Words Count
        $count = (int)$matches[3];

        if ($count !== count($symtab)) {
            return $str; // Malformed p.a.c.k.e.r symtab !
        }

        $array = [];

        while ($count--) {
            $tmp = Helpers::jsPackerUnbaser($count, $radix);
            $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp;
        }

        $result = preg_replace_callback('~\b\w+\b~', function ($m) use ($array) {
            return $array[$m[0]];
        }, $payload);
        $result = str_replace('\\', '', $result);
        if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) {
            $class = $m[1];
            $b64_func = $m[3];
            $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function ($m) use ($class, $b64_func) {
                if (
                    (isset($m[4]) && $m[4] !== '' && $m[4] !== $class . '.' . $b64_func)
                    || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . '.' . $b64_func)
                ) {
                    return $m[0];
                }
                if (isset($m[4]) && $m[4] !== '') {
                    return '\'' . base64_decode($m[5]) . '\'';
                }
                if (isset($m[3]) && $m[3] !== '') {
                    return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\'';
                }
            }, $result);
            $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function ($m) {
                $arr = explode('\',\'', substr($m[1], 1, -1));
                $arr = array_map('base64_decode', $arr);
                return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]);
            }, $result);
        }
        return $result;
    }

    private function deobfuscateJS_objectDecode($str, $matches)
    {
        $ciphered = explode('+', $matches[9]);
        $chars = explode('\',\'', substr($matches[13], 1, -1));
        $count = (int)$matches[8];
        $arr = [];
        for ($i = 0; $i < $count; $i++) {
            $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($matches[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1);
        }
        $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function ($m) use ($arr) {
            if (!isset($arr[$m[1]])) {
                return $m[0];
            }
            return $arr[$m[1]];
        }, $matches[2]);

        return $ret;
    }

    private function deobfuscateJS_B64Embedded($str, $matches)
    {
        return '<script type="text/javascript">' . PHP_EOL . base64_decode($matches[1]) . PHP_EOL . '</script>';
    }

    private function deobfuscateJS_ParseIntArray($str, $matches)
    {
        if (preg_match('~{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);}}}\(_0x\w+,(-?0x[^)]+)\)~msi', $str, $expected)) {
            $expected = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $expected[1]);
            $expected = (int)trim(MathCalc::calcRawString(' ' . $expected));
        }

        if (preg_match('~_0x\w+=function\(_0x\w+,_0x\w+\){_0x\w+=_0x\w+-\(?([^\);]+)\)?;~msi', $str, $delta)) {
            $delta = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $delta[1]);
            $delta = (int)trim(MathCalc::calcRawString(' ' . $delta));
        }

        if (preg_match('~function\s*_0x\w+\(\)\{var\s?_0x\w+=\[([^\]]+)\];_0x\w+=function\(\)\{return\s?_0x\w+;\};return\s?_0x\w+\(\);\}~msi', $str, $array)) {
            $array = explode('\',\'', substr($array[1], 1, -1));
        }

        if (preg_match('~\(function\((_0x\w+),\s?_0x\w+\)\{var\s?(_0x\w+)=_0x\w+,_0x\w+=_0x\w+\(\);while\(!!\[\]\)\{try\{var\s?_0x\w+=((?>\-?parseInt\(_0x\w+\(0x\w+\)\)/(?:\([^\)]+\)*|0x\w+)\)*[\+\*]?\(?-?)+);if\(_0x\w+===_0x\w+\)break;else\s?_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}catch\(_0x\w+\)\{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}+\s*\((_0x\w+),(-?0x\w+[^\)]+)\)~msi', $str, $ints)) {
            $ints = $ints[3];
        }

        if (preg_match('~(?:\(function\(\)\{var[^}]+\}\(\)\)\);|document\[_0x\w+\(0x\w+\)\]\(unescape\((?>\(?_0x\w+\(0x\w+\)+\+?)+;)~msi', $str, $code)) {
            $code = $code[0];
        }

        $i = 0;
        while (true) {
            $i++;
            try {
                $num = preg_replace_callback('~parseInt\(\_0x\w+\((\w+)\)\)~msi', function ($m) use ($array, $delta) {
                    $index = hexdec($m[1]) - $delta;
                    $item = $array[$index];
                    preg_match('~\d+~', $item, $num);
                    $num = isset($num[0]) ? (int)$num[0] : 0;
                    return $num;
                }, $ints);
                $num = preg_replace_callback('~0x\w+~msi', function ($m) {
                    return hexdec($m[0]);
                }, $num);
                $num = (int)trim(MathCalc::calcRawString(' ' . $num));
                if ($num === $expected) {
                    break;
                } else {
                    $item = array_shift($array);
                    $array[] = $item;
                }
            } catch (Exception $e) {
                $item = array_shift($array);
                $array[] = $item;
            }
        }

        $code = preg_replace_callback('~_0x\w+\((0x\w+)\)~', function ($m) use ($array, $delta) {
            $index = hexdec($m[1]) - $delta;
            return '\'' . $array[$index] . '\'';
        }, $code);

        $code = str_replace(['\'+\'', '\'+(\'', '\')+(\'', ')\'+\''], '', $code);

        $code = preg_replace_callback('~unescape\(\'([^\']+)\'\)~', function ($m) {
            $m[1] = str_replace('%', '', $m[1]);
            return '\'' . hex2bin($m[1]) . '\'';
        }, $code);

        $code = preg_replace_callback('~atob\(\'([^\']+)\'\)~', function ($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $code);

        return $code;
    }

    /*************************************************************************************************************/
    /*                                          PYTHON deobfuscators                                             */
    /*************************************************************************************************************/

    private function deobfuscatePY_evalCompileStr($str, $matches)
    {
        return gzuncompress(base64_decode($matches[1]));
    }
}

class ContentObject
{
    private $content = false;
    private $normalized_file_content = false;
    private $unescaped_normalized = false;
    private $unescaped = false;
    private $decoded_file_content = false;
    private $normalized_decoded = false;
    private $decoded_fragments = false;
    private $decoded_fragments_string = false;
    private $norm_decoded_fragments = false;
    private $norm_decoded_fragments_string = false;
    private $norm_decoded_file_content = false;
    private $strip_decoded = false;
    private $type = '';

    private $deobfuscate = false;
    private $unescape = false;


    public function __construct($content, $deobfuscate = false, $unescape = false)
    {
        $this->content = $content;
        $this->deobfuscate = $deobfuscate;
        $this->unescape = $unescape;
    }

    public function getType()
    {
        return $this->type;
    }

    public function getContent()
    {
        if ($this->content !== false) {
            return $this->content;
        }
    }

    public function getUnescaped()
    {
        if (!$this->unescape) {
            $this->unescaped = '';
            $this->unescaped_normalized = '';
        }
        if ($this->unescaped !== false) {
            return $this->unescaped;
        }
        $this->unescaped = Normalization::unescape($this->getContent());
        return $this->unescaped;
    }

    public function getNormalized()
    {
        if ($this->normalized_file_content !== false) {
            return $this->normalized_file_content;
        }
        $this->normalized_file_content = Normalization::strip_whitespace($this->getContent());
        $this->normalized_file_content = Normalization::normalize($this->normalized_file_content);
        return $this->normalized_file_content;
    }

    public function getUnescapedNormalized()
    {
        if (!$this->unescape) {
            $this->unescaped = '';
            $this->unescaped_normalized = '';
        }
        if ($this->unescaped_normalized !== false) {
            return $this->unescaped_normalized;
        }
        $this->unescaped_normalized = Normalization::strip_whitespace(Normalization::unescape($this->getContent()));
        $this->unescaped_normalized = Normalization::normalize($this->unescaped_normalized);
        return $this->unescaped_normalized;
    }

    public function getDecodedFileContent()
    {
        if (!$this->deobfuscate) {
            $this->decoded_file_content = '';
            $this->decoded_fragments = [];
            $this->decoded_fragments_string = '';
            $this->norm_decoded_file_content = '';
        }
        if ($this->decoded_file_content !== false) {
            return $this->decoded_file_content;
        }
        $deobf_obj = new Deobfuscator($this->getContent());
        $deobf_type = $deobf_obj->getObfuscateType($this->getContent());
        if ($deobf_type != '') {
            $this->decoded_file_content = $deobf_obj->deobfuscate();
            $this->decoded_fragments = $deobf_obj->getFragments();
            $this->decoded_fragments_string = is_array($this->decoded_fragments) ? Normalization::normalize(implode("\n", $this->decoded_fragments)) : '';
            $this->norm_decoded_file_content = Normalization::normalize($this->decoded_file_content);
        } else {
            $this->decoded_file_content = '';
            $this->decoded_fragments = [];
            $this->decoded_fragments_string = '';
            $this->norm_decoded_file_content = '';
        }
        return $this->decoded_file_content;
    }

    public function getDecodedNormalizedContent()
    {
        if (!$this->deobfuscate) {
            $this->normalized_decoded = '';
            $this->norm_decoded_fragments = [];
            $this->norm_decoded_fragments_string = '';
        }
        if ($this->normalized_decoded !== false) {
            return $this->normalized_decoded;
        }
        $deobf_obj = new Deobfuscator($this->getNormalized());
        $deobf_type = $deobf_obj->getObfuscateType($this->getNormalized());
        if ($deobf_type != '') {
            $this->normalized_decoded = $deobf_obj->deobfuscate();
            $this->norm_decoded_fragments = $deobf_obj->getFragments();
            $this->norm_decoded_fragments_string = is_array($this->norm_decoded_fragments) ? Normalization::normalize(implode("\n", $this->norm_decoded_fragments)) : '';
        } else {
            $this->normalized_decoded = '';
            $this->norm_decoded_fragments = [];
            $this->norm_decoded_fragments_string = '';
        }
        return $this->normalized_decoded;
    }

    public function getDecodedFragments()
    {
        if ($this->decoded_fragments !== false) {
            return $this->decoded_fragments;
        }
        $this->getDecodedFileContent();
        return $this->decoded_fragments;
    }

    public function getDecodedFragmentsString()
    {
        if ($this->decoded_fragments_string !== false) {
            return $this->decoded_fragments_string;
        }
        $this->getDecodedFileContent();
        return $this->decoded_fragments_string;
    }

    public function getNormDecodedFragments()
    {
        if ($this->norm_decoded_fragments !== false) {
            return $this->norm_decoded_fragments;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_fragments;
    }

    public function getNormDecodedFragmentsString()
    {
        if ($this->norm_decoded_fragments_string !== false) {
            return $this->norm_decoded_fragments_string;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_fragments_string;
    }

    public function getNormDecodedFileContent()
    {
        if ($this->norm_decoded_file_content !== false) {
            return $this->norm_decoded_file_content;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_file_content;
    }

    public function getStripDecodedContent()
    {
        if (!$this->deobfuscate) {
            $this->strip_decoded = '';
        }
        if ($this->strip_decoded !== false) {
            return $this->strip_decoded;
        }
        $strip = Normalization::strip_whitespace($this->getContent());
        $deobf_obj = new Deobfuscator($strip, $this->getContent());
        $deobf_type = $deobf_obj->getObfuscateType($strip);
        $this->type = $deobf_type;
        if ($deobf_type != '') {
            $this->strip_decoded = $deobf_obj->deobfuscate();
        } else {
            $this->strip_decoded = '';
        }
        $this->strip_decoded = Normalization::normalize($this->strip_decoded);
        return $this->strip_decoded;
    }
}

class CleanUnit
{
    const URL_PARTIAL_PROTOCOL = '(?:https?:)?(?:\\\\?/|%2F)(?:\\\\?/|%2F)';

    const URL_PARTIAL_HOSTNAME = '(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:;\[\][\|%_\+.\~#?&/=\\\\]*)';

    const URL_PARTIAL_REGEX =  self::URL_PARTIAL_PROTOCOL . self::URL_PARTIAL_HOSTNAME;

    const URL_GRAB =
        '~(?|' // script|iframe|object|a html tags with urls
            . '<(script|iframe|object|a)\s*[^<]{0,3000}?(' . self::URL_PARTIAL_REGEX . '.{0,6000}?)(?:</\1>|/>)'
            . '|' // embed|img html tags with urls
            . '<(embed|img)\s*[^<>]{0,3000}?(' . self::URL_PARTIAL_REGEX . '[^<>]{0,6000}?)(?:>|/>)'
            . '|' //wordpress [url=...]...[/url] tags
            . '\[(url)=(' . self::URL_PARTIAL_REGEX . '.{0,300}?)\][^\[]+\[/\1\]'
            . '|' // standalone urls
            . '(' . self::URL_PARTIAL_REGEX . ')'
            . ')~msi';

    const NESTED_URLS = '~((https?:\/\/|www\.).+?)(?=(https?:\/\/|www\.|$))~mi';

    /**
     * @param string $file_content
     * @param LoadSignaturesForClean $clean_db
     * @param $deobfuscate
     * @param $unescape
     * @param $signature_converter
     * @param $precheck
     * @param $src_file
     * @param $demapper
     * @param $matched_not_cleaned
     * @param $is_crontab
     *
     * @return array|false
     */
    public static function CleanContent(&$file_content, $clean_db, $deobfuscate = false, $unescape = false, $signature_converter = null, $precheck = null, $src_file = null, $demapper = false, &$matched_not_cleaned = null, $is_crontab = false)
    {
        $bom = false;
        $file_content_orig = '';
        $l_UnicodeContent = Encoding::detectUTFEncoding($file_content, $bom);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $file_content_orig = $file_content;
                $file_content = Encoding::convertToCp1251($l_UnicodeContent, $file_content);
            }
        }
        $result = [];
        $content_orig = new ContentObject($file_content, $deobfuscate, $unescape);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $terminate  = false;
        $prev_id = '';

        if (isset($src_file) && $demapper && $deobfuscate) {
            if (self::checkFalsePositives($src_file, $content->getStripDecodedContent(), $content->getType(), $demapper)) {
                return false;
            }
        }

        foreach ($clean_db->getDB() as $rec_index => $rec) {
            if ($terminate) {
                break;
            }

            if (is_callable($precheck) && !$precheck($rec['mask_type'])) {
                continue;
            }

            switch ($rec['sig_type']) {
                case 4: // normalize first line
                case 5: // match deobfuscated content and replace related obfuscated part
                case 0: // simple match
                    if (isset($signature_converter)) {
                        $inj_sign = $signature_converter->getCutSignature($rec_index);
                    }
                    if (!isset($signature_converter) || !(isset($inj_sign) && $inj_sign)) {
                        $inj_sign = $rec['sig_match'];
                    }
                    $nohang = 2000; // maximum 2000 iterations (counting all)
                    $nohang2 = 20; //maximum 20 iterations (counting only if content length not changed)
                    $condition_num = 0; // for debug
                    while (
                        (
                            (
                                preg_match($rec['sig_match'], $content->getContent(), $fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 1
                            )
                            || (
                                ($normalized_file_content = $content->getNormalized())
                                && $normalized_file_content != ''
                                && preg_match($rec['sig_match'], $normalized_file_content, $norm_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 3
                            )
                            || (
                                ($decoded_fragments_string = $content->getDecodedFragmentsString())
                                && $decoded_fragments_string != ''
                                && preg_match($inj_sign, $decoded_fragments_string, $dec_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 2
                            )
                            || (
                                ($norm_decoded_fragments_string = $content->getNormDecodedFragmentsString())
                                && $norm_decoded_fragments_string != ''
                                && preg_match($inj_sign, $norm_decoded_fragments_string, $norm_dec_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 4
                            )
                            || (
                                ($unescaped_norm = $content->getUnescapedNormalized())
                                && $unescaped_norm != ''
                                && preg_match($rec['sig_match'], $unescaped_norm, $unescaped_norm_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 5
                            )
                            || (
                                ($unescaped = $content->getUnescaped())
                                && $unescaped != ''
                                && preg_match($rec['sig_match'], $unescaped, $unescaped_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 6
                            )
                        )
                        && ($nohang-- > 0)
                        && ($nohang2 > 0)
                    ) {
                        if (trim($rec['sig_replace']) === '<?php') {
                            $rec['sig_replace'] = '<?php ';
                        }

                        $normal_fnd = isset($norm_fnd[0][0]) ? $norm_fnd[0][0] : false;
                        $unescaped_normal_fnd = isset($unescaped_norm_fnd[0][0]) ? $unescaped_norm_fnd[0][0] : false;
                        $un_fnd = isset($unescaped_fnd[0][0]) ? $unescaped_fnd[0][0] : false;

                        if (!empty($normal_fnd)) {
                            $pos = Normalization::string_pos($file_content, $normal_fnd);
                            if ($pos !== false) {
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $norm_fnd);
                                $ser = false;
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, false, false);
                                if ($l_UnicodeContent) {
                                    $file_content_orig = self::replaceString($file_content_orig, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, false, $l_UnicodeContent, $bom);
                                }
                            }
                        }

                        if (!empty($unescaped_normal_fnd)) {
                            $pos = Normalization::string_pos($file_content, $unescaped_normal_fnd, true);
                            if ($pos !== false) {
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $unescaped_norm_fnd);
                                $ser = false;
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, true);
                                if ($l_UnicodeContent) {
                                    $file_content_orig = self::replaceString($file_content_orig, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, true, $l_UnicodeContent, $bom);
                                }
                            }
                        }

                        if (!empty($un_fnd)) {
                            $pos = Normalization::string_pos($file_content, $un_fnd, true);
                            if ($pos !== false) {
                                $matched_not_cleaned = false;
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $unescaped_fnd);
                                $ser = false;
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, true);
                                if ($l_UnicodeContent) {
                                    $file_content_orig = self::replaceString($file_content_orig, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, true, $l_UnicodeContent, $bom);
                                }
                            }
                        }

                        if ($fnd) {
                            $replace = self::getReplaceFromRegExp($rec['sig_replace'], $fnd);
                            $ser = false;
                            $file_content = self::replaceString($file_content, $replace, $fnd[0][1], strlen($fnd[0][0]), $is_crontab, $ser, false, false);
                            if ($l_UnicodeContent) {
                                $file_content_orig = self::replaceString($file_content_orig, $replace, $fnd[0][1], strlen($fnd[0][0]), $is_crontab, $ser, false, $l_UnicodeContent, $bom);
                            }
                        }
                        $decoded_fragments = $content->getDecodedFragments();
                        if (isset($dec_fnd) && $dec_fnd && !empty($decoded_fragments)) {
                            foreach ($decoded_fragments as $obfuscated => $deobfuscated) {
                                if (preg_match($inj_sign, Normalization::normalize($deobfuscated))) {
                                    foreach ($decoded_fragments as $k => $v) {
                                        if (strpos($obfuscated, $v) !== false) {
                                            $obfuscated = str_replace($v, $k, $obfuscated);
                                        }
                                    }
                                    $pos = Normalization::string_pos($file_content, $obfuscated);
                                    if ($pos !== false) {
                                        $replace = self::getReplaceFromRegExp($rec['sig_replace'], $dec_fnd);
                                        $ser = false;
                                        $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab);
                                        if ($l_UnicodeContent) {
                                            $file_content_orig = self::replaceString($file_content_orig, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, false, $l_UnicodeContent, $bom);
                                        }
                                    }
                                }
                            }
                        }

                        $norm_decoded_fragments = $content->getNormDecodedFragments();
                        if (isset($norm_dec_fnd) && $norm_dec_fnd && !empty($norm_decoded_fragments)) {
                            foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) {
                                if (preg_match($inj_sign, Normalization::normalize($deobfuscated))) {
                                    foreach ($norm_decoded_fragments as $k => $v) {
                                        $v = trim($v);
                                        if (strpos($obfuscated, $v) !== false) {
                                            $file_content = str_replace($v, $k, $obfuscated);
                                        }
                                    }
                                    $pos = Normalization::string_pos($file_content, $obfuscated);
                                    if ($pos !== false) {
                                        $replace = self::getReplaceFromRegExp($rec['sig_replace'], $norm_dec_fnd);
                                        $ser = false;
                                        $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab);
                                        if ($l_UnicodeContent) {
                                            $file_content_orig = self::replaceString($file_content_orig, $replace, $pos[0], $pos[1] - $pos[0] + 1, $is_crontab, $ser, false, $l_UnicodeContent, $bom);
                                        }
                                    }
                                }
                            }
                        }

                        $search = [
                            '~<\?php\s+\?>~smi',
                            '~<\?\s+\?>~smi',
                            '~\A\s*<\?php\s*\Z~smi',
                            '~\A\s*<\?php\s*<\?php\s*\Z~smi',
                            '~\A\s*<\?\s*\Z~smi',
                            '~\A\s*\?>\s*\Z~smi',
                            '~\A\s+<\?~smi',
                            '~\A\xEF\xBB\xBF\s*\Z~smi'
                        ];
                        $replace = [
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '<?',
                            '',
                        ];

                        if ($l_UnicodeContent) {
                            $ser = false;
                            $loop = 10;
                            while (preg_match('~<\?php\s+\?>|<\?\s+\?>|\A\s*<\?php\s*\Z|\A\s*<\?php\s*<\?php\s*\Z|\A\s*<\?\s*\Z|\A\s*\?>\s*\Z|\A\s+<\?|\A\xEF\xBB\xBF\s*\Z~smi', $file_content) && $loop--) {
                                for ($i = 0; $i < count($search); $i++) {
                                    if (preg_match($search[$i], $file_content, $m, PREG_OFFSET_CAPTURE)) {
                                        $file_content_orig = self::replaceString($file_content_orig, $replace[$i], $m[0][1], strlen($m[0][0]), $is_crontab, $ser, false, $l_UnicodeContent, $bom);
                                        $file_content = self::replaceString($file_content, $replace[$i], $m[0][1], strlen($m[0][0]), $is_crontab, $ser, false, false);
                                    }
                                }
                            }
                        }

                        $file_wo_comments = Normalization::strip_whitespace($file_content);

                        $file_wo_comments = preg_replace($search, $replace, $file_wo_comments);
                        $file_content = preg_replace($search, $replace, $file_content);

                        if ($file_wo_comments === '') {
                            $file_content = $file_wo_comments;
                            if ($l_UnicodeContent) {
                                $file_content_orig = $file_wo_comments;
                            }
                        }

                        $empty = (trim($file_content) == '');

                        if ($prev_id !== $rec['id']) {
                            if (!$result) {
                                $result = [];
                            }
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => $empty];
                        }

                        $matched_not_cleaned = $content_orig->getContent() === $file_content;
                        if (strlen($content->getContent()) === strlen($file_content)) {
                            $nohang2--;
                        }

                        if ($empty) {
                            $terminate = true;
                        }

                        if ($file_content !== $content->getContent()) {
                            unset($content);
                            $content = new ContentObject($file_content, $deobfuscate, $unescape);
                        }
                        if ($l_UnicodeContent) {
                            $l_UnicodeContent = Encoding::detectUTFEncoding($file_content_orig, $bom);
                        }
                        $prev_id = $rec['id'];
                    } // end of while


                    break;
                case 1: // match signature and delete file
                    $condition_num = 0; // for debug
                    if (
                        (
                            $rec['sig_match'] == '-'
                            && $condition_num = 1
                        )
                        || (
                            preg_match($rec['sig_match'], $content->getContent(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($decoded_file_content = $content->getNormDecodedFileContent())
                            && $decoded_file_content != ''
                            && preg_match($rec['sig_match'], $decoded_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            ($unescaped = $content->getUnescaped())
                            && $unescaped != ''
                            && preg_match($rec['sig_match'], $unescaped, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 6
                        )
                        || (
                            preg_match($rec['sig_match'], $content_orig->getContent(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($decoded_file_content = $content_orig->getNormDecodedFileContent())
                            && $decoded_file_content != ''
                            && preg_match($rec['sig_match'], $decoded_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($unescaped = $content_orig->getUnescaped())
                            && $unescaped != ''
                            && preg_match($rec['sig_match'], $unescaped, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 6
                        )
                    ) {
                        $signature_pos = 0;
                        if (isset($m) && is_array($m) && isset($m[0]) && isset($m[0][1])) {
                            $signature_pos = $m[0][1];
                        }
                        $file_content = self::replaceString($file_content, '', $signature_pos, false, $is_crontab, $serialized);
                        if ($l_UnicodeContent) {
                            $file_content_orig = self::replaceString($file_content_orig, '', $signature_pos, false, $is_crontab, $serialized, false, $l_UnicodeContent, $bom);
                        }
                        if ($serialized) {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => false];
                        } else {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => true];
                            $file_content = '';
                            $terminate = true;
                        }
                        $matched_not_cleaned = false;
                    }

                    break;
                case 3: // match signature against normalized file and delete it
                    $condition_num = 0; // for debug
                    if (
                        (
                            preg_match($rec['sig_match'], $content->getNormalized(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 1
                        )
                        || (
                            ($normalized_decoded = $content->getStripDecodedContent())
                            && $normalized_decoded != ''
                            && preg_match($rec['sig_match'], $normalized_decoded, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            preg_match($rec['sig_match'], $content_orig->getNormalized(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 1
                        )
                        || (
                            ($unescaped_norm = $content->getUnescapedNormalized())
                            && $unescaped_norm != ''
                            && preg_match($rec['sig_match'], $unescaped_norm, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($normalized_decoded = $content_orig->getStripDecodedContent())
                            && $normalized_decoded != ''
                            && preg_match($rec['sig_match'], $normalized_decoded, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($unescaped_norm = $content_orig->getUnescapedNormalized())
                            && $unescaped_norm != ''
                            && preg_match($rec['sig_match'], $unescaped_norm, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                    ) {
                        $file_content = self::replaceString($file_content, '', $m[0][1], false, $is_crontab, $serialized);
                        if ($l_UnicodeContent) {
                            $file_content_orig = self::replaceString($file_content_orig, '', $m[0][1], false, $is_crontab, $serialized, false, $l_UnicodeContent, $bom);
                        }
                        if ($serialized) {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => false];
                        } else {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => true];
                            $file_content = '';
                            $terminate = true;
                        }
                        $matched_not_cleaned = false;
                    }
                    break;
            }
        }
        self::removeBlackUrls($file_content, $clean_db, $result, $deobfuscate, $unescape);
        if ($l_UnicodeContent) {
            $file_content = $file_content_orig;
        }
        return empty($result) ? false : $result;
    }

    public static function isEmpty($result)
    {
        foreach ($result as $item) {
            if ($item['empty'] === true) {
                return true;
            }
        }
        return false;
    }

    public static function getSAItem($result)
    {
        foreach ($result as $item) {
            if ($item['empty'] === true && ($item['sig_type'] == 1 || $item['sig_type'] == 3)) {
                return [$item];
            }
        }
        return $result;
    }

    private static function getReplaceFromRegExp($replace, $matches)
    {
        if (!empty($replace)) {
            if (preg_match('~\$(\d+)~smi', $replace)) {
                $replace = preg_replace_callback('~\$(\d+)~smi', function ($m) use ($matches) {
                    return isset($matches[(int)$m[1]]) ? $matches[(int)$m[1]][0] : '';
                }, $replace);
            }
        }
        return $replace;
    }

    private static function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $deMapper)
    {
        if ($l_DeobfType == '') {
            return false;
        }
        switch ($l_DeobfType) {
            case 'Bitrix':
                foreach ($deMapper as $fkey => $fvalue) {
                    if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                        return true;
                    }
                }
                break;
        }
        return false;
    }

    private static function replaceString($file_content, $replace, $pos, $delta_len, $is_crontab = false, &$serialized = false, $escapes = false, $encoding = false, $bom = false)
    {
        $char_len = 1;
        $head_len = 0;
        $replace_len = strlen($replace);
        if ($encoding) {
            $replace = Encoding::convertFromUTF8($encoding, $replace);
        }
        if ($encoding === 'UTF-16BE' || $encoding === 'UTF-16LE') {
            $char_len = 2;
            $head_len = 2;
        } elseif ($encoding === 'UTF-32BE' || $encoding === 'UTF-32LE') {
            $char_len = 4;
            $head_len = 4;
        } elseif ($encoding === 'UTF-8') {
            $head_len = 3;
        }
        if (!$bom) {
            $head_len = 0;
        }
        if ($is_crontab) {
            $line = substr_count($file_content, "\n", 0, $pos);
            $file_content = explode("\n", $file_content);
            unset($file_content[$line]);
            $file_content = implode("\n", $file_content);
            return $file_content;
        }
        if ($encoding) {
            $file_content_conv = Encoding::convertToCp1251($encoding, $file_content);
        }
        $pairs_utf16 = 0;
        $pairs_utf16_inside = 0;
        $pairs_utf16_size = 0;
        $size2fix = self::getSerializedLength($file_content_conv ?? $file_content, $pos, $size2fix_pos);
        if ($encoding === 'UTF-16BE' || $encoding === 'UTF-16LE') {
            $pairs_utf16 = Encoding::countUtf16Pairs(substr($file_content, 0, ($pos * $char_len) + $head_len));
            $pairs_utf16_inside = Encoding::countUtf16Pairs(substr($file_content, ($pos * $char_len) + $head_len, ($delta_len * $char_len)));
            if ($size2fix) {
                $pairs_utf16_size = Encoding::countUtf16Pairs(substr($file_content, 0, ($size2fix_pos[0] * $char_len) + $head_len));
            }
        }

        $content_contains_serialized_data = $size2fix ? true : preg_match('~s:\d+:"~mis', $file_content);

        if ($size2fix) {
            $serialized = true;
            $delta_len = $delta_len ?: $size2fix;
            $quotes = $escapes ? substr_count($file_content_conv ?? $file_content, '\\', $pos, $delta_len) : 0;
            $file_content = substr_replace($file_content, $replace, ($pos * $char_len) + $head_len + ($pairs_utf16 * 4), ($delta_len * $char_len) + ($pairs_utf16_inside * 4));
            if ($encoding) {
                $new_length = $size2fix - ($delta_len - $replace_len) + ($quotes * $char_len);
                $new_length = Encoding::convertFromUTF8($encoding, $new_length);
            } else {
                $new_length = $size2fix - ($delta_len - $replace_len) + $quotes;
            }
            $file_content = substr_replace($file_content, (string)$new_length, ($size2fix_pos[0] * $char_len) + $head_len + ($pairs_utf16_size * 4), ($size2fix_pos[1] * $char_len));
        } elseif ($encoding === 'UTF-8') {
            list($utf8_pos, $utf8_length) = Encoding::checkUtf8Bytes($file_content, $pos, $delta_len, $bom);
            if ($content_contains_serialized_data) {
                return substr_replace($file_content, $replace, $utf8_pos, $utf8_length);
            }
            $replaceable_code_fragment = substr($file_content, $utf8_pos, $utf8_length);
            $file_content = str_replace($replaceable_code_fragment, $replace, $file_content);
        } else {
            if ($content_contains_serialized_data) {
                $file_content = substr_replace($file_content, $replace, ($pos * $char_len) + $head_len + ($pairs_utf16 * 4), ($delta_len * $char_len) + ($pairs_utf16_inside * 4));
            } else {
                $replaceable_code_fragment = substr($file_content, ($pos * $char_len) + $head_len + ($pairs_utf16 * 4), ($delta_len * $char_len) + ($pairs_utf16_inside * 4));
                $file_content = str_replace($replaceable_code_fragment, $replace, $file_content);
            }
        }
        return $file_content;
    }

    private static function getSerializedLength($content, $offset, &$pos)
    {
        $ser_size = false;
        if (preg_match_all('~s:(\d+):\\\\?"~m', substr($content, 0, (int)$offset + 1), $m, PREG_OFFSET_CAPTURE | PREG_SET_ORDER)) {
            foreach ($m as $ser_chunk) {
                $start_chunk = $ser_chunk[0][1] + strlen($ser_chunk[0][0]);
                $end_chunk = $start_chunk + (int)$ser_chunk[1][0];
                if ($start_chunk <= $offset && $end_chunk > $offset) {
                    $ser_size = (int)$ser_chunk[1][0];
                    $pos[0] = $ser_chunk[1][1];
                    $pos[1] = strlen($ser_chunk[1][0]);
                    break;
                }
            }
        }
        return $ser_size;
    }

    private static function removeBlackUrls(&$file_content, $clean_db, &$result, $deobfuscate, $unescape)
    {
        if ($clean_db->getScanDB() === null || !defined('CLS_SCAN_CHECKERS')) {
            return;
        }
        $offset = 0;
        while (self::findBlackUrl($file_content, $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $file_content = self::replaceString($file_content, '', $fnd[0][1], strlen($fnd[0][0]));
            $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
        }

        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getContent(), $fnd, $offset, $clean_db, $id, true)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0]);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getNormalized());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }

        $offset = 0;
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        while (self::findBlackUrl($content->getDecodedFragmentsString(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $decoded_fragments = $content->getDecodedFragments();
            if (!empty($decoded_fragments)) {
                foreach ($decoded_fragments as $obfuscated => $deobfuscated) {
                    if (self::findBlackUrl($deobfuscated, $fnd_tmp, 0, $clean_db, $id)) {
                        $pos_obf = strpos($file_content, $obfuscated);
                        $len = strlen($obfuscated);
                        $file_content = self::replaceString($file_content, '', $pos_obf, $len);
                        $result[] = [
                            'sig_type' => 2,
                            'id' => $clean_db->getScanDB()->blackUrls->getSig($id),
                            'empty' => false
                        ];
                    }
                }
            }
            unset($content);
            $content = new ContentObject($file_content, $deobfuscate, $unescape);
        }

        $offset = 0;
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        while (self::findBlackUrl($content->getNormDecodedFragmentsString(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $norm_decoded_fragments = $content->getNormDecodedFragments();
            if (!empty($norm_decoded_fragments)) {
                foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) {
                    if (self::findBlackUrl(Normalization::normalize($deobfuscated), $fnd_tmp, 0, $clean_db, $id)) {
                        $pos = Normalization::string_pos($file_content, $obfuscated);
                        if ($pos !== false) {
                            $file_content = self::replaceString($file_content, '', $pos[0], $pos[1] - $pos[0] + 1);
                            $result[] = [
                                'sig_type' => 2,
                                'id' => $clean_db->getScanDB()->blackUrls->getSig($id),
                                'empty' => false
                            ];
                        }
                    }
                }
            }
        }
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getUnescaped(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0], true);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getUnescaped());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, false, $s, true);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }

        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getUnescapedNormalized(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0], true);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getUnescapedNormalized());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, false, $s, true);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
    }

    private static function findBlackUrl($item, &$fnd, $offset, $clean_db, &$id, $norm = false)
    {
        while (preg_match(self::URL_GRAB, $item, $fnd, PREG_OFFSET_CAPTURE, $offset)) {
            $url_full = $norm ? Normalization::normalize($fnd[0][0]) : $fnd[0][0];

            if (isset($fnd[2][0])) {
                $url = $norm ? Normalization::normalize($fnd[2][0]) : $fnd[2][0];
            } else {
                $url = $url_full;
            }

            // Check the blacklist first in case there are some nested URLs.
            if (preg_match_all(self::NESTED_URLS, $url, $nested_matches) > 1) {
                $nested_urls = $nested_matches[0];
                if (count($nested_urls) > 1) {
                    foreach ($nested_urls as $nested_url) {
                        if (ScanCheckers::isUrlInList($nested_url, $clean_db->getScanDB()->blackUrls->getDb()) !== false) {
                            // The general or nested URL is blacklisted. Re-check with the full URL to correctly update the $id variable.
                            $id = ScanCheckers::isUrlInList($url_full, $clean_db->getScanDB()->blackUrls->getDb());
                            return true;
                        }
                    }
                }
            }

            if (
                !ScanCheckers::isOwnUrl($url, $clean_db->getScanDB()->getOwnUrl())
                && (isset($clean_db->getScanDB()->whiteUrls) && !ScanCheckers::isUrlInList(
                    $url,
                    $clean_db->getScanDB()->whiteUrls->getDb()
                ))
                && ($id = ScanCheckers::isUrlInList($url_full, $clean_db->getScanDB()->blackUrls->getDb()))
            ) {
                return true;
            }
            $offset = $fnd[0][1] + strlen($fnd[0][0]);
        }
        return false;
    }
}

class SignatureConverter
{
    private $signatures         = [];
    private $cuted_signatures   = [];
    private $count_convert      = 0;

    public function __construct($clean_db)
    {
        $this->signatures = $clean_db;
    }

    public function getCutSignature($sig_index)
    {
        if (!isset($this->signatures[$sig_index])) {
            return false;
        }
        $signature = $this->signatures[$sig_index]['sig_match'];
        if (!isset($this->cuted_signatures[$sig_index])) {
            $cuted_signature = $this->cut($signature);
            if ($signature != $cuted_signature) {
                $this->cuted_signatures[$sig_index] = $cuted_signature;
            } else {
                $this->cuted_signatures[$sig_index] = false;
            }
            return $cuted_signature;
        } elseif ($this->cuted_signatures[$sig_index] === false) {
            return $signature;
        }
        return $this->cuted_signatures[$sig_index];
    }

    public function getCountConverted()
    {
        return $this->count_convert;
    }

    // /////////////////////////////////////////////////////////////////////////

    private function cut($signature)
    {
        $this->count_convert++;
        $regexp = '~'
        . '^\~'
        . '(?:\\\A)?'
        . '(?:\\\s\*)?'
        . '<\\\\\?'
        . '(?:\\\s\*)?'
        . '(?:\\\s\+)?'
        . '(?:'
            . 'php'
            . '|\(\?:php\)\?'
            . '|='
            . '|\(\?:php\|=\)\??'
            . '|\(\?:=\|php\)\??'
        . ')?'
        . '(?:\\\s\+)?'

        . '(.*?)'

        . '(?:\(\??:?\|?)?'
        . '\\\\\?>'
        . '(?:\\\s\*)?'
        . '(?:\|?\\\Z\)?)?'
        . '\~msi$'
        . '~smi';

        return preg_replace($regexp, '~\1~msi', $signature);
    }
}

class Logger
{
    /**
     * $log_file - path and log file name
     * @var string
     */
    protected $log_file;
    /**
     * $file - file
     * @var string
     */
    protected $file;
    /**
     * dateFormat
     * @var string
     */
    protected $dateFormat = 'd-M-Y H:i:s';

    /**
     * @var array
     */
    const LEVELS  = ['ERROR' => 1, 'DEBUG' => 2,  'INFO' => 4, 'ALL' => 7];

    /**
     * @var int
     */
    private $level;

    /**
     * Class constructor
     *
     * @param string       $log_file - path and filename of log
     * @param string|array $level    - Level of logging
     *
     * @throws Exception
     */
    public function __construct($log_file = null, $level = 'INFO')
    {
        if (!$log_file) {
            return;
        }
        if (is_array($level)) {
            foreach ($level as $v) {
                if (!isset(self::LEVELS[$v])) {
                    $v = 'INFO';
                }
                $this->level |= self::LEVELS[$v];
            }
        } else {
            if (isset(self::LEVELS[$level])) {
                $this->level = self::LEVELS[$level];
            } else {
                $this->level = self::LEVELS['INFO'];
            }
        }

        $this->log_file = $log_file;
        //Create log file if it doesn't exist.
        if (!file_exists($log_file)) {
            fopen($log_file, 'w') or exit("Can't create $log_file!");
        }
        //Check permissions of file.
        if (!is_writable($log_file)) {
            //throw exception if not writable
            throw new Exception('ERROR: Unable to write to file!', 1);
        }
    }

    /**
     * Info method (write info message)
     * @param string $message
     * @return void
     */
    public function info($message)
    {
        if ($this->level & self::LEVELS['INFO']) {
            $this->writeLog($message, 'INFO');
        }
    }
    /**
     * Debug method (write debug message)
     * @param string $message
     * @return void
     */
    public function debug($message)
    {
        if ($this->level & self::LEVELS['DEBUG']) {
            $this->writeLog($message, 'DEBUG');
        }
    }
    /**
     * Error method (write error message)
     * @param string $message
     * @return void
     */
    public function error($message)
    {
        if ($this->level & self::LEVELS['ERROR']) {
            $this->writeLog($message, 'ERROR');
        }
    }

    /**
     * Write to log file
     * @param string $message
     * @param string $level
     * @return void
     */
    public function writeLog($message, $level)
    {
        if (!$this->log_file) {
            return;
        }
        // open log file
        if (!is_resource($this->file)) {
            $this->openLog();
        }
        //Grab time - based on timezone in php.ini
        $time = date($this->dateFormat);
        // Write time & message to end of file
        fwrite($this->file, "[$time] : [$level] - $message" . PHP_EOL);
    }
    /**
     * Open log file
     * @return void
     */
    private function openLog()
    {
        $openFile = $this->log_file;
        // 'a' option = place pointer at end of file
        $this->file = fopen($openFile, 'a') or exit("Can't open $openFile!");
    }
    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->file) {
            fclose($this->file);
        }
    }
}
