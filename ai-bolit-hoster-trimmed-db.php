<?php

///////////////////////////////////////////////////////////////////////////
// Version: HOSTER-32.1.21
// Copyright 2018-2024 CloudLinux Software Inc.
///////////////////////////////////////////////////////////////////////////

ini_set('xdebug.max_nesting_level', 500);

define('SHORT_PHP_TAG', strtolower(ini_get('short_open_tag')) == 'on' || strtolower(ini_get('short_open_tag')) == 1);
define('FUNC_HRTIME', function_exists('hrtime'));
define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
define('FUNC_JSON_ENCODE', function_exists('json_encode'));
define('FUNC_MEMORY_USAGE', function_exists('memory_get_usage'));
define('FUNC_MEMORY_PEAK_USAGE', function_exists('memory_get_peak_usage'));

define('CLS_DECISION_MAKING_STATS', true);
define('CLS_PERFORMANCE_STATS', true);
define('CLS_PROC_STATS', true);
define('CLS_PROGRESS', true);
define('CLS_SCAN_CHECKERS', true);

//////////////////////////////////////////////////////////////////////////
$vars = new Variables();
$vars->users = new UserList();
HyperScan::init();
Progress::init();
Progress::setPrintFunc('stdOut');
IniConfig::parse(__DIR__ . '/config.ini');
PerformanceStats::initPerformanceItems();

$lang = 'RU';
$snum = '';
$BOOL_RESULT = false;

define('I360_AIBOLIT_MAP', [
    'MALWARE_SCAN_INTENSITY.user_scan_ram' => 'memory_limit',
    'MALWARE_SCANNING.hyperscan' => 'hyperscan',
    'MALWARE_SCANNING.max_cloudscan_size_to_scan' => 'max_size_to_cloudscan',
    'MALWARE_SCANNING.max_signature_size_to_scan' => 'max_size_to_scan'
]);

function parseConfigFile($filepath, &$defaults) {
    if (!file_exists($filepath)) {
        return;
    }

    $handle = fopen($filepath, 'r');
    if (!$handle) {
        return;
    }

    $currentSection = '';
    while (($line = fgets($handle)) !== false) {
        $line = trim($line);

        if (empty($line) || strpos($line, '#') === 0) {
            continue;
        }

        if (substr($line, -1) === ':') {
            $currentSection = substr($line, 0, -1);
            continue;
        }

        $parts = explode(':', $line, 2);
        if (count($parts) !== 2) {
            continue;
        }

        $key = trim($parts[0]);
        $value = trim($parts[1]);

        $value = trim($value, '"\'');

        if (strtolower($value) === 'true') {
            $value = true;
        } elseif (strtolower($value) === 'false') {
            $value = false;
        } elseif (is_numeric($value)) {
            if (strpos($value, '.') !== false) {
                $value = (float)$value;
            } else {
                $value = (int)$value;
            }
        }

        $fullKey = "$currentSection.$key";

        if (array_key_exists($fullKey, I360_AIBOLIT_MAP)) {
            $defaults[I360_AIBOLIT_MAP[$fullKey]] = $value;
        }
    }

    fclose($handle);
}

if (isCli()) {
    if (strpos($argv[$argc - 1], '--eng') !== false) {
        $lang = 'EN';
    }
} else {
    define('NEED_REPORT', true);
}

Translate::setLang($lang);

define('DEFAULT_HS_PATH', '/var/imunify360/files/sigs/v1/aibolit/hyperscan');
define('DEFAULT_EXT_SUS_PATH', DEFAULT_HS_PATH . '/hs_susext.db');
define('DEFAULT_IGN_SUS_PATH', '/etc/imunify360/malware-ignore-hashes.txt');

define('I360_CONFIG', '/etc/sysconfig/imunify360/imunify360-merged.config');

// put 1 for expert mode, 0 for basic check and 2 for paranoid mode
// установите 1 для режима "Обычное сканирование", 0 для быстрой проверки и 2 для параноидальной проверки (диагностика при лечении сайтов)
define('AI_EXPERT_MODE', 2);

define('CLOUD_ASSIST_LIMIT', 5000);

$defaults = [
    'path'                       => __DIR__,
    'scan_all_files'             => (AI_EXPERT_MODE == 2), // full scan (rather than just a .js, .php, .html, .htaccess)
    'scan_delay'                 => 0, // delay in file scanning to reduce system load
    'max_size_to_scan'           => '650K',
    'max_size_to_cloudscan'      => '650K',
    'max_elf_size_for_cloudscan' => '100M',
    'no_rw_dir'                  => 0,
    'skip_ext'                   => '',
    'report_mask'                => JSONReport::REPORT_MASK_FULL,
    'use_template_in_path'       => false,
    'memory_limit'               => '1G',
    'hyperscan'                  => false,
    'archive-max-size'           => 20 * 1024 * 1024,
    'max-num-files-in-archive'   => 100,
    'archive-max-folders-count'  => 1000
];

parseConfigFile(I360_CONFIG, $defaults);

ini_set('memory_limit', $defaults['memory_limit']);

define('DEBUG_MODE', 0);
define('DEBUG_PERFORMANCE', 0);
define('DEBUG_PCRE', 0);
define('DEBUG_SLOW_FILES_COUNT', 10);
define('DEBUG_SLOW_FILES_MIN_TIME', 0.5);

define('AIBOLIT_START_TIME', time());
define('START_TIME', AibolitHelpers::currentTime());

define('DIR_SEPARATOR', '/');

define('AIBOLIT_MAX_NUMBER', 200);

define('MIN_FILE_SIZE_FOR_CHECK', 12); //12b - The minimum possible file size for the initial checking
define('MAX_FILE_SIZE_FOR_CHECK', 268435456); //256Mb - The maximum possible file size for the initial checking


define('DOUBLECHECK_FILE', 'AI-BOLIT-DOUBLECHECK.php');

if ((isset($_SERVER['OS']) && stripos('Win', $_SERVER['OS']) !== false)) {
    define('DIR_SEPARATOR', '\\');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (!(function_exists("file_put_contents") && is_callable("file_put_contents"))) {
    echo "#####################################################\n";
    echo "file_put_contents() is disabled. Cannot proceed.\n";
    echo "#####################################################\n";
    exit;
}

define('AI_VERSION', 'HOSTER-32.1.21');

////////////////////////////////////////////////////////////////////////////
$g_SpecificExt = false;

$g_UpdatedJsonLog      = 0;

error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING ^ E_DEPRECATED);
ini_set('display_errors', 'stderr');

srand(time());

set_time_limit(0);
ini_set('max_execution_time', '900000');
ini_set('realpath_cache_size', '16M');
ini_set('realpath_cache_ttl', '1200');
ini_set('pcre.backtrack_limit', '1000000');
ini_set('pcre.recursion_limit', '200000');
ini_set('pcre.jit', '1');

$filter = new FileFilter();

$finder = new Finder($filter);

$finder->setCollectSymlinks(true);

if (!function_exists('stripos')) {
    function stripos($par_Str, $par_Entry, $Offset = 0)
    {
        return strpos(strtolower($par_Str), strtolower($par_Entry), $Offset);
    }
}

/**
 * Determine php script is called from the command line interface
 * @return bool
 */
function isCli()
{
    return PHP_SAPI == 'cli';
}

/**
 * Print to console
 * @param mixed $text
 * @param bool $add_lb Add line break
 * @return void
 */
function stdOut($text, $add_lb = true)
{
    if (!isCli()) {
        return;
    }

    if (is_bool($text)) {
        $text = $text ? 'true' : 'false';
    } elseif (is_null($text)) {
        $text = 'null';
    }
    if (!is_scalar($text)) {
        $text = print_r($text, true);
    }

    if (defined('BOOL_RESULT') && (!BOOL_RESULT) && (!JSON_STDOUT)) {
        @fwrite(STDOUT, $text . ($add_lb ? "\n" : ''));
    }
}

if (isCli()) {
    $cli_options = [
        'y'     => 'deobfuscate',
        'c:'    => 'avdb:',
        'm:'    => 'memory:',
        's:'    => 'size:',
        'a'     => 'all',
        'd:'    => 'delay:',
        'l:'    => 'list:',
        'r:'    => 'report:',
        'f'     => 'fast',
        'j:'    => 'file:',
        'p:'    => 'path:',
        'q'     => 'quite',
        'x:'    => 'mode:',
        'k:'    => 'skip:',
        'o:'    => 'json_report:',
        't:'    => 'php_report:',
        'z:'    => 'progress:',
        'g:'    => 'handler:',
        'b'     => 'smart',
        'u:'    => 'username:',
        'h'     => 'help',
        'v'     => 'version',
        'e'     => 'emu_offsets'
    ];

    $cli_longopts = [
        'cmd:',
        'noprefix:',
        'addprefix:',
        'scan:',
        'one-pass',
        'with-2check',
        'no-html',
        'json-stdout',
        'listing:',
        'encode-b64-fn',
        'cloud-assist:',
        'cloudscan-size:',
        'cloudscan-max-elf-size:',
        'with-suspicious',
        'rapid-account-scan:',
        'rapid-account-scan-type:',
        'extended-report',
        'factory-config:',
        'shared-mem-progress:',
        'create-shared-mem',
        'max-size-scan-bytes:',
        'input-fn-b64-encoded',
        'use-heuristics',
        'use-heuristics-suspicious',
        'use-heuristics-ignore',
        'resident',
        'scan-archive',
        'archive-max-size:',
        'max-num-files-in-archive:',
        'detached:',
        'log:',
        'log-level:',
        'use-template-in-path',
        'ignore-list:',
        'ignore-filenames:',
        'only-filepaths:',
        'skip-files-older:',
        'skip-root-owner',
        'skip-system-owner',
        'follow-symlink',
        'ignore-quarantine',
        'quiet',
        'use-filters',
        'csv_report:',
        'no-users',
        'stat',
        'skip-imunify360-storage',
        'rapid-scan-rescan-frequency:',
        'do-not-skip-die',
        'hs:',
        'hs-early-filter:',
        'hs-ext-sus:',
        'do-not-use-umask',
        'debug-ca:',
    ];


    $cli_longopts = array_merge($cli_longopts, array_values($cli_options));

    $reports = [];

    $options = getopt(implode('', array_keys($cli_options)), $cli_longopts);

    if (isset($options['v']) || isset($options['version'])) {
        echo "\n";
        echo "Version: " . AI_VERSION . "\n";
        echo "Copyright 2018-2023 CloudLinux Software Inc.\n";
        echo "\n";
        exit;
    } elseif (isset($options['h']) || isset($options['help'])) {
        $memory_limit = ini_get('memory_limit');
        echo <<<HELP
Revisium AI-Bolit - an Intelligent Malware File Scanner for Websites.

Usage: php {$_SERVER['PHP_SELF']} [OPTIONS] [PATH]
Current default path is: {$defaults['path']}

  Scan target:
    -j, --file=FILE                       Full path to single file to check.
    -p, --path=PATH                       Directory path to scan, by default the file directory is used.
                                          Current path: {$defaults['path']}.
        --use-template-in-path            Use template in path(-p, --path). For example: /home*/*/public_html.
        --listing=FILE                    Scan files from the listing. E.g. --listing=/tmp/myfilelist.txt.
                                          Use --listing=stdin to get listing from stdin stream.
        --input-fn-b64-encoded            Base64 encoded input filenames in --file(-j) or --listing.

  Report formats:
    -r, --report=PATH                     Full path to create html-file with a list of found malware.
                                          By default, if --no-html is not specified, this report is created in the scan folder or in the folder next to the aibolit.
    -o, --json_report=FILE                Full path to create json-file with a list of found malware.
        --csv_report=FILE                 Full path to create csv-file with a list of found malware.
    -t  --php_report=FILE                 Full path to create file with a list of found malware in PHP serialized array format.
    -l, --list=FILE                       Full path to create plain text file with a list of found malware.

        --json-stdout                     Print a report to a console instead of a file(you must use --json_report=. together).
        --no-html                         Disable HTML report.
        --extended-report                 To expand the report.
        --encode-b64-fn                   Encode file names in a report with base64(Only for JSON, PHP and CSV report).
        --stat                            Add stat() data to files in report.
        --no-users                        Disable users list in report(not use in resident mode).
        --noprefix=PREFIX                 Remove the given file path prefix in the report for each file.
        --addprefix=PREFIX                Add the given file path prefix in the report for each file.

  Tracking the work of aibolit:
    -z, --progress=FILE                   Runtime progress of scanning, saved to the file, full path required.
        --shared-mem-progress=<ID>        Runtime progress of scanning, saved to the shared memory <ID>.
        --create-shared-mem               Need to create shared memory segment <ID> for --shared-mem-progress.
        --log=FILE                        Write logs to "FILE".
        --log-level=LEVEL                 Log level(ERROR, DEBUG, INFO, ALL). Default: INFO.

  Filters:
        --ignore-list=FILE                This file will be contain the list of ignored files when scanning.
                                          The files are base64-encoded and occupy one line for one file.
        --ignore-filenames=<templates>    Skip files with the same name by template. Example: *.php,*abc.abc,config.*.
        --only-filepaths=<templates>      Take only the paths matching this pattern. Example: /check/*.php,*.abc.
        --skip-files-older=UNIXTIME       If set then we ignore the files created or modified earlier than the specified date.
        --skip-root-owner                 If set, we skip root's owner files.
        --skip-system-owner               If set, we skip system's owner files.
        --skip-imunify360-storage         If set, we skip /var/imunify360/cleanup_storage.
        --do-not-skip-die                 If set, we don't skip files with die() as first command.
        --follow-symlink                  If set then we follow symlink(for file, if this is a directory, then we go into it anyway).
        --ignore-quarantine               If set, we ignore the files in the folder ".imunify.quarantined" if root is owner of it.
    -s, --size=SIZE                       Scan files are smaller than SIZE with signatures. 0 - All files. Current value: {$defaults['max_size_to_scan']}.
        --max-size-scan-bytes=SIZE        Scan first <bytes> for large(can set by --size) files with signatures.
    -x, --mode=INT                        Set scan mode. 0 - for basic, 1 - for expert and 2 for paranoic.
    -f, --fast                            Scan only specific extensions(they are predefined in the code).
    -a, --all                             Scan all files (by default scan. js,. php,. html,. htaccess).
    -k, --skip=jpg,...                    Skip specific extensions. E.g. --skip=jpg,gif,png,xls,pdf.
        --scan=php,...                    Scan only specific extensions. E.g. --scan=php,htaccess,js.
        --use-filters                     Use Imunify360 filters.
        --smart                           Enable smart mode (skip cache files and optimize scanning).

  Process limitation:
    -m, --memory=SIZE                     Maximum amount of memory a script may consume. Current value: $memory_limit.
                                          Can take shorthand byte values (1M, 1G...).
    -d, --delay=INT                       Delay in milliseconds when scanning files to reduce load on the file system (Default: 1).
    -u, --username=<username>             Run scanner with specific user id and group id, e.g. --username=www-data.
    -q, --quite                           Do not output information about the current scan job to a console.

  Scan options:
    -y, --deobfuscate                     Try to deobfuscate files when scanning.
        --with-suspicious                 Detect suspicious files. Disabled by default.
        --scan-archive                    Scan zip files (Works with Resident mode)
        --archive-max-size=<size>         Scan zip files are smaller than SIZE in megabyte(s) (Works with Resident mode and with --scan-archive option) default 20MB
        --max-num-files-in-archive=<num>  Scan zip total files are smaller than QUANTITY (Works with Resident mode and with --scan-archive option) default 100

  Functional Cloud Assisted:
        --cloud-assist=TOKEN              Enable cloud assisted scanning. Disabled by default.
                                          You can use environment variable CLOUD_ASSIST(exception resident mode), but --cloud-assist has higher priority if both are used.
        --cloudscan-size=<size>           Scan files are smaller than SIZE with cloud assisted scan. 0 - All files. Current value: {$defaults['max_size_to_cloudscan']}.
        --cloudscan-max-elf-size=<size>   ELF files up to this size will be scanned by cloud assisted scan. This overrides --scan and --cloudscan-size settings for ELF files. Default value: {$defaults['max_elf_size_for_cloudscan']}.

  Functional Rapid Account Scan(used only with Cloud Assisted):
        --rapid-account-scan=<dir>        Enable rapid account scan. Use <dir> for base db dir. Need to set only root permissions(700).
        --rapid-account-scan-type=<type>  Type rapid account scan. <type> = NONE|ALL|SUSPICIOUS, def:SUSPICIOUS.
        --rapid-scan-rescan-frequency=<n> Rescan RX_GOOD files strategy <n> = 1 = ALL|2 = 1/2|3 = 1/3...

  Scan Modes:
        --resident                        Aibolit work in resident fashion. This requires SystemD to be configured. Uses Imunify360 only.
        --detached=<scan_id>              A mode in which the aiblit can be launched in detached mode and wait for a signal to complete the work. Uses Imunify360 only.

  External Malware DB:
    -c, --avdb                            Connecting an external base with signatures.

  Work with ELF files:
        --use-heuristics                  Enable heuristic algorithms and mark found files as malicious.
        --use-heuristics-suspicious       Enable heuristic algorithms and mark found files as suspicious.
        --use-heuristics-ignore           Enable heuristic algorithms and skip found files.

  Other:
        --hs=<FILEPATH>                   Enable prescan with Hyperscan, full path to hyperscan db directory required. (Required alt-php-hyperscan package)
        --hs-early-filter=<FILEPATH>      Enable early Hyperscan filter (before deobfuscation), full path to hyperscan db file required. (Required alt-php-hyperscan package)
        --hs-ext-sus=<FILEPATH>           Enable Hyperscan extended-suspicious signatures, full path to hs_susext.db file required. (Required alt-php-hyperscan package)
        --one-pass                        Do not calculate remaining time(use only with simple mode and detached mode).
        --with-2check                     Create or use AI-BOLIT-DOUBLECHECK.php file.
    -g, --handler=FILE                    External php handler for different events, full path to php file required.
        --cmd="command [args...]"         Run command after scanning.
        --factory-config=<FILEPATH>       For internal use.
        --do-not-use-umask                Aibolit uses umask 0027, but if you use this parameter, then umask will not be set.

    -v, --version                         Display version.
    -h, --help                            Display this help and exit.


HELP;
        exit;
    }

    $l_FastCli = false;

    define('DEBUG_CA', isset($options['debug-ca']));
    define('CA_API_URL_DEBUG', $options['debug-ca'] ?? false);
    define('EMU_LOG_OFFSETS', (isset($options['e']) ?? (isset($options['emu_offsets']) ?? false)));

    if (!isset($options['do-not-use-umask'])) {
        umask(0027);
    }

    if ((isset($options['memory']) && !empty($options['memory']) && ($memory = $options['memory'])) || (isset($options['m']) && !empty($options['m']) && ($memory = $options['m']))) {
        $memory = AibolitHelpers::getBytes($memory);
        if ($memory > 0) {
            $defaults['memory_limit'] = $memory;
            ini_set('memory_limit', $memory);
        }
    }

    if ((isset($options['username']) && !empty($options['username']) && ($username = $options['username']) !== false) || (isset($options['u']) && !empty($options['u']) && ($username = $options['u']) !== false)) {
        if (!empty($username) && ($info = posix_getpwnam($username)) !== false) {
            posix_setgid($info['gid']);
            posix_setuid($info['uid']);
            $defaults['userid']  = $info['uid'];
            $defaults['groupid'] = $info['gid'];
        } else {
            echo ('Invalid username');
            exit(-1);
        }
    }

    AibolitHelpers::setCurrentIds();

    if (isset($options['no-users'])) {
        $vars->users = null;
    }


    $avdb = '';
    if ((isset($options['avdb']) && !empty($options['avdb']) && ($avdb = $options['avdb'])) || (isset($options['c']) && !empty($options['c']) && ($avdb = $options['c']))) {
        if (file_exists($avdb)) {
            $defaults['avdb'] = $avdb;
        }
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || (isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false)) {
        define('SCAN_FILE', $file);
    }


    if (isset($options['deobfuscate']) || isset($options['y'])) {
        define('AI_DEOBFUSCATE', true);
    }

    if (isset($options['do-not-skip-die'])) {
        define('SKIP_DIE', false);
    } else {
        define('SKIP_DIE', true);
    }

    if ((isset($options['list']) && !empty($options['list']) && ($file = $options['list']) !== false) || (isset($options['l']) && !empty($options['l']) && ($file = $options['l']) !== false)) {
        $reports[PlainReport::class] = $file;
    }

    if (isset($options['with-2check'])) {
        $reports[DoublecheckReport::class] = DOUBLECHECK_FILE;
    }

    if ((isset($options['listing']) && !empty($options['listing']) && ($listing = $options['listing']) !== false)) {
        if (file_exists($listing) && is_file($listing) && is_readable($listing)) {
            define('LISTING_FILE', $listing);
        }

        if ($listing === 'stdin') {
            define('LISTING_FILE', $listing);
        }
    }

    if ((isset($options['ignore-list']) && !empty($options['ignore-list']) && ($ignore_list_file = $options['ignore-list']) !== false)) {
        if (file_exists($ignore_list_file) && is_file($ignore_list_file) && is_readable($ignore_list_file)) {
            $filter->setIgnoreListFile($ignore_list_file);
        }
    }

    if ((isset($options['ignore-filenames']) && !empty($options['ignore-filenames']) && ($ignore_filenames = $options['ignore-filenames']) !== false)) {
        $filter->setIgnoreFilenames($ignore_filenames);
    }


    if ((isset($options['only-filepaths']) && !empty($options['only-filepaths']) && ($only_filepathes = $options['only-filepaths']) !== false)) {
        $filter->setOnlyFilepaths($only_filepathes);
    }


    if ((isset($options['skip-files-older']) && !empty($options['skip-files-older']) && ($skip_files_older = $options['skip-files-older']) !== false)) {
        $filter->setSkipFilesOlder($skip_files_older);
    }

    if (isset($options['skip-imunify360-storage'])) {
        $filter->setSkipImunifyStorage();
    }

    if (isset($options['skip-root-owner'])) {
        $filter->setSkipRootOwner();
    }

    if (isset($options['skip-system-owner'])) {
        $max_min_uid = getMaxMinUid();
        $filter->setUidRange($max_min_uid);
        $filter->setSkipSystemOwner(true);
        unset($max_min_uid);
    }

    if (isset($options['follow-symlink'])) {
        $filter->setFollowSymlink();
    }

    if (isset($options['ignore-quarantine'])) {
        $filter->setIgnoreQuarantine();
    }

    if (isset($options['use-filters'])) {
        $filter->setImunifyFilters();
    }

    if ((isset($options['json_report']) && !empty($options['json_report']) && ($file = $options['json_report']) !== false) || (isset($options['o']) && !empty($options['o']) && ($file = $options['o']) !== false)) {
        $reports[JSONReport::class] = $file;

        if (!function_exists('json_encode')) {
            die('json_encode function is not available. Enable json extension in php.ini');
        }
    }

    if (isset($options['csv_report']) && !empty($options['csv_report']) && ($file = $options['csv_report']) !== false) {
        $reports[CSVReport::class] = $file;
    }

    if ((isset($options['php_report']) && !empty($options['php_report']) && ($file = $options['php_report']) !== false) || (isset($options['t']) && !empty($options['t']) && ($file = $options['t']) !== false)) {
        $reports[PHPReport::class] = $file;
    }

    $env_log = getenv('AIBOLIT_RESIDENT_LOG');
    $env_log_level = getenv('AIBOLIT_RESIDENT_LOG_LEVEL');

    if ((isset($options['log']) && !empty($options['log']) && ($log_file = $options['log']) !== false) || ($env_log !== false && ($log_file = $env_log) !== false)) {
        define('LOG_FILE', $log_file);
    } else {
        define('LOG_FILE', null);
    }

    if ((isset($options['log-level']) && !empty($options['log-level']) && ($log_level = $options['log-level']) !== false) || ($env_log_level !== false && ($log_level = $env_log_level) !== false)) {
        define('LOG_LEVEL', $log_level);
    }

    if (defined('LOG_FILE') && !defined('LOG_LEVEL')) {
        define('LOG_LEVEL', 'INFO');
    }

    if ((isset($options['handler']) && !empty($options['handler']) && ($file = $options['handler']) !== false) || (isset($options['g']) && !empty($options['g']) && ($file = $options['g']) !== false)) {
        if (file_exists($file)) {
            define('AIBOLIT_EXTERNAL_HANDLER', $file);
        }
    }

    if ((isset($options['progress']) && !empty($options['progress']) && ($file = $options['progress']) !== false) || (isset($options['z']) && !empty($options['z']) && ($file = $options['z']) !== false)) {
        Progress::setProgressLog($file);
    }

    if (isset($options['create-shared-mem'])) {
        Progress::setCreateSharedMem(true);
    }

    if (isset($options['shared-mem-progress']) && !empty($options['shared-mem-progress']) && ($sh_mem = $options['shared-mem-progress']) !== false) {
        if (!Progress::setSharedMem($sh_mem)) {
            die('Error with shared-memory.');
        }
    }

    if ((isset($options['size']) && ($size = $options['size']) !== false) || (isset($options['s']) && ($size = $options['s']) !== false)) {
        $size                         = AibolitHelpers::getBytes($size);
        $defaults['max_size_to_scan'] = $size > 0 ? $size : 0;
    }

    if (isset($options['cloudscan-size']) && !empty($options['cloudscan-size']) && ($cloudscan_size = $options['cloudscan-size']) !== false) {
        $cloudscan_size                         = AibolitHelpers::getBytes($cloudscan_size);
        $defaults['max_size_to_cloudscan'] = $cloudscan_size > 0 ? $cloudscan_size : 0;
    }

    if (isset($options['max-size-scan-bytes']) && !empty($options['max-size-scan-bytes'])) {
        define('MAX_SIZE_SCAN_BYTES', AibolitHelpers::getBytes($options['max-size-scan-bytes']));
    } else {
        define('MAX_SIZE_SCAN_BYTES', 0);
    }

    if (isset($options['json-stdout'])) {
        define('JSON_STDOUT', true);
    } else {
        define('JSON_STDOUT', false);
    }

    if (isset($options['b']) || isset($options['smart'])) {
        define('SMART_SCAN', 1);
    }

    if (isset($options['f']) || isset($options['fast'])) {
        $l_FastCli = true;
    }

    if (isset($options['q']) || isset($options['quite']) || isset($options['quiet'])) {
        $BOOL_RESULT = true;
    }

    if (isset($options['x'])) {
        define('AI_EXPERT', $options['x']);
    } elseif (isset($options['mode'])) {
        define('AI_EXPERT', $options['mode']);
    } else {
        define('AI_EXPERT', AI_EXPERT_MODE);
    }

    if (AI_EXPERT < 2) {
        $g_SpecificExt              = true;
        $defaults['scan_all_files'] = false;
    } else {
        $defaults['scan_all_files'] = true;
    }

    define('BOOL_RESULT', $BOOL_RESULT);

    if ((isset($options['delay']) && !empty($options['delay']) && ($delay = $options['delay']) !== false) || (isset($options['d']) && !empty($options['d']) && ($delay = $options['d']) !== false)) {
        $delay = (int) $delay;
        if (!($delay < 0)) {
            $defaults['scan_delay'] = $delay;
        }
    }

    if ((isset($options['skip']) && !empty($options['skip']) && ($ext_list = $options['skip']) !== false) || (isset($options['k']) && !empty($options['k']) && ($ext_list = $options['k']) !== false)) {
        $defaults['skip_ext'] = $ext_list;
    }

    if (isset($options['scan'])) {
        $ext_list = strtolower(trim($options['scan'], " ,\t\n\r\0\x0B"));
        if ($ext_list != '') {
            $l_FastCli        = true;
            $filter->setSensitiveExt($ext_list);
            $g_SensitiveFiles = $filter->getSensitiveExt();
            $g_SpecificExt = true;
        }
    }

    if (isset($options['rapid-account-scan'])) {
        define('RAPID_ACCOUNT_SCAN', $options['rapid-account-scan']);
    }

    if (defined('RAPID_ACCOUNT_SCAN')) {
        if (isset($options['rapid-account-scan-type'])) {
            define('RAPID_ACCOUNT_SCAN_TYPE', $options['rapid-account-scan-type']);
        } else {
            define('RAPID_ACCOUNT_SCAN_TYPE', 'SUSPICIOUS');
        }
    }

    if (!(defined('RAPID_ACCOUNT_SCAN') && RAPID_ACCOUNT_SCAN_TYPE === 'SUSPICIOUS')) {
        $options['rapid-scan-rescan-frequency'] = false;
    }

    if (isset($options['with-suspicious'])) {
        define('AI_EXTRA_WARN', true);
    }

    if (isset($options['extended-report'])) {
        define('EXTENDED_REPORT', true);
    }

    if (isset($options['all']) || isset($options['a'])) {
        $defaults['scan_all_files'] = true;
        $g_SpecificExt              = false;
    }

    if (isset($options['hs'])) {
        define('HS', $options['hs']);
    }

    if (!defined('HS') && $defaults['hyperscan']) {
        define('HS', DEFAULT_HS_PATH);
    }

    if (isset($options['hs-early-filter'])) {
        define('HS_EARLY_FILTER', $options['hs-early-filter']);
    }

    if (isset($options['hs-ext-sus'])) {
        define('HS_EXT_SUS', $options['hs-ext-sus']);
    }

    if (!defined('HS_EXT_SUS') && defined('HS')) {
        define('HS_EXT_SUS', $options['hs'] . '/hs_susext.db');
    }

    if (!defined('HS_EXT_SUS') && defined('DEFAULT_EXT_SUS_PATH')) {
        define('HS_EXT_SUS', DEFAULT_EXT_SUS_PATH);
    }

    if (!defined('PATH_IGN_SUS') && getenv('AIBOLIT_TEST_CONFIG') && getenv('PATH_IGN_SUS')) {
        define('PATH_IGN_SUS', getenv('PATH_IGN_SUS'));
    }

    if (!defined('PATH_IGN_SUS') && defined('DEFAULT_IGN_SUS_PATH')) {
        define('PATH_IGN_SUS', DEFAULT_IGN_SUS_PATH);
    }

    if (!defined('SMART_SCAN')) {
        define('SMART_SCAN', 0);
    }

    if (!defined('AI_DEOBFUSCATE')) {
        define('AI_DEOBFUSCATE', false);
    }

    if (!defined('AI_EXTRA_WARN')) {
        define('AI_EXTRA_WARN', false);
    }


    $l_SpecifiedPath = false;
    if (
        (isset($options['path']) && !empty($options['path']) && ($path = $options['path']) !== false)
        || (isset($options['p']) && !empty($options['p']) && ($path = $options['p']) !== false)
    ) {
        $defaults['path'] = realpath($path) ?: $path;
        $l_SpecifiedPath  = true;
    }

    $defaults['use_template_in_path'] = isset($options['use-template-in-path']);

    if (isset($options['noprefix']) && !empty($options['noprefix']) && ($g_NoPrefix = $options['noprefix']) !== false) {
    } else {
        $g_NoPrefix = '';
    }

    if (isset($options['addprefix']) && !empty($options['addprefix']) && ($g_AddPrefix = $options['addprefix']) !== false) {
    } else {
        $g_AddPrefix = '';
    }

    Progress::setPrefixes([Progress::PREFIX_ADD => $g_AddPrefix, Progress::PREFIX_NO => $g_NoPrefix]);

    if (isset($options['use-heuristics-ignore'])) {
        define('USE_HEURISTICS_IGNORE', true);
    }

    if (isset($options['use-heuristics'])) {
        define('USE_HEURISTICS', true);
    }

    if (isset($options['use-heuristics-suspicious'])) {
        define('USE_HEURISTICS_SUSPICIOUS', true);
    }

    if (defined('USE_HEURISTICS') && defined('USE_HEURISTICS_SUSPICIOUS')) {
        die('You can not use --use-heuristic and --use-heuristic-suspicious the same time.');
    }

    $l_SuffixReport = str_replace('/var/www', '', $defaults['path']);
    $l_SuffixReport = str_replace('/home', '', $l_SuffixReport);
    $l_SuffixReport = preg_replace('~[/\\\.\s]~', '_', $l_SuffixReport);
    $l_SuffixReport .= "-" . rand(1, 999999);

    if ((isset($options['report']) && ($report = $options['report']) !== false) || (isset($options['r']) && ($report = $options['r']) !== false)) {
        $report = str_replace('@PATH@', $l_SuffixReport, $report);
        $report = str_replace('@RND@', rand(1, 999999), $report);
        $report = str_replace('@DATE@', date('d-m-Y-h-i'), $report);
        define('REPORT', $report);
        define('NEED_REPORT', true);
    }

    if (isset($options['no-html'])) {
        if (defined('REPORT')) {
            die('You can not use --report(-r) and --no-html the same time.');
        }
        define('REPORT', 'no@email.com');
    }

    defined('ENCODE_FILENAMES_WITH_BASE64') || define('ENCODE_FILENAMES_WITH_BASE64', isset($options['encode-b64-fn']));

    defined('INPUT_FILENAMES_BASE64_ENCODED') || define('INPUT_FILENAMES_BASE64_ENCODED', isset($options['input-fn-b64-encoded']));

    defined('REPORT') || define('REPORT', 'AI-BOLIT-REPORT-' . $l_SuffixReport . '-' . date('d-m-Y_H-i') . '.html');

    $last_arg = max(1, sizeof($_SERVER['argv']) - 1);
    if (isset($_SERVER['argv'][$last_arg])) {
        $path = $_SERVER['argv'][$last_arg];
        if (
            substr($path, 0, 1) != '-'
            && (substr($_SERVER['argv'][$last_arg - 1], 0, 1) != '-'
                || array_key_exists(substr($_SERVER['argv'][$last_arg - 1], -1), $cli_options)
            )
        ) {
            $defaults['path'] = $path;
        }
    }

    define('ONE_PASS', isset($options['one-pass']));

    // BEGIN of configuring the factory
    $factoryConfig = [
        RapidAccountScan::class             => RapidAccountScan::class,
        RapidScanStorage::class             => RapidScanStorage::class,
        CloudAssistedStorage::class         => CloudAssistedStorage::class,
        DbFolderSpecification::class        => DbFolderSpecification::class,
        CriticalFileSpecification::class    => CriticalFileSpecification::class,
        CloudAssistedRequest::class         => CloudAssistedRequest::class,
        CSVReport::class                    => CSVReport::class,
        JSONReport::class                   => JSONReport::class,
        PHPReport::class                    => PHPReport::class,
        PlainReport::class                  => PlainReport::class,
        DoublecheckReport::class            => DoublecheckReport::class,
        HTMLReport::class                   => HTMLReport::class,
        DetachedMode::class                 => DetachedMode::class,
        ResidentMode::class                 => ResidentMode::class,
        Logger::class                       => Logger::class,
        SendMessageRequest::class           => SendMessageRequest::class,
        ImLicense::class                    => ImLicense::class
    ];

    if (isset($options['factory-config'])) {
        $optionalFactoryConfig = require($options['factory-config']);
        $factoryConfig = array_merge($factoryConfig, $optionalFactoryConfig);
    }

    Factory::configure($factoryConfig);
    // END of configuring the factory

    $imunify_license_filepath = '/var/imunify360/license.json';
    if (!file_exists($imunify_license_filepath)) {
        $imunify_license_filepath = '/var/imunify360/license-free.json';
    }
    $lic = Factory::instance()->create(ImLicense::class, [$imunify_license_filepath, ['/usr/share/imunify360/cln-pub.key', '/usr/share/imunify360/alt-license-pub.key']]);
    $ca_env = getenv('CLOUD_ASSIST');
    if (!isset($options['cloud-assist']) && $ca_env !== false) {
        $options['cloud-assist'] = $ca_env;
    }
    if (isset($options['cloud-assist']) && $options['cloud-assist'] === 'AUTO') {
        $data = $lic->getLicData();
        $options['cloud-assist'] = $data['id'];
    }
    if (isset($options['cloud-assist']) && $options['cloud-assist'] !== false) {
        define('CLOUD_ASSIST_TOKEN', $options['cloud-assist']);

        // Cloud-assisted scan is enabled, check the configuration for maximum file size for ELF files.
        if (
            isset($options['cloudscan-max-elf-size'])
            && !empty($options['cloudscan-max-elf-size'])
            && $options['cloudscan-max-elf-size'] !== false
        ) {
            $defaults['max_elf_size_for_cloudscan'] = $options['cloudscan-max-elf-size'];
        }

        $cloudscan_max_elf_size = AibolitHelpers::getBytes($defaults['max_elf_size_for_cloudscan']);
        if ($cloudscan_max_elf_size > 0) {
            define('CLOUDSCAN_MAX_ELF_SIZE', $cloudscan_max_elf_size);
        }
    }
} else {
    define('AI_EXPERT', AI_EXPERT_MODE);
    define('ONE_PASS', true);
}

if (ONE_PASS && defined('CLOUD_ASSIST_TOKEN')) {
    die('Both parameters(one-pass and cloud-assist) not supported');
}

if (defined('RAPID_ACCOUNT_SCAN') && !defined('CLOUD_ASSIST_TOKEN')) {
    die('CloudScan should be enabled');
}

if (Progress::isCreateSharedMem() && Progress::getSharedMem() === null) {
    die('shared-mem-progress should be enabled and ID specified.');
}

if (defined('RAPID_ACCOUNT_SCAN')) {
    if (!file_exists(RAPID_ACCOUNT_SCAN) && !mkdir(RAPID_ACCOUNT_SCAN, 0700, true) && !is_dir(RAPID_ACCOUNT_SCAN)) {
        throw new Exception(sprintf('Directory "%s" was not created', RAPID_ACCOUNT_SCAN));
    }
    $specification = Factory::instance()->create(DbFolderSpecification::class);
    if (!$specification->satisfiedBy(RAPID_ACCOUNT_SCAN)) {
        @unlink(RAPID_ACCOUNT_SCAN);
        die('Rapid DB folder error! Please check the folder.');
    }
}

if (defined('RAPID_ACCOUNT_SCAN_TYPE') && !in_array(RAPID_ACCOUNT_SCAN_TYPE, array('NONE', 'ALL', 'SUSPICIOUS'))) {
    die('Wrong Rapid account scan type');
}

if (defined('RAPID_ACCOUNT_SCAN') && !extension_loaded('leveldb')) {
    die('LevelDB extension needed for Rapid DB');
}

$vars->blackFiles = [];

$debug = new DebugMode(DEBUG_MODE, DEBUG_PERFORMANCE, DEBUG_PCRE);

$vars->signs = new LoadSignaturesForScan(isset($defaults['avdb']) ? $defaults['avdb'] : null, AI_EXPERT, $debug);

if (defined('HS')) {
    HyperScan::initExtDb(HS, $vars->signs->getDBMetaInfoVersion());
}
if (defined('HS_EARLY_FILTER')) {
    HyperScan::initEarlyFilterDb(HS_EARLY_FILTER);
}
if (defined('HS_EXT_SUS')) {
    HyperScan::initExtSusDb(HS_EXT_SUS);
}

if ($vars->signs->getResult() == $vars->signs::SIGN_EXTERNAL) {
    stdOut('Loaded external signatures from ' . $defaults['avdb']);
} elseif ($vars->signs->getResult() == $vars->signs::SIGN_IMPORT) {
    stdOut('Loaded ' . __DIR__ . '/ai-bolit.sig signatures from ai-bolit.sig');
} elseif ($debug->isDebug() && $vars->signs->getResult() == $vars->signs::SIGN_ERROR) {
    $debug->QCR_Debug('Import ai-bolit.sig ' . $vars->signs->getLastError());
}

if ($debug->isDebug()) {
    $debug->QCR_Debug();
}

if (isset($defaults['userid'])) {
    stdOut('Running from ' . $defaults['userid'] . ':' . $defaults['groupid']);
}

if (AI_EXTRA_WARN) {
    $sign_count = $vars->signs->getDBCountWithSuspicious();
} else {
    $sign_count = $vars->signs->getDBCount();
}

stdOut('Malware signatures: ' . $sign_count);

if ($g_SpecificExt) {
    stdOut("Scan specific extensions: " . implode(',', $g_SensitiveFiles ?? []));
}

if (DEBUG_PERFORMANCE) {
    stdOut("Debug Performance Scan");
}

// Init
define('MAX_PREVIEW_LEN', 120);

if (defined('AIBOLIT_EXTERNAL_HANDLER')) {
    include_once(AIBOLIT_EXTERNAL_HANDLER);
    stdOut("\nLoaded external handler: " . AIBOLIT_EXTERNAL_HANDLER . "\n");
}

define('FUNC_AIBOLIT_ON_START', function_exists('aibolit_onStart'));
define('FUNC_AIBOLIT_ON_PROGRESS_UPDATE', function_exists('aibolit_onProgressUpdate'));
define('FUNC_AIBOLIT_ON_FATAL_ERROR', function_exists('aibolit_onFatalError'));
define('FUNC_AIBOLIT_ON_BIGFILE', function_exists('aibolit_onBigFile'));
define('FUNC_AIBOLIT_ON_READ_ERROR', function_exists('aibolit_onReadError'));
define('FUNC_AIBOLIT_ON_COMPLETE', function_exists('aibolit_onComplete'));

if (FUNC_AIBOLIT_ON_START) {
    aibolit_onStart(); /** @phpstan-ignore-line */
}

// Perform full scan when running from command line

if (isset($l_FastCli) && $l_FastCli) {
    $defaults['scan_all_files'] = false;
}

define('SCAN_ALL_FILES', (bool) $defaults['scan_all_files']);
define('SCAN_DELAY', (int) $defaults['scan_delay']);
define('MAX_SIZE_TO_SCAN', AibolitHelpers::getBytes($defaults['max_size_to_scan']));
define('MAX_SIZE_TO_CLOUDSCAN', AibolitHelpers::getBytes($defaults['max_size_to_cloudscan']));

if (SCAN_ALL_FILES) {
    $filter->setScanAll();
}

if (isset($defaults['memory_limit']) && $defaults['memory_limit'] && ($defaults['memory_limit'] = AibolitHelpers::getBytes($defaults['memory_limit'])) > 0) {
    ini_set('memory_limit', $defaults['memory_limit']);
    stdOut("Changed memory limit to " . $defaults['memory_limit']);
}

if (realpath($defaults['path']) === false) {
    define('ROOT_PATH', $defaults['path']);
} else {
    define('ROOT_PATH', realpath($defaults['path']));
}

if (!ROOT_PATH) {
    if (isCli()) {
        stdOut("Directory '{$defaults['path']}' not found!");
        die();
    }
} elseif (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH) && isCli()) {
    $read_error_message = "Cannot read directory '" . ROOT_PATH . "'!";
    stdOut($read_error_message);
    die2($read_error_message);
}

define('CURRENT_DIR', getcwd());
if (!$defaults['use_template_in_path']) {
    chdir(ROOT_PATH);
}

if (isCli() && REPORT !== '' && REPORT !== 'no@email.com') {
    $report      = str_replace('\\', '/', REPORT);
    $abs         = strpos($report, '/') === 0 ? DIR_SEPARATOR : '';
    $report      = array_values(array_filter(explode('/', $report)));
    $report_file = array_pop($report);
    $report_path = realpath($abs . implode(DIR_SEPARATOR, $report));

    define('REPORT_FILE', $report_file);
    define('REPORT_PATH', $report_path);

    if (REPORT_FILE && REPORT_PATH && is_file(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE)) {
        @unlink(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE);
    }

    if (!isset($options['no-html']) && defined('REPORT_FILE')) {
        $reports[HTMLReport::class] = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE;
    }
}

if (defined('REPORT_PATH')) {
    $l_ReportDirName = REPORT_PATH;
}

$vars->options = $options ?? false;

$path                       = $defaults['path'];
$report_mask                = $defaults['report_mask'];
$extended_report            = defined('EXTENDED_REPORT') && EXTENDED_REPORT;
$rapid_account_scan_report  = defined('RAPID_ACCOUNT_SCAN');

$max_size_to_scan = AibolitHelpers::getBytes(MAX_SIZE_TO_SCAN);
$max_size_to_scan = $max_size_to_scan > 0 ? $max_size_to_scan : AibolitHelpers::getBytes('1m');
$max_size_to_scan = AibolitHelpers::bytes2Human($max_size_to_scan);

$max_size = (MAX_SIZE_SCAN_BYTES > 0) ? MAX_FILE_SIZE_FOR_CHECK : (defined('CLOUD_ASSIST_TOKEN') ? max(MAX_SIZE_TO_SCAN, MAX_SIZE_TO_CLOUDSCAN) : MAX_SIZE_TO_SCAN);

if ($max_size == 0) {
    $max_size = AibolitHelpers::getBytes('1m');
}

$filter->setSizeRange(MIN_FILE_SIZE_FOR_CHECK, $max_size);
$finder->setCollectBigElfs(defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS'));

$use_doublecheck = isset($options['with-2check']) && file_exists(DOUBLECHECK_FILE);

$g_AddPrefix = $g_AddPrefix ?? '';
$g_NoPrefix = $g_NoPrefix ?? '';
$reportFactory = function ($reports) use (
    $vars,
    $path,
    $report_mask,
    $extended_report,
    $rapid_account_scan_report,
    $g_AddPrefix,
    $g_NoPrefix,
    $snum,
    $max_size_to_scan,
    $g_SpecificExt,
    $use_doublecheck,
    $debug
) {
    foreach ($reports as $report_class => $file) {
        yield Factory::instance()->create($report_class, [$vars->signs->_Mnemo, $path,
            $vars->signs->getDBLocation(), $vars->signs->getDBMetaInfoVersion(),
            $report_mask, $extended_report, $rapid_account_scan_report, AI_VERSION,
            AI_EXTRA_WARN, AI_EXPERT, SMART_SCAN, ROOT_PATH, SCAN_ALL_FILES, $g_SpecificExt,
            DOUBLECHECK_FILE, $use_doublecheck, START_TIME, $snum, $max_size_to_scan, $g_AddPrefix, $g_NoPrefix,
            isset($reports[CSVReport::class]), $file, JSON_STDOUT, isset($vars->options['stat']), $debug]);
    }
};

define('QUEUE_FILENAME', (isset($l_ReportDirName) && $l_ReportDirName != '' ? $l_ReportDirName . '/' : '') . 'AI-BOLIT-QUEUE-' . md5($defaults['path']) . '-' . rand(1000, 9999) . '.txt');

////////////////////////////////////////////////////////////////////////////

if (!isCli()) {
    header('Content-type: text/html; charset=utf-8');
}

if (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH)) {
    echo Translate::getStr('warning.folder_read_permission');
    exit;
}

if (isCli()) {
    if (defined('REPORT_PATH') && REPORT_PATH) {
        if (!is_writable(REPORT_PATH)) {
            die2("\nCannot write report. Report dir " . REPORT_PATH . " is not writable.");
        } elseif (!REPORT_FILE) {  /** @phpstan-ignore-line */
            die2("\nCannot write report. Report filename is empty.");
        } elseif (($file = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE) && is_file($file) && !is_writable($file)) {
            die2("\nCannot write report. Report file '$file' exists but is not writable.");
        }
    }
}


// detect version CMS
$g_CmsListDetector = null;
if (!$defaults['use_template_in_path']) {
    $g_KnownCMS        = [];
    $g_CmsListDetector = new CmsVersionDetector(ROOT_PATH);
}

$g_AiBolitAbsolutePath = __DIR__;

$l_IgnoreFilename    = $g_AiBolitAbsolutePath . '/.aignore';
$l_DirIgnoreFilename = $g_AiBolitAbsolutePath . '/.adirignore';
$l_UrlIgnoreFilename = $g_AiBolitAbsolutePath . '/.aurlignore';

$filter->setIgnoreListPatterns($l_DirIgnoreFilename);

if (SMART_SCAN) {
    $filter->setSmartScan();
}

if ($debug->isDebug()) {
    $debug->QCR_Debug();
}


$defaults['skip_ext'] = strtolower(trim($defaults['skip_ext']));
if ($defaults['skip_ext'] != '') {
    $filter->setIgnoreExt($defaults['skip_ext']);

    if ($debug->isDebug()) {
        $debug->QCR_Debug('Skip files with extensions: ' . implode(',', $filter->getIgnoreExt()));
    }

    stdOut('Skip extensions: ' . implode(',', $filter->getIgnoreExt()));
}

$use_listingfile = defined('LISTING_FILE');

$listing = false;

if ($use_doublecheck) {
    $listing = DOUBLECHECK_FILE;
} elseif ($use_listingfile) {
    $listing = LISTING_FILE;  /** @phpstan-ignore-line */
}
$base64_encoded = INPUT_FILENAMES_BASE64_ENCODED;

if (isset($options['resident'])) {
    $filter->setIgnorePathPattern(false);
    $filter->setDefaultExcludes(false);
    $filter->setScanAll();
}

if (is_callable([$filter, 'generateCheckers'])) {
    $filter->generateCheckers();
}

if (isset($options['detached'])) {
    $detached = Factory::instance()->create(DetachedMode::class, [$finder, $debug, $options['detached'], $vars, START_TIME, $reportFactory]);
    if (defined('LISTING_FILE')) {
        $detached->scanListing(LISTING_FILE, INPUT_FILENAMES_BASE64_ENCODED);
    } else {
        $detached->scanDirectories(ROOT_PATH);
    }
    exit(0);
}

if (isset($options['resident'])) {
    $options['archive-max-folders-count'] = $defaults['archive-max-folders-count'];
    if ((isset($options['archive-max-size']) && ($size = $options['archive-max-size']) !== false)) {
        $size                        = AibolitHelpers::getBytes($size);
        $options['archive-max-size'] = $size > 0 ? $size : $defaults['archive-max-size'];
    } else {
        $options['archive-max-size'] = $defaults['archive-max-size'];
    }

    if ((isset($options['max-num-files-in-archive']) && ($files = $options['max-num-files-in-archive']) !== false)) {
        $options['max-num-files-in-archive'] = $files > 0 ? $files : $defaults['max-num-files-in-archive'];
    } else {
        $options['max-num-files-in-archive'] = $defaults['max-num-files-in-archive'];
    }

    $logger = null;
    $levels = explode(',', LOG_LEVEL);
    $logger = new Logger(LOG_FILE, $levels);
	/** @phpstan-ignore-next-line */
    Factory::instance()->create(ResidentMode::class, [$finder, $debug, $reportFactory, $vars->signs, $logger, $options, $lic]);
    exit(0);
}

try {
    $scan = new Scanner($finder, $vars, $debug);
    if (defined('SCAN_FILE')) {
        // scan single file
        $filepath = INPUT_FILENAMES_BASE64_ENCODED ? FilepathEscaper::decodeFilepathByBase64(SCAN_FILE) : SCAN_FILE;
        stdOut("Start scanning file '" . $filepath . "'.");
        if (file_exists($filepath) && is_file($filepath) && is_readable($filepath)) {
            $vars->foundTotalFiles = 1;
            $s_file[] = $filepath;
        } else {
            stdOut("Error:" . $filepath . " either is not a file or readable");
        }
    } elseif ($listing) {
        //scan listing
        if ($listing === 'stdin') {
            $lines = explode("\n", getStdin());
        } else {
            $lines = new ScanList($listing, INPUT_FILENAMES_BASE64_ENCODED, $use_doublecheck);
        }
        $vars->foundTotalFiles = is_array($lines) ? count($lines) : $lines->count();
        $s_file = $lines;
        stdOut("Start scanning the list from '" . $listing . "'.\n");
    } else {
        //scan by path
        $base64_encoded = true;
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan->QCR_ScanDirectories(ROOT_PATH);
        stdOut("\nFound $vars->foundTotalFiles files in $vars->foundTotalDirs directories.");
        stdOut("Start scanning '" . ROOT_PATH . "'.\n");

        if ($debug->isDebug()) {
            $debug->QCR_Debug();
        }
        stdOut(str_repeat(' ', 160), false);
        $s_file = new ScanList(QUEUE_FILENAME, $base64_encoded, $use_doublecheck);
    }
    if (isset($s_file)) {
        $ca = null;
        if (defined('CLOUD_ASSIST_TOKEN')) {
            $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            HashVerdicts::init();
        }
        $scan->QCR_GoScan($s_file, $ca, null, $listing ? $filter : null);
        unset($s_file);
        if (!is_null($ca)) {
            HashVerdicts::close();
            $ca->close();
            unset($ca);
        }
        @unlink(QUEUE_FILENAME);
    }

    $vars->foundTotalDirs  = $vars->totalFolder;
} catch (Exception $e) {
    if ($debug->isDebug()) {
        $debug->QCR_Debug($e->getMessage());
    }
}
if ($debug->isDebug()) {
    $debug->QCR_Debug();
}

$vars->doorway  = $finder->getDoorways();
$vars->symLinks = $finder->getSymlinks();
$vars->bigFiles = $finder->getBigFiles();

if (count($vars->bigFiles) > 0) {
    $scan->prepareBigFilesToCriticalList($vars->bigFiles, $vars);
}
$bigElfs = $finder->getBigElfFiles();

if (count($bigElfs) > 0) {
    $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $vars);
}


list($snum, $i) = $scan->whitelisting();


////////////////////////////////////////////////////////////////////////////
if (BOOL_RESULT && (!defined('NEED_REPORT'))) { /** @phpstan-ignore-line */
    if ((count($vars->criticalPHP) > 0) || (count($vars->criticalJS) > 0) || (count($vars->phishing) > 0)) {
        exit(2);
    }
    exit(0);
}
////////////////////////////////////////////////////////////////////////////

$time_taken = AibolitHelpers::seconds2Human(AibolitHelpers::currentTime() - START_TIME);


stdOut("\nBuilding report [ mode = " . AI_EXPERT . " ]\n");

//stdOut("\nLoaded signatures: " . count($g_FlexDBShe) . " / " . count($g_JSVirSig) . "\n");

////////////////////////////////////////////////////////////////////////////

$scan_time = round(AibolitHelpers::currentTime() - START_TIME, 1);

foreach ($reportFactory($reports ?? []) as $report) {
    $report->generateReport($vars, $scan_time);
    $res = $report->write();
    if ($res !== '') {
        stdOut($res);
    }
}
stdOut("\n");

stdOut("Building list of shells " . count($vars->criticalPHP));

stdOut("Building list of js " . count($vars->criticalJS));

stdOut("Building list of unread files " . count($vars->notRead));

if (AI_EXTRA_WARN) {
    stdOut("Building list of suspicious files " . count($vars->warningPHP));
}
////////////////////////////////////

if (!defined('REPORT') || REPORT === '') {
    die2('Report not written.');
}


stdOut("Scanning complete! Time taken: " . AibolitHelpers::seconds2Human($scan_time));

if (DEBUG_PERFORMANCE) {
    $debug->printPerformanceStats();
    die();
}

stdOut("\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
stdOut("Attention! DO NOT LEAVE either ai-bolit.php or AI-BOLIT-REPORT-<xxxx>-<yy>.html \nfile on server. COPY it locally then REMOVE from server. ");
stdOut("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

if (isset($options['cmd'])) {
    stdOut("Run \"{$options['cmd']}\" ");
    system($options['cmd']);
}

if ($debug->isDebug()) {
    $debug->QCR_Debug();
}

# exit with code

$l_EC1 = count($vars->criticalPHP);
$l_EC2 = count($vars->criticalJS) + count($vars->phishing) + count($vars->warningPHP);
$code  = 0;

if ($l_EC1 > 0) {
    $code = 2;
} else {
    if ($l_EC2 > 0) {
        $code = 1;
    }
}

$stat = array(
    'php_malware'   => count($vars->criticalPHP),
    'cloudhash'     => count($vars->blackFiles),
    'js_malware'    => count($vars->criticalJS),
    'phishing'      => count($vars->phishing)
);

if (FUNC_AIBOLIT_ON_COMPLETE) {
    aibolit_onComplete($code, $stat);  /** @phpstan-ignore-line */
}

stdOut('Exit code ' . $code);
exit($code);

############################################# END ###############################################

function getStdin()
{
    $stdin  = '';
    $f      = @fopen('php://stdin', 'r');
    while ($line = fgets($f)) {
        $stdin .= $line;
    }
    fclose($f);
    return $stdin;
}

function die2($str)
{
    if (FUNC_AIBOLIT_ON_FATAL_ERROR) {
        aibolit_onFatalError($str);
    }
    die($str);
}


function getMaxMinUid($path = '/etc/login.defs')
{
    $uid_min = 1000;
    $uid_max = null;
    if (!file_exists($path)) {
        $release = new OsReleaseInfo();
        $ver = $release->getOsVersion();
        if ($release->isIdLikeCentos() && $ver && (strpos($ver, '6') === 0)) {
            $uid_min = 500;
        }
        unset($ver);
        return [$uid_min, $uid_max];
    }

    $file = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($file as $line) {
        $line = trim($line);
        if (strpos($line, 'UID_MIN') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_min = (int)trim($value);
        }
    }
    return [$uid_min, $uid_max];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The following instructions should be written the same pattern,
/// because they are replaced by file content while building a release.
/// See the release_aibolit_ru.sh file for details.

if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
class AibolitHelpers
{
    private static $euid = 0;
    private static $egids = [0];

    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val  = (int) preg_replace('~\D~', '', $val);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return (int)$val;
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function (&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }

    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

    /**
     * Wrapper for the hrtime() or microtime() functions
     * (depending on the PHP version, one of the two is used)
     *
     * @return float|mixed UNIX timestamp
     */
    public static function currentTime()
    {
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }

    public static function setCurrentIds()
    {
        self::$euid  = posix_geteuid();
        self::$egids = posix_getgroups();
    }

    public static function geteuid()
    {
        return self::$euid;
    }

    public static function getegids()
    {
        return self::$egids;
    }

    public static function getFileExtension($path)
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = ['.', '/'];

        if ($pathLen === 0 || in_array($path[$pathLen - 1], $breakpoint)) {
            return $res;
        }

        $hasExt = false;
        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === '.') {
                $hasExt = true;
            }
            if (in_array($path[$i], $breakpoint)) {
                break;
            }
            $res .= $path[$i];
        }

        return $hasExt ? strrev($res) : '';
    }

    public static function getBaseName($path, $prefix = '')
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = '/';

        if ($pathLen === 0) {
            return $res;
        }

        $hasPrefix = false;
        if ($prefix !== '') {
            $prefix = strrev($prefix);
            $hasPrefix = true;
        }

        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === $breakpoint) {
                if ($i === $pathLen - 1) {
                    continue;
                }
                break;
            }
            $res .= $path[$i];

            if ($hasPrefix && $res === $prefix) {
                $res = '';
                $hasPrefix = false;
            }
        }

        return strrev($res);
    }

    public static function getRealpath($path, $checkExists = false)
    {
        $fileExists = $checkExists ? @lstat($path) : true;
        if ($fileExists === false) {
            return false;
        }

        if (strlen($path) == 0) {
            return getcwd();
        }

        if ($path[0] != DIRECTORY_SEPARATOR) {
            $path = getcwd() . DIRECTORY_SEPARATOR . $path;
        }

        $stack = explode(DIRECTORY_SEPARATOR, $path);
        $abs = [];

        foreach ($stack as $i) {
            if ($i === '.' || $i === '') {
                continue;
            }
            if ($i === '..') {
                array_pop($abs);
            } else {
                $abs[] = $i;
            }
        }

        return DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $abs);
    }

    public static function getPcreErrorConstant($error_code)
    {
        switch ($error_code) {
            case PREG_NO_ERROR:
                return true;
            case PREG_INTERNAL_ERROR:
                return 'PREG_INTERNAL_ERROR';
            case PREG_BACKTRACK_LIMIT_ERROR:
                return 'PREG_BACKTRACK_LIMIT_ERROR';
            case PREG_RECURSION_LIMIT_ERROR:
                return 'PREG_RECURSION_LIMIT_ERROR';
            case PREG_BAD_UTF8_ERROR:
                return 'PREG_BAD_UTF8_ERROR';
            case PREG_BAD_UTF8_OFFSET_ERROR:
                return 'PREG_BAD_UTF8_OFFSET_ERROR';
            case PREG_JIT_STACKLIMIT_ERROR:
                return 'PREG_JIT_STACKLIMIT_ERROR';
        }
    }

    /**
     * Check if the file is an ELF (binary) file.
     *
     * @param string $filepath Path to the file.
     *
     * @return bool True if the file is an ELF file, false otherwise.
     */
    public static function isFileElf($filepath)
    {
        $firstFourBytes = @file_get_contents($filepath, false, null, 0, 4);
        return self::isStringElfPrefix($firstFourBytes);
    }

    /**
     * Check if the string represents the beginning of an ELF (binary) file.
     *
     * @param $str String to evaluate.
     *
     * @return bool True if the string is an ELF prefix, false otherwise.
     */
    public static function isStringElfPrefix($str)
    {
        return (strpos($str, chr(127) . 'ELF') === 0);
    }

    /**
     * Normalizes the path to the AVD database.
     *
     * First it removes directory separator from the end of the path. It does the same for directory separator followed
     * by a wildcard symbol.
     *
     * It uses glob() to resolve all paths matching any pattern in the original path and then applies realpath() to get
     * the real path for each.
     *
     * @param string $path      Path to be processed.
     * @param bool   $isCleanup If true, subfolders are not matched. Even if the path contains a wildcard.
     *
     * @return array[] An array of normalized paths.
     */
    public static function normalizeAvdPath($path, $isCleanup = false)
    {
        if (substr($path, -1) === DIRECTORY_SEPARATOR) {
            $path = substr($path, 0, -1);
        } elseif (substr($path, -2) === DIRECTORY_SEPARATOR . '*') {
            $path = substr($path, 0, -2);
        }

        $paths = [
            // sanitized path
            $path,
        ];

        if (!$isCleanup) {
            // extra path to match subfolders
            $paths[] = $path . DIRECTORY_SEPARATOR . '*';
        }

        $result = [];
        foreach ($paths as $_path) {
            $glob_paths = glob($_path, GLOB_ONLYDIR);
            $result = array_merge($result, $glob_paths);
        }

        if (empty($result)) {
            return [];
        }

        $result = array_unique($result);
        return array_map('realpath', $result);
    }

    /**
     * Check if the string is a core dump.
     *
     * @param string $header The first bytes of the file.
     *
     * @return bool True if the string is a core dump, false otherwise.
     */
    public static function isStringCoreDump($header)
    {
        return strlen($header) >= 17 && ord($header[16]) === 4;
    }
}


class Errors
{
    private static $data;
    private static $count;

    public static function add($type, $file, $component, $error, $error_info = null)
    {
        if (self::$count > 500 || $error === 0 || isset(self::$data[$file->getFilename()])) {
            return;
        }
        if ($type === 'pcre') {
            $error = AibolitHelpers::getPcreErrorConstant($error);
        }
        $stat = [
            'type' => $type,
            'file' => $file->getFilename(),
            'hash' => $file->getSha256(),
            'component' => $component,
            'error' => $error
        ];
        if ($error_info) {
            $stat['info'] = $error_info;
        }
        self::$data[$file->getFilename()] = $stat;
        self::$count++;
    }

    public static function get()
    {
        return array_values(self::$data ?? []);
    }
}


class Variables
{
    public $structure           = [];
    public $totalFolder         = 0;
    public $totalFiles          = 0;
    public $adwareList          = [];
    public $criticalPHP         = [];
    public $phishing            = [];
    public $CMS                 = [];
    public $criticalJS          = [];
    public $criticalJSFragment  = [];
    public $blackFiles          = [];
    public $blackFilesSig       = [];
    public $notRead             = [];
    public $bigFiles            = [];
    public $criticalPHPSig      = [];
    public $criticalPHPFragment = [];
    public $phishingSigFragment = [];
    public $phishingFragment    = [];
    public $criticalJSSig       = [];
    public $adwareListFragment  = [];
    public $warningPHPSig       = [];
    public $warningPHPFragment  = [];
    public $warningPHP          = [];
    public $suspiciousExt       = [];
    public $suspiciousExtSig    = [];
    public $suspiciousExtFragment = [];
    public $suspiciousIgn       = [];
    public $suspiciousIgnSig    = [];
    public $suspiciousIgnFragment = [];

    public $counter             = 0;
    public $foundTotalDirs      = 0;
    public $foundTotalFiles     = 0;
    public $files_and_ignored   = 0;
    public $doorway             = [];
    public $symLinks            = [];
    public $skippedFolders      = [];

    public $hashtable           = null;
    public $rescanCount         = 0;
    public $rescanRxGood        = 0;

    public $options             = [];

    public $signs               = [];
    public $users               = null;
}


class Logger
{
    /**
     * $log_file - path and log file name
     * @var string
     */
    protected $log_file;
    /**
     * $file - file
     * @var string
     */
    protected $file;
    /**
     * dateFormat
     * @var string
     */
    protected $dateFormat = 'd-M-Y H:i:s';

    /**
     * @var array
     */
    const LEVELS  = ['ERROR' => 1, 'DEBUG' => 2,  'INFO' => 4, 'ALL' => 7];

    /**
     * @var int
     */
    private $level;

    /**
     * Class constructor
     *
     * @param string       $log_file - path and filename of log
     * @param string|array $level    - Level of logging
     *
     * @throws Exception
     */
    public function __construct($log_file = null, $level = 'INFO')
    {
        if (!$log_file) {
            return;
        }
        if (is_array($level)) {
            foreach ($level as $v) {
                if (!isset(self::LEVELS[$v])) {
                    $v = 'INFO';
                }
                $this->level |= self::LEVELS[$v];
            }
        } else {
            if (isset(self::LEVELS[$level])) {
                $this->level = self::LEVELS[$level];
            } else {
                $this->level = self::LEVELS['INFO'];
            }
        }

        $this->log_file = $log_file;
        //Create log file if it doesn't exist.
        if (!file_exists($log_file)) {
            fopen($log_file, 'w') or exit("Can't create $log_file!");
        }
        //Check permissions of file.
        if (!is_writable($log_file)) {
            //throw exception if not writable
            throw new Exception('ERROR: Unable to write to file!', 1);
        }
    }

    /**
     * Info method (write info message)
     * @param string $message
     * @return void
     */
    public function info($message)
    {
        if ($this->level & self::LEVELS['INFO']) {
            $this->writeLog($message, 'INFO');
        }
    }
    /**
     * Debug method (write debug message)
     * @param string $message
     * @return void
     */
    public function debug($message)
    {
        if ($this->level & self::LEVELS['DEBUG']) {
            $this->writeLog($message, 'DEBUG');
        }
    }
    /**
     * Error method (write error message)
     * @param string $message
     * @return void
     */
    public function error($message)
    {
        if ($this->level & self::LEVELS['ERROR']) {
            $this->writeLog($message, 'ERROR');
        }
    }

    /**
     * Write to log file
     * @param string $message
     * @param string $level
     * @return void
     */
    public function writeLog($message, $level)
    {
        if (!$this->log_file) {
            return;
        }
        // open log file
        if (!is_resource($this->file)) {
            $this->openLog();
        }
        //Grab time - based on timezone in php.ini
        $time = date($this->dateFormat);
        // Write time & message to end of file
        fwrite($this->file, "[$time] : [$level] - $message" . PHP_EOL);
    }
    /**
     * Open log file
     * @return void
     */
    private function openLog()
    {
        $openFile = $this->log_file;
        // 'a' option = place pointer at end of file
        $this->file = fopen($openFile, 'a') or exit("Can't open $openFile!");
    }
    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->file) {
            fclose($this->file);
        }
    }
}


class LoadSignaturesForScan
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;
    private $hash;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_CronDB;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;

    /**
     * @var MDSUrls
     */
    public $blackUrls;

    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';
    private $cache_file = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;


    public function __construct($avdb_file, $mode, $debug)
    {
        if (!defined('DEBUG_MODE')) {
            define('DEBUG_MODE', 0);
        }

        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($avdb_file && file_exists($avdb_file)) {
            $this->cache_file = __DIR__ . '/' . basename($avdb_file, '.db') . '.cache.db';
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_CronDB      = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); //TODO: you need to remove array_flip and swap the keys and values in array_combine. Write a test: put the signature base in the tests folder and run a scan with this base on the VIRII folder - the result should not change, since the base is the same

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = [];
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = [];
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = [];
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = [];
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = [];
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = [];
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = [];
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = [];
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = [];
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = [];
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = [];
            }

            if (count($this->_CronDB) <= 1) {
                $this->_CronDB = [];
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            $this->cache_file = __DIR__ . '/' . 'internal' . '.cache.db';
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_CronDB      = InternalSignatures::$_CronDB;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        $this->hash = hash('sha256', serialize($this->_Mnemo));
        $cache = $this->loadDataFromCache();

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = [];
            $this->XX_FlexDBShe = [];
            $this->X_JSVirSig   = [];
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            } catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        if (!$cache) {
            $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe) + count($this->_CronDB);
            $this->count_susp = $this->count + count($this->_SusDB);

            if (!$debug->getDebugPCRE() && !$debug->getDebugPerformance()) {
                $this->OptimizeSignatures($debug);
            }

            $this->_DBShe = array_map('strtolower', $this->_DBShe);
            $this->X_DBShe = array_map('strtolower', $this->X_DBShe);

            $this->_FlexDBShe = array_map([$this, 'completeRegexp'], $this->_FlexDBShe);
            $this->_JSVirSig = array_map([$this, 'completeRegexp'], $this->_JSVirSig);
            $this->_AdwareSig = array_map([$this, 'completeRegexp'], $this->_AdwareSig);
            $this->_PhishingSig = array_map([$this, 'completeRegexp'], $this->_PhishingSig);
            $this->_SusDB = array_map([$this, 'completeRegexp'], $this->_SusDB);
            $this->_CronDB = array_map([$this, 'completeRegexp'], $this->_CronDB);
            $this->_ExceptFlex = array_map([$this, 'completeRegexp'], $this->_ExceptFlex);

            $this->X_JSVirSig = array_map([$this, 'completeRegexp'], $this->X_JSVirSig);
            $this->X_FlexDBShe = array_map([$this, 'completeRegexp'], $this->X_FlexDBShe);
            $this->XX_FlexDBShe = array_map([$this, 'completeRegexp'], $this->XX_FlexDBShe);
            $this->cacheData();
        }
    }

    private function OptimizeSignatures($debug)
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = [];

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = [];

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)') {
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            }
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e') {
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            }
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.') {
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';
            }

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        self::optSig($this->_FlexDBShe, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_JSVirSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_AdwareSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_PhishingSig, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_SusDB, $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_CronDB, $debug, 'AibolitHelpers::myCheckSum');
        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '') {
                unset($this->_ExceptFlex[$i]);
            }
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    public function completeRegexp($item)
    {
        return ($item !== '') ? ('~' . $item . '~msi') : $item;
    }

    public static function optSig(&$sigs, $debug = false, $func_id = null)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $k => &$s) {
            if ($func_id && is_callable($func_id)) {
                $id = $func_id($s);
            } else {
                $id = $k;
            }
            $s .= '(?<X' . $id . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        self::optSigCheck($sigs, $debug);

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#'
                . '^'                                       //match from start of the line
                . '('                                       //capture $i count of tokens to captured group:
                    . '(?>'                                 //  capture one token + quantifier to one atomic group:
                        . '(?:'                             //    capture one token of regex to one non-captured group:
                            . '\\\\.'                       //      capture escaped symbol or regex token (\d, \s, \n ...) as one token
                            . '|\\\\[.+?\\\\]'              //      OR capture escaped special regex symbols as one token (\., \+, \?, \\)
                            . '|[^\[(\n]'                   //      OR don't capture chars [ - start of charset, ( - start of group, \n - end of line
                            . '|\((?:\\\\.|[^)(\n])++\)'    //      OR capture group as one token (....)
                            . '|\[(?:\\\\.|[^\]\[\n])++\]'  //      OR capture charset as one token [...]
                        . ')'
                        . '(?:'                             //    capture quantifier to one non-captured group:
                            . '[*?+]\+?'                    //      capture chars '*', '?', '+' with additional '+' at the end optionally
                            . '|\{\d+(?:,\d*)?\}[+?]?'      //      OR capture repeats like '{5, 10}' with additional '+' or '?' at the end optionally
                            . '|'                           //      OR capture nothing (no quantifier for token)
                        . ')'
                    . ')'
                    . '{' . $i . ',}'                       //  repeat capture of atomic group (regex token + quantifier) $i times
                . ')'
                . '[^\n]*+'                                 //  capture all to the end of line
                . '(?:'
                    . '\n\1(?![{?*+]).+'                    //    capture end of line + atomic group with $i count of tokens (same prefix) + all to the end of line
                . ')+'                                      //  repeat previous capture 1+ times
                . '#im', 'LoadSignaturesForScan::optMergePrefixes', $txt);
        }

        $sigs = explode("\n", $txt);

        self::optSigCheck($sigs, $debug);
    }

    /**
     * Change indexed groups in regex to named in format:
     *  (asd)\1 -> (?<br123_1>asd)(?P=br123_1) where 123 - index of regex, 1 - index of group
     * @param $str
     * @param $index
     * @return string
     */
    private static function changeIndexedGroupToNamed($str, $index)
    {
        $res = '';
        $counter = 1;
        $in_brackets = false;
        for ($i = 0; $i < strlen($str); $i++) {
            if ($str[$i] === '[' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = true;
                $res .= $str[$i];
            } elseif ($in_brackets && $str[$i] === ']' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = false;
                $res .= $str[$i];
            } elseif (!$in_brackets && $str[$i] === '(' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\') && $str[$i + 1] !== '?') {
                $res .= $str[$i] . '?<br' . $index . '_' . $counter . '>';
                $counter += 1;
            } elseif (!$in_brackets && $str[$i] === '\\' && $str[$i - 1] !== '\\' && (ord($str[$i + 1]) > 0x30 && ord($str[$i + 1]) < 0x38) && (ord($str[$i + 2]) < 0x30 || ord($str[$i + 2]) > 0x39)) {
                $res .= '(?P=br' . $index . '_' . $str[$i + 1] . ')';
                $i += 1;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    /**
     * Merge multiple regexps with same prefix and recalculate backreferences
     * @param $m
     * @return string
     */
    private static function optMergePrefixes($m, $limit = 8000)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        $prefixGroupCount = self::countGroups($prefix);
        $totalGroupCount = 0;
        $firstLine = true;
        foreach (explode("\n", $m[0]) as $line) {
            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            //if it will be first signature in array, then groups must be counted with prefix else only in suffix
            $groupCount = self::countGroups($firstLine ? $line : $s);

            $len += strlen($s);
            //if it's first signature in array, then we don't need to recalculate backreferences
            $noСhange = $firstLine ?: ($len > $limit);
            $s = preg_replace_callback('/(?<!\\\\)\\\\([0-9]+)/', function ($matches) use ($totalGroupCount, $prefixGroupCount, $groupCount, $noСhange) {
                if ($matches[1] <= $prefixGroupCount || $noСhange || $matches[1] > ($prefixGroupCount + $groupCount)) {
                    return $matches[0];
                }
                return '\\' . ($matches[1] + ($totalGroupCount - $prefixGroupCount));
            }, $s);
            $firstLine = false;
            $totalGroupCount += $groupCount;

            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $regex = $prefix . $suffixes[0];
                } else {
                    $regex = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                if (@preg_match('~' . $regex . '~msi', '') === false) {
                    $r = self::optMergePrefixes($m, $limit / 2);
                    return $r;
                }
                $r[] = $regex;
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
                $totalGroupCount = $prefixGroupCount + $groupCount;
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $regex = $prefix . $suffixes[0];
            } else {
                $regex = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
            if (@preg_match('~' . $regex . '~msi', '') === false) {
                $r = self::optMergePrefixes($m, $limit / 2);
                return $r;
            }
            $r[] = $regex;
        }
        return implode("\n", $r);
    }

    /**
     * Count regexp captured groups in string
     * @param $line
     * @return int
     */
    private static function countGroups($line)
    {
        $groupCount = 0;
        $escaped = false;
        $inSquareBrackets = false;
        for ($i = 0; $i < strlen($line); $i++) {
            if ($line[$i] === '\\') {
                $escaped = !$escaped; //next char must be skipped
            } else {
                if ($line[$i] === '[' && !$escaped) {
                    $inSquareBrackets = true; //we don't need to count any char if it inside []
                } elseif ($line[$i] === ']' && !$escaped) {
                    $inSquareBrackets = false;
                } elseif (
                    /* Need to count all groups, except no capturing:
                     * Non-capturing groups: (?:...)
                     * Positive look-ahead groups: (?=...)
                     * Negative look-ahead groups: (?!...)
                     * Positive look-behind groups: (?<=...)
                     * Negative look-behind groups: (?<!...)
                     * Atomic group (non-greedy): (?>...)
                     * Comment groups: (?#...)
                     */
                    $line[$i] === '(' && !$escaped && !$inSquareBrackets
                    && !(
                        $i + 3 < strlen($line) && $line[$i + 1] === '?'
                        && (
                            in_array($line[$i + 2], [':', '=', '!', '>', '#'])
                            || ($line[$i + 2] === '<' && in_array($line[$i + 3], ['=', '!']))
                        )
                    )
                ) {
                    $groupCount++;
                }
                $escaped = false;
            }
        }
        return $groupCount;
    }

    /*
     * Checking errors in pattern
     */
    private static function optSigCheck(&$sigs, $debug)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if (DEBUG_MODE) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if (DEBUG_MODE) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    private function cacheData()
    {
        if ($this->debug->getDebugPCRE() || $this->debug->getDebugPerformance()) {
            return false;
        }
        $cacheData = [
            '_DBShe'            => $this->_DBShe,
            'X_DBShe'           => $this->X_DBShe,
            '_FlexDBShe'        => $this->_FlexDBShe,
            '_JSVirSig'         => $this->_JSVirSig,
            '_AdwareSig'        => $this->_AdwareSig,
            '_PhishingSig'      => $this->_PhishingSig,
            '_SusDB'            => $this->_SusDB,
            '_CronDB'           => $this->_CronDB,
            '_ExceptFlex'       => $this->_ExceptFlex,
            'X_JSVirSig'        => $this->X_JSVirSig,
            'X_FlexDBShe'       => $this->X_FlexDBShe,
            'XX_FlexDBShe'      => $this->XX_FlexDBShe,
            '_DeMapper'         => $this->_DeMapper,
            '_Mnemo'            => $this->_Mnemo,
            'sig_db_meta_info'  => $this->sig_db_meta_info,
            'count'             => $this->count,
            'count_susp'        => $this->count_susp,
            'hash'              => $this->hash,
        ];
        @file_put_contents($this->cache_file, base64_encode(gzcompress(serialize($cacheData))));
        @chmod($this->cache_file, 0644);
        unset($cacheData);
    }

    private function loadDataFromCache()
    {
        if ($this->debug->getDebugPCRE() || $this->debug->getDebugPerformance()) {
            return false;
        }
        if (is_readable($this->cache_file)) {
            $cacheData = unserialize(gzuncompress(base64_decode(file_get_contents($this->cache_file))));
            if ($this->hash === $cacheData['hash']) {
                $this->_DBShe       = $cacheData['_DBShe'];
                $this->X_DBShe      = $cacheData['X_DBShe'];
                $this->_FlexDBShe   = $cacheData['_FlexDBShe'];
                $this->_JSVirSig    = $cacheData['_JSVirSig'];
                $this->_AdwareSig   = $cacheData['_AdwareSig'];
                $this->_PhishingSig = $cacheData['_PhishingSig'];
                $this->_SusDB       = $cacheData['_SusDB'];
                $this->_CronDB      = $cacheData['_CronDB'];
                $this->_ExceptFlex  = $cacheData['_ExceptFlex'];
                $this->X_JSVirSig   = $cacheData['X_JSVirSig'];
                $this->X_FlexDBShe  = $cacheData['X_FlexDBShe'];
                $this->XX_FlexDBShe = $cacheData['XX_FlexDBShe'];
                $this->_DeMapper    = $cacheData['_DeMapper'];
                $this->_Mnemo       = $cacheData['_Mnemo'];
                $this->sig_db_meta_info = $cacheData['sig_db_meta_info'];
                $this->count            = $cacheData['count'];
                $this->count_susp       = $cacheData['count_susp'];
                $this->hash             = $cacheData['hash'];
                return true;
            }
        }
        @unlink($this->cache_file);
        return false;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match($black, $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
        if ($this->ownUrl === null || $this->ownUrl === '') {
            return false;
        }
        $this->ownUrl = '~^(http(s)?:)?//(www\.)?' . preg_quote($this->ownUrl, '~') . '~msi';
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}


class InternalSignatures
{
    public static $_DBShe;
    public static $X_DBShe;
    public static $_FlexDBShe;
    public static $X_FlexDBShe;
    public static $XX_FlexDBShe;
    public static $_ExceptFlex;
    public static $_AdwareSig;
    public static $_PhishingSig;
    public static $_JSVirSig;
    public static $X_JSVirSig;
    public static $_SusDB;
    public static $_CronDB;
    public static $_DeMapper;
    public static $_Mnemo;
    public static $db_meta_info;

    public static function init()
    {
        //BEGIN_SIG 12/12/2024 12:05:01
self::$_DBShe = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$X_DBShe = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_FlexDBShe = unserialize(gzinflate(/*1733951101*/base64_decode("")));
self::$X_FlexDBShe = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$XX_FlexDBShe = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_ExceptFlex = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_AdwareSig = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_PhishingSig = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_JSVirSig = unserialize(gzinflate(/*1733951101*/base64_decode("")));
self::$X_JSVirSig = unserialize(gzinflate(/*1733951101*/base64_decode("S7QysKquBQA=")));
self::$_SusDB = unserialize(gzinflate(/*1733951101*/base64_decode("pVjbcts4Ev2WzaZqpVhjS/Illh3Hk62amZepzVRltvIgOC6QBEVEJMABQMuK6X+f082LJNtKpXYfTEtAA2h0nz59KHkxPb940BfjS38xPT29ePUu6JArEc2/vL95GI9ms8f3g+sLZyNtMmuT+Rfh85uHyWj2KPyb3C602R0Sn5txPLXBI9husFjjIePYViYMbJrqWMscQysVeR3UsPZ6YbplvIJ2ts3OVptIetWdWVdlZvOEDA9jW3TD3cKoorMiHWKsG927cqRCppyqyNKaXBvVmTYbDd8d8b3fv7rUFxOKxXS6LxYvelU6u3X5jSeV/+5l9i+rF6rQtEY3a/QeO9l9/FH7natO6apvj/dddSuPvDy1jkOYqNg6GazzdOKqOXFlXVI65X1tVFB5rhxN+mbSq7hyOlBa4kzFy9opyl4uI0UYkDqRdArFJMor+lcoGoilrxglPrOKYnlOt1gOzk9ns8nxZNh5Jgv5zbKfhxt3GWRtmJMqDr5ewS/aJZVu0Uf+TjkNQxm0NTvROUZ0jsfn+6Ij8Re7bpcevXXvymdGdw6AAt0RrC1wzuHDw6lYlXRkXx9S00URWLNQdeDomGQbq3e2uU6BIMuF8sMaeSgK5WKVGAbaYbXsjNe2It+aCU2P2JpUL6om8kggPAj5us6UzENGmSl03p/VjI4oYAbHjeAKVXNGBj7WyrAnNmV3EtRy4+bhTgBPEMDJdC+85ERHMpJ8d1OlMg5wjp3W5Jt16z64VVnmWjk/2rb0I3VfWhfwqTPURTuw48cpJXK/H0atKGASBNdQFC6sI503eOV9S6fvZExfS5vruB8v1kjQst6iM+KylyhRJQu+W0dYzb2CdOEF64UKQZtFZ6G2ebf2QcmCU1gUldlykh9fbWZq1J9aOFlsBrkqvEzUsisMuLuh0aeV/mxiJ55nHM+3e/MaQug2CptIectndoRk7J2NpIntM07uZ+oCu+nYjb1NaaNxV9DHZ6dPyiZaN/xUBGubEsdnGq90nihXV3nQhBtLOZAVgGxCW/ODIpU9kRQ4zrbHdaQ1JEZLc33fo8wkuifelQxxRje9a2hq5Z9dqDMp7J1Wm+mdmL6lWjl5OaZyJ5yICdWD7akHzLtMc7ta1x2G26AQaqoeWdUifTaGkl/6TC6V6BvxJmg7/p3DP+oU4sM7cT0vcZ2bA230rVcA8CVteDx9vFTOWXfrFFUhAXgwFsNL8VqsDuZX/3pFa3zAvA2TY9p0RptOLl4dhaKEY9e0zdnJY6LVHNbDy5uDFJx0W1bhFuwVkDPfHnb+iGlt4rwCm9L+l+K66d4kZU5nu46K15m6/6/LsesVf1/RQaeP+H5zmVYmbokYVlM4yPuQDDie7GV/T3yeW2YEx2ChJ8M2t0W0wUcMwtUsg3IduYb/PYLT9x/fCCWUK6Lv678qTYW3kMWmIBr4DZ/VNQUFoCZIu7WMwFgSUDeqKHO7RgcNDFZfoafETdMBixIKEgCb+SUGJJOepGaEzSrATdk3EvjhUCmGl/uYm3OZ83cc3UNupwk+4YsJ64zZ2Y/qjIZ6fIydCcYON/KxLBUkItE1aZu8j28hc7n2mh1Kc3ln2w5XuVY3gD8NGAC0WUgv2vaLQILQWTGZphpo/bpJhPEp1KKJOYmldJJ7ErmAJUEm1m8u3G/rVCa5aTzftrABGqAPM1mCCvr0Qv0QM5jFcDdqrD+mk31RW2ALZ9os4zs8jCrnVTsCLVZKzm0sXfI0Q6Yu0dKhGWMKxn3gOwKWRZWzZo2s2WjXnZN+YN2w1ihWZ7ghOnWnTNXQClRh2KR5Op5O+s/HG3J9YSmq6w7UX3+1UUvuFLc834Bg2eA51xzXCA30CYFNTr4PwsQa+Q000KdFVUEa6RkEKDu5EUfScy/rrPMqllxKEEbW6Pp/XphapKqzhWhNSYjYJhbNDJ47ghZCQXSyLJXAoufGZfOKGI1bTdrUdG4tlbRqW4P2vurdatpJaK12o9Zop/F3RTC/0zX8EMAVYQN1tFwVNSdnKi/pBoryW0PPUbEZu/pBnqmCBW/SRmim5LOsEs3EJ7fINmOtHcOpTDPaUWj/dz6tMYpJdiUJwKLv6vQt7mc7Rt4xflLSpJzOZnuDGfFti81b4UItqAa4svTXlXJL9YRaWTec7s/P9pboTj2tV6t24Bu6v+Ei57RBpeLMPKl7CUNGTXE9fbnnKkR/k6wa2lQxGHZ9ZO2AF2oRZSGU/vri6AiucROejh/x0nD9TZeTRhkfBnc0/4K+jMlTmoRlmZV1uA81rIbUsnlT0g6TMdhxwP1/OBce3f3moD+ipHoQh0odidURKRBq9o0WER6GqJ2NqhBeDKALJlAVIO9D5u7Z48n4BAPqXgd+Wx7z+8wTbfGy5KEIsTgSAzoX3Awsr2/Z2NPICCatpXj92+8f//3h909zwZcgfULeihv2s78Qh6W5BrtDCmVGkizSaXsBlDX0WHuZ17d/fPz0p5hvAiSG2POB7tmEAP1syda0cSbe0KF+tLVUTPgk6t+EMZz00gHi9fxWfL55OH+cf7lqQ3dFe4sBL6dGRn1MRAo9ncoeneCSMRcsWzRvimdksiXH4LUYtN7D9Qf+9eVnRsZs/Di8bqeu4Mhvv7C3AhmeXpHGRLw1gi+miPHWujGtg4l0DukoZNlOTDAhpuwLMd5kq0/4N+/xR1DwB/+xKO2DXwHxpNGrs9loMsVa4AEo3R37+ZrI0ZbrGlojr/2atEINslEu1B58mN+qexXX/Chtqagpex8yV9X0A9HZyS390pJA93SiuaYf4+RqeA11084tvtFLkoH0CQraDzXEv8IM+ZWmiT+xzgkH90OS/LkulcgOJL1RNy9AR/fiJwJZIn6KF1pEIsNbqs94KdHLyQktHVy/+8c/h59U/KvOweA49BeDNzlVfwJpEw7owI9pKqJXl49/Aw==")));
self::$_CronDB = unserialize(gzinflate(/*1733951101*/base64_decode("nVdrUxpJFP0tsbK7MQR63jCkKilEQRAIAhrXtLvV83BmYF5ODwwo/ve93YMEDLKaD0xNwX31PeeevpBqWao+eFXhM60qUvUAG7bpRpgWDvrHekZOa0672XX6w9rkSuj1R0LaHowofEedg89eVQQvtcK8DEJtTfnXss3IsvGHg/FlRze0Vtbsl62Z0u6Mekd0en70LTR8szwml8cDabGwRmcsigRRZGl3lIZl6FHWOBVPlTGzlZltZVednYXuGMK5ftXQAyNs1LuLecA8lHV0N01jWkXI8VKfGLhkRgEKbIeYLgklxGxVsJXk3ZW0Y16Axkz0zXAxoamNS7aNEmRl39o9JDDDMhhqwqbhh6/VhGRLx6PpIS5BFe7UmFI7MaMwtcM0L8hJbNvyqBNFlsVrquyrKTWYib7PJOFliwxgaasNi8gzEjvPyk04msqbKz65J6JWyUPsg/J0PlYjIIRszfvcWN7bygYZq+W8laKyZQmGaWBCPXZKSRol3sYZ1DUj33SGhAReyh95GI5y+aXSXKt3NOR2DGRxi44dyZ0Z3y9m/OfKnjAWCs5GJsdP1Pfa9YZif8QHhYGoqm/nlGPDNwt+NImhLAs7IbqGmVXjWrObM09iaEovjHc7MbR2rcGRlOTfqytxAxJSN0/G51R8NqfglZtOiEFuyfw+t+Uoa2/Otx1Ee1m8rtuxodKs2b29VcWecuGdD5Pru9rV2V1AprPhpNn107Pzcx6GUUCRN2vJHFwEbuJSlDjIsBDxbwmKk+jW8wHSOOTSKXFuQM+QZc9QasZIVDRcEnV4qBIulcvc6udo74zOJVHYiygfuhWisrgfUSa1HFFZ+uVUjhsBJeexH3mpneTpaZTYc0QohUnME/CZ3tIQEsQ0JeCQRjHmdJc51NovdDe88GkaM3TUsGtKeDbgDr+JdxzRCQktkpe2Q7mBXUWcFXApgY4DDqv6GKRqeUNuIBsYqGXAR9Fxaamo7E2AB3x1iK0H8ZP8iNgxIXPsxjwKA1jjRYO7OU38ZQa4Hf74B90we+kRoc2g2CpsRMD0I17Cg73mRem7ZoydfwmNeLkHFN4ia85boHD94DNmukFksSSFOTwhEkhqvERuFNhQIS7dPOifdP2RRuaEAtbTlPsz+mgg7yiLi6ssaAqMIBZF0AXlkT3hYD9wdvOgPULkL/DhDA+nvg/v0pc/RR6KEUwDNN7hgjzDhXf4wx+Q9z0OV5nx+5NWvTYoDke13nFtcFys9Uaty9bgYlisD771io1W5+Qdfn+KC6f4I4/IqbdFkgBuhyCCfpKE+IuAw6Ioa61dSXZHgmn3YImQfGrUa2m3zu0Y55StcNDnl9vsGVMb1Jq7as+XqR9/Hdx8rTv++Lpem1lNMetkUfvypDEcCJcXV4J/wt34ZSJvXiYXJ5T/wqikbO0SWZRYcWJTAOf+PiTA4CnyQsuew5zNc7D0tSw8hUP6GCnjDJlNN2vVB/etY4FrkSpsDSSEFwUZlyRRAW6KQFJRQL4XTiE4dbmDuC7oKXZrcTKzrnqLVTd9I/zbYXnqPB93ktYd3WyLKTlO53vXaUuXitnUF1b9yO0P2z1DjmOjOc/zya9QjE6/bS6u1YQ7vEZi5l1hJmYxb7HK4f4pXDAQyEronQ9HhhXDRqCXLrC7gItsJFmT87lUGdjy5m6S2KA7HjgtVj1jSrndvm2BebWe3foQowi7a76sVv53pVP1V7RhqATfj47sHt9u+f8AqIwVBGO7nJHkkL1TN1iCQhyiOF2wLjybbO7LN4st7Q/gxH6UkijP5kdOtL4AtZ+74qpxksAuwApoYQVEsSJWKxJe5h3TOAG2OkYJnU7grAlcZGEAOzMMQbDAJS+/6jRlqxrGaZVF1vPrVVRFxIAlTj6zmvqLesBa6Rl8/UBaRQv4RqfxpUF6rSpck8nQNkVNQw6sezxA+RWI9IYBUL8scYfKmzLaDggRXHquPbGT/GT6erHaeefDntPoS/YV/88iPMdErLCrThdxSWZd0ysofmJxWVxx5XWVTbyJ53kV9kfh8T8=")));
self::$_Mnemo = unserialize(gzinflate(/*1733951101*/base64_decode("")));
self::$_DeMapper = unserialize(base64_decode("YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=="));
self::$db_meta_info = unserialize(base64_decode("YTozOntzOjEwOiJidWlsZC1kYXRlIjtzOjEwOiIxNzMzOTM3MjcwIjtzOjc6InZlcnNpb24iO3M6MTQ6IjIwMjQxMjExLTEzMjgyIjtzOjEyOiJyZWxlYXNlLXR5cGUiO3M6MTA6InByb2R1Y3Rpb24iO30="));

//END_SIG
    }
}


class CmsVersionDetector
{
    const CMS_BITRIX = 'Bitrix';
    const CMS_WORDPRESS = 'WordPress';
    const CMS_JOOMLA = 'Joomla';
    const CMS_DLE = 'Data Life Engine';
    const CMS_IPB = 'Invision Power Board';
    const CMS_WEBASYST = 'WebAsyst';
    const CMS_OSCOMMERCE = 'OsCommerce';
    const CMS_DRUPAL = 'Drupal';
    const CMS_MODX = 'MODX';
    const CMS_INSTANTCMS = 'Instant CMS';
    const CMS_PHPBB = 'PhpBB';
    const CMS_VBULLETIN = 'vBulletin';
    const CMS_SHOPSCRIPT = 'PHP ShopScript Premium';

    const CMS_VERSION_UNDEFINED = '0.0';

    private $root_path;
    private $versions;
    private $types;

    public function __construct($root_path = '.')
    {
        $this->root_path = $root_path;
        $this->versions  = [];
        $this->types     = [];

        $version = '';

        $dir_list   = $this->getDirList($root_path);
        $dir_list[] = $root_path;

        foreach ($dir_list as $dir) {
            if ($this->checkBitrix($dir, $version)) {
                $this->addCms(self::CMS_BITRIX, $version);
            }

            if ($this->checkWordpress($dir, $version)) {
                $this->addCms(self::CMS_WORDPRESS, $version);
            }

            if ($this->checkJoomla($dir, $version)) {
                $this->addCms(self::CMS_JOOMLA, $version);
            }

            if ($this->checkDle($dir, $version)) {
                $this->addCms(self::CMS_DLE, $version);
            }

            if ($this->checkIpb($dir, $version)) {
                $this->addCms(self::CMS_IPB, $version);
            }

            if ($this->checkWebAsyst($dir, $version)) {
                $this->addCms(self::CMS_WEBASYST, $version);
            }

            if ($this->checkOsCommerce($dir, $version)) {
                $this->addCms(self::CMS_OSCOMMERCE, $version);
            }

            if ($this->checkDrupal($dir, $version)) {
                $this->addCms(self::CMS_DRUPAL, $version);
            }

            if ($this->checkMODX($dir, $version)) {
                $this->addCms(self::CMS_MODX, $version);
            }

            if ($this->checkInstantCms($dir, $version)) {
                $this->addCms(self::CMS_INSTANTCMS, $version);
            }

            if ($this->checkPhpBb($dir, $version)) {
                $this->addCms(self::CMS_PHPBB, $version);
            }

            if ($this->checkVBulletin($dir, $version)) {
                $this->addCms(self::CMS_VBULLETIN, $version);
            }

            if ($this->checkPhpShopScript($dir, $version)) {
                $this->addCms(self::CMS_SHOPSCRIPT, $version);
            }
        }
    }

    function getDirList($target)
    {
        $remove      = [
            '.',
            '..'
        ];
        $directories = array_diff(scandir($target), $remove);

        $res = [];

        foreach ($directories as $value) {
            if (is_dir($target . '/' . $value)) {
                $res[] = $target . '/' . $value;
            }
        }

        return $res;
    }

    function isCms($name, $version)
    {
        for ($i = 0, $iMax = count($this->types); $i < $iMax; $i++) {
            if ((strpos($this->types[$i], $name) !== false) && (strpos($this->versions[$i], $version) !== false)) {
                return true;
            }
        }

        return false;
    }

    function getCmsList()
    {
        return $this->types;
    }

    function getCmsVersions()
    {
        return $this->versions;
    }

    function getCmsNumber()
    {
        return count($this->types);
    }

    function getCmsName($index = 0)
    {
        return $this->types[$index];
    }

    function getCmsVersion($index = 0)
    {
        return $this->versions[$index];
    }

    private function addCms($type, $version)
    {
        $this->types[]    = $type;
        $this->versions[] = $version;
    }

    private function checkBitrix($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/bitrix')) {
            $res = true;

            $tmp_content = @file_get_contents($this->root_path . '/bitrix/modules/main/classes/general/version.php');
            if (preg_match('|define\("SM_VERSION","(.+?)"\)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkWordpress($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wp-admin')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/wp-includes/version.php');
            if (preg_match('|\$wp_version\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkJoomla($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/libraries/joomla')) {
            $res = true;

            // for 1.5.x
            $tmp_content = @file_get_contents($dir . '/libraries/joomla/version.php');
            if (preg_match('|var\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|var\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

            // for 1.7.x
            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|public\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|public\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }


            // for 2.5.x and 3.x
            $tmp_content = @file_get_contents($dir . '/libraries/cms/version/version.php');

            if (preg_match('|const\s+RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|const\s+DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }
        }

        return $res;
    }

    private function checkDle($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/engine/engine.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/engine/data/config.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            $tmp_content = @file_get_contents($dir . '/install.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkIpb($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/ips_kernel')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/ips_kernel/class_xml.php');
            if (preg_match('|IP.Board\s+v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkWebAsyst($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wbs/installer')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/license.txt');
            if (preg_match('|v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkOsCommerce($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/version.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkDrupal($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/sites/all')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/CHANGELOG.txt');
            if (preg_match('|Drupal\s+([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        if (file_exists($dir . '/core/lib/Drupal.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/core/lib/Drupal.php');
            if (preg_match('|VERSION\s*=\s*\'(\d+\.\d+\.\d+)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        if (file_exists($dir . 'modules/system/system.info')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . 'modules/system/system.info');
            if (preg_match('|version\s*=\s*"\d+\.\d+"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkMODX($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/manager/assets')) {
            $res = true;

            // no way to pick up version
        }

        return $res;
    }

    private function checkInstantCms($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/plugins/p_usertab')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/index.php');
            if (preg_match('|InstantCMS\s+v([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkPhpBb($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/acp')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/config.php');
            if (preg_match('|phpBB\s+([0-9\.x]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkVBulletin($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        // removed dangerous code from here, see DEF-10390 for details

        return $res;
    }

    private function checkPhpShopScript($dir, &$version)
    {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/install/consts.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/install/consts.php');
            if (preg_match('|STRING_VERSION\',\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }
}


class CloudAssistedRequest
{
    const API_URL = 'https://api.cas.imunify360.com/api/hashes/check';

    const DELAY_SECONDS     = 60;

    private $timeout        = 60;
    private $server_id      = '';
    private $curl_handle    = null;
    private $delay          = self::DELAY_SECONDS;
    private $last_attempt   = 0;
    private $last_error     = false;

    public function __construct($server_id, $timeout = 60)
    {
        if (!defined('DEBUG_CA')) {
            define('DEBUG_CA', false);
        }

        $this->server_id    = $server_id;
        $this->timeout      = $timeout;
        $url = (!DEBUG_CA ? self::API_URL : (CA_API_URL_DEBUG . '/api/hashes/check')) . '?server_id=' . urlencode($this->server_id) . '&indexed=1';

        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
            $this->curl_handle = $ch;
        } catch (Exception $e) {
            curl_close($this->curl_handle);
            $this->curl_handle = null;
            throw new Exception($e->getMessage());
        }
    }

    public function close()
    {
        if ($this->curl_handle === null) {
            return;
        }
        curl_close($this->curl_handle);
        $this->curl_handle = null;
    }

    public function __destruct()
    {
        $this->close();
    }

    public function checkFilesByHash($list_of_hashes = [])
    {
        if (empty($list_of_hashes)) {
            return [
                [],
                [],
                [],
                [],
                [],
                [],
                'white'                 => [],
                'white_extended'        => [],
                'black'                 => [],
                'verdicts_black'        => [],
                'injection'             => [],
                'verdicts_injection'    => [],
            ];
        }

        if ($this->curl_handle === null) {
            return $list_of_hashes;
        }

        $result = $this->request($list_of_hashes);

        $white              = $result['white'] ?? [];
        $white_extended     = $result['white_extended'] ?? [];
        $black              = $result['black'] ?? [];
        $verdicts_black     = $result['verdicts_black'] ?? [];
        $injection          = $result['injection'] ?? [];
        $verdicts_injection = $result['verdicts_injection'] ?? [];

        return [
            $white,
            $white_extended,
            $black,
            $verdicts_black,
            $injection,
            $verdicts_injection,
            'white'                 => $white,
            'white_extended'        => $white_extended,
            'black'                 => $black,
            'verdicts_black'        => $verdicts_black,
            'injection'             => $injection,
            'verdicts_injection'    => $verdicts_injection,
        ];
    }

    // /////////////////////////////////////////////////////////////////////////

    private function request($list_of_hashes)
    {
        if ($this->curl_handle === null) {
            return $list_of_hashes;
        }

        if ($this->skipRequest()) {
            return $list_of_hashes;
        }
        $data = [
            'hashes' => $list_of_hashes,
        ];

        $json_hashes = json_encode($data);

        $info = [];
        $started = AibolitHelpers::currentTime();
        try {
            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $json_hashes);
            $response_data  = curl_exec($this->curl_handle);
            $info           = curl_getinfo($this->curl_handle);
            $errno          = curl_errno($this->curl_handle);
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::CAS_STAT, AibolitHelpers::currentTime() - $started);
            }
        } catch (Exception $e) {
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::CAS_STAT, AibolitHelpers::currentTime() - $started);
            }
            curl_close($this->curl_handle);
            $this->curl_handle = null;
            throw new Exception($e->getMessage());
        }

        $http_code      = $info['http_code'] ?? 0;
        if ($http_code !== 200) {
            $this->setError();
            if ($errno == 28) {
                throw new Exception('Request timeout! Return code: ' . $http_code . ' Curl error num: ' . $errno);
            }
            throw new Exception('Invalid response from the Cloud Assisted server! Return code: ' . $http_code . ' Curl error num: ' . $errno);
        }
        $this->clearError();
        $result = json_decode($response_data, true);
        if (is_null($result)) {
            throw new Exception('Invalid json format in the response!' . $response_data);
        }
        if (isset($result['error'])) {
            throw new Exception('API server returned error!' . $result['error']);
        }
        if (!isset($result['result'])) {
            throw new Exception('API server returned error! Cannot find field "result".' . $response_data);
        }

        return $result['result'];
    }

    /**
     * @return void
     */
    private function setError()
    {
        if ($this->last_error) {
            $this->delay *= 2;
        }
        $this->last_error = true;
    }

    /**
     * @return void
     */
    private function clearError()
    {
        $this->delay = self::DELAY_SECONDS;
        $this->last_error = false;
    }

    /**
     * @return bool
     */
    private function skipRequest(): bool
    {
        $retry = ((int)(AibolitHelpers::currentTime() - $this->last_attempt) > $this->delay);
        if ($this->last_error && !$retry) {
            return true;
        }
        $this->last_attempt = AibolitHelpers::currentTime();
        return false;
    }
}


/**
 * Partial mbstring implementation from symfony/polyfill-mbstring.
 *
 * It provides the mb_convert_encoding function.
 */
final class SymfonyPolyfillMbstring
{
    private static $encodingList = ['ASCII', 'UTF-8'];
    private static $internalEncoding = 'UTF-8';

    public static function mb_convert_encoding($s, $toEncoding, $fromEncoding = null)
    {
        if (!is_string($s)) {
            return false;
        }

        if (is_array($fromEncoding) || (null !== $fromEncoding && false !== strpos($fromEncoding, ','))) {
            $fromEncoding = self::mb_detect_encoding($s, $fromEncoding);
        } else {
            $fromEncoding = self::getEncoding($fromEncoding);
        }

        $toEncoding = self::getEncoding($toEncoding);

        if ('BASE64' === $fromEncoding) {
            $s = base64_decode($s);
            $fromEncoding = $toEncoding;
        }

        if ('BASE64' === $toEncoding) {
            return base64_encode($s);
        }

        if ('HTML-ENTITIES' === $toEncoding || 'HTML' === $toEncoding) {
            if ('HTML-ENTITIES' === $fromEncoding || 'HTML' === $fromEncoding) {
                $fromEncoding = 'Windows-1252';
            }
            if ('UTF-8' !== $fromEncoding) {
                $s = iconv($fromEncoding, 'UTF-8//IGNORE', $s);
            }

            return preg_replace_callback('/[\x80-\xFF]+/', [__CLASS__, 'html_encoding_callback'], $s);
        }

        if ('HTML-ENTITIES' === $fromEncoding) {
            $s = html_entity_decode($s, \ENT_COMPAT, 'UTF-8');
            $fromEncoding = 'UTF-8';
        }

        return iconv($fromEncoding, $toEncoding . '//IGNORE', $s);
    }

    private static function mb_detect_encoding($str, $encodingList = null, $strict = false)
    {
        if (null === $encodingList) {
            $encodingList = self::$encodingList;
        } else {
            if (!is_array($encodingList)) {
                $encodingList = array_map('trim', explode(',', $encodingList));
            }
            $encodingList = array_map('strtoupper', $encodingList);
        }

        foreach ($encodingList as $enc) {
            switch ($enc) {
                case 'ASCII':
                    if (!preg_match('/[\x80-\xFF]/', $str)) {
                        return $enc;
                    }
                    break;

                case 'UTF8':
                case 'UTF-8':
                    if (preg_match('//u', $str)) {
                        return 'UTF-8';
                    }
                    break;

                default:
                    if (0 === strncmp($enc, 'ISO-8859-', 9)) {
                        return $enc;
                    }
            }
        }

        return false;
    }

    private static function getEncoding($encoding)
    {
        if (null === $encoding) {
            return self::$internalEncoding;
        }

        if ('UTF-8' === $encoding) {
            return 'UTF-8';
        }

        $encoding = strtoupper($encoding);

        if ('8BIT' === $encoding || 'BINARY' === $encoding) {
            return 'CP850';
        }

        if ('UTF8' === $encoding) {
            return 'UTF-8';
        }

        return $encoding;
    }
}


/**
 * Class Report
 */
abstract class Report
{
    const MAX_ROWS = 15000;
    const AIBOLIT_MAX_NUMBER = 200;

    /**
     * Report constructor.
     * @param $mnemo
     * @param $path
     * @param $db_location
     * @param $db_meta_info_version
     * @param $report_mask
     * @param $extended_report
     * @param $rapid_account_scan
     * @param $ai_version
     * @param $ai_extra_warn
     * @param $ai_expert
     * @param $ai_smart
     * @param $root_path
     * @param $scan_all
     * @param $specific_ext
     * @param $doublecheck
     * @param $use_doublecheck
     * @param $start
     * @param $snum
     * @param $max_size
     * @param $add_prefix
     * @param $no_prefix
     * @param $small
     * @param $file
     * @param $echo
     * @param $stat
     * @param $debug
     * @phpstan-ignore-next-line
     */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small,
        $file,
        $echo,
        $stat,
        $debug
    ) {
    }

    /**
     * Generate report
     * @param $vars
     * @param $scan_time
     * @return mixed
     */
    public function generateReport($vars, $scan_time)
    {
    }

    /**
     * Write report to file and return string to stdout after write attempt
     * @return string
     * @phpstan-ignore-next-line
     */
    public function write()
    {
    }

    /**
     * Add decision-making stats to report
     * @return void
     */
    public function addDecisionStats()
    {
    }

    /**
     * Convert string to UTF-8 encoding.
     *
     * @param string $text The text to convert.
     *
     * @return string|false The text in UTF-8 encoding, or false if the conversion failed.
     */
    public static function convertToUTF8($text)
    {
        if (self::isUtf8($text)) {
            return $text;
        }

        return SymfonyPolyfillMbstring::mb_convert_encoding($text, 'UTF-8');
    }

    /**
     * Determines if the string is UTF-8 encoded.
     *
     * @param string $value String to evaluate.
     *
     * @return bool True if the string is UTF-8 encoded, false otherwise.
     */
    private static function isUtf8($value)
    {
        if (!is_string($value)) {
            return false;
        }

        $length = strlen($value);

        for ($i = 0; $i < $length; $i ++) {
            if (ord($value[ $i ]) < 0x80) {
                $n = 0;
            } elseif (( ord($value[ $i ]) & 0xE0 ) === 0xC0) {
                $n = 1;
            } elseif (( ord($value[ $i ]) & 0xF0 ) === 0xE0) {
                $n = 2;
            } elseif (( ord($value[ $i ]) & 0xF0 ) === 0xF0) {
                $n = 3;
            } else {
                return false;
            }

            for ($j = 0; $j < $n; $j ++) {
                if (( ++ $i === $length ) || ( ( ord($value[ $i ]) & 0xC0 ) !== 0x80 )) {
                    return false;
                }
            }
        }

        return true;
    }
}


/**
 * Class JSONReport report all data to JSON
 */
class JSONReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1 << 2;
    const REPORT_MASK_SUSP      = 1 << 3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;

    protected $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    protected $file;
    private $echo;
    private $stat;
    private $debug;

    /** @phpstan-ignore-next-line */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small = false,
        $file = false,
        $echo = false,
        $stat = false,
        $debug = null
    ) {
        $this->mnemo                = $mnemo;
        $this->ai_extra_warn        = $ai_extra_warn;
        $this->extended_report      = $extended_report;
        $this->rapid_account_scan   = $rapid_account_scan;
        $this->report_mask          = $report_mask;
        $this->addPrefix            = $add_prefix;
        $this->noPrefix             = $no_prefix;
        $this->small                = $small;
        $this->echo                 = $echo;
        $this->stat                 = $stat;
        $this->debug                = $debug;

        $this->raw_report = [];
        $this->raw_report['summary'] = [
            'scan_path'     => $path,
            'report_time'   => time(),
            'ai_version'    => $ai_version,
            'db_location'   => $db_location,
            'db_version'    => $db_meta_info_version,
        ];

        $this->file = $file;

        if ($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $tmp = clone $vars;
        if (!$this->small) {
            $tmp->criticalPHP   = array_slice($tmp->criticalPHP, 0, self::MAX_ROWS);
            $tmp->criticalJS    = array_slice($tmp->criticalJS, 0, self::MAX_ROWS);
            $tmp->notRead       = array_slice($tmp->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->symLinks      = array_slice($tmp->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->warningPHP    = array_slice($tmp->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->suspiciousExt = array_slice($tmp->suspiciousExt, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->suspiciousIgn = array_slice($tmp->suspiciousIgn, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->bigFiles      = array_slice($tmp->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->doorway       = array_slice($tmp->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->generateJSONTables($tmp);
        }

        $this->generateSummary($tmp, $scan_time);
    }

    public function addDecisionStats()
    {
        if (!defined('CLS_DECISION_MAKING_STATS')) {
            return;
        }
        $this->raw_report['summary']['decision_stats'] = (object)DecisionMakingStats::getReportData();
    }

    public function addErrors()
    {
        $this->raw_report['summary']['errors'] = Errors::get();
    }

    private function generateSummary($vars, $scan_time)
    {
        $summary_counters                       = [];
        $summary_counters['redirect']           = 0; //count($vars->redirect);
        $summary_counters['critical_php']       = count($vars->criticalPHP);
        $summary_counters['critical_js']        = count($vars->criticalJS);
        $summary_counters['cloudhash']          = count($vars->blackFiles);
        $summary_counters['phishing']           = count($vars->phishing);
        $summary_counters['unix_exec']          = 0; // count($g_UnixExec);
        $summary_counters['iframes']            = 0; // count($g_Iframer);
        $summary_counters['not_read']           = count($vars->notRead);
        $summary_counters['base64']             = 0; // count($g_Base64);
        $summary_counters['heuristics']         = 0; // count($g_HeuristicDetected);
        $summary_counters['symlinks']           = count($vars->symLinks);
        $summary_counters['big_files_skipped']  = count($vars->bigFiles);
        $summary_counters['suspicious']         = count($vars->warningPHP);
        $summary_counters['suspicious_ext']     = count($vars->suspiciousExt);
        $summary_counters['suspicious_ign']     = count($vars->suspiciousIgn);

        $this->raw_report['summary']['counters']    = $summary_counters;
        $this->raw_report['summary']['total_files'] = $vars->foundTotalFiles;
        $this->raw_report['summary']['scan_time']   = $scan_time;
        $this->raw_report['summary']['mem_peak']    = memory_get_peak_usage(true);
        $this->raw_report['summary']['php_ver']     = PHP_VERSION;
        $this->raw_report['summary']['php_handler'] = PHP_BINARY;

        if (defined('CLS_PERFORMANCE_STATS')) {
            foreach (PerformanceStats::getPerformanceTypes() as $type) {
                $this->raw_report['summary'][$type] = round(PerformanceStats::getPerformanceItem($type), 4);
            }
        }

        if ($this->debug->getDebugPerformance()) {
            $this->raw_report['summary']['debug_performance']['slow_files'] = $this->debug->getSlowFiles(true);
            $this->raw_report['summary']['debug_performance']['deobfuscator'] = $this->debug->getDeobfuscatorData();
        }

        if (isset($vars->users)) {
            $this->raw_report['summary']['users'] = $vars->users->getList();
        }

        if ($this->extended_report && $this->rapid_account_scan) {
            $this->raw_report['summary']['counters']['rescan_count']    = $vars->rescanCount;
            $this->raw_report['summary']['counters']['rescan_rxgood']   = $vars->rescanRxGood;
        }

        if (isset($vars->options['detached']) && defined('CLS_PROC_STATS')) {
            $this->addProcStatsSummary();
        }

        $this->addErrors();
    }

    private function generateJSONTables($vars)
    {
        if (count($vars->criticalPHP) > 0) {
            $this->raw_report['php_malware'] = $this->getRawJson($vars->criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->raw_report['cloudhash'] = $this->getRawJson($vars->blackFiles, $vars, null, $vars->blackFilesSig, true);
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report['js_malware'] = $this->getRawJson($vars->criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report['not_read'] = $this->getSimpleList($vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report['phishing'] = $this->getRawJson($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report['sym_links'] = $this->getSimpleList($vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->raw_report['adware'] = $this->getRawJson($vars->adwareList, $vars, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report['big_files'] = $this->getSimpleList($vars->bigFiles);
        }
        if ((count($vars->doorway) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_DOORWAYS)) {
            $this->raw_report['doorway'] = $this->getSimpleList($vars->doorway);
        }
        if (count($vars->CMS) > 0) {
            $this->raw_report['cms'] = $this->getSimpleList($vars->CMS);
        }

        if (count($vars->suspiciousExt) > 0) {
            $this->raw_report['extended-suspicious'] = $this->getRawJson($vars->suspiciousExt, $vars, $vars->suspiciousExtFragment, $vars->suspiciousExtSig);
        }

        if (count($vars->suspiciousIgn) > 0) {
            $this->raw_report['ignored-suspicious'] = $this->getRawJson($vars->suspiciousIgn, $vars, null, $vars->suspiciousIgnSig);
        }

        if ($this->ai_extra_warn) {
            if ((count($vars->warningPHP) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_FULL)) {
                $this->raw_report['suspicious'] = $this->getRawJson($vars->warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public static function checkMask($mask, $need)
    {
        return (($mask & $need) == $need);
    }

    public function write()
    {
        $ret = '';
        $res = @json_encode($this->raw_report);
        if ($res === false) {
            fwrite(STDERR, 'Warning: [JSONReport] ' . json_last_error_msg() . PHP_EOL);
            $res = @json_encode($this->raw_report, JSON_INVALID_UTF8_SUBSTITUTE);
        }
        if ($this->file !== '.' && $l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        if ($this->echo) {
            echo $res;
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    private function getRawJsonVuln($par_List, $vars)
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i]['ndx'];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res['fn']      = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res['sig']     = $par_List[$i]['id'];
            $res['ct']      = $vars->structure['c'][$l_Pos];
            $res['mt']      = $vars->structure['m'][$l_Pos];
            $res['et']      = $vars->structure['e'][$l_Pos];
            $res['sz']      = $vars->structure['s'][$l_Pos];
            $res['sigid']   = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);

            $results[] = $res;
        }

        return $results;
    }

    private function getRawJson($par_List, $vars, $par_Details = null, $par_SigId = null, $black = false)
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                if (is_array($par_SigId[$i])) {
                    $l_SigId = $black ? crc32($vars->structure['n'][$par_List[$i]]) : key($par_SigId[$i]);
                    $l_SigName = $black ? $par_SigId[$i][key($par_SigId[$i])] : $par_SigId[$i][$l_SigId];
                } else {
                    $l_SigId = 'id_' . $par_SigId[$i];
                }
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res['fn'] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            if ($par_Details != null) {
                $res['sig'] = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $res['sig'] = preg_replace('/[^\x20-\x7F]/', '.', $res['sig']);
                $res['sig'] = preg_replace('/__AI_MARKER__/', ' @!!!>', $res['sig']);
                $res['sig'] = str_replace($l_Src, $l_Dst, $res['sig']);
                $res['sig'] = self::convertToUTF8($res['sig']);
            }

            if ($black) {
                $res['sig'] = '';
            }

            $res['ct']    = $vars->structure['c'][$l_Pos];
            $res['mt']    = $vars->structure['m'][$l_Pos];
            $res['sz']    = $vars->structure['s'][$l_Pos];
            $res['et']    = $vars->structure['e'][$l_Pos];
            $res['hash']  = $black ? $vars->structure['sha256'][$l_Pos] : $vars->structure['crc'][$l_Pos];
            $res['sigid'] = $l_SigId;

            if (!$black) {
                $res['sha256'] = $vars->structure['sha256'][$l_Pos] ?? '';
            }

            if (isset($l_SigName)) {
                $res['sn'] = $l_SigName;
            } elseif (isset($par_SigId) && !is_array($par_SigId[$i]) && isset($this->mnemo[$par_SigId[$i]])) {
                $res['sn'] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res['sn'] = '';
            }
            if ($this->stat) {
                $res['uid']    = $vars->structure['u'][$l_Pos];
                $res['gid']    = $vars->structure['g'][$l_Pos];
                $res['mode']   = $vars->structure['p'][$l_Pos];
            }
            if (EMU_LOG_OFFSETS) {
                $res['emu_log'] = $vars->structure['offset'][$l_Pos];
            }

            $results[] = $res;
        }

        return $results;
    }

    private function getSimpleList($list)
    {
        if (!ENCODE_FILENAMES_WITH_BASE64) {
            return $list;
        }
        foreach ($list as &$item) {
            $item = base64_encode($item);
        }
        unset($item);
        return $list;
    }

    private function addProcStatsSummary()
    {
        $procStats = ProcStats::collectAll();
        $tick = IniConfig::get('AT_CLKTCK');

        $this->raw_report['summary']['cpu_user'] = $procStats[ProcStats::STAT][13] / $tick;
        $this->raw_report['summary']['cpu_system'] = $procStats[ProcStats::STAT][14] / $tick;
        $this->raw_report['summary']['rchar'] = $procStats[ProcStats::IO]['rchar'];
        $this->raw_report['summary']['wchar'] = $procStats[ProcStats::IO]['wchar'];
        $this->raw_report['summary']['syscr'] = $procStats[ProcStats::IO]['syscr'];
        $this->raw_report['summary']['syscw'] = $procStats[ProcStats::IO]['syscw'];
        $this->raw_report['summary']['read_bytes'] = $procStats[ProcStats::IO]['read_bytes'];
        $this->raw_report['summary']['write_bytes'] = $procStats[ProcStats::IO]['write_bytes'];
        $this->raw_report['summary']['cancelled_write_bytes'] = $procStats[ProcStats::IO]['cancelled_write_bytes'];
        if ($this->extended_report) {
            $this->raw_report['summary']['AT_CLKTCK'] = $tick;
        }
    }
}


/**
 * Class JSONReport report all data to JSON
 */
class PHPReport extends JSONReport
{
    public function write()
    {
        $ret = '';
        $res = @serialize($this->raw_report);
        if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
}


/**
 * Class PlainReport report to text file
 */
class PlainReport extends Report
{
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $raw_report;

    /** @phpstan-ignore-next-line */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small = false,
        $file = false,
        $echo = false,
        $stat = false
    ) {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;

        if ($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        $this->raw_report = '';
        if (function_exists("gethostname") && is_callable("gethostname")) {
            $l_HostName = gethostname();
        } else {
            $l_HostName = '???';
        }

        $this->raw_report = "# Malware list detected by AI-Bolit (https://revisium.com/ai/) on " . date("d/m/Y H:i:s", time()) . " " . $l_HostName . "\n\n";
    }

    public function generateReport($vars, $scan_time = false)
    {
        if (count($vars->criticalPHP) > 0) {
            $this->raw_report .= '[SERVER MALWARE]' . "\n" . $this->printPlainList(array_slice($vars->criticalPHP, 0, self::MAX_ROWS), $vars, $vars->criticalPHPFragment) . "\n";
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report .= '[CLIENT MALWARE / JS]' . "\n" . $this->printPlainList(array_slice($vars->criticalJS, 0, self::MAX_ROWS), $vars, $vars->criticalJSFragment) . "\n";
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report .= '[SCAN ERROR / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '[PHISHING]' . "\n" . $this->printPlainList($vars->phishing, $vars, $vars->phishingFragment) . "\n";
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report .= '[SYMLINKS]' . "\n" . $this->printPlainList(array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->raw_report .= '[SUSPICIOUS]' . "\n" . $this->printPlainList(array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER), $vars, $vars->warningPHPFragment) . "\n";
            }
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '[ADWARE]' . "\n" . $this->printPlainList($vars->adwareList, $vars, $vars->adwareListFragment) . "\n";
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report .= '[BIG FILES / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        $this->raw_report = preg_replace('|__AI_MARKER__|smi', ' %> ', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $this->raw_report);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function printPlainList($par_List, $vars, $par_Details = null)
    {

        $l_Result = "";

        $l_Src = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;'
        ];
        $l_Dst = [
            '"',
            '<',
            '>',
            '&',
            '\''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i];

            if ($par_Details != null) {
                $l_Body = preg_replace('|(L\d+).+__AI_MARKER__|smi', '$1: ...', $par_Details[$i]);
                $l_Body = preg_replace('/[^\x20-\x7F]/', '.', $l_Body);
                $l_Body = str_replace($l_Src, $l_Dst, $l_Body);
            } else {
                $l_Body = '';
            }

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]) . "\t\t\t" . $l_Body . "\n";
            } else {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]) . "\n";
            }
        }
        return $l_Result;
    }

    private function replacePathArray($par_Arr)
    {
        array_walk($par_Arr, function (&$n) {
            $n = $this->addPrefix . str_replace($this->noPrefix, '', $n);
        });
        return $par_Arr;
    }
}


/**
 * Class CSVReport report table data to CSV
 */
class CSVReport extends Report
{
    const CRITICAL_PHP   = 'p';
    const CRITICAL_JS    = 'j';
    const SUSPICIOUS     = 's';
    const SUSPICIOUS_EXT = 'es';
    const SUSPICIOUS_IGN = 'is';
    const PHISHING       = 'h';
    const VULNERABLE     = 'v';
    const CLOUDHASH      = 'c';

    const BIG_FILES      = 'b';
    const NOT_READ       = 'n';
    const DOORWAY        = 'd';
    const SYMLINKS       = 'm';
    const ADWARE         = 'a';
    const CMS            = 'e';

    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $stat;

	/** @phpstan-ignore-next-line */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small = false,
        $file = false,
        $echo = false,
        $stat = false
    ) {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;
        $this->stat = $stat;

        if ($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time = false)
    {
        if (count($vars->criticalPHP) > 0) {
            $this->writeRawCSV($vars->criticalPHP, $vars, self::CRITICAL_PHP, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->writeRawCSV($vars->blackFiles, $vars, self::CLOUDHASH, null, $vars->blackFilesSig, true);
        }

        if (count($vars->criticalJS) > 0) {
            $this->writeRawCSV($vars->criticalJS, $vars, self::CRITICAL_JS, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->writeListCSV(self::NOT_READ, $vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->writeRawCSV($vars->phishing, $vars, self::PHISHING, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->writeListCSV(self::SYMLINKS, $vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->writeRawCSV($vars->adwareList, $vars, self::ADWARE, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->writeListCSV(self::BIG_FILES, $vars->bigFiles);
        }
        if (count($vars->doorway) > 0) {
            $this->writeListCSV(self::DOORWAY, $vars->doorway);
        }
        if (count($vars->CMS) > 0) {
            $this->writeListCSV(self::CMS, $vars->CMS);
        }

        if (count($vars->suspiciousExt) > 0) {
            $this->writeRawCSV($vars->suspiciousExt, $vars, self::SUSPICIOUS_EXT, $vars->suspiciousExtFragment, $vars->suspiciousExtSig);
        }

        if (count($vars->suspiciousIgn) > 0) {
            $this->writeRawCSV($vars->suspiciousIgn, $vars, self::SUSPICIOUS_IGN, null, $vars->suspiciousIgnSig);
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->writeRawCSV($vars->warningPHP, $vars, self::SUSPICIOUS, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->file) {
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    private function writeListCSV($section, $list)
    {
        if (count($list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($list); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($list[$i]) : $list[$i];
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';

            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }

            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawCSV($par_List, $vars, $section = '', $par_Details = null, $par_SigId = null, $black = false)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.',
            '\\'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php ',
            ''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            if ($par_SigId != null) {
                if (is_array($par_SigId[$i])) {
                    $l_SigId = $black ? crc32($vars->structure['n'][$par_List[$i]]) : key($par_SigId[$i]);
                    $l_SigName = $black ? $par_SigId[$i][key($par_SigId[$i])] : $par_SigId[$i][$l_SigId];
                } else {
                    $l_SigId = 'id_' . $par_SigId[$i];
                }
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            $sig = '';
            if ($par_Details != null) {
                $sig = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $sig = preg_replace('/[^\x20-\x7F]/', '.', $sig);
                $sig = preg_replace('/__AI_MARKER__/', ' @!!!>', $sig);
                $sig = str_replace($l_Src, $l_Dst, $sig);
                $sig = self::convertToUTF8($sig);
            }

            $res[]    = $sig;
            $res[]    = $vars->structure['c'][$l_Pos];
            $res[]    = $vars->structure['m'][$l_Pos];
            $res[]    = $vars->structure['s'][$l_Pos];
            $res[]    = $vars->structure['e'][$l_Pos];
            $res[]    = $l_SigId;
            $res[]    = $black ? $vars->structure['sha256'][$l_Pos] : $vars->structure['crc'][$l_Pos];

            if (isset($l_SigName)) {
                $res[] = $l_SigName;
            } elseif (isset($par_SigId) && !is_array($par_SigId[$i]) && isset($this->mnemo[$par_SigId[$i]])) {
                $res[] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res[] = '';
            }

            $res[] = ($black ? '' : ($vars->structure['sha256'][$l_Pos] ?? ''));

            if ($this->stat) {
                $res[] = $vars->structure['u'][$l_Pos];
                $res[] = $vars->structure['g'][$l_Pos];
                $res[] = $vars->structure['p'][$l_Pos];
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }
}


/**
 * Class DoublecheckReport generate doublecheck file
 */
class DoublecheckReport extends Report
{
    private $raw_report;
    private $skip = false;
    private $file = false;
    private $res = '';

    /** @phpstan-ignore-next-line */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small = false,
        $file = false,
        $echo = false,
        $stat = false
    ) {
        $this->raw_report = [];

        $this->file = $file;

        if (file_exists($this->file)) {
            $this->skip = true;
            $this->res .= $this->file . ' already exists.' . PHP_EOL;
        } elseif ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, '<?php die("Forbidden"); ?>' . "\n");
            fclose($l_FH);
        } else {
            $this->skip = true;
            $this->res .= 'Error! Cannot create ' . $this->file . PHP_EOL;
        }
    }

    public function generateReport($vars, $scan_time)
    {
        if ($this->skip) {
            return;
        }

        $l_CurrPath = __DIR__;

        if (!isset($vars->criticalPHP)) {
            $vars->criticalPHP = [];
        }
        if (!isset($vars->criticalJS)) {
            $vars->criticalJS = [];
        }
        if (!isset($vars->phishing)) {
            $vars->phishing = [];
        }
        if (!isset($vars->adwareList)) {
            $vars->adwareList = [];
        }

        $this->raw_report = array_merge($vars->criticalPHP, $vars->criticalJS, $vars->phishing, $vars->adwareList);
        $this->raw_report = array_values(array_unique($this->raw_report));

        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            $this->raw_report[$i] = str_replace($l_CurrPath, '.', $vars->structure['n'][$this->raw_report[$i]]);
        }

        $this->raw_report = array_values(array_unique($this->raw_report));
        if (count($this->raw_report) === 0) {
            $this->skip = true;
            unlink($this->file . '.tmp');
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->skip) {
            return $this->res;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            fputs($fh, $this->raw_report[$i] . "\n");
        }
        fclose($fh);
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }
}


/**
 * Class HTMLReport report all data to HTML
 */
class HTMLReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1 << 2;
    const REPORT_MASK_SUSP      = 1 << 3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;

    private $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    private $file;
    private $echo;
    private $template;
    private $max_size;
    private $start;
    private $doublecheck;

    /** @phpstan-ignore-next-line */
    public function __construct(
        $mnemo,
        $path,
        $db_location,
        $db_meta_info_version,
        $report_mask,
        $extended_report,
        $rapid_account_scan,
        $ai_version,
        $ai_extra_warn,
        $ai_expert,
        $ai_smart,
        $root_path,
        $scan_all,
        $specific_ext,
        $doublecheck,
        $use_doublecheck,
        $start,
        $snum,
        $max_size,
        $add_prefix,
        $no_prefix,
        $small = false,
        $file = false,
        $echo = false,
        $stat = false
    ) {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->report_mask = $report_mask;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->small = $small;
        $this->echo = $echo;
        $this->max_size = $max_size;
        $this->start = $start;
        $this->doublecheck = $doublecheck;

        $this->raw_report = '';
        $this->file = $file;

        if ($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        if (file_exists(dirname(__FILE__) . '/ai-design.html')) {
            $this->template = Template::create(file_get_contents(dirname(__FILE__) . '/ai-design.html'));
        } else {
            $this->template = Template::create(TemplateList::MAIN_PAGE);
            $this->template->set('msg1', Translate::getStr('data_table.length_menu'));
            $this->template->set('msg2', Translate::getStr('data_table.zero_records'));
            $this->template->set('msg3', Translate::getStr('data_table.info'));
            $this->template->set('msg4', Translate::getStr('data_table.info_empty'));
            $this->template->set('msg5', Translate::getStr('data_table.info_filtered'));
            $this->template->set('msg6', Translate::getStr('data_table.search'));
            $this->template->set('msg7', Translate::getStr('data_table.paginate.first'));
            $this->template->set('msg8', Translate::getStr('data_table.paginate.previous'));
            $this->template->set('msg9', Translate::getStr('data_table.paginate.next'));
            $this->template->set('msg10', Translate::getStr('data_table.paginate.last'));
            $this->template->set('msg11', Translate::getStr('data_table.aria.sort_ascending'));
            $this->template->set('msg12', Translate::getStr('data_table.aria.sort_descending'));
        }

        $this->template->set('MAIN_TITLE', Translate::getStr('header.scan_report_title'));

        $this->template->set('MODE', $ai_expert . '/' . $ai_smart);

        if (AI_EXPERT == 0) {
            $this->raw_report .= '<div class="rep">' . Translate::getStr('scan.offer_modes_after_express') . '</div>';
        }

        $this->template->set('HEAD_TITLE', Translate::getStr('report_for') . $this->addPrefix . str_replace($this->noPrefix, '', $root_path));

        $this->template->set('SERVICE_INFO', htmlspecialchars("[" . @ini_get('mbstring.internal_encoding') . "][" . $snum . "]"));

        $this->template->set('PATH_URL', (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $this->addPrefix . str_replace($this->noPrefix, '', $this->addSlash($root_path))));

        $this->template->set('VERSION', $ai_version);

        $this->template->set('WARN_QUICK', (($scan_all || $specific_ext) ? '' : Translate::getStr('notice.scan_express', [$doublecheck])));

        if ($use_doublecheck) {
            if (Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) != '') {
                $this->raw_report .= '<div class="rep">' . Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) . '</div>';
            }
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $l_ShowOffer = false;

        $this->template->set('SCANNED', Translate::getStr('info.files_checked', [$vars->totalFolder, $vars->totalFiles]));

        $l_Summary = '<div class="title">' . Translate::getStr('report.summary') . '</div>';
        $l_Summary .= '<table cellspacing=0 border=0>';

        if (count($vars->criticalPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('malware'), count($vars->criticalPHP), "crit");
        }

        if (count($vars->criticalJS) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('js_virused'), count($vars->criticalJS), "crit");
        }

        if (count($vars->phishing) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('phishing_pages'), count($vars->phishing), "crit");
        }

        if (count($vars->notRead) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('error.read_file'), count($vars->notRead), "crit");
        }

        if (count($vars->warningPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('suspicious'), count($vars->warningPHP), "warn");
        }

        if (count($vars->bigFiles) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('skipped_large_file'), count($vars->bigFiles), "warn");
        }

        if (count($vars->symLinks) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('link.symbolic'), count($vars->symLinks), "warn");
        }

        $l_Summary .= "</table>";

        $l_ArraySummary                      = [];
        $l_ArraySummary["redirect"]          = 0;
        $l_ArraySummary["critical_php"]      = count($vars->criticalPHP);
        $l_ArraySummary["critical_js"]       = count($vars->criticalJS);
        $l_ArraySummary["phishing"]          = count($vars->phishing);
        $l_ArraySummary["unix_exec"]         = 0; // count($g_UnixExec);
        $l_ArraySummary["iframes"]           = 0; // count($g_Iframer);
        $l_ArraySummary["not_read"]          = count($vars->notRead);
        $l_ArraySummary["base64"]            = 0; // count($g_Base64);
        $l_ArraySummary["heuristics"]        = 0; // count($g_HeuristicDetected);
        $l_ArraySummary["symlinks"]          = count($vars->symLinks);
        $l_ArraySummary["big_files_skipped"] = count($vars->bigFiles);
        $l_ArraySummary["suspicious"]        = count($vars->warningPHP);

        if (function_exists('json_encode')) {
            $l_Summary .= "<!--[json]" . json_encode($l_ArraySummary) . "[/json]-->";
        }

        $l_Summary .= "<div class=details style=\"margin: 20px 20px 20px 0\">" . Translate::getStr('notice.files_may_not_malicious') . "</div>\n";

        $this->template->set('SUMMARY', $l_Summary);

        $this->raw_report .= Translate::getStr('critical.title');

        if (count($vars->criticalPHP) > 0) {
            $criticalPHP              = array_slice($vars->criticalPHP, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.shell_scripts') . ' (' . count($criticalPHP) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig, 'table_crit');
            $this->raw_report .= '</div>' . PHP_EOL;
            $l_ShowOffer = true;
        } else {
            $this->raw_report .= '<div class="ok"><b>' . Translate::getStr('not_detected.shell_scripts') . '</b></div>';
        }

        if (count($vars->criticalJS) > 0) {
            $criticalJS              = array_slice($vars->criticalJS, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.javascript') . ' (' . count($criticalJS) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (count($vars->notRead) > 0) {
            $notRead               = array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('warning.reading_error') . ' (' . count($notRead) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($notRead, $vars);
            $this->raw_report .= "</div><div class=\"spacer\"></div>" . PHP_EOL;
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.phishing_pages') . ' (' . count($vars->phishing) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (isset($vars->redirect) && count($vars->redirect) > 0) {
            $l_ShowOffer             = true;
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('suspicion.htaccess') . ' (' . count($vars->redirect) . ')</div><div class="crit">';
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->symLinks) > 0) {
            $symLinks               = array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('symlinks') . ' (' . count($symLinks) . ')</div><div class="crit">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $symLinks), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div><div class=\"spacer\"></div>";
        }

        if ($this->ai_extra_warn) {
            $l_WarningsNum = count($vars->warningPHP);
            if ($l_WarningsNum > 0) {
                $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
            }
            if ($l_WarningsNum > 0) {
                $warningPHP              = array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.code') . ' (' . count($warningPHP) . ')</div><div class="warn">';
                $this->raw_report .= $this->printList($warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig, 'table_warn');
                $this->raw_report .= '</div>' . PHP_EOL;
            }
        }

        $l_WarningsNum = count($vars->bigFiles) + count($vars->adwareList) + count($vars->doorway) + count($vars->warningPHP) + count($vars->skippedFolders);

        if ($l_WarningsNum > 0) {
            $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('detected.bad_links') . '</div><div class="warn">';
            $this->raw_report .= $this->printList($vars->adwareList, $vars, $vars->adwareListFragment);
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->bigFiles) > 0) {
            $bigFiles               = array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('skipped.large_file', [$this->max_size]) . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $bigFiles), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>";
        }

        if (count($vars->doorway) > 0) {
            $doorway              = array_slice($vars->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.doorway') . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $doorway), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->CMS) > 0) {
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('founded_CMS') . "<br/>";
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $vars->CMS), $this->addPrefix, $this->noPrefix));
            $this->raw_report .= "</div>";
        }

        if (function_exists('memory_get_peak_usage')) {
            $this->template->set('MEMORY', Translate::getStr('memory_used') . AibolitHelpers::bytes2Human(memory_get_peak_usage()));
        }

        if ($l_ShowOffer) {
            $this->template->set('OFFER', Translate::getStr('offer.when_has_critical'));
        } else {
            $this->template->set('OFFER', Translate::getStr('offer.when_no_critical'));
        }

        $this->template->set('OFFER_OUR_PRODUCTS', Translate::getStr('offer_our_products'));

        $this->template->set('CAUTION', Translate::getStr('сaution.aibolit_file'));

        $this->template->set('CREDITS', Translate::getStr('info.non_commercial_use'));

        $this->template->set('FOOTER', Translate::getStr('footer'));

        $this->template->set('STAT', Translate::getStr('info.time_elapsed', [$scan_time, date('d-m-Y в H:i:s', floor($this->start)), date('d-m-Y в H:i:s')]));

////////////////////////////////////////////////////////////////////////////
        $this->template->set('MAIN_CONTENT', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        $res = $this->template->render();
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $res);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////

    private function makeSummary($par_Str, $par_Number, $par_Style)
    {
        return '<tr><td class="' . $par_Style . '" width=400>' . $par_Str . '</td><td class="' . $par_Style . '">' . $par_Number . '</td></tr>';
    }

    private function printList($par_List, $vars, $par_Details = null, $par_SigId = null, $par_TableName = null)
    {

        $i = 0;

        if ($par_TableName == null) {
            $par_TableName = 'table_' . rand(1000000, 9000000);
        }

        $l_Result = '';
        $l_Result .= "<div class=\"flist\"><table cellspacing=1 cellpadding=4 border=0 id=\"" . $par_TableName . "\">";

        $l_Result .= "<thead><tr class=\"tbgh" . ($i % 2) . "\">";
        $l_Result .= "<th width=70%>" . Translate::getStr('path') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('property_change') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('content_change') . "</th>";
        $l_Result .= "<th width=90>" . Translate::getStr('size') . "</th>";
        $l_Result .= "<th width=0 class=\"hidd\">CRC32</th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";

        $l_Result .= "</tr></thead><tbody>";

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_z' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $l_Creat = $vars->structure['c'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['c'][$l_Pos]) : '-';
            $l_Modif = $vars->structure['m'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['m'][$l_Pos]) : '-';
            $l_Size  = $vars->structure['s'][$l_Pos] > 0 ? AibolitHelpers::bytes2Human($vars->structure['s'][$l_Pos]) : '-';

            if ($par_Details != null) {
                $l_WithMarker = preg_replace('|__AI_MARKER__|smi', '<span class="marker">&nbsp;</span>', $par_Details[$i]);

                $l_Body = '<div class="details">';

                if ($par_SigId != null) {
                    $l_Body .= '<a href="#" onclick="return hsig(\'' . $l_SigId . '\')">[x]</a> ';
                }

                $l_Body .= $l_WithMarker . '</div>';
            } else {
                $l_Body = '';
            }

            $l_Result .= '<tr class="tbg' . ($i % 2) . '" o="' . $l_SigId . '">';

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]), $this->addPrefix, $this->noPrefix) . '</a></div>' . $l_Body . '</td>';
            } else {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]), $this->addPrefix, $this->noPrefix) . '</a></div></td>';
            }

            $l_Result .= '<td align=center><div class="ctd">' . $l_Creat . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Modif . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Size . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['crc'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . 'x' . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['m'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $l_SigId . '</div></td>';
            $l_Result .= '</tr>';
        }

        $l_Result .= "</tbody></table></div><div class=clear style=\"margin: 20px 0 0 0\"></div>";

        return $l_Result;
    }

    private function addSlash($dir)
    {
        return rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    }
}


class CloudAssistedFiles
{
    private $white = [];
    private $white_extended = [];
    private $black = [];
    private $injection = [];

    /**
     * @param CloudAssistedRequest $car
     * @param \FileInfo[] $file_list
     * @param \Variables $vars
     * @throws Exception
     */
    public function __construct(CloudAssistedRequest $car, $file_list, $vars)
    {
        $list_of_hash       = [];
        $list_of_filepath   = [];
        foreach ($file_list as $file) {
            if (!$file->is_readable() || $file->is_dir() || $file->isCron()) {
                continue;
            }

            try {
                $list_of_hash[]     = $file->getSha256();
                $list_of_filepath[] = $file->getFilename();
            } catch (Exception $e) {
            }
        }

        if ($vars->hashtable !== null) {
            $vars->hashtable->add($list_of_filepath, $list_of_hash);
        }
        try {
            list(
                $white_raw,
                $white_extended_raw,
                $black_raw,
                $verdicts_black_raw,
                $injection_raw,
                $verdicts_injection_raw
            ) = $car->checkFilesByHash($list_of_hash);
        } catch (Exception $e) {
            throw $e;
        }

        $this->white = $this->getListOfFile($white_raw, $list_of_hash, $file_list, $list_of_filepath);
        $this->white_extended = $this->getListOfFile($white_extended_raw, $list_of_hash, $file_list, $list_of_filepath);
        $this->black = $this->getListOfFile($black_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts_black_raw);
        $this->injection = $this->getListOfFile($injection_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts_injection_raw);

        unset(
            $white_raw,
            $white_extended_raw,
            $black_raw,
            $verdicts_black_raw,
            $injection_raw,
            $verdicts_injection_raw,
            $list_of_hash,
            $list_of_filepath,
            $file_list
        );
    }

    public function getWhiteList()
    {
        return $this->white;
    }

    public function getWhiteExtendedList()
    {
        return $this->white_extended;
    }

    public function getBlackList()
    {
        return $this->black;
    }
    public function getInjectionList()
    {
        return $this->injection;
    }

    // =========================================================================

    private function getListOfFile($data_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts = [])
    {
        $result = [];
        foreach ($data_raw as $index => $hash_index) {
            if (!isset($list_of_hash[$hash_index])) {
                continue;
            }
            $hash_result = [
                'ts'    => time(),
                'fi'    => $file_list[$list_of_filepath[$hash_index]],
            ];
            if ($verdicts) {
                if (!isset($verdicts[$index])) {
                    throw new Exception('Wrong CloudAssisted format. List of verdicts has structure different from main list.');
                }
                $hash_result['sn'] = $verdicts[$index];
            }
            $result[$list_of_filepath[$hash_index]] = $hash_result;
        }
        return $result;
    }
}


class DetachedMode
{
    protected $workdir;
    protected $scan_id;
    protected $pid_file;
    protected $report_file;
    protected $csvreport_file;
    protected $done_file;
    protected $vars;
    protected $start_time;
    protected $json_report;
    protected $sock_file;
    protected $reports;
    protected $finder;
    protected $debug;

    public function __construct($finder, $debug, $scan_id, $vars, $start_time, $json_report, $basedir = '/var/imunify360/aibolit/run', $sock_file = '/var/run/defence360agent/generic_sensor.sock.2')
    {
        $this->scan_id  = $scan_id;
        $this->vars     = $vars;
        $this->setWorkDir($basedir, $scan_id);
        $this->pid_file     = $this->workdir . '/pid';
        $this->report_file  = $this->workdir . '/report.json';
        $this->csvreport_file  = $this->workdir . '/report.csv';
        $this->done_file    = $this->workdir . '/done';
        $this->start_time   = $start_time;
        $this->json_report  = $json_report;
        $this->setSocketFile($sock_file);
        $this->savePid();
        $this->checkWorkDir($this->workdir);
        if (isset($vars->options['json_report']) && !empty($vars->options['json_report']) && $vars->options['json_report'] !== '.') {
            $this->report_file  = $vars->options['json_report'];
        }
        if (isset($vars->options['csv_report']) && !empty($vars->options['csv_report']) && $vars->options['csv_report'] !== '.') {
            $this->csvreport_file  = $vars->options['csv_report'];
            $this->reports[CSVReport::class] = $this->csvreport_file;
        }
        $this->reports[JSONReport::class] = $this->report_file;
        $this->finder = $finder;
        $this->debug = $debug;
    }

    public function scanListing($listing, $use_base64)
    {
        $this->checkList($listing);
        $this->scanFilesFromListingFile($listing, $use_base64);
        $this->writeReport();
        $this->complete();
    }

    public function scanDirectories($dir)
    {
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $debug = new DebugMode();
        $scan = new Scanner($this->finder, $this->vars, $debug);
        $scan->QCR_ScanDirectories($dir);
        $this->scanFilesFromListingFile(QUEUE_FILENAME, true);
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $this->writeReport();
        $this->complete();
        unset($scan);
    }

    // /////////////////////////////////////////////////////////////////////////

    protected function scanFilesFromListingFile($list_filepath, $use_base64 = false)
    {
        if (!is_file($list_filepath) || !is_readable($list_filepath)) {
            $this->vars->foundTotalFiles = 0;
            return;
        }
        $s_file = new ScanList($list_filepath, $use_base64);
        $this->vars->foundTotalFiles =  is_array($s_file) ? count($s_file) : $s_file->count();

        $debug = new DebugMode();
        $scan = new Scanner($this->finder, $this->vars, $debug);
        $ca = null;
        if (defined('CLOUD_ASSIST_TOKEN')) {
            $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            HashVerdicts::init();
        }
        $scan->QCR_GoScan($s_file, $ca, null, ($list_filepath === QUEUE_FILENAME ? null : $this->finder->getFilter()));
        if (!is_null($ca)) {
            HashVerdicts::close();
            $ca->close();
            unset($ca);
        }
        $this->vars->bigFiles = $this->finder->getBigFiles();

        if (count($this->vars->bigFiles) > 0) {
            $scan->prepareBigFilesToCriticalList($this->vars->bigFiles, $this->vars);
        }
        $bigElfs = $this->finder->getBigElfFiles();

        if (count($bigElfs) > 0) {
            $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $this->vars);
        }
        $scan->whitelisting();

        unset($scan);
        unset($s_file);
        unset($bigElfs);
    }

    protected function checkWorkDir($workdir)
    {
        if (!file_exists($workdir) && !mkdir($workdir, 0750) && !is_dir($workdir)) {
            die('Error! Cannot create workdir ' . $workdir . ' for detached scan.');
        } elseif (file_exists($workdir) && !is_writable($workdir)) {
            die('Error! Workdir ' . $workdir . ' is not writable.');
        }
    }

    protected function checkList($listing)
    {
        if (!file_exists($listing) || !is_readable($listing)) {
            die('Error! Listing file ' . $listing . ' not exists or not readable');
        }
    }

    protected function savePid()
    {
        file_put_contents($this->pid_file, (string)getmypid());
    }

    protected function writeReport()
    {
        $scan_time = round(AibolitHelpers::currentTime() - $this->start_time, 1);

        foreach ($this->json_report->call($this, $this->reports) as $json_report) {
            $json_report->generateReport($this->vars, $scan_time);
            $json_report->addDecisionStats();
            $json_report->write();
        }
    }

    protected function complete()
    {
        @touch($this->done_file);
        $complete = [
            'method'    => 'MALWARE_SCAN_COMPLETE',
            'scan_id'   => $this->scan_id,
        ];
        $json_complete = json_encode($complete) . "\n";
        $socket = fsockopen('unix://' . $this->sock_file);
        stream_set_blocking($socket, false);
        fwrite($socket, $json_complete);
        fclose($socket);
    }

    protected function setWorkDir($dir, $scan_id)
    {
        $this->workdir = $dir . '/' . $scan_id;
    }

    protected function setSocketFile($sock)
    {
        $this->sock_file = $sock;
    }
}


/**
 * Class ResidentMode used to stay aibolit alive in memory and wait for a job.
 */
class ResidentMode
{
    /**
     * send statistics every N seconds
     */
    const SEND_STAT_TIME = 3 * 3600; //3 hours
    /**
     * check upload folder every N seconds
     */
    const CHECK_UPLOAD_TIME = 3;
    /**
     * time of last check upload jobs folder
     * @var
     */
    protected $last_dir_check;
    /**
     * parent dir for all resident aibolit related
     * @var string
     */
    protected $resident_dir;
    /**
     * directory for all jobs to be processed by aibolit
     * @var string
     */
    protected $resident_in_dir;
    /**
     * directory with all the malicious files reports to be processed by imunify
     * @var string
     */
    protected $resident_out_dir;
    /**
     * file lock used to make sure we start only one aibolit
     * @var string
     */
    protected $aibolit_start_lock;
    /**
     * status file used to make sure aibolit didn't get stuck
     * @var string
     */
    protected $aibolit_status_file;
    /**
     * number of seconds while aibolit will stay alive, while not receiving any work
     * @var int
     */
    protected $stay_alive;
    /**
     * maximum number of seconds without updating ABOLIT_STATUS_FILE,
     * used to track if AIBOLIT is stuck, should be killed
     * @var int
     */
    protected $stuck_timeout;
    /**
     * number of seconds scripts would wait for aibolit to finish / send signal
     * @var int
     */
    protected $upload_timeout;
    /**
     * max number of files to pick
     * @var int
     */
    protected $max_files_per_notify_scan;
    /**
     * timestamp of last scan
     * @var int
     */
    protected $last_scan_time;
    /**
     * timestamp of last stat send
     * @var int
     */
    protected $last_send_stat = 0;
    /**
     * time to sleep between lifecycle iterations in microseconds
     */
    protected $sleep_time;

    protected $scannedNotify = 0;

    protected $report;

    protected $logger;

    protected $lic;

    protected $ca = null;

    protected $resident_in_dir_notify;
    protected $resident_in_dir_upload;
    protected $watchdog_socket;
    protected $activation_socket;
    protected $systemd = false;
    protected $interval = 0;
    protected $lastKeepAlive = 0;

    public $debug = null;

    protected $signs;
    protected $finder;
    protected $options;

    const JOB_UPLOAD = 'upload';
    const JOB_NOTIFY = 'notify';

    const MAX_SIZE_SCAN_BYTES_FOR_UPLOAD = 1048576;// 1Mb

    protected $upload_jobs = [];
    protected $notify_jobs = [];

    /**
     * ResidentMode constructor.
     *
     * @param             $finder
     * @param             $debug
     * @param Closure     $report
     * @param             $signs
     * @param Logger|null $logger
     * @param array       $options
     * @param ImLicense   $lic
     * @param string      $resident_dir
     * @param int         $stay_alive
     * @param int         $stuck_timeout
     * @param int         $upload_timeout
     * @param int         $max_files_per_notify_scan
     * @param int         $sleep_time
     */
    public function __construct(
        $finder,
        $debug,
        Closure $report,
        $signs,
        Logger $logger = null,
        $options = null,
        $lic = null,
        $resident_dir = '/var/imunify360/aibolit/resident',
        $stay_alive = 30,
        $stuck_timeout = 5,
        $upload_timeout = 10,
        $max_files_per_notify_scan = 500,
        $sleep_time = 100000
    ) {
        $this->signs = $signs;
        $this->setResidentDir($resident_dir);
        $this->resident_in_dir = $this->resident_dir . '/in';
        $this->resident_in_dir_upload = $this->resident_in_dir . '/upload-jobs';
        $this->resident_in_dir_notify = $this->resident_in_dir . '/notify-jobs';
        $this->resident_out_dir = $this->resident_dir . '/out';
        $this->aibolit_start_lock = $this->resident_dir . '/start.lock';
        $this->aibolit_status_file = $this->resident_dir . '/aibolit.status';
        $this->stay_alive = $stay_alive;
        $this->stuck_timeout = $stuck_timeout;
        $this->upload_timeout = $upload_timeout;
        if (!empty($max_files_per_notify_scan)) {
            $this->max_files_per_notify_scan = $max_files_per_notify_scan;
        }
        $this->sleep_time = $sleep_time;
        $this->report = $report;
        $this->logger = $logger;
        $this->options = $options;

        umask(0000);
        if (!file_exists($this->resident_dir)) {
            if (!mkdir($this->resident_dir, 0777, true) && !is_dir($this->resident_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_dir));
            }
        }
        if (!file_exists($this->resident_in_dir)) {
            if (!mkdir($this->resident_in_dir, 0755) && !is_dir($this->resident_in_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir));
            }
        }
        if (!file_exists($this->resident_out_dir)) {
            if (!mkdir($this->resident_out_dir, 0755) && !is_dir($this->resident_out_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_out_dir));
            }
        }
        if (!file_exists($this->resident_in_dir_notify)) {
            if (!mkdir($this->resident_in_dir_notify, 0700) && !is_dir($this->resident_in_dir_notify)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_notify));
            }
        }
        if (!file_exists($this->resident_in_dir_upload)) {
            if (!mkdir($this->resident_in_dir_upload, 01777) && !is_dir($this->resident_in_dir_upload)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_upload));
            }
        }

        $this->checkSpecs();

        $addr = getenv('NOTIFY_SOCKET');
        if (isset($addr[0]) && $addr[0] === '@') {
            $addr = "\0";
        }

        if ($addr) {
            $this->systemd = true;
        }

        if ($this->systemd) {
            $this->watchdog_socket = fsockopen('udg://' . $addr);
            stream_set_blocking($this->watchdog_socket, false);

            $this->activation_socket = fopen('php://fd/3', 'r');
            if ($this->activation_socket === false) {
                die("Something went wrong with activation socket.");
            }
            stream_set_blocking($this->activation_socket, false);

            if (getenv('WATCHDOG_USEC') !== false) {
                $this->interval = (int)getenv('WATCHDOG_USEC');
            } else {
                $this->interval = 1000000;
            }
        }
        $this->finder = $finder;
        $this->debug = $debug;
        $this->lic = $lic;

        if (defined('CLOUD_ASSIST_TOKEN')) {
            $this->ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN, 3]);
            HashVerdicts::init([$this, 'keepAlive']);
        }

        $this->lifeCycle();

        if (!is_null($this->ca)) {
            HashVerdicts::close();
            $this->ca->close();
            unset($this->ca);
        }
    }

    protected function isRootWriteable($folder)
    {
        $stat = @stat($folder);
        //file_exists() && is_dir()
        if (!$stat || ($stat['mode'] & 0xF000) !== 0040000) {
            return false;
        }

        $owner_id = (int)$stat['uid'];
        if ($owner_id !== 0) {
            return false;
        }

        $perms = (int)$stat['mode'];
        if (
            ($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0010)                       // group without w
            && !($perms & 0x0002)                       // other without w
        ) {
            return true;
        }
        return false;
    }

    protected function isWorldWriteable($folder)
    {
        $stat = @stat($folder);
        //file_exists() && is_dir()
        if (!$stat || ($stat['mode'] & 0xF000) !== 0040000) {
            return false;
        }

        $perms = (int)$stat['mode'];
        if (
            ($perms & 0x0004)                           // other r
            && ($perms & 0x0002)                        // other w
            && ($perms & 0x0200)                        // sticky bit
        ) {
            return true;
        }
        return false;
    }

    protected function checkSpecs()
    {
        if (!extension_loaded('posix')) {
            die('Error! For resident scan need posix extension.');
        } elseif (!$this->isRootWriteable($this->resident_in_dir_notify)) {
            die('Error! Notify in dir ' . $this->resident_in_dir_notify . ' must be root writeable.');
        } elseif (!$this->isWorldWriteable($this->resident_in_dir_upload)) {
            die('Error! Upload in dir ' . $this->resident_in_dir_upload . ' must be world writeable.');
        }
    }

    protected function setResidentDir($dir)
    {
        $this->resident_dir = $dir;
    }

    protected function writeReport($vars, $scan_time, $type, $file)
    {
        $file = AibolitHelpers::getBaseName($file);
        $critPHP = count($vars->criticalPHP);
        $critJS = count($vars->criticalJS);
        $black = count($vars->blackFiles);
        $warning = count($vars->warningPHP);
        $malware = ($critPHP > 0)
            || ($critJS > 0)
            || ($black > 0)
            || ($warning > 0);
        if ($malware) {
            $this->debugLog("Job {$file}: Found malware. PHP: {$critPHP}; JS: {$critJS}; Black: {$black}; SUS: {$warning}");
        } else {
            $this->debugLog("Job {$file}: No malware found.");
        }
        if ($type == 'upload') {
            $pid = (int)AibolitHelpers::getBaseName($file, '.upload_job');
            if ($malware) {
                $this->debugLog("Job {$file}: Sending SIGUSR1 to {$pid}");
                posix_kill($pid, SIGUSR1);
            } else {
                $this->debugLog("Job {$file}: Sending SIGUSR2 to {$pid}");
                posix_kill($pid, SIGUSR2);
            }
        } elseif ($type == 'notify' && $malware) {
            $filename = AibolitHelpers::getBaseName($file, '.notify_job');
            $reports[JSONReport::class] = $this->resident_out_dir . '/' . $filename . '.report';
            foreach ($this->report->call($this, $reports) as $report) {
                $report->generateReport($vars, $scan_time);
                $this->debugLog("Job {$file}: Creating report for job in {$filename}.report");
                $report->write();
            }
            $socket_path = '/var/run/defence360agent/generic_sensor.sock.2';

            if (file_exists($socket_path)) {
                $socket = fsockopen('unix://' . $socket_path);
                if ($socket) {
                    stream_set_blocking($socket, false);
                    fwrite($socket, '{"method": "NOOP"}');
                    fclose($socket);
                } else {
                    $this->debugLog("Could not open socket.");
                }
            } else {
                $this->debugLog("Warning: Socket file does not exist.");
            }
            unset($reports);
        }
    }

    /**
     * @param string $pattern
     * @param string $type
     *
     * @return bool
     */
    protected function isJobFileExists($pattern, $type)
    {
        if ($type === self::JOB_UPLOAD) {
            if (empty($this->upload_jobs)) {
                $this->upload_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->upload_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }

        if ($type === self::JOB_NOTIFY) {
            if (empty($this->notify_jobs)) {
                $this->notify_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->notify_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    }

    protected function isUploadJob()
    {
        $this->last_dir_check = AibolitHelpers::currentTime();
        if ($this->isJobFileExists('/upload-jobs/*.upload_job', self::JOB_UPLOAD)) {
            return true;
        }
        return false;
    }

    protected function scanJob($job_file, $type)
    {
        $start_time = AibolitHelpers::currentTime();

        $vars = new Variables();
        if ($type === self::JOB_NOTIFY) {
            $this->finder->getFilter()->setSkipSystemOwner(isset($this->options['skip-system-owner']));
        } else {
            $this->finder->getFilter()->setSkipSystemOwner(false);
        }
        $vars->signs = $this->signs;
        $vars->users = new UserList();
        $vars->options = $this->options;

        $files_to_scan = [];
        $count = 0;

        $content = file_get_contents($job_file);
        $job = null;
        if (!empty($content)) {
            $job = json_decode($content);
        }
        $file = AibolitHelpers::getBaseName($job_file);

        $this->debugLog("Job {$file} received from queue.");

        $files_to_scan = [];
        if (is_null($job) || !property_exists($job, 'files')) {
            $this->debugLog("Job {$file}: Invalid format, no 'files' property.");
        } else {
            $files_to_scan = $job->files;
            array_walk($files_to_scan, static function (&$item) {
                $item = base64_decode($item);
            });
        }

        $count = count($files_to_scan);

        if ($type === self::JOB_NOTIFY) {
            $this->debugLog("Job {$file}: notify. {$count} files to be scanned");

            if ($count > $this->max_files_per_notify_scan) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }

            if ($this->scannedNotify + $count > $this->max_files_per_notify_scan) {
                $this->scannedNotify = 0;
                unset($vars, $files_to_scan);

                return false;
            }

            $this->scannedNotify += $count;
        } elseif ($type === self::JOB_UPLOAD) {
            $this->debugLog("Job {$file}: upload. {$count} files to be scanned");

            if ($count > 1) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }
        }

        $vars->foundTotalFiles = $count;

        $zipResult = false;
        if ($count && isset($this->options['scan-archive']) && $type === self::JOB_UPLOAD && ZipScanner::isZip($files_to_scan[0])) {
            try {
                $max_size_scan_bytes = $type === self::JOB_UPLOAD ? self::MAX_SIZE_SCAN_BYTES_FOR_UPLOAD : null;
                $zipScanner = new ZipScanner($files_to_scan[0], $vars, $this->debug, $this->finder->getFilter(), [$this, 'keepAlive'], $max_size_scan_bytes);
                $zipResult = $zipScanner->scan($this->options['archive-max-size'], $this->options['max-num-files-in-archive'], $this->options['archive-max-folders-count']);
            } catch (Exception $e) {
            }
        }

        if (!$zipResult && $count) {
            $max_size_scan_bytes = ($type === self::JOB_UPLOAD) ? self::MAX_SIZE_SCAN_BYTES_FOR_UPLOAD : null;
            $force_ignore_suspicious = ($type === self::JOB_UPLOAD);
            $scan = new Scanner($this->finder, $vars, $this->debug, $max_size_scan_bytes, $force_ignore_suspicious);
            $filters        = $this->finder->getFilter();
            $skip_filters   = $type === self::JOB_UPLOAD ? ['check_size_range'] : [];
            $callback       = ($this->systemd && $type !== self::JOB_UPLOAD) ? [$this, 'keepAlive'] : null;
            $ca             = $type === self::JOB_NOTIFY ? $this->ca : null;

            $scan->QCR_GoScan($files_to_scan, $ca, $callback, $filters, $skip_filters);
            $scan->whitelisting();
        }

        $scan_time = round(AibolitHelpers::currentTime() - $start_time, 1);

        $this->last_scan_time = time();
        $this->writeReport($vars, $scan_time, $type, $job_file);
        $type === self::JOB_UPLOAD ? ResidentStats::addScannedUpload($count) : ResidentStats::addScannedNotify($count);

        unset($vars, $files_to_scan, $scan);

        return true;
    }

    protected function isNotifyJob()
    {
        if ($this->isJobFileExists('/notify-jobs/*.notify_job', self::JOB_NOTIFY)) {
            return true;
        }
        return false;
    }

    protected function scanUploadJob()
    {
        if (empty($this->upload_jobs)) {
            return;
        }
        foreach ($this->upload_jobs as $index => $upload_job) {
            $this->scanJob($upload_job, self::JOB_UPLOAD);
            $file = AibolitHelpers::getBaseName($upload_job);
            $this->debugLog("Job {$file}: Removing job.");
            $end_time = time();
            $upload_job_mtime = @filemtime($upload_job);
            ResidentStats::collectUploadJobLatency($end_time - $upload_job_mtime);
            unlink($upload_job);
            unset($this->upload_jobs[$index]);
        }
    }

    protected function scanNotifyJob()
    {
        if (empty($this->notify_jobs)) {
            return;
        }
        foreach ($this->notify_jobs as $index => $job) {
            $res = $this->scanJob($job, self::JOB_NOTIFY);
            if (!$res) {
                break;
            }
            $file = AibolitHelpers::getBaseName($job);
            $this->debugLog("Job {$file}: Removing job.");
            unlink($job);
            unset($this->notify_jobs[$index]);
        }
    }

    public function keepAlive($check_upload_job = true)
    {
        $last = ($this->last_send_stat === 0) ? START_TIME : $this->last_send_stat;
        if (AibolitHelpers::currentTime() - $last > static::SEND_STAT_TIME) {
            $this->debugLog(AibolitHelpers::currentTime() - $last . ' > ' . static::SEND_STAT_TIME . ' Time to send stats.');
            $this->sendStatData();
        }
        if ((int)((AibolitHelpers::currentTime() - $this->lastKeepAlive) * 1000000) > $this->interval / 2) {
            if ($this->activation_socket) {
                stream_get_contents($this->activation_socket);
            }
            if ($this->watchdog_socket) {
                fwrite($this->watchdog_socket, 'WATCHDOG=1');
            }
            $this->lastKeepAlive = AibolitHelpers::currentTime();
        }
        if (
            $check_upload_job && ((AibolitHelpers::currentTime() - $this->last_dir_check) > self::CHECK_UPLOAD_TIME)
            && !$this->isDirEmpty($this->resident_in_dir_upload)
            && $this->isUploadJob()
        ) {
            $this->scanUploadJob();
        }
    }

    protected function isDirEmpty($dir)
    {
        $it = new \FilesystemIterator($dir);
        return !$it->valid();
    }

    protected function lifeCycle()
    {
        $this->debugLog("Starting resident-mode loop.");
        $this->last_scan_time = time();
        while (true) {
            if ($this->systemd) {
                $this->keepAlive();
            }
            while ($this->isUploadJob()) {
                $this->scanUploadJob();
                $this->keepAlive(false);
            }

            while ($this->isNotifyJob() && !$this->isUploadJob()) {
                $this->scanNotifyJob();
                $this->keepAlive(false);
            }
            if ($this->last_scan_time + $this->stay_alive < time()) {
                $this->sendStatData();
                $this->debugLog("No more jobs. Sending statistics and shutting down.");
                break;
            }
            touch($this->aibolit_status_file);
            usleep($this->sleep_time); // 1/10 of second by default
        }
        if ($this->systemd) {
            if ($this->watchdog_socket) {
                fclose($this->watchdog_socket);
            }
            if ($this->activation_socket) {
                fclose($this->activation_socket);
            }
        }
        unlink($this->aibolit_status_file);
    }

    protected function debugLog($message)
    {
        if ($this->logger === null) {
            return;
        }
        $this->logger->debug($message);
    }

    protected function sendStatData()
    {
        $request = Factory::instance()->create(SendMessageRequest::class, ['AI-Resident']);
        ResidentStats::setLic($this->lic);
        ResidentStats::setRequest($request);
        ResidentStats::setAiVersion(AI_VERSION);
        ResidentStats::setSigVersion($this->signs->getDBMetaInfoVersion());
        ResidentStats::setStartTime(START_TIME);
        ResidentStats::sendStatData();
        $this->last_send_stat = AibolitHelpers::currentTime();
    }
}


if (!defined('FUNC_MEMORY_USAGE')) {
    define('FUNC_MEMORY_USAGE', function_exists('memory_get_usage'));
}
if (!defined('FUNC_MEMORY_PEAK_USAGE')) {
    define('FUNC_MEMORY_PEAK_USAGE', function_exists('memory_get_peak_usage'));
}
class DebugMode
{
    const SLOW_FILES_COUNT = 10;
    const SLOW_FILES_MIN_TIME = 0.5; // 1/2 of second

    const DEOBFUSCATOR_DEBUG_COUNT = 'count';
    const DEOBFUSCATOR_DEBUG_MEDIAN_TIME = 'median_time';
    const DEOBFUSCATOR_DEBUG_MAX_TIME = 'max_time';
    const DEOBFUSCATOR_DEBUG_MIN_TIME = 'min_time';
    const DEOBFUSCATOR_DEBUG_TIME_LIST = 'time_list';

    private $debugMode = false;
    private $debugPerformance = false;
    private $debugPCRE = false;
    private $performance_stats = [];
    private $deobfuscatorData = [];

    private $slow_files = [];
    private $min_file = false;
    private $slow_files_count = self::SLOW_FILES_COUNT;
    private $slow_files_min_time = self::SLOW_FILES_MIN_TIME;


    public function __construct($debugMode = false, $debugPerformance = false, $debugPCRE = false)
    {
        $this->debugMode = $debugMode;
        $this->debugPerformance = $debugPerformance;
        $this->debugPCRE = $debugPCRE;
        if (defined('DEBUG_SLOW_FILES_COUNT')) {
            $this->slow_files_count = DEBUG_SLOW_FILES_COUNT;
        }
        if (defined('DEBUG_SLOW_FILES_MIN_TIME')) {
            $this->slow_files_min_time = DEBUG_SLOW_FILES_MIN_TIME;
        }
    }

    public function QCR_Debug($par_Str = "")
    {
        if ($this->debugMode) {
            return;
        }

        $l_MemInfo = ' ';
        if (FUNC_MEMORY_USAGE) {
            $l_MemInfo .= ' curmem=' . AibolitHelpers::bytes2Human(memory_get_usage());
        }

        if (FUNC_MEMORY_PEAK_USAGE) {
            $l_MemInfo .= ' maxmem=' . AibolitHelpers::bytes2Human(memory_get_peak_usage());
        }

        stdOut("\n" . date('H:i:s') . ': ' . $par_Str . $l_MemInfo . "\n");
    }

    public function getDebugMode()
    {
        return $this->debugMode;
    }

    public function getDebugPerformance()
    {
        return $this->debugPerformance;
    }

    public function getDebugPCRE()
    {
        return $this->debugPCRE;
    }

    public function isDebug()
    {
        return $this->getDebugMode() || $this->getDebugPerformance() || $this->getDebugPCRE();
    }

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    public function addPerformanceItem($item, $time)
    {
        $this->performance_stats[$item] = isset($this->performance_stats[$item]) ? $this->performance_stats[$item] + $time : 0;
    }

    public function addFile($file, $time)
    {
        if ($time < $this->slow_files_min_time) {
            return;
        }

        if (count($this->slow_files) < $this->slow_files_count) {
            $this->slow_files[(string) $time] = $file;
            $this->min_file = (float) min(array_keys($this->slow_files));
            return;
        }

        if ($this->min_file !== false && $time < $this->min_file) {
            return;
        }

        unset($this->slow_files[(string) $this->min_file]);
        $this->slow_files[(string) $time] = $file;
        $this->min_file = (float) min(array_keys($this->slow_files));
    }

    public function printPerformanceStats()
    {
        $keys = array_keys($this->performance_stats);
        for ($i = 0, $iMax = count($keys); $i < $iMax; $i++) {
            $this->performance_stats[$keys[$i]] = round($this->performance_stats[$keys[$i]] * 1000000);
        }

        arsort($this->performance_stats);

        foreach ($this->performance_stats as $r => $v) {
            echo $v . "\t\t" . $r . "\n";
        }
    }

    public function getSlowFiles($with_hash = false)
    {
        $res = [];
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            $res[] = ['fn' => $file, 'sha256' => $with_hash ? hash_file('sha256', $file) : 0, 'time' => (float) $time];
        }
        return $res;
    }

    public function printSlowFiles()
    {
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            echo $file . "\t\t" . $time . "\n";
        }
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    /**
     * @param array<float> $nums
     * @return float
     */
    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count / 2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}


class FileInfo
{
    protected $index = 0;
    protected $inode = 0;
    protected $cron = false;
    protected $filename = '';
    protected $filetype = '';
    protected $extension = '';
    protected $basename = '';
    protected $realpath = '';
    protected $size = null;
    protected $created = 0;
    protected $modified = 0;
    protected $hash = 0;
    protected $sha256 = 0;
    protected $sha1file = 0;
    protected $content = '';
    protected $norm_content = '';
    protected $is_binary = 0;
    protected $is_core_dump = 0;
    protected $is_interesting = 0;
    protected $is_log = 0;
    protected $link = 0;
    protected $is_dir = 0;
    protected $is_file = 0;
    protected $is_readable = 0;
    protected $is_writable = 0;
    protected $is_exists = 0;
    protected $hashtable = null;
    protected $raw_stat = null;
    protected $uid = false;
    protected $gid = false;
    protected $groups = false;
    protected $mode = false;
    protected $raw_mode = false;
    protected $error = 0;

    /**
     * @return int|string
     */
    public function getSha1file()
    {
        if ($this->sha1file === 0) {
            $this->sha1file = sha1_file($this->filename);
        }
        return $this->sha1file;
    }

    /**
     * @return int|string
     */
    public function getSha256file()
    {
        if ($this instanceof ZipFileInfo) {
            return hash('sha256', $this->getContent());
        }
        return hash_file('sha256', $this->filename);
    }

    public function __construct($filename, $index, $hashtable = null)
    {
        $this->index = $index;
        $this->filename = $filename;
        $this->hashtable = $hashtable;
        $this->checkCrontabFile();
    }

    /**
     * @return bool
     */
    public function isBinary()
    {
        if ($this->is_binary !== 0) {
            return $this->is_binary;
        }
        $this->_setFlags();
        return $this->is_binary;
    }

    /**
     * @return bool
     */
    public function isCoreDump()
    {
        if ($this->is_core_dump !== 0) {
            return $this->is_core_dump;
        }
        $this->_setFlags();
        return $this->is_core_dump;
    }

    public function isCron()
    {
        return $this->cron;
    }

    public function isInteresting()
    {
        if ($this->is_interesting !== 0) {
            return $this->is_interesting;
        }
        $this->_setFlags();
        return $this->is_interesting;
    }

    public function isLog()
    {
        if ($this->is_log !== 0) {
            return $this->is_log;
        }
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 200);
        } else {
            $header = substr($this->content, 0, 200);
        }
        if (HyperScan::canMatchLog()) {
            $this->is_log = HyperScan::matchLog($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_log = (bool)preg_match('~\A\s*<\?(?:php)?\s*(?:exit|die)(?:\s*\(\s*(?:(?:\d+|([\'"])[^\'"$]{0,199}\1)\s*)?\))?\s*;~mis', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }

        return $this->is_log;
    }

    public function getError()
    {
        return $this->error;
    }

    /**
     * @return false|mixed|string
     */
    public function getContent()
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename);
        }
        return $this->content;
    }

    /**
     * @return void
     */
    public function cleanContentCache()
    {
        $this->content = '';
        $this->norm_content = '';
    }

    /**
     * @return string
     */
    public function getContentWithoutSpaces($max_size = false)
    {
        if ($this->norm_content !== '') {
            return $this->norm_content;
        }
        if (!$max_size) {
            $this->norm_content = Normalization::strip_whitespace($this->getContent());
        } elseif (is_numeric($max_size)) {
            $this->norm_content = Normalization::strip_whitespace($this->getContentBytes($max_size));
        }
        return $this->norm_content;
    }

    public function getContentBytes($max_bytes)
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename, false, null, 0, $max_bytes);
        }
        return $this->content;
    }

    /**
     * @param $text
     * @return string
     */
    private function _hash_($text)
    {
        static $r;

        if (empty($r)) {
            for ($i = 0; $i < 256; $i++) {
                if ($i < 33 || $i > 127) {
                    $r[chr($i)] = '';
                }
            }
        }

        return sha1(strtr($text, $r));
    }

    public function getIndex()
    {
        return $this->index;
    }

    public function setIndex($index)
    {
        $this->index = $index;
    }

    public function getFilename()
    {
        return $this->filename;
    }

    protected function _setStat()
    {
        $info = @lstat($this->filename);
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->link = ($info['mode'] & 0xF000) === 0120000;
        if ($this->link) {
            $info = @stat($this->filename);
        }
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->is_exists = true;
        $this->is_dir = ($info['mode'] & 0xF000) === 0040000;
        $this->is_file = ($info['mode'] & 0xF000) === 0100000;
        $this->size = $info['size'];
        $this->created = $info['ctime'];
        $this->modified = $info['mtime'];
        $this->inode = $info['ino'];
        $this->uid = $info['uid'];
        $this->gid = $info['gid'];
        $this->mode = sprintf("0%o", 0777 & $info['mode']);
        $this->raw_mode = $info['mode'];
        $this->raw_stat = $info;
    }

    public function getStat()
    {
        if ($this->raw_stat === null) {
            $this->_setStat();
        }
        return $this->raw_stat;
    }

    public function file_exists()
    {
        if ($this->is_exists === 0) {
            $this->_setStat();
        }
        return $this->is_exists;
    }

    public function is_dir()
    {
        if ($this->is_dir === 0) {
            $this->_setStat();
        }
        return $this->is_dir;
    }

    public function is_file()
    {
        if ($this->is_file === 0) {
            $this->_setStat();
        }
        return $this->is_file;
    }

    public function is_link()
    {
        if ($this->link === 0) {
            $this->_setStat();
        }
        return $this->link;
    }

    public function _is_readable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0400);    // User has read permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0040);    // Group has read permission
        }

        return (bool)($this->raw_mode & 0004);    // Other has read permission
    }

    public function is_readable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_readable === 0) {
            $this->is_readable = $this->_is_readable();
        }
        return $this->is_readable;
    }

    public function is_writeable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_writable === 0) {
            $this->is_writable = $this->_is_writable();
        }
        return $this->is_writable;
    }

    public function _is_writable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0200);    // User has write permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0020);    // Group has write permission
        }

        return (bool)($this->raw_mode & 0002);    // Other has write permission
    }

    public function filetype()
    {
        if ($this->filetype === '') {
            $this->filetype = $this->detectFileType();
        }
        return $this->filetype;
    }

    public function getExtension()
    {
        if ($this->extension === '') {
            $this->extension = AibolitHelpers::getFileExtension($this->getFilename());
        }
        return $this->extension;
    }

    public function getBasename($prefix = '')
    {
        if ($this->basename === '') {
            $this->basename = AibolitHelpers::getBaseName($this->getFilename(), $prefix);
        }
        return $this->basename;
    }

    public function getRealpath()
    {
        if ($this->realpath === '') {
            $this->realpath = $this->file_exists() ? AibolitHelpers::getRealpath($this->getFilename()) : false;
        }
        return $this->realpath;
    }

    private function isValidSqliteFile($filename)
    {
        $header = @file_get_contents($filename, false, null, 0, 100);
        if (strpos($header, 'SQLite format 3' . chr(0)) !== 0) { //check valid header
            return false;
        }
        if (substr($header, 72, 20) !== str_repeat(chr(0), 20)) { //check valid reserved bytes
            return false;
        }
        $page_size = unpack('n', substr($header, 16, 2))[1];
        $page_count = unpack('N', substr($header, 28, 4))[1];
        if ($page_size * $page_count !== filesize($filename)) { //check valid size
            return false;
        }
        return true;
    }

    private function detectFileType()
    {
        if ($this->raw_mode === false) {
            $this->_setStat();
        }
        if ($this->is_link() === true) {
            return 'link';
        }

        $mode = $this->raw_mode & 0xF000;
        if ($mode === 0100000) {
            return 'file';
        }
        if ($mode === 0040000) {
            return 'dir';
        }
        if ($mode === 0140000) {
            return 'socket';
        }
        if ($mode === 0060000) {
            return 'block';
        }
        if ($mode === 0020000) {
            return 'char';
        }
        if ($mode === 0010000) {
            return 'fifo';
        }

        return 'unknown';
    }

    /**
     * @return void
     */
    private function _setFlags()
    {
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 17);
        } else {
            $header = substr($this->content, 0, 17);
        }

        $this->is_binary = AibolitHelpers::isStringElfPrefix($header);
        $this->is_core_dump = AibolitHelpers::isStringCoreDump($header);

        if (HyperScan::canMatchInteresting()) {
            $this->is_interesting = HyperScan::matchInteresting($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_interesting = (bool)preg_match('~<(?:\?|html)|#!/|[\x09\x0A\x0D\x20-\x7E]{10}~msi', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }
        if (!$this->is_interesting && strpos($header, "\xFF\xD8") === 0) {
            $this->is_interesting = @file_get_contents($this->filename, false, null, filesize($this->filename) - 2, 2) !== "\xFF\xD9";
        }
        if ($header === 'SQLite for' && $this->isInteresting()) {
            $this->is_interesting = !$this->isValidSqliteFile($this->filename);
        }
        unset($header);
    }

    /**
     * @return void
     */
    protected function checkCrontabFile()
    {
        $this->cron = (stripos($this->filename, '/var/spool/cron') === 0);
    }

    /**
     * @return int|mixed
     */
    public function getSize()
    {
        if ($this->size === null) {
            $this->_setStat();
        }
        return $this->size;
    }

    /**
     * @return int|mixed
     */
    public function getInode()
    {
        if ($this->inode === 0) {
            $this->_setStat();
        }
        return $this->inode;
    }

    /**
     * @return int|mixed
     */
    public function getCreated()
    {
        if ($this->created === 0) {
            $this->_setStat();
        }
        return $this->created;
    }

    /**
     * @return int|mixed
     */
    public function getModified()
    {
        if ($this->modified === 0) {
            $this->_setStat();
        }
        return $this->modified;
    }

    public function getHash()
    {
        if ($this->hash === 0) {
            $this->hash = $this->_hash_($this->getContentWithoutSpaces());
        }
        return $this->hash;
    }

    /**
     * @return int|string
     */
    public function getSha256()
    {
        if ($this->hashtable !== null && $this->hashtable->get($this->filename) !== false) {
            $this->sha256 = $this->hashtable->get($this->filename);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content === '') {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 === 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 !== 0)) {
            $this->sha256 = bin2hex($this->sha2);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content !== '') {
            $this->sha256 = hash('sha256', $this->getContent());
        }
        if ($this->sha256 === 0) {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 !== 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 === 0)) {
            $this->sha2 = hex2bin($this->sha256);
        }
        return $this->sha256;
    }

    /**
     * @return int|mixed
     */
    public function getUid()
    {
        if ($this->uid === false) {
            $this->_setStat();
        }
        return $this->uid;
    }

    /**
     * @return int|mixed
     */
    public function getGid()
    {
        if ($this->gid === false) {
            $this->_setStat();
        }
        return $this->gid;
    }

    /**
     * @return int|mixed
     */
    public function getMode()
    {
        if ($this->mode === false) {
            $this->_setStat();
        }
        return $this->mode;
    }
}


class HashTable
{
    private $hashes = [];

    public function add($paths, $hashes)
    {
        $this->hashes[0] = array_flip($paths);
        $this->hashes[1] = $hashes;
    }

    public function get($filename)
    {
        $index = $this->hashes[0][$filename] ?? false;
        if ($index === false) {
            return false;
        }
        return $this->hashes[1][$index];
    }
}


class Finder
{
    const MAX_ALLOWED_PHP_HTML_IN_DIR = 600;

    private $sym_links              = [];
    private $skipped_folders        = [];
    private $doorways               = [];
    private $big_files              = [];
    private $big_elf_files          = [];

    private $collect_skipped        = false;
    private $collect_symLinks       = false;
    private $collect_doorways       = false;
    private $collect_bigfiles       = false;
    private $collect_bigelffiles    = false;

    private $total_dir_counter      = 0;
    private $total_files_counter    = 0;
    private $checked_hashes         = [];

    private $initial_dir            = '';
    private $initial_level          = null;
    private $level_limit            = null;

    /**
     * @var \FileFilter
     */
    private $filter;
    private $total                  = 0;

    public function __construct($filter = null, $level_limit = null)
    {
        $this->filter = $filter;
        $this->level_limit = $level_limit;
    }

    private function linkResolve($path)
    {
        return realpath($path);
    }

    private function resolve(FileInfo $file, $follow_symlinks)
    {
        if (!$follow_symlinks || !$file->is_link()) {
            return $file;
        }
        $realpath = $this->linkResolve($file->getFilename());
        if ($file->getFilename() !== $realpath) {
            return new FileInfo($realpath, $file->getIndex());
        }
        return $file;
    }

    private function isPathCheckedAlready($path)
    {
        $root_hash = crc32($path);
        if (isset($this->checked_hashes[$root_hash])) {
            return true;
        }
        $this->checked_hashes[$root_hash] = '';
        return false;
    }

    private function walk(FileInfo $file, $follow_symlinks)
    {
        $path = $file->getFilename();
        $level = substr_count($path, '/');
        if (isset($this->level_limit) && (($level - $this->initial_level + 1) > $this->level_limit)) {
            return;
        }
        $l_DirCounter          = 0;
        $l_DoorwayFilesCounter = 0;

        if ($follow_symlinks && $this->isPathCheckedAlready($path)) {
            return;
        }

        # will not iterate dir, if it should be ignored
        if (!$this->filter->needToScan($file, true)) {
            if ($this->collect_skipped) {
                $this->skipped_folders[] = $path;
            }
            return;
        }
        $dirh = @opendir($path);
        if ($dirh === false) {
            return;
        }

        while (($entry = readdir($dirh)) !== false) {
            if ($entry === '.' || $entry === '..') {
                continue;
            }
            $entry = $path . DIRECTORY_SEPARATOR . $entry;
            $file = new FileInfo($entry, 0);
            if ($file->is_link()) {
                if ($this->collect_symLinks) {
                    $this->sym_links[] = $entry;
                }

                if (!$follow_symlinks) {
                    continue;
                }
                $file = $this->resolve($file, true);
            } else {
                $realpath = $file->getRealpath();
                if ($file->getFilename() !== $realpath) {
                    $file = new FileInfo($file->getRealpath(), $file->getIndex());
                }
            }
            if ($file->is_dir()) {
                $l_DirCounter++;
                if ($this->collect_doorways && $l_DirCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                    $this->doorways[]  = $path;
                    $l_DirCounter = -655360;
                }
                $this->total_dir_counter++;
                yield from $this->walk($file, $follow_symlinks);
            } elseif ($file->is_file()) {
                if ($this->collect_doorways && is_callable([$this->filter, 'checkShortExt']) && $this->filter->checkShortExt($file)) {
                    $l_DoorwayFilesCounter++;
                    if ($l_DoorwayFilesCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                        $this->doorways[]           = $path;
                        $l_DoorwayFilesCounter = -655360;
                    }
                }
                if ($follow_symlinks && $this->isPathCheckedAlready($file->getFilename())) {
                    continue;
                }
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }

                $is_big_elf = false;
                if (
                    $this->collect_bigelffiles
                    && $is_big
                    && $file->isBinary()
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $is_big_elf = true;
                    if (!defined('CLOUDSCAN_MAX_ELF_SIZE') || $file->getSize() > CLOUDSCAN_MAX_ELF_SIZE) {
                        // Only add to the list of big ELF files if the max ELF file size is not set explicitly.
                        $this->big_elf_files[] = $file->getFilename();
                    }
                }
                if ($is_big) {
                    $need_to_scan = $this->filter->needToScan($file, false, [], ['check_size_range']);
                    if ($is_big_elf) {
                        if ($file->isCoreDump()) {
                            // Always prevent big core dump files from scanning.
                            $need_to_scan = false;
                        } elseif (
                            defined('CLOUDSCAN_MAX_ELF_SIZE')
                            && $file->getSize() <= CLOUDSCAN_MAX_ELF_SIZE
                        ) {
                            // Force big ELF files for scanning if the max ELF file size is set explicitly.
                            $need_to_scan = true;
                        }
                    }
                } else {
                    $need_to_scan = $this->filter->needToScan($file);
                }
                $this->total_files_counter = $need_to_scan ? $this->total_files_counter + 1 : $this->total_files_counter;
                $this->total++;
                if (defined('CLS_PROGRESS')) {
                    Progress::setCurrentFile($file->getFilename());
                    Progress::setFilesTotal($this->total_files_counter);
                    Progress::updateList($this->total);
                }
                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
        closedir($dirh);
    }

    private function expandPath(FileInfo $file, $follow_symlinks)
    {
        if ($file->file_exists()) {
            if ($file->is_dir()) {
                yield from $this->walk($file, $follow_symlinks);
            } else {
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }

                $is_big_elf = false;
                if (
                    $this->collect_bigelffiles
                    && $is_big
                    && $file->isBinary()
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $is_big_elf = true;
                    if (!defined('CLOUDSCAN_MAX_ELF_SIZE') || $file->getSize() > CLOUDSCAN_MAX_ELF_SIZE) {
                        // Only add to the list of big ELF files if the max ELF file size is not set explicitly.
                        $this->big_elf_files[] = $file->getFilename();
                    }
                }

                // If file is big and not an ELF file, we don't need to scan it.
                $need_to_scan = $is_big ? false : $this->filter->needToScan($file);
                if ($is_big_elf) {
                    if ($file->isCoreDump()) {
                        // Always prevent big core dump files from scanning.
                        $need_to_scan = false;
                    } elseif (
                        defined('CLOUDSCAN_MAX_ELF_SIZE')
                        && $file->getSize() <= CLOUDSCAN_MAX_ELF_SIZE
                    ) {
                        // Force big ELF files for scanning if the max ELF file size is set explicitly.
                        $need_to_scan = true;
                    }
                }

                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
    }

    public function find($target)
    {
        $started = AibolitHelpers::currentTime();

        if ($target === '/') {
            $target = '/*';
        }
        if (is_string($target) && substr($target, -1) === DIRECTORY_SEPARATOR) {
            $target = substr($target, 0, -1);
        }

        if (
            is_callable([$this->filter, 'getGenerated']) && !$this->filter->getGenerated()
            && is_callable([$this->filter, 'generateCheckers'])
        ) {
            $this->filter->generateCheckers();
        }

        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_LIST);
        }

        $paths = is_array($target) ? $target : new GlobIterator($target, FilesystemIterator::CURRENT_AS_PATHNAME);
        foreach ($paths as $path) {
            $this->initial_dir = realpath($path);
            $this->initial_level = substr_count($this->initial_dir, '/');
            $file = new FileInfo($path, 0);
            if (!$file->file_exists()) {
                continue;
            }
            $file = $this->resolve($file, $this->filter->isFollowSymlink());
            yield from $this->expandPath($file, $this->filter->isFollowSymlink());
        }

        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::FINDER_STAT, AibolitHelpers::currentTime() - $started);
        }
    }

    private function convertTemplatesToRegexp($templates)
    {
        return '~(' . str_replace([',', '.', '*'], ['|', '\\.', '.*'], $templates) . ')~i';
    }

    public function setLevelLimit($level)
    {
        $this->level_limit = $level;
    }

    public function getSymlinks()
    {
        return $this->sym_links;
    }

    public function getBigFiles()
    {
        return $this->big_files;
    }

    public function getBigElfFiles()
    {
        return $this->big_elf_files;
    }

    public function setCollectDoorways($flag)
    {
        $this->collect_doorways = $flag;
    }

    public function setCollectBigElfs($flag)
    {
        $this->collect_bigelffiles = $flag;
    }

    public function setCollectSymlinks($flag)
    {
        $this->collect_symLinks = $flag;
    }

    public function setCollectSkipped($flag)
    {
        $this->collect_skipped = $flag;
    }

    public function setCollectBigFiles($flag)
    {
        $this->collect_bigfiles = $flag;
    }

    public function getDoorways()
    {
        return $this->doorways;
    }

    public function skippedDirs()
    {
        return $this->skipped_folders;
    }

    public function getTotalDirs()
    {
        return $this->total_dir_counter;
    }

    public function getTotalFiles()
    {
        return $this->total_files_counter;
    }

    public function getFilter()
    {
        return $this->filter;
    }
}


class FileFilter
{
    const IMUNIFY_CLEANUP_STORAGE = '/var/imunify360/cleanup_storage';
    const LOG_AND_MAIL_PATTERN = [
        '/sess\_\w*$',
        '/stat/usage\_\w+\.html',
        '/stat/site\_\w+\.html',
        '/webstat/awstats.*\.txt',
        '/awstats/awstats.*\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/logs/error\_log\..*',
        '/logs/xferlog\..*',
        '/logs/access\_log\..*',
        '/domlogs/.+',
        '/logs/cron\..*',
        '/logs/exceptions/.+\.log(?:\.\d)?(?:\.gz)?$',
        '/mail(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/mail(?:/[^/]+)*/[^,]+,S=.+',
        '/mail(?:/[^/]+)*/storage/u\.[0-9]+',
        '/mail(?:/[^/]+)*/storage/m\.[0-9]+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=.+',
        '^/var/ossec/.*',
    ];

    const IMUNIFY_LOG_PATTERN = [
        '/var/log/imunify360/acronis-installer\.log$',
        '/var/log/imunify360/console\.log(?:\.\d)?(?:\.gz)?$',
        '/var/log/imunify360/debug\.log$',
        '/var/log/imunify360/error\.log$',
        '/var/log/install-mod\_remoteip\.log(?:\.\d{1.4})?(?:\.pid)?r$',
        '/var/log/imunify360/malware\_scan\_\d{10}\.log$',
        '/var/log/imunify360/network\.log$',
        '/var/log/imunify360/process\_message\.log$',
        '/var/log/imunify360-webshield/access.log(?:-\d{8})?(?:.gz)?$',
        '/var/log/imunify360-webshield/error.log(?:-\d{8})?(?:.gz)?$',
        '/.revisium_antivirus_cache/.revisium\d+/',
        '/admin/plib/modules/revisium-antivirus/library/externals/',
    ];

    const IMUNIFY_DIRS = [
        '/etc/cagefs/conf.d/ai-bolit.cfg',
        '/etc/cagefs/conf.d/clamav.cfg',
        '/etc/cagefs/exclude/imunify360',
        '/etc/chkserv.d/imunify-antivirus',
        '/etc/chkserv.d/imunify360-agent',
        '/etc/cron.daily/imunify-antivirus.cron',
        '/etc/cron.daily/imunify360.cron',
        '/etc/imunify360-webshield',
        '/etc/imunify360',
        '/etc/logrotate.d/imunify360',
        '/etc/nginx/conf.d/i360.remoteip.conf',
        '/etc/sysconfig/imunify360',
        '/opt/ai-bolit',
        '/opt/alt/python35/bin/imunify360-agent',
        '/opt/alt/python35/bin/imunify360-command-wrapper',
        '/opt/alt/python35/lib/python3.5/site-packages/defence360agent',
        '/opt/alt/python35/share/imunify360',
        '/run/chkservd/imunify360-webshield',
        '/run/chkservd/restart_track/imunify360-webshield',
        '/run/imunify360-webshield.pid',
        '/usr/bin/imunify-antivirus',
        '/usr/bin/imunify360-agent',
        '/usr/bin/imunify360-command-wrapper',
        '/usr/lib/systemd/system/imunify-antivirus.service',
        '/usr/lib/systemd/system/imunify360-pure.service',
        '/usr/lib/systemd/system/imunify360-webshield',
        '/usr/lib/systemd/system/imunify360.service',
        '/usr/local/cpanel/base/frontend/paper_lantern/imunify',
        '/usr/local/directadmin/plugins/Imunify',
        '/usr/sbin/imunify360-webshield',
        '/var/cache/imunify360-webshield',
        '/var/cpanel/apps',
        '/var/imunify360',
        '/var/log/cloudlinux-backup-util'
    ];

    const SHORT_LIST_EXT = [
        'php',
        'php3',
        'php4',
        'php5',
        'php7',
        'pht',
        'html',
        'htm',
        'phtml',
        'shtml',
        'khtml',
        '',
        'ico',
        'txt'
    ];

    const SUSPICIOUS_EXT = [
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml'
    ];

    private $sensitiveExt = [
        'php',
        'js',
        'json',
        'htaccess',
        'html',
        'htm',
        'tpl',
        'inc',
        'css',
        'txt',
        'sql',
        'ico',
        '',
        'susp',
        'suspected',
        'zip',
        'tar'
    ];

    const SKIP_SMART_MASK = [
        '/template_\w{32}.css',
        '/cache/templates/.{1,150}\.tpl\.php',
        '/system/cache/templates_c/\w{1,40}\.php',
        '/assets/cache/rss/\w{1,60}',
        '/cache/minify/minify_\w{32}',
        '/cache/page/\w{32}\.php',
        '/cache/object/\w{1,10}/\w{1,10}/\w{1,10}/\w{32}\.php',
        '/cache/wp-cache-\d{32}\.php',
        '/cache/page/\w{32}\.php_expire',
        '/cache/page/\w{32}-cache-page-\w{32}\.php',
        '\w{32}-cache-com_content-\w{32}\.php',
        '\w{32}-cache-mod_custom-\w{32}\.php',
        '\w{32}-cache-mod_templates-\w{32}\.php',
        '\w{32}-cache-_system-\w{32}\.php',
        '/cache/twig/\w{1,32}/\d+/\w{1,100}\.php',
        '/autoptimize/js/autoptimize_\w{32}\.js',
        '/bitrix/cache/\w{32}\.php',
        '/bitrix/cache/.{1,200}/\w{32}\.php',
        '/bitrix/cache/iblock_find/',
        '/bitrix/managed_cache/MYSQL/user_option/[^/]+/',
        '/bitrix/cache/s1/bitrix/catalog\.section/',
        '/bitrix/cache/s1/bitrix/catalog\.element/',
        '/bitrix/cache/s1/bitrix/menu/',
        '/catalog.element/[^/]+/[^/]+/\w{32}\.php',
        '/bitrix/managed\_cache/.{1,150}/\.\w{32}\.php',
        '/core/cache/mgr/smarty/default/.{1,100}\.tpl\.php',
        '/core/cache/resource/web/resources/[0-9]{1,50}\.cache\.php',
        '/smarty/compiled/SC/.{1,100}/%%.{1,200}\.php',
        '/smarty/.{1,150}\.tpl\.php',
        '/smarty/compile/.{1,150}\.tpl\.cache\.php',
        '/files/templates_c/.{1,150}\.html\.php',
        '/uploads/javascript_global/.{1,150}\.js',
        '/assets/cache/rss/\w{32}',
        'сore/cache/resource/web/resources/\d+\.cache\.php',
        '/assets/cache/docid_\d+_\w{32}\.pageCache\.php',
        '/t3-assets/dev/t3/.{1,150}-cache-\w{1,20}-.{1,150}\.php',
        '/t3-assets/js/js-\w{1,30}\.js',
        '/temp/cache/SC/.{1,100}/\.cache\..{1,100}\.php',
        '/tmp/sess\_\w{32}$',
        '/assets/cache/docid\_.{1,100}\.pageCache\.php',
        '/stat/usage\_\w{1,100}\.html',
        '/stat/site\_\w{1,100}\.html',
        '/gallery/item/list/\w{1,100}\.cache\.php',
        '/core/cache/registry/.{1,100}/ext-.{1,100}\.php',
        '/core/cache/resource/shk\_/\w{1,50}\.cache\.php',
        '/cache/\w{1,40}/\w+-cache-\w+-\w{32,40}\.php',
        '/webstat/awstats.{1,150}\.txt',
        '/awstats/awstats.{1,150}\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/inc/min/styles_\w+\.min\.css',
        '/inc/min/styles_\w+\.min\.js',
        '/logs/error\_log\.', '/logs/xferlog\.',
        '/logs/access_log\.',
        '/logs/cron\.',
        '/logs/exceptions/.{1,200}\.log$',
        '/hyper-cache/[^/]{1,50}/[^/]{1,50}/[^/]{1,50}/index\.html',
        '/mail/new/[^,]+,S=[^,]+,W=',
        '/mail/new/[^,]=,S=',
        '/application/logs/\d+/\d+/\d+\.php',
        '/sites/default/files/js/js_\w{32}\.js',
        '/yt-assets/\w{32}\.css',
        '/wp-content/cache/object/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/catalog\.section/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/simpla/design/compiled/[\w\.]{40,60}\.php',
        '/compile/\w{2}/\w{2}/\w{2}/[\w.]{40,80}\.php',
        '/sys-temp/static-cache/[^/]{1,60}/userCache/[\w\./]{40,100}\.php',
        '/session/sess_\w{32}',
        '/webstat/awstats\.[\w\./]{3,100}\.html',
        '/stat/webalizer\.current',
        '/stat/usage_\d+\.html'
    ];

    protected $zipFile = false;

    private $ignoreExt              = [];
    private $ignoreListPatterns     = [];

    private $ignoreList             = null;
    private $ignoreFilenameByRegexp = null;
    private $onlyFilepathRegexp     = null;
    private $skipFilesOlder         = null;
    private $initialDir             = null;

    private $file_checkers          = [];
    private $dir_checkers           = [];
    private $excludes               = [];

    private $check_is_not_root;
    private $check_is_not_system;
    private $check_is_file;
    private $ignore_quar;
    private $check_file_older;
    private $check_ignore_file;
    private $check_ignore_filename_template;
    private $check_only_filepath_template;
    private $check_scope;
    private $check_ext;
    private $ignore_ext;
    private $check_short_ext;
    private $ignore_path_pattern;
    private $check_size_range;
    private $ignore_excludes;
    private $check_file_patterns;
    private $check_file_not_patterns;
    private $ignore_dots;
    private $imunify_filter;
    private $skipRootOwner          = false;
    private $skipSystemOwner        = false;
    private $skipImunifyStorage     = false;
    private $followSymlink          = false;
    private $ignoreQuarantine       = false;
    private $scanAllExt             = false;
    private $smartScan              = false;
    private $imunify_filters        = false;
    private $ignorePathPattern      = true;
    private $defaultExcludes        = true;

    private $ignored_av_admin_paths = null;
    private $generated              = false;
    private $size_range             = [];
    private $uid_range              = [];

    private $ignored_av_admin                   = null;
    private $ignored_av_admin_file_exists       = null;
    private $ignored_av_internal                = null;
    private $ignored_av_internal_file_exists    = null;
    private $admin_watched                      = null;

    private $ignore_symlink     = true;
    private $match_patterns     = [];
    private $no_match_patterns  = [];

    private $ignored_av_admin_file      = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin.txt';
    private $ignored_avadmin_paths_file = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin-paths.txt';
    private $ignored_av_internal_file   = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-internal.txt';
    private $admin_watched_file         = '/etc/sysconfig/imunify360/malware-filters-admin-conf/admin/watched.txt';
    private $basedirs_file              = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/basedirs-list.txt';

    private function getIgnoredAVAdminFileExists()
    {
        if (is_null($this->ignored_av_admin_file_exists)) {
            $this->ignored_av_admin_file_exists = is_readable($this->ignored_av_admin_file);
        }
        return $this->ignored_av_admin_file_exists;
    }

    private function getIgnoredAVInternalFileExists()
    {
        if (is_null($this->ignored_av_internal_file_exists)) {
            $this->ignored_av_internal_file_exists = is_readable($this->ignored_av_internal_file);
        }
        return $this->ignored_av_internal_file_exists;
    }

    private function getIgnoredAVAdmin()
    {
        if (!$this->getIgnoredAVAdminFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_admin)) {
            $this->ignored_av_admin = '~' . trim(file_get_contents($this->ignored_av_admin_file)) . '~msi';
        }
        return $this->ignored_av_admin;
    }

    private function addToIgnoreTree($path)
    {
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                $_path[$tree[$i]] = null;
            }
            if ($_path[$tree[$i]] === true) {
                return;
            }
            if ($i === 0) {
                $_path[$tree[$i]] = true;
            }
            $_path = &$_path[$tree[$i]];
        }
    }

    private function checkAVAdminPathsIgnored($path)
    {
        if (is_null($this->ignored_av_admin_paths)) {
            return false;
        }
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                return false;
            }
            if ($_path[$tree[$i]] === true) {
                return true;
            }
            $_path = &$_path[$tree[$i]];
        }
        return false;
    }

    private function loadIgnoredAVAdminPaths()
    {
        $file = new SplFileObject($this->ignored_avadmin_paths_file, 'r');
        $file->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
        foreach ($file as $path) {
            if ($path) {
                $this->addToIgnoreTree(base64_decode($path));
            }
        }
    }

    private function getIgnoredAVInternal()
    {
        if (!$this->getIgnoredAVInternalFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_internal)) {
            $this->ignored_av_internal = '~' . trim(file_get_contents($this->ignored_av_internal_file)) . '~msi';
        }
        return $this->ignored_av_internal;
    }

    private function getBaseDirs()
    {
        return file($this->basedirs_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    }

    private function fixTrailingSlash($path)
    {
        if ($path[0] !== '/') {
            $path = '/' . $path;
        }
        return $path;
    }

    private function resolveBaseDirs($basedirs, $path)
    {
        $result = [];
        $tmp = substr($path, 1);
        $tmp = $this->fixTrailingSlash($tmp);
        foreach ($basedirs as $dir) {
            $result[] = $dir . $tmp;
        }
        return $result;
    }

    private function processWatchedItems($basedirs, $paths)
    {
        $result = [];
        foreach ($paths as $item) {
            $item = trim($item);
            if ($item[0] === '#') {
                continue;
            } elseif ($item[0] === '+') {
                $result = array_merge($result, $this->resolveBaseDirs($basedirs, $item));
            } else {
                $result[] = $item;
            }
        }
        return $result;
    }

    private function getAdminWatched()
    {
        if (is_null($this->admin_watched)) {
            $this->admin_watched = [];
            $basedirs = $this->getBaseDirs();
            $paths = file($this->admin_watched_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            $this->admin_watched = $this->processWatchedItems($basedirs, $paths);
        }
        return $this->admin_watched;
    }

    public function setSmartScan()
    {
        $this->smartScan = true;
    }

    public function isSmartScan()
    {
        return $this->smartScan;
    }

    public function setImunifyFilters()
    {
        if ($this->getIgnoredAVAdminFileExists() || $this->getIgnoredAVInternalFileExists()) {
            $this->imunify_filters = true;
        }
    }

    public function setSkipImunifyStorage()
    {
        $this->skipImunifyStorage = true;
        $this->addToExcludes(self::IMUNIFY_CLEANUP_STORAGE);
    }

    public function setScanAll()
    {
        $this->scanAllExt = true;
    }

    public function setSizeRange($min, $max)
    {
        $this->size_range[0] = $min;
        $this->size_range[1] = $max;
    }

    public function setIgnoreExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->ignoreExt = explode(',', $ext_list);
        for ($i = 0, $iMax = count($this->ignoreExt); $i < $iMax; $i++) {
            $this->ignoreExt[$i] = trim($this->ignoreExt[$i]);
        }
        $this->ignoreExt = array_flip($this->ignoreExt);
    }

    public function getIgnoreExt()
    {
        return array_flip($this->ignoreExt);
    }

    public function setSensitiveExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->sensitiveExt = explode(",", $ext_list);
        for ($i = 0, $iMax = count($this->sensitiveExt); $i < $iMax; $i++) {
            if ($this->sensitiveExt[$i] == '.') {
                $this->sensitiveExt[$i] = '';
            }
        }
        $this->sensitiveExt = array_flip($this->sensitiveExt);
    }

    public function getSensitiveExt()
    {
        return array_flip($this->sensitiveExt);
    }

    public function setIgnoreListPatterns($filepath)
    {
        if (!is_readable($filepath)) {
            return;
        }
        $this->ignoreListPatterns = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $pattern) {
            if (trim($pattern) === '') {
                continue;
            }
            $this->ignoreListPatterns[] = $pattern;
        }
    }

    public function __construct()
    {
        $this->sensitiveExt = array_merge($this->sensitiveExt, self::SUSPICIOUS_EXT);
        $this->sensitiveExt = array_flip($this->sensitiveExt);

        $this->ignore_quar = function (FileInfo $file) {
            if (strpos($file->getFilename(), '/.imunify.quarantined') !== false) {
                if (!$file->file_exists()) {
                    return false;
                }
                return $file->getUid() !== 0;
            }
            return true;
        };

        $this->ignore_excludes = function (FileInfo $file) {
            $tree = $this->getTree($file->getFilename());
            if ($this->pathRelatesTo($tree, $this->excludes)) {
                $this->addStatsItem('checker_ignore_excludes', false, $file);
                return false;
            }
            $this->addStatsItem('checker_ignore_excludes', true, $file);
            return true;
        };

        $this->check_file_older = function (FileInfo $file) {
            $res = ($file->getModified() > $this->skipFilesOlder) || ($file->getCreated() > $this->skipFilesOlder);
            $this->addStatsItem('checker_file_older', $res, $file);
            return $res;
        };

        $this->check_ignore_file = function (FileInfo $file) {
            $tree = $this->getTree($file->getFilename());
            if ($this->pathRelatesTo($tree, $this->ignoreList, true)) {
                $this->addStatsItem('checker_ignore_file', false, $file);
                return false;
            }
            $this->addStatsItem('checker_ignore_file', true, $file);
            return true;
        };

        $this->check_ignore_filename_template = function (FileInfo $file) {
            $res = !preg_match($this->ignoreFilenameByRegexp, $file->getBasename());
            $this->addStatsItem('checker_ignore_filename_template', $res, $file);
            return $res;
        };

        $this->check_only_filepath_template = function (FileInfo $file) {
            $res = preg_match($this->onlyFilepathRegexp, $file->getFilename());
            $this->addStatsItem('checker_only_filepath_template', $res, $file);
            return $res;
        };

        $this->check_is_not_root = function (FileInfo $file) {
            $res = $file->getGid() !== 0 && $file->getUid() !== 0;
            $this->addStatsItem('checker_is_not_root', $res, $file);
            return $res;
        };

        $this->check_is_not_system = function (FileInfo $file) {
            if (!$this->skipSystemOwner) {
                $this->addStatsItem('checker_is_not_system', DecisionMakingStats::CHECKER_SCAN_DISABLED, $file);
                return true;
            }
            if (strpos($file->getFilename(), '/var/spool/cron') === 0) {
                $this->addStatsItem('checker_is_not_system', DecisionMakingStats::CHECKER_SCAN_CRON, $file);
                return true;
            }
            list($min_uid, $max_uid) = $this->uid_range;
            $uid = $file->getUid();
            $res = (
                $uid == 33 # 33 is UID for www-data user
                || (
                    is_null($max_uid)
                    && $uid >= $min_uid
                )
                || (
                    !is_null($max_uid)
                    && $uid >= $min_uid
                    && $uid <= $max_uid
                )

            );
            $this->addStatsItem('checker_is_not_system', $res, $file);
            return $res;
        };

        $this->check_is_file = function (FileInfo $file) {
            $res = $file->file_exists() && $file->is_file() && $file->is_readable();
            $this->addStatsItem('checker_is_file', $res, $file);
            return $res;
        };

        $this->check_size_range = function (FileInfo $file) {
            if (empty($this->size_range)) {
                return true;
            }
            $filesize = $file->getSize();
            $small = $filesize < $this->size_range[0];
            $big = $filesize > $this->size_range[1];
            if ($small) {
                $this->addStatsItem('checker_size_range', 'TOO_SMALL', $file);
            } elseif ($big) {
                $this->addStatsItem('checker_size_range', 'TOO_BIG', $file);
            } else {
                $this->addStatsItem('checker_size_range', true, $file);
            }
            return (!$small && !$big);
        };

        $this->check_file_patterns = function (FileInfo $file) {
            foreach ($this->match_patterns as $pattern) {
                $match = fnmatch($pattern, $file->getFilename());
                if ($match) {
                    $this->addStatsItem('checker_file_patterns', $match, $file);
                    return $match;
                }
            }
            $this->addStatsItem('checker_file_patterns', false, $file);
            return false;
        };

        $this->check_file_not_patterns = function (FileInfo $file) {
            foreach ($this->no_match_patterns as $pattern) {
                $match = fnmatch($pattern, $file->getFilename());
                if ($match) {
                    $this->addStatsItem('checker_file_not_patterns', !$match, $file);
                    return !$match;
                }
            }
            $this->addStatsItem('checker_file_not_patterns', true, $file);
            return true;
        };

        $this->ignore_symlink = function (FileInfo $file) {
            return !$file->is_link();
        };

        $this->check_scope = function (FileInfo $file) {
            return strpos($file->getFilename(), $this->initialDir) === 0;
        };

        $this->ignore_dots = function (FileInfo $file) {
            return !($file->getFilename() === '.' || $file->getFilename() === '..');
        };

        $this->check_ext = function (FileInfo $file) {
            if ($this->scanAllExt) {
                $this->addStatsItem('checker_ext', true, $file);
                return true;
            }
            $ext = strtolower($file->getExtension());
            $res = isset($this->sensitiveExt[$ext]);
            $this->addStatsItem('checker_ext', $res, $file);
            return $res;
        };

        $this->ignore_ext = function (FileInfo $file) {
            $ext = strtolower($file->getExtension());
            $res = !isset($this->ignoreExt[$ext]);
            $this->addStatsItem('checker_ignore_ext', $res, $file);
            return $res;
        };

        $this->check_short_ext = function (FileInfo $file) {
            $ext = strtolower($file->getExtension());
            return in_array($ext, self::SHORT_LIST_EXT);
        };

        $this->ignore_path_pattern = function (FileInfo $file) {
            foreach ($this->ignoreListPatterns as $pattern) {
                if (($pattern !== '') && preg_match($pattern, $file->getFilename())) {
                    $this->addStatsItem('checker_ignore_path_pattern', false, $file);
                    return false;
                }
            }
            $this->addStatsItem('checker_ignore_path_pattern', true, $file);
            return true;
        };

        $this->imunify_filter = function (FileInfo $file) {
            if (!is_null($this->getIgnoredAVAdmin()) && preg_match($this->getIgnoredAVAdmin(), $file->getFilename())) {
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_admin_pattern', $file);
                return false;
            }

            if ($this->checkAVAdminPathsIgnored($file->getFilename())) {
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_admin_path', $file);
                return false;
            }

            if (!is_null($this->getIgnoredAVInternal()) && preg_match($this->getIgnoredAVInternal(), $file->getFilename())) {
                foreach ($this->getAdminWatched() as $rec_watched) {
                    if (fnmatch($rec_watched, $file->getFilename())) {
                        $this->addStatsItem('checker_imunify_filter', 'watched_by_admin_pattern___ignored_by_internal_pattern', $file);
                        return true;
                    }
                }
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_internal_pattern', $file);
                return false;
            }
            $this->addStatsItem('checker_imunify_filter', true, $file);
            return true;
        };

        $this->file_checkers[] = $this->check_is_file;
        $this->file_checkers[] = $this->check_size_range;
        $this->file_checkers[] = $this->check_ext;
        $this->file_checkers[] = $this->ignore_dots;
        $this->dir_checkers[] = $this->ignore_dots;
    }

    public function setIgnoreListFile($filepath)
    {
        if (!is_readable($filepath)) {
            return;
        }
        $this->ignoreList = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $base64_filepath) {
            if ($base64_filepath !== '') {
                $this->ignoreList[$base64_filepath] = '';
            }
        }
    }

    public function addToExcludes($path)
    {
        $this->excludes[$path] = '';
    }

    public function setExcludes($paths)
    {
        $this->excludes = array_flip($paths);
    }

    public function setIgnoreFilenames($templates)
    {
        if (!$templates) {
            return;
        }

        $this->no_match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->no_match_patterns); $i < $iMax; $i++) {
            $this->no_match_patterns[$i] = trim($this->no_match_patterns[$i]);
        }
    }

    public function setOnlyFilepaths($templates)
    {
        if (empty($templates)) {
            return;
        }
        $this->match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->match_patterns); $i < $iMax; $i++) {
            $this->match_patterns[$i] = trim($this->match_patterns[$i]);
        }
    }

    public function setSkipFilesOlder($unix_timestamp)
    {
        $this->skipFilesOlder = $unix_timestamp;
    }

    public function setSkipRootOwner()
    {
        $this->skipRootOwner = true;
    }

    public function setUidRange($min_max_uid)
    {
        if (is_array($min_max_uid)) {
            $this->uid_range = $min_max_uid;
        }
    }

    public function setSkipSystemOwner($value)
    {
        $this->skipSystemOwner = $value;
    }

    public function setFollowSymlink()
    {
        $this->followSymlink = true;
    }

    public function isFollowSymlink()
    {
        return $this->followSymlink;
    }


    public function setIgnoreQuarantine()
    {
        $this->ignoreQuarantine = true;
    }

    public function setIgnorePathPattern($value)
    {
        $this->ignorePathPattern = $value;
    }

    public function setDefaultExcludes($value)
    {
        $this->defaultExcludes = $value;
    }

    public function generateCheckers()
    {
        $file_checkers = $this->file_checkers;
        $dir_checkers = $this->dir_checkers;

        if ($this->defaultExcludes) {
            $this->excludes = array_merge(array_flip(self::IMUNIFY_DIRS), $this->excludes);
        }
        if (!empty($this->excludes)) {
            $file_checkers[] = $this->ignore_excludes;
            $dir_checkers[] = $this->ignore_excludes;
        }
        if ($this->ignorePathPattern) {
            $file_checkers[] = $this->ignore_path_pattern;
            $dir_checkers[]  = $this->ignore_path_pattern;
        }
        if ($this->match_patterns) {
            $file_checkers[] = $this->check_file_patterns;
        }
        if ($this->no_match_patterns) {
            $file_checkers[] = $this->check_file_not_patterns;
        }
        if ($this->skipRootOwner) {
            $file_checkers[] = $this->check_is_not_root;
        }
        if ($this->skipSystemOwner && !empty($this->uid_range)) {
            $file_checkers[] = $this->check_is_not_system;
        }

        if (!$this->followSymlink) {
            $file_checkers[] = $this->ignore_symlink;
            $dir_checkers[]  = $this->ignore_symlink;
        }

        if ($this->ignoreQuarantine) {
            $file_checkers[] = $this->ignore_quar;
            $dir_checkers[]  = $this->ignore_quar;
        }

        if ($this->skipFilesOlder) {
            $file_checkers[] = $this->check_file_older;
        }

        if ($this->ignoreFilenameByRegexp) {
            $file_checkers[] = $this->check_ignore_filename_template;
        }

        if (!empty($this->ignoreList)) {
            $file_checkers[] = $this->check_ignore_file;
            $dir_checkers[] = $this->check_ignore_file;
        }

        if ($this->onlyFilepathRegexp) {
            $file_checkers[] = $this->check_only_filepath_template;
        }

        if (!empty($this->ignoreExt)) {
            $file_checkers[] = $this->ignore_ext;
        }

        if ($this->imunify_filters) {
            $file_checkers[] = $this->imunify_filter;
            $dir_checkers[]  = $this->imunify_filter;
        }

        $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::IMUNIFY_LOG_PATTERN, self::LOG_AND_MAIL_PATTERN);

        if ($this->smartScan) {
            $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::SKIP_SMART_MASK);
        }

        $this->ignoreListPatterns = array_map(function ($item) {
            return ($item !== '') ? ('#' . $item . '#') : $item;
        }, $this->ignoreListPatterns);

        if ($this->imunify_filters && file_exists($this->ignored_avadmin_paths_file)) {
            $this->loadIgnoredAVAdminPaths();
        }

        $this->file_checkers = $file_checkers;
        $this->dir_checkers = $dir_checkers;
        $this->generated = true;
    }

    public function getFileCheckers()
    {
        return $this->file_checkers;
    }

    public function getDirCheckers()
    {
        return $this->dir_checkers;
    }

    private function funcInArray($func, $array)
    {
        foreach ($array as $item) {
            if ($this->$item === $func) {
                return true;
            }
        }
        return false;
    }

    private function check($file, $where, $skip_filters = [], $include_filters = [])
    {
        if (!$file) {
            return false;
        }
        foreach ($where as $func) {
            if (empty($func)) {
                continue;
            }
            if (!empty($include_filters) && !$this->funcInArray($func, $include_filters)) {
                continue;
            }
            if (!empty($skip_filters) && $this->funcInArray($func, $skip_filters)) {
                continue;
            }
            if (!$func($file)) {
                return false;
            }
        }
        return true;
    }

    public function needToScan($file, $only_dir = false, $skip_filters = [], $include_filters = [])
    {
        if (!$file) {
            return false;
        }

        $this->addStatsItem('finder', 'FOUND_BEFORE_CHECKERS', $file);

        if (!$only_dir && !$this->check($file, $this->getFileCheckers(), $skip_filters, $include_filters)) {
            return false;
        }

        if ($only_dir && !$this->check($file, $this->getDirCheckers(), $skip_filters, $include_filters)) {
            return false;
        }

        $this->addStatsItem('finder', 'FOUND_AFTER_CHECKERS', $file);

        return true;
    }

    private function getTree($file, $basename = false)
    {
        $tree = [];
        $path = $file;
        $tree[] = $basename ? AibolitHelpers::getBaseName($file) : $file;
        while ($path !== '.' && $path !== '/' && $path !== '') {
            $path = dirname($path, 1);
            $tree[] = $basename ? AibolitHelpers::getBaseName($path) : $path;
        }
        return $tree;
    }

    private function pathRelatesTo($tree, $pathes, $base64 = false)
    {
        foreach ($tree as $path) {
            if ($base64) {
                $path = base64_encode($path);
            }
            if (isset($pathes[$path])) {
                return true;
            }
        }
        return false;
    }

    private function addStatsItem(string $item, $verdict, FileInfo $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::CHECKER_SCAN;
            }
            if ($verdict === false) {
                $verdict = DecisionMakingStats::CHECKER_SKIP;
            }
            DecisionMakingStats::addStatsItem($item, $verdict, $file);
        }
    }

    public function checkShortExt(FileInfo $file)
    {
        return $this->check_short_ext->call($this, $file);
    }

    public function checkNotSystem(FileInfo $file)
    {
        return $this->check_is_not_system->call($this, $file);
    }

    public function checkIsBig(FileInfo $file)
    {
        $res = ($file->getSize() > $this->size_range[1]);
        return $res;
    }

    public function getGenerated()
    {
        return $this->generated;
    }
}


/**
 * Class ScanList
 */
class ScanList extends \SplFileObject
{
    private $base64;
    private $skip_first_line;

    public function __construct($filepath, $base64 = false, $skip_first_line = false)
    {
        parent::__construct($filepath, 'r');
        $this->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        $this->base64 = $base64;
        $this->skip_first_line = $skip_first_line;
    }

    #[\ReturnTypeWillChange]
    public function rewind()
    {
        parent::rewind();
        if ($this->skip_first_line) {
            parent::next();
        }
    }

    #[\ReturnTypeWillChange]
    public function current()
    {
        return $this->base64 ? FilepathEscaper::decodeFilepathByBase64(parent::current()) : parent::current();
    }

    #[\ReturnTypeWillChange]
    public function seek($line)
    {
        parent::seek(++$line);
    }

    #[\ReturnTypeWillChange]
    public function count()
    {
        $this->seek($this->getSize());
        $size = $this->key();
        $this->seek(0);
        if ($this->skip_first_line) {
            $size--;
        }
        return $size;
    }
}


if (!defined('FUNC_AIBOLIT_ON_BIGFILE')) {
    define('FUNC_AIBOLIT_ON_BIGFILE', function_exists('aibolit_onBigFile'));
}
if (!defined('FUNC_AIBOLIT_ON_READ_ERROR')) {
    define('FUNC_AIBOLIT_ON_READ_ERROR', function_exists('aibolit_onReadError'));
}
class Scanner
{
    private $addPrefix;
    private $noPrefix;

    /**
     * @var Finder
     */
    private $finder;
    private $vars;
    private $debug;
    private $critical_fs;
    private $max_size_scan_bytes;
    private $suspicious;

    public function __construct($finder, $vars, DebugMode $debug, $max_size_scan_bytes = null, $force_ignore_suspicious = false)
    {
        defined('SCAN_DELAY') ?: define('SCAN_DELAY', 0);

        $this->addPrefix            = isset($vars->options['addprefix'])    ? $vars->options['addprefix']   : '';
        $this->noPrefix             = isset($vars->options['noprefix'])     ? $vars->options['noprefix']    : '';
        $this->finder               = $finder;
        $this->vars                 = $vars;
        $this->suspicious           = $force_ignore_suspicious ? false : isset($vars->options['with-suspicious']);
        $this->debug                = $debug;
        $this->critical_fs          = Factory::instance()->create(CriticalFileSpecification::class);
        $this->max_size_scan_bytes  = is_null($max_size_scan_bytes) ? MAX_SIZE_SCAN_BYTES : $max_size_scan_bytes;
    }

    private function CloudAssitedFilter($car, $files_list)
    {
        $black_files = [];
        $white_files = [];
        $white_extended_files = [];
        $injection_files = [];
        $cas_time = 0;
        try {
            $cas_start_time       = AibolitHelpers::currentTime();
            $cloud_assist_files   = new CloudAssistedFiles($car, $files_list, $this->vars);
            $cas_time             = AibolitHelpers::currentTime() - $cas_start_time;
            $white_files          = $cloud_assist_files->getWhiteList();
            $white_extended_files = $cloud_assist_files->getWhiteExtendedList();
            $black_files          = $cloud_assist_files->getBlackList();
            $injection_files      = $cloud_assist_files->getInjectionList();
            unset($cloud_assist_files);
        } catch (\Exception $e) {
            fwrite(STDERR, 'Warning: [CAS] ' . $e->getMessage() . PHP_EOL);
            if ($this->debug->isDebug()) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
        foreach ($white_files as $file => $prop) {
            $this->caAddStatsItem('white', $prop['fi']);
        }
        foreach ($white_extended_files as $file => $prop) {
            $this->caAddStatsItem('white_extended', $prop['fi']);
        }
        foreach ($black_files as $file => $prop) {
            $this->caAddStatsItem('black', $prop['fi']);
        }
        foreach ($injection_files as $file => $prop) {
            $this->caAddStatsItem('injection', $prop['fi']);
        }
        foreach (array_intersect_key($black_files, $white_files) as $file => $prop) {
            $this->caAddStatsItem('dual_use', $prop['fi']);
        }

        foreach ([$black_files, $injection_files] as $files) {
            foreach ($files as $filepath => $file_stat) {
                if (isset($white_files[$filepath]) || isset($white_extended_files[$filepath])) {
                    continue;
                }
                $this->vars->blackFiles[] = $file_stat['fi']->getIndex();
                $this->vars->blackFilesSig[] = [crc32($file_stat['fi']->getFilename()) => $file_stat['sn'] ?? 'cld'];
                $this->AddResult($file_stat['fi'], $file_stat['fi']->getIndex(), $this->vars);
            }
        }

        $res = @array_diff_key($files_list, $black_files, $injection_files, $white_files, $white_extended_files);
        foreach ($res as $file) {
            $this->caAddStatsItem(true, $file);
        }
        ResidentStats::setWhiteCount(count($white_files));
        ResidentStats::setWhiteExtendedCount(count($white_extended_files));
        ResidentStats::setBlackCount(count($black_files));
        ResidentStats::setInjectionCount(count($injection_files));
        ResidentStats::addCasTime($cas_time);
        return $res;
    }

    public function QCR_ScanDirectories($l_RootDir)
    {
        static $l_Buffer = '';

        if ($this->debug->isDebug()) {
            $this->debug->QCR_Debug('Scan ' . $l_RootDir);
        }

        $listFiles = $this->finder->find($l_RootDir);
        foreach ($listFiles as $l_FileName) {
            if (ONE_PASS) {
                $file = new FileInfo($l_FileName, $this->vars->counter);
                $this->QCR_ScanFile($file, $this->vars, null, $this->vars->counter++);
            } else {
                $l_Buffer .= FilepathEscaper::encodeFilepathByBase64($l_FileName) . "\n";
            }

            $this->vars->counter++;

            if (strlen($l_Buffer) > 32000) {
                file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
                $l_Buffer = '';
            }
        }

        $this->vars->symLinks        = $this->finder->getSymlinks();
        $this->vars->doorway         = $this->finder->getDoorways();
        $this->vars->foundTotalDirs  = $this->finder->getTotalDirs();
        $this->vars->foundTotalFiles = $this->finder->getTotalFiles();

        if (
            !empty($l_Buffer)
            && (isset($this->vars->options['use-template-in-path'])
                || $l_RootDir == ROOT_PATH
            )
        ) {
            file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
            $l_Buffer = '';
        }
        unset($listFiles);
    }

    public function QCR_GoScan($s_file, $ca, $callback = null, $filters = false, $skip_filters = [])
    {
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        if ($this->debug->isDebug()) {
            $this->debug->QCR_Debug('QCR_GoScan ');
        }
        try {
            $i = 0;
            $filesForCloudAssistedScan = [];

            if (!is_null($ca) && defined('RAPID_ACCOUNT_SCAN')) {
                $cloud_assited_storage = Factory::instance()->create(CloudAssistedStorage::class, [RAPID_ACCOUNT_SCAN]);
                $storage = Factory::instance()->create(RapidScanStorage::class, [RAPID_ACCOUNT_SCAN]);
                /** @var RapidAccountScan $scanner */
                $scanner = Factory::instance()->create(RapidAccountScan::class, [$this, $storage, $ca, $cloud_assited_storage, &$this->vars, $i]);
                $scanner->scan($s_file, $this->vars, constant('RapidAccountScan::RESCAN_' . RAPID_ACCOUNT_SCAN_TYPE));
                if ($scanner->getStrError()) {
                    if ($this->debug->isDebug()) {
                        $this->debug->QCR_Debug('Rapid scan log: ' . $scanner->getStrError());
                    }
                }
                $this->vars->rescanCount += $scanner->getRescanCount();
                $this->vars->rescanRxGood += $scanner->getRescanRxGoodCount();
                return;
            }

            $scan_bufer_files = function ($files_list) use ($callback, $ca) {
                $this->vars->hashtable = new HashTable();
                $files_to_scan = $this->CloudAssitedFilter($ca, $files_list);
                $this->vars->files_and_ignored += count($files_list) - count($files_to_scan);
                foreach ($files_to_scan as $file) {
                    $this->QCR_ScanFile($file, $this->vars, $callback, $file->getIndex());
                    $file->cleanContentCache();
                }
                $this->vars->hashtable = null;
            };

            foreach ($s_file as $index => $filepath) {
                $file = new FileInfo($filepath, $index, $this->vars->hashtable);
                if (!$file->file_exists()) {
                    continue;
                }

                if ($callback !== null) {
                    $this->callCallback($callback);
                }

                if ($filters instanceof FileFilter) {
                    if (!$filters->needToScan($file, false, $skip_filters)) {
                        $this->vars->foundTotalFiles--;
                        continue;
                    }
                }

                if (isset($this->vars->users)) {
                    $this->vars->users->add($file->getUid());
                }

                if (substr($filepath, -1) == DIR_SEPARATOR || is_null($ca)) {
                    $this->QCR_ScanFile($file, $this->vars, $callback, $i++);
                    continue;
                }

                if ($this->isFileTooBigForCloudscan($file)) {
                    $this->caAddStatsItem('skipped', $file);
                    $this->QCR_ScanFile($file, $this->vars, $callback, $file->getIndex());
                    continue;
                }

                // collecting files to scan with Cloud Assistant
                $filesForCloudAssistedScan[$file->getFilename()] = $file;
                if (count($filesForCloudAssistedScan) >= CLOUD_ASSIST_LIMIT) {
                    $scan_bufer_files($filesForCloudAssistedScan);
                    $filesForCloudAssistedScan = [];
                }
            }

            if (count($filesForCloudAssistedScan)) {
                $scan_bufer_files($filesForCloudAssistedScan);
            }

            unset($filesForCloudAssistedScan);
        } catch (Exception $e) {
            if ($this->debug->isDebug()) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
        if (defined('CLS_PROGRESS')) {
            Progress::done();
        }
    }

    public function QCR_ScanFile(FileInfo $file, $vars, $callback = null, $i = 0, $show_progress = true)
    {
        $l_Filename = $file->getFilename();

        $this->delayWithCallback(SCAN_DELAY, $callback);
        $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
        $g_SkipNextCheck = false;
        $g_SusExt = false;

        $l_CriticalDetected = false;
        $error = 0;

        if (substr($l_Filename, -1) == DIR_SEPARATOR) {
            // FOLDER
            $vars->structure['n'][$i] = $l_Filename;
            $vars->totalFolder++;
            if (defined('CLS_PROGRESS')) {
                Progress::setCurrentFile($l_Filename);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS  => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($vars->files_and_ignored);
            }
            return null;
        }

        if ($this->debug->isDebug()) {
            $this->debug->QCR_Debug('Scan file ' . $file->getFilename());
        }

        if ($show_progress && defined('CLS_PROGRESS')) {
            Progress::setCurrentFile($l_Filename);
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS  => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);
            Progress::updateScan(++$vars->files_and_ignored);
        }

        $l_Ext      = strtolower($file->getExtension());
        $l_Content  = '';

        $check_heuristics = defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS') || defined('USE_HEURISTICS_IGNORE');

        if ($check_heuristics) {
            $isBinary = $file->isBinary();
            if ($isBinary) {
                // Skip core dump files.
                $isCoreDump = $file->isCoreDump();
                $this->addStatsItem('core_dump', $isCoreDump, $file);
                if ($isCoreDump) {
                    return null;
                }

                if (defined('USE_HEURISTICS_IGNORE')) {
                    $this->addStatsItem('elf', 'heuristics_ignore', $file);
                    HashVerdicts::add($file->getSha256(), 'elf:heuristics_ignore');
                    return null;
                }

                $this->AddResult($file, $i, $vars);

                $heur_sig = 'SMW-HEUR-ELF';

                if (defined('USE_HEURISTICS')) {
                    $this->addStatsItem('elf', 'heuristics', $file);
                    $vars->criticalPHP[]         = $i;
                    $vars->criticalPHPFragment[] = $heur_sig;
                    $vars->criticalPHPSig[]      = $heur_sig;
                    HashVerdicts::add($file->getSha256(), 'elf:heuristics');
                } elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                    $this->addStatsItem('elf', 'heuristics_suspicious', $file);
                    $vars->warningPHP[]         = $i;
                    $vars->warningPHPFragment[] = $heur_sig;
                    $vars->warningPHPSig[]      = $heur_sig;
                    HashVerdicts::add($file->getSha256(), 'elf:heuristics_suspicious');
                }

                $return = [ RapidScanStorageRecord::HEURISTIC, $heur_sig, $heur_sig ];

                return $return;
            } else {
                $this->addStatsItem('elf', false, $file);
            }
        }

        // FILE
        $is_too_big = $this->isFileTooBigForScanWithSignatures($file->getSize());
        if ($file->getSize() === null) {
            fwrite(STDERR, 'Warning: Can\'t stat file ' . $file->getFilename() . ', skipping.' . PHP_EOL);
            return null;
        }

        if (!$this->max_size_scan_bytes && $is_too_big) {
            $this->addStatsItem('checker_size_range_sig_scan', 'TOO_BIG', $file);
            HashVerdicts::add($file->getSha256(), 'checker_size_range_sig_scan:TOO_BIG');
            if (FUNC_AIBOLIT_ON_BIGFILE) {
                /** @phpstan-ignore-next-line */
                aibolit_onBigFile($l_Filename);
            }
            return false;
        }
        $this->addStatsItem('checker_size_range_sig_scan', true, $file);

        $l_TSStartScan  = AibolitHelpers::currentTime();
        $vars->totalFiles++;
        if (
            SMART_SCAN
            && !$this->max_size_scan_bytes
            && !$is_too_big
            && !$this->critical_fs->satisfiedBy($l_Ext, 'extensions')
            && !$file->isInteresting()
        ) {
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_not_interesting');
            $this->addStatsItem('smart_scan', 'is_not_interesting', $file);
            if (DEBUG_MODE) {
                echo "Skipped file, not critical.\n";
            }
            Errors::add('pcre', $file, 'FileInfo', $file->getError());
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
            if ($this->debug->getDebugPerformance()) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            unset($l_Unwrapped); /** @phpstan-ignore-line */
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'FileInfo', $file->getError());
        if (SKIP_DIE && $file->isLog()) {
            $this->addStatsItem('smart_scan', 'is_die', $file);
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_die');
            if (DEBUG_MODE) {
                echo "Skipped file, is log.\n";
            }
            Errors::add('pcre', $file, 'FileInfo', $file->getError());
            $return = [RapidScanStorageRecord::RX_SKIPPED_DIE, '', ''];
            if ($this->debug->getDebugPerformance()) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            unset($l_Unwrapped); /** @phpstan-ignore-line */
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'FileInfo', $file->getError());
        $file_type = $file->filetype();
        $l_Unwrapped = '';
        if (
            $file_type === 'file' ||
            (isset($vars->options['follow-symlink']) && $file_type === 'link') ||
            ($file_type === 'unknown' && $file instanceof ZipFileInfo)
        ) {
            if ($is_too_big && $this->max_size_scan_bytes) {
                $l_Content = $file->getContentBytes($this->max_size_scan_bytes);
            } else {
                $l_Content = $file->getContent();
            }
            $l_Unwrapped = $file->getContentWithoutSpaces($this->max_size_scan_bytes);
        }
        if (
            SMART_SCAN && !$this->satisfiedBySmartScan(
                $this->critical_fs,
                $l_Ext,
                $l_Content,
                'extensions',
                'critical_content'
            )
        ) {
            $this->addStatsItem('smart_scan', 'is_not_critical', $file);
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_not_critical');
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
            if ($this->debug->getDebugPerformance()) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            Errors::add('pcre', $file, 'CriticalFileSpecification', $this->critical_fs->getError());
            unset($l_Unwrapped);
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'CriticalFileSpecification', $this->critical_fs->getError());
        if (SMART_SCAN) {
            $this->addStatsItem('smart_scan', true, $file);
        }
        if (($l_Content == '' || $l_Unwrapped == '') && $file->getSize() > 0) {
            $this->addStatsItem('checker_before_norm', 'failed_to_read', $file);
            $vars->notRead[] = $file->getFilename();
            if (FUNC_AIBOLIT_ON_READ_ERROR) {
                /** @phpstan-ignore-next-line */
                aibolit_onReadError($l_Filename, 'io');
            }
            $return = [RapidScanStorageRecord::CONFLICT, 'notread', ''];
            $this->AddResult('[io] ' . $l_Filename, $i, $vars);
            return $return;
        }

        // ignore itself
        if (strpos($l_Content, 'ac9a5a0911f0e099978cab8af0a58be8') !== false) {
            $this->addStatsItem('checker_before_norm', 'ignore_selfscan', $file);
            HashVerdicts::add($file->getSha256(), 'checker_before_norm:ignore_selfscan');
            return false;
        }

        $l_UnicodeContent = Encoding::detectUTFEncoding($l_Content);
        //$l_Unwrapped = $l_Content;

        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            } else {
                $vars->notRead[] = $file->getFilename();
                if (FUNC_AIBOLIT_ON_READ_ERROR) {
                    /** @phpstan-ignore-next-line */
                    aibolit_onReadError($l_Filename, 'ec');
                }
                $return = [RapidScanStorageRecord::CONFLICT, 'no_iconv', ''];
                $this->AddResult('[ec] ' . $l_Filename, $i, $vars);
            }
        }

        $this->addStatsItem('checker_before_norm', true, $file);

        // critical
        $g_SkipNextCheck = false;

        $started = AibolitHelpers::currentTime();

        if (AI_DEOBFUSCATE) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $l_Content, $this->debug->isDebug() ? $this->debug : null);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
            $error_info = DEBUG_PCRE ? $l_DeobfObj->getErrorInfo() : null;
            Errors::add('pcre', $file, 'Deobfuscator', $l_DeobfObj->getError(), $error_info);
        }

        if (isset($l_DeobfType) && $l_DeobfType !== '') {
            $this->addStatsItem('deobfuscator', 'deobfuscated', $file);
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
            $error_info = DEBUG_PCRE ? $l_DeobfObj->getErrorInfo() : null;
            Errors::add('pcre', $file, 'Deobfuscator', $l_DeobfObj->getError(), $error_info);
            $g_SkipNextCheck = $this->checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars);
        } else {
            $this->addStatsItem('deobfuscator', 'nothing_to_deobfuscate', $file);
            if (DEBUG_MODE) {
                stdOut("\n...... NOT OBFUSCATED\n");
            }
        }
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::DEOBF_STAT, AibolitHelpers::currentTime() - $started);
        }
        $l_Unwrapped = Normalization::normalize($l_Unwrapped, false, $error);
        Errors::add('pcre', $file, 'Normalization', $error);

        $hs_verdict = '';
        $hs_verdictSus = '';

        if (defined('HS_EXT_SUS')) {
            $g_SusExt = HyperScan::hs_precheckSusExt($l_Content, $l_Unwrapped, $hs_verdictSus);
        }

        if (defined('HS')) {
            $this->addStatsItem('files_submitted_to_scan_hs', 'original', $file, strlen($l_Content));
            $this->addStatsItem('files_submitted_to_scan_hs', 'unwrapped', $file, strlen($l_Unwrapped));
            $hs_precheck = HyperScan::hs_precheck($l_Content, $l_Unwrapped, $this->suspicious, $hs_verdict);
            if (!$hs_precheck && ($g_SusExt === false)) {
                $this->addStatsItem('hyperscan', 'no_match', $file);
                HashVerdicts::add($file->getSha256(), 'hyperscan:no_match');
                $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
                if ($l_CriticalDetected) {
                    $this->AddResult($file, $i, $vars);
                }
                if ($this->debug->getDebugPerformance()) {
                    $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
                }
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            } elseif (!$hs_precheck && ($g_SusExt !== false)) {
                $sig_id = 'SMW-ESUS-' . $g_SusExt;
                $this->addStatsItem('hyperscan', $hs_verdictSus, $file);
                HashVerdicts::add($file->getSha256(), 'hyperscan:' . $hs_verdictSus);
                $return = [RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED, (string)$g_SusExt, $sig_id];
                $this->AddResult($file, $i, $vars);
                $vars->suspiciousExt[]     = $i;
                $vars->suspiciousExtSig[]  = $sig_id;
                $vars->suspiciousExtFragment[] = $sig_id;
                if ($this->debug->getDebugPerformance()) {
                    $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
                }
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }
        }

        $verdict = '';

        $processResult = function (
            $checker,
            $content,
            $l_Pos,
            $l_SigId,
            &$return,
            $tag = ''
        ) use (
            &$vars,
            $l_Ext,
            $i,
            &
            $verdict
        ) {
            $checkers = [
                'CriticalPHP'           => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalCron'          => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_2'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_3'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_4'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_5'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHPGIF'        => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHPUploader'   => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalJS'            => ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                'CriticalJS_PARA'       => ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                'WarningPHP'            => ['warningPHP', 'warningPHPFragment', 'warningPHPSig'],
                'Phishing'              => ['phishing', 'phishingFragment', 'phishingSigFragment'],
                'Adware'                => ['adwareList', 'adwareListFragment'],
            ];

            $verdict = $tag;

            if (
                $l_SigId
                && !is_null($vars->signs->_Mnemo[$l_SigId])
                && strpos($vars->signs->_Mnemo[$l_SigId], '-SUS-') !== false
            ) {
                $checkers['CriticalCron'] = $checkers['WarningPHP'];
            }

            if (strpos($checker, 'Critical') !== false) {
                if ($l_Ext === 'js') {
                    $checker = 'CriticalJS';
                }
                $return = [RapidScanStorageRecord::RX_MALWARE, $l_SigId, $this->getFragment($content, $l_Pos)];
            }

            if ($checker === 'WarningPHP' || $checker === 'Phishing' || (($checker === 'CriticalCron') && ($checkers['CriticalCron'] === $checkers['WarningPHP']))) {
                $return = [RapidScanStorageRecord::RX_SUSPICIOUS, $l_SigId, $this->getFragment($content, $l_Pos)];
            }

            $vars->{$checkers[$checker][0]}[] = $i;
            $vars->{$checkers[$checker][1]}[] = $this->getFragment($content, $l_Pos);
            if (isset($checkers[$checker][2])) {
                $vars->{$checkers[$checker][2]}[] = $l_SigId;
            }
            if (EMU_LOG_OFFSETS) {
                $vars->structure['offset'] ?? $vars->structure['offset'] = [];
                $vars->structure['offset'][$i] = $this->getLogEmuOffsets($content, $l_Pos);
            }
        };

        if (!$g_SkipNextCheck) {
            $checkers['CriticalPHP'] = true;
            if (AI_EXPERT_MODE > 0) {
                $checkers['CriticalPHP_3'] = true;
            }
            if (AI_EXPERT_MODE > 1) {
                $checkers['CriticalPHP_2'] = true;
            }
            $checkers['CriticalPHP_4'] = true;
            if (AI_EXPERT_MODE > 0) {
                $checkers['CriticalPHP_5'] = true;
            }
            $checkers['CriticalJS'] = false;
            if (AI_EXPERT_MODE > 1) {
                $checkers['CriticalJS_PARA'] = false;
            }

            if ($this->suspicious) {
                $checkers['WarningPHP'] = false;
            }

            if ($file->isCron()) {
                $checkers['CriticalCron'] = true;
            }

            $this->addStatsItem('files_submitted_to_scan_pcre', 'original', $file, strlen($l_Content));
            $this->addStatsItem('files_submitted_to_scan_pcre', 'unwrapped', $file, strlen($l_Unwrapped));

            $g_SkipNextCheck = ScanUnit::QCR_ScanContent(
                $checkers,
                $l_Unwrapped,
                $l_Content,
                $vars->signs,
                $this->debug,
                null,
                $processResult,
                $return,
                $error,
                $error_info
            );
            Errors::add('pcre', $file, 'Scanner', $error, $error_info);
        }

        if (!$g_SkipNextCheck && isset($checkers['Adware'])) {
            // articles
            if (stripos($l_Filename, 'article_index')) {
                $verdict = 'match_Adware';
                $vars->adwareList[] = $i;
                $l_CriticalDetected = true;
            }
        }

        $hs_verdict = (($g_SusExt !== false) && !$g_SkipNextCheck) ? $hs_verdictSus : $hs_verdict;

        if (!$g_SkipNextCheck && ($g_SusExt !== false)) {
            // suspicious_extended
            $sig_id = 'SMW-ESUS-' . $g_SusExt;
            $vars->suspiciousExt[]      = $i;
            $vars->suspiciousExtSig[]   = $sig_id;
            $vars->suspiciousExtFragment[]  = $sig_id;
            $l_CriticalDetected = true;
            $return = [RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED, (string)$g_SusExt, $sig_id];
        }

        if ($hs_verdict !== '') {
            $this->addStatsItem('hyperscan', $hs_verdict, $file);
            HashVerdicts::add($file->getSha256(), 'hyperscan:' . $hs_verdict);
        }

        if ($this->debug->getDebugPerformance()) {
            $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
        }

        if (!$g_SkipNextCheck && $verdict === '') {
            $verdict = 'no_match';
        }
        $this->addStatsItem('pcre', $verdict, $file);
        HashVerdicts::add($file->getSha256(), 'pcre:' . $verdict);
        // end of if (!$g_SkipNextCheck) {

        $this->delayWithCallback(SCAN_DELAY, $callback);
        if ($g_SkipNextCheck || $l_CriticalDetected) {
            $this->AddResult($file, $i, $vars);
        }

        unset($l_Unwrapped);
        unset($l_Content);

        return $return;
    }

    private function callCallback($callback)
    {
        if ($callback !== null) {
            call_user_func($callback);
        }
    }

    private function delayWithCallback($delay, $callback)
    {
        $delay *= 1000;
        $this->callCallback($callback);
        if ($delay === 0) {
            return;
        }
        while ($delay > 500000) {
            $delay -= 500000;
            usleep(500000);
            $this->callCallback($callback);
        }
        usleep($delay);
        $this->callCallback($callback);
    }

    /**
     * @param FileInfo $file
     * @param int $i
     * @param Variables $vars
     */
    public function AddResult($file, $i, $vars)
    {
        if (is_string($file)) {
            $vars->structure['n'][$i]   = $file;
            return;
        }
        $vars->structure['n'][$i]   = $file->getFilename();
        $vars->structure['s'][$i]   = $file->getSize();
        $vars->structure['c'][$i]   = $file->getCreated();
        $vars->structure['m'][$i]   = $file->getModified();
        $vars->structure['u'][$i]   = $file->getUid();
        $vars->structure['g'][$i]   = $file->getGid();
        $vars->structure['p'][$i]   = $file->getMode();
        $vars->structure['e'][$i]   = time();
        $vars->structure['crc'][$i] = $file->isBinary() ? $file->getSha1file() : $file->getHash();
        $vars->structure['sha256'][$i] = $file->getSha256();
    }

    public function prepareBigFilesToCriticalList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $l_Ext = strtolower(AibolitHelpers::getFileExtension($fn));
            if ($this->critical_fs->satisfiedBy($l_Ext, 'extensions')) {
                $file = new FileInfo($fn, $base + $i);
                if ($file->getSize() === null) {
                    fwrite(STDERR, 'Warning: Can\'t stat file ' . $file->getFilename() . ', skipping.' . PHP_EOL);
                    unset($file);
                    continue;
                }
                $vars->criticalPHP[]         = $file->getIndex();
                $vars->criticalPHPFragment[] = "BIG FILE. SKIPPED.";
                $vars->criticalPHPSig[]      = "big_1";
                $this->AddResult($file, $file->getIndex(), $vars);
            }
        }
    }

    public function prepareBigElfFilesToCriticalSusList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $file = new FileInfo($fn, $base + $i);
            if ($file->getSize() === null) {
                fwrite(STDERR, 'Warning: Can\'t stat file ' . $file->getFilename() . ', skipping.' . PHP_EOL);
                unset($file);
                continue;
            }
            $heur_sig = 'SMW-HEUR-ELF';
            if (defined('USE_HEURISTICS')) {
                $vars->criticalPHP[]            = $file->getIndex();
                $vars->criticalPHPFragment[]    = $heur_sig;
                $vars->criticalPHPSig[]         = $heur_sig;
            } elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                $vars->warningPHP[]         = $file->getIndex();
                $vars->warningPHPFragment[] = $heur_sig;
                $vars->warningPHPSig[]      = $heur_sig;
            }
            $this->AddResult($file, $file->getIndex(), $vars);
        }
    }

    private function satisfiedBySmartScan($fs, $ext, $content, $ext_table, $content_table)
    {
        $need_scan = $fs->satisfiedBy($ext, $ext_table) || $fs->satisfiedByContent($content, $content_table);
        if (!$need_scan && DEBUG_MODE) {
            echo "Skipped file, not critical.\n";
        }
        return $need_scan;
    }

///////////////////////////////////////////////////////////////////////////

    private function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars)
    {

        if ($l_DeobfType != '') {
            if (DEBUG_MODE) {
                stdOut("\n-----------------------------------------------------------------------------\n");
                stdOut("[DEBUG]" . $l_Filename . "\n");
                stdOut("\n...... $l_DeobfType ...........\n");
                var_dump($l_Unwrapped);
                stdOut("\n");
            }

            switch ($l_DeobfType) {
                case 'Bitrix':
                    foreach ($vars->signs->_DeMapper as $fkey => $fvalue) {
                        if (DEBUG_MODE) {
                            stdOut("[$fkey] => [$fvalue]\n");
                        }

                        if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                            if (DEBUG_MODE) {
                                stdOut("\n[DEBUG] *** SKIP: False Positive\n");
                            }

                            return true;
                        }
                    }
                    break;
            }


            return false;
        }
    }

    private function getFragment($par_Content, $par_Pos)
    {

        $l_MaxChars = MAX_PREVIEW_LEN;

        $par_Content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '~', $par_Content);

        $l_MaxLen   = strlen($par_Content);
        $l_RightPos = min($par_Pos + $l_MaxChars, $l_MaxLen);
        $l_MinPos   = max(0, $par_Pos - $l_MaxChars);

        $l_Res = ($l_MinPos > 0 ? '…' : '') . substr($par_Content, $l_MinPos, $par_Pos - $l_MinPos) . '__AI_MARKER__' . substr($par_Content, $par_Pos, $l_RightPos - $par_Pos - 1);

        $l_Res = AibolitHelpers::makeSafeFn(Normalization::normalize($l_Res), $this->addPrefix, $this->noPrefix);

        $l_Res = str_replace('~', ' ', $l_Res);

        $l_Res = preg_replace('~[\s\t]+~', ' ', $l_Res);

        $l_Res = str_replace('' . '?php', '' . '?php ', $l_Res);

        return $l_Res;
    }

    private function getLogEmuOffsets($par_Content, $par_Pos)
    {
        $ret = [];
        preg_match('~](\d+:[A-F\d]+)\[[A-F\d]+L~m', strrev($par_Content), $matches, PREG_OFFSET_CAPTURE, (-$par_Pos - 1));
        $offsets = isset($matches[1][0]) ? strrev($matches[1][0]) : false;
        if ($offsets) {
            $offsets = explode(':', $offsets);
            $offsets[0] = hexdec($offsets[0]);
            $offsets[1] = (int)$offsets[1];
            $ret = $offsets;
        }
        return $ret;
    }

    /**
     * @return array
     */
    public function whitelisting()
    {
        // whitelist
        $snum   = 0;
        $i      = -1;

        if (!isset($this->vars->structure['crc']) && !isset($this->vars->structure['sha256'])) {
            return [$snum, $i];
        }

        $list   = $this->check_whitelist($this->vars->structure['crc'] ?? [], $snum);
        $list_sha256 = $this->check_whitelist_sha256($this->vars->structure['sha256'] ?? []);
        $keys   = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP',
            'suspiciousExt',
            'blackFiles',
        ];
        foreach ($keys as $p) {
            if (empty($this->vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';

            if ($p == 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($this->vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $this->vars->{$p}[$i];
                if ($this->vars->structure['crc'][$id] !== 0 && in_array($this->vars->structure['crc'][$id], $list)) {
                    unset($this->vars->{$p}[$i], $this->vars->{$p_Sig}[$i], $this->vars->{$p_Fragment}[$i]);
                } elseif ($this->vars->structure['sha256'][$id] !== 0 && in_array($this->vars->structure['sha256'][$id], $list_sha256)) {
                    $this->vars->suspiciousIgn[] = $this->vars->{$p}[$i];
                    if (isset($this->vars->{$p_Fragment}[$i])) {
                        $this->vars->suspiciousIgnFragment[] = $this->vars->{$p_Fragment}[$i];
                    }
                    if (isset($this->vars->{$p_Sig}[$i])) {
                        $this->vars->suspiciousIgnSig[] = $this->vars->{$p_Sig}[$i];
                    }
                    unset($this->vars->{$p}[$i], $this->vars->{$p_Sig}[$i], $this->vars->{$p_Fragment}[$i]);
                }
            }

            $this->vars->{$p}             = array_values($this->vars->{$p});
            if (!empty($this->vars->{$p_Fragment})) {
                $this->vars->{$p_Fragment} = array_values($this->vars->{$p_Fragment});
            }
            if (!empty($this->vars->{$p_Sig})) {
                $this->vars->{$p_Sig}     = array_values($this->vars->{$p_Sig});
            }
        }
        return [$snum, $i];
    }

    public function check_whitelist($list, &$snum)
    {
        if (empty($list)) {
            return [];
        }

        $avdb = '';
        $file = __DIR__ . '/AIBOLIT-WHITELIST.db';
        if ((isset($this->vars->options['avdb']) && !empty($this->vars->options['avdb']) && ($avdb = $this->vars->options['avdb'])) || (isset($this->vars->options['c']) && !empty($this->vars->options['c']) && ($avdb = $this->vars->options['c']))) {
            if (file_exists($avdb)) {
                $file = dirname($avdb) . '/AIBOLIT-WHITELIST.db';
            }
        }

        try {
            $db = FileHashMemoryDb::open($file);
        } catch (Exception $e) {
            stdOut("\nAn error occurred while loading the white list database from " . $file . "\n");
            return [];
        }

        $snum = $db->count();
        stdOut("\nLoaded " . ceil($snum) . " known files from " . $file . "\n");

        return $db->find($list);
    }

    /*
     * Check input array of sha256 hashes for match with hashes from
     * /etc/imunify360/malware-ignore-hashes.txt
     *
     * @param array $list
     * @return array
     */
    public function check_whitelist_sha256($list)
    {
        $file = defined('PATH_IGN_SUS') ? PATH_IGN_SUS : '';
        if (empty($list) || !is_readable($file)) {
            return [];
        }

        $ignored_hashes = [];

        $file_obj = new SplFileObject($file, 'r');
        $file_obj->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
        foreach ($file_obj as $hash) {
            $hash = trim($hash);
            if (!empty($hash) && $hash[0] !== '#') {
                $ignored_hashes[$hash] = $hash;
            }
        }

        if (empty($ignored_hashes)) {
            return [];
        }

        stdOut("\nLoaded " . count($ignored_hashes) . " known hash of files from " . $file . "\n");

        $list = array_flip($list);
        return array_intersect_key($ignored_hashes, $list);
    }

///////////////////////////////////////////////////////////////////////////

    /**
     * Check if the file is too big for scanning with signatures.
     *
     * @param int $filesize The size of the file in bytes.
     *
     * @return bool True if the file is too big for scanning with signatures, false otherwise.
     */
    private function isFileTooBigForScanWithSignatures($filesize)
    {
        return (MAX_SIZE_TO_SCAN > 0 && $filesize > MAX_SIZE_TO_SCAN) || ($filesize < 0);
    }

    /**
     * Check if the file is too big for scanning with Cloudscan.
     *
     * @param \FileInfo $file The file to check.
     *
     * @return bool True if the file is too big for scanning with Cloudscan, false otherwise.
     */
    private function isFileTooBigForCloudscan($file)
    {
        $filesize = $file->getSize();
        if ($filesize < 0) {
            return true;
        }

        // Check against CLOUDSCAN_MAX_ELF_SIZE if defined (only for ELF files).
        if (
            defined('CLOUDSCAN_MAX_ELF_SIZE') && CLOUDSCAN_MAX_ELF_SIZE > 0
            && $file->isBinary()
        ) {
            return $filesize > CLOUDSCAN_MAX_ELF_SIZE;
        }

        return (MAX_SIZE_TO_CLOUDSCAN > 0 && $filesize > MAX_SIZE_TO_CLOUDSCAN);
    }

    private function caAddStatsItem($verdict, FileInfo $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::VERDICT_OK;
            }
            DecisionMakingStats::addStatsItem('cloud_assisted_scan', $verdict, $file);
        }
    }

    private function addStatsItem(string $item, $verdict, FileInfo $file_info, $size = null)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::CHECKER_SCAN;
            }
            if ($verdict === false) {
                $verdict = DecisionMakingStats::CHECKER_SKIP;
            }
            DecisionMakingStats::addStatsItem($item, $verdict, $file_info, $size);
        }
    }
}


class ScanUnit
{
    /**
     * @param array<string,bool> $checkers
     * @param $l_Unwrapped
     * @param $l_Content
     * @param $signs
     * @param  \DebugMode  $debug
     * @param $precheck
     * @param $processResult
     * @param $return
     * @param $error
     * @param $error_info
     *
     * @return bool
     */
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, DebugMode $debug, $precheck = null, $processResult = null, &$return = null, &$error = null, &$error_info = null)
    {
        $smart_skipped = false;
        $flag = false;
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) {
                    $smart_skipped = true;
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug, $error, $error_info);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $tag = 'match_o:?,u:1_' . $checker;
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return, $tag);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug, $error, $error_info);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $tag = 'match_o:1,u:0_' . $checker;
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return, $tag);
                }
            }
            if ($flag) {
                return true;
            }
        }
        if (!$flag && $smart_skipped) {
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
        }
        return false;
    }

    /**
     * @param string $content
     * @param $signs
     * @param \DebugMode $debug
     * @param bool $deobfuscate
     * @param null $processResult
     * @param null $return
     *
     * @return int
     */
    public static function Rescan($content, $signs, DebugMode $debug, $deobfuscate = false, $processResult = null, &$return = null)
    {
        $checkers['CriticalPHP'] = true;
        $l_Unwrapped = Normalization::strip_whitespace($content);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            }
        }

        if ($deobfuscate) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        }

        if (isset($l_DeobfType) && $l_DeobfType != '' && isset($l_DeobfObj) && $l_DeobfObj instanceof Deobfuscator) {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);

        $getRescanRes = function ($checker, $content, $l_Pos, $l_SigId, &$return) use ($signs) {
            if ($signs->needSkipId($l_SigId)) {
                $return = 2;
            } else {
                $return = 1;
            }
        };
        $return = 0;
        self::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signs, $debug, null, $getRescanRes, $return);
        return $return;
    }
}


if (!defined('CLS_SCAN_CHECKERS')) {
    define('CLS_SCAN_CHECKERS', true);
}
class ScanCheckers
{
    const URL_GRAB = '~(?:<(script|iframe|object|embed|img|a)\s*[^<]{0,300}?)?((?:https?:)?\\\\?/\\\\?/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:;\[\]\|%_\+.\~#?&/=\\\\]*))(.{0,300}?(?:/>|</\1>))?~msi';
    const NESTED_URLS = '~((https?:\/\/|www\.).+?)(?=(https?:\/\/|www\.|$))~mi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }
        return false;
    }

    public static function CriticalCron($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_CronDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) {
            return false;
        }
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match($l_ExceptItem, $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_ExceptItem;
                }
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = (int)$l_Found[0][1] + 1;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error)  && $error === 0 && !$res) {
                $error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error)  && $error === 0 && !$res) {
                    $error = preg_last_error();
                    if ($debug->getDebugPCRE()) {
                        $error_info = $l_Item;
                    }
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if ($debug->getDebugMode()) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if ($debug->getDebugMode()) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } elseif (isset($error) && $error === 0) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }

            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if ($debug->getDebugMode()) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if ($debug->getDebugMode()) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if ($debug->getDebugPerformance()) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error) && $error === 0 && !$res) {
                $error = preg_last_error();
                if ($debug->getDebugPCRE()) {
                    $error_info = $l_Item;
                }
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs, $debug)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if ($debug->getDebugMode()) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error) && $error === 0 && !$res) {
                    $error = preg_last_error();
                    if ($debug->getDebugPCRE()) {
                        $error_info = $l_Item;
                    }
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }
            if ($debug->getDebugPerformance()) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start); /** @phpstan-ignore-line */
            }
        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if ($own_domain === null || $own_domain === '') {
            return false;
        }
        return (bool)preg_match($own_domain, $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match($item, $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    /**
     * @param $l_Content
     * @param $l_Pos
     * @param $l_SigId
     * @param \LoadSignaturesForScan $signs
     * @param  \DebugMode  $debug
     * @param $error
     * @param $error_info
     *
     * @return bool
     */
    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, DebugMode $debug, &$error = null, &$error_info = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;

        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            $l_Found[2][0] = str_replace('\/', '/', $l_Found[2][0]);
            $url_to_check = $l_Found[2][0];
            if (self::isOwnUrl($l_Found[2][0], $signs->getOwnUrl())) {
                $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
                continue;
            }

            if (isset($signs->whiteUrls)) {
                // URL is whitelisted.
                if (self::isUrlInList($l_Found[2][0], $signs->whiteUrls->getDb())) {
                    if (preg_match_all(self::NESTED_URLS, $l_Found[2][0], $l_FoundNested, PREG_OFFSET_CAPTURE) > 1) {
                        // Re-check the first part of the URL for blacklisted URLs. It is needed in the case of whitelisted nested URLs.
                        $url_to_check = $l_FoundNested[0][0][0];
                    } else {
                        // URL is whitelisted and there are no nested URLs.
                        $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
                        continue;
                    }
                }
            }

            if (isset($signs->blackUrls) && $id = self::isUrlInList($url_to_check, $signs->blackUrls->getDb())) {
                if (isset($l_Found[1][0]) && $l_Found[1][0] !== '' && isset($l_Found[3][0]) && $l_Found[3][0] !== '') {
                    $l_Pos['black'][] = $l_Found[2][1];
                    $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                }
            } else {
                $l_Pos['unk'][] = $l_Found[2][1];
                $l_SigId['unk'][] = $l_Found[2][0];
            }
            $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
            if ($debug->getDebugPCRE()) {
                $error_info = self::URL_GRAB;
            }
        }
        return !empty($l_Pos);
    }
}


class TemplateList
{
    /**
     * #############
     * # MAIN_PAGE #
     * #############
     */
    const MAIN_PAGE = <<<MAIN_PAGE
<html>
<head>
    <!-- revisium.com/ai/ -->
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <META NAME="ROBOTS" CONTENT="NOINDEX,NOFOLLOW">
    <title>@@HEAD_TITLE@@</title>
    <style type="text/css" title="currentStyle">
        @import "https://cdn.revisium.com/ai/media/css/demo_page2.css";
        @import "https://cdn.revisium.com/ai/media/css/jquery.dataTables2.css";
    </style>

    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/jquery.js"></script>
    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/datatables.min.js"></script>
    <style>
        body {
            font-family: Tahoma, sans-serif;
            color: #5a5a5a;
            background: #FFFFFF;
            font-size: 14px;
            margin: 20px;
            padding: 0;
        }

        .header {
            font-size: 34px;
            margin: 0 0 10px 0;
        }

        .hidd {
            display: none;
        }

        .ok {
            color: green;
        }

        .line_no {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #DAF2C1;
            padding: 2px 5px 2px 5px;
            margin: 0 5px 0 5px;
        }

        .credits_header {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #F2F2F2;
            padding: 10px;
            font-size: 11px;
            margin: 0 0 10px 0;
        }

        .marker {
            color: #FF0090;
            font-weight: 100;
            background: #FF0090;
            padding: 2px 0 2px 0;
            width: 2px;
        }

        .title {
            font-size: 24px;
            margin: 20px 0 10px 0;
            color: #9CA9D1;
        }

        .summary {
            float: left;
            width: 500px;
        }

        .summary TD {
            font-size: 12px;
            border-bottom: 1px solid #F0F0F0;
            font-weight: 700;
            padding: 10px 0 10px 0;
        }

        .crit, .vir {
            color: #D84B55;
        }

        .intitem {
            color: #4a6975;
        }

        .spacer {
            margin: 0 0 50px 0;
            clear: both;
        }

        .warn {
            color: #F6B700;
        }

        .clear {
            clear: both;
        }

        .offer {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #F2F2F2;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }

        .offer-our-products {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #f6f5e0;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }


        HR {
            margin-top: 15px;
            margin-bottom: 15px;
            opacity: .2;
        }

        .flist {
            font-family: Henvetica, Arial, sans-serif;
        }

        .flist TD {
            font-size: 11px;
            padding: 5px;
        }

        .flist TH {
            font-size: 12px;
            height: 30px;
            padding: 5px;
            background: #CEE9EF;
        }


        .it {
            font-size: 14px;
            font-weight: 100;
            margin-top: 10px;
        }

        .crit .it A {
            color: #E50931;
            line-height: 25px;
            text-decoration: none;
        }

        .warn .it A {
            color: #F2C900;
            line-height: 25px;
            text-decoration: none;
        }


        .details {
            font-family: Calibri, sans-serif;
            font-size: 12px;
            margin: 10px 10px 10px 0;
        }

        .crit .details {
            color: #A08080;
        }

        .warn .details {
            color: #808080;
        }

        .details A {
            color: #FFF;
            font-weight: 700;
            text-decoration: none;
            padding: 2px;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;
        }

        .details A:hover {
            background: #A0909B;
        }

        .ctd {
            margin: 10px 0 10px 0;
            align: center;
        }

        .ctd A {
            color: #0D9922;
        }

        .disclaimer {
            color: darkgreen;
            margin: 10px 10px 10px 0;
        }

        .note_vir {
            margin: 10px 0 10px 0;
        / / padding: 10 px;
            color: #FF4F4F;
            font-size: 15px;
            font-weight: 700;
            clear: both;

        }

        .note_warn {
            margin: 10px 0 10px 0;
            color: #F6B700;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .note_int {
            margin: 10px 0 10px 0;
            color: #60b5d6;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .updateinfo {
            color: #FFF;
            text-decoration: none;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
        }


        .caution {
            color: #EF7B75;
            text-decoration: none;
            margin: 20px 0 0 0;
            font-size: 12px;
        }

        .footer {
            color: #303030;
            text-decoration: none;
            background: #F4F4F4;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 80px 0 10px 0px;
            padding: 10px;
        }

        .rep {
            color: #303030;
            text-decoration: none;
            background: #94DDDB;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
            font-size: 12px;
        }

    </style>
</head>
<body>

<div class="header">@@MAIN_TITLE@@ @@PATH_URL@@ (@@MODE@@)</div>
<div class="credits_header">@@CREDITS@@</div>
<div class="details_header">
    @@STAT@@<br/>
    @@SCANNED@@ @@MEMORY@@.
</div>

@@WARN_QUICK@@

<div class="summary">
    @@SUMMARY@@
</div>

<div class="offer">
    @@OFFER@@
</div>

<div class="offer-our-products">
    @@OFFER_OUR_PRODUCTS@@
</div>

<div class="clear"></div>

@@MAIN_CONTENT@@

<div class="footer">
    @@FOOTER@@
</div>

<script language="javascript">
    function hsig(id) {
        var divs = document.getElementsByTagName("tr");
        for(var i = 0; i < divs.length; i++){

            if (divs[i].getAttribute('o') == id) {
                divs[i].innerHTML = '';
            }
        }

        return false;
    }


    $(document).ready(function(){
        $('#table_crit').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "paging": true,
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending": "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );

    });

    $(document).ready(function(){
        $('#table_vir').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            },

        } );

    });

    if ($('#table_warn0')) {
        $('#table_warn0').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }

    if ($('#table_warn1')) {
        $('#table_warn1').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }
</script>
<!-- @@SERVICE_INFO@@  -->
</body>
</html>
MAIN_PAGE;

    #region templates ru
    /**
     * #############
     * # FOOTER_RU #
     * #############
     */
    const FOOTER_RU = <<<FOOTER
   <div class="disclaimer"><span class="vir">[!]</span> Отказ от гарантий: невозможно гарантировать обнаружение всех вредоносных скриптов. Поэтому разработчик сканера не несет ответственности за возможные последствия работы сканера AI-Bolit или неоправданные ожидания пользователей относительно функциональности и возможностей.
   </div>
   <div class="thanx">
      Мы будем чрезвычайно благодарны за любые упоминания сканера AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. <br/>Ссылку можно поставить на страницу <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.<br/>
    </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_RU #
     * ###########################
     */
    const OFFER_RU = <<<OFFER_ON_VIRUS_FOUND
    <div>
     <div class="crit" style="font-size: 17px; margin-bottom: 20px"><b>Внимание! Наш сканер обнаружил подозрительный или вредоносный код</b>.</div> 
     <p>Возможно, ваш сайт был взломан. Рекомендуем срочно <a href="https://revisium.com/ru/order/#fform" target=_blank>проконсультироваться со специалистами</a> по данному отчету.</p>
     <p><hr size=1></p>
     <p>Рекомендуем также проверить сайт бесплатным <b><a href="https://rescan.pro/?utm=aibolit" target=_blank>онлайн-сканером ReScan.Pro</a></b>.</p>
     <p><hr size=1></p>
         <div class="caution">@@CAUTION@@</div>
    </div>
OFFER_ON_VIRUS_FOUND;

    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_RU #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_RU = <<<OFFER_OUR_PRODUCTS
       <b>Наши продукты:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="https://revisium.com/ru/products/antivirus_for_ispmanager/" target=_blank>Антивирус для ISPmanager Lite</a></b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/blog/revisium-antivirus-for-plesk.html" target=_blank>Антивирус для Plesk</a> Onyx 17.x</b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://cloudscan.pro/ru/" target=_blank>Облачный антивирус CloudScan.Pro</a> для веб-специалистов</b> &mdash; лечение сайтов в один клик</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/antivirus-server/" target=_blank>Антивирус для сервера</a></b> &mdash; для хостинг-компаний, веб-студий и агентств.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion

    #region templates eng
    /**
     * #############
     * # FOOTER_EN #
     * #############
     */
    const FOOTER_EN = <<<FOOTER
           <div class="disclaimer"><span class="vir">[!]</span> Disclaimer: We're not liable to you for any damages, including general, special, incidental or consequential damages arising out of the use or inability to use the script (including but not limited to loss of data or report being rendered inaccurate or failure of the script). There's no warranty for the program. Use at your own risk. 
           </div>
           <div class="thanx">
              We're greatly appreciate for any references in the social medias, forums or blogs to our scanner AI-BOLIT <a href="https://revisium.com/aibo/">https://revisium.com/aibo/</a>.<br/>
            </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_ON_VIRUS_FOUND_EN #
     * ###########################
     */
    const OFFER_EN = <<<OFFER_ON_VIRUS_FOUND
<div>
 <div class="crit" style="font-size: 17px;"><b>Attention! The scanner has detected suspicious or malicious files.</b></div> 
 <br/>Most likely the website has been compromised. Please, <a href="https://revisium.com/en/contacts/" target=_blank>contact web security experts</a> from Revisium to check the report or clean the malware.
 <p><hr size=1></p>
 Also check your website for viruses with our free <b><a href="http://rescan.pro/?en&utm=aibo" target=_blank>online scanner ReScan.Pro</a></b>.
</div>
<br/>
<div>
   Revisium contacts: <a href="https://revisium.com/en/contacts/">https://revisium.com/en/home/</a>
</div>
<div class="caution">@@CAUTION@@</div>
OFFER_ON_VIRUS_FOUND;


    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_EN #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_EN = <<<OFFER_OUR_PRODUCTS
<b>Special Offers:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="http://ext.plesk.com/packages/b71916cf-614e-4b11-9644-a5fe82060aaf-revisium-antivirus">Antivirus for Plesk Onyx</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px"><font color=red></font><b><a href="https://www.ispsystem.com/addons-modules/revisium">Antivirus for ISPmanager Lite</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px">Professional malware cleanup and web-protection service with 6 month guarantee for only $99 (one-time payment): <a href="https://revisium.com/en/home/#order_form">https://revisium.com/en/home/</a>.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion
}


class TranslateList
{
    const RU = [
        //Переменные для javascript
        'data_table.length_menu'           => 'Отображать по _MENU_ записей',
        'data_table.zero_records'          => 'Ничего не найдено',
        'data_table.info'                  => 'Отображается c _START_ по _END_ из _TOTAL_ файлов',
        'data_table.info_empty'            => 'Нет файлов',
        'data_table.info_filtered'         => '(всего записей _MAX_)',
        'data_table.search'                => 'Поиск:',
        'data_table.paginate.first'        => 'Первая',
        'data_table.paginate.previous'     => 'Предыдущая',
        'data_table.paginate.next'         => 'Следующая',
        'data_table.paginate.last'         => 'Последняя',
        'data_table.aria.sort_ascending'   => ': активировать для сортировки столбца по возрастанию',
        'data_table.aria.sort_descending'  => ': активировать для сортировки столбцов по убыванию',
        'header.scan_report_title'         => 'Отчет сканера <a href="https://revisium.com/ai/">AI-Bolit</a> v@@VERSION@@:',
        'offer.when_no_critical'           => 'Обращаем внимание на то, что большинство CMS <b>без дополнительной защиты</b> рано или поздно <b>взламывают</b>.<p> Компания <a href="https://revisium.com/">"Ревизиум"</a> предлагает услугу превентивной защиты сайта от взлома с использованием уникальной <b>процедуры "цементирования сайта"</b>. Подробно на <a href="https://revisium.com/ru/client_protect/">странице услуги</a>. <p>Лучшее лечение &mdash; это профилактика.',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_RU,
        'offer.when_has_critical'          => TemplateList::OFFER_RU,
        'сaution.aibolit_file'             => 'Не оставляйте файл отчета на сервере, и не давайте на него прямых ссылок с других сайтов. Информация из отчета может быть использована злоумышленниками для взлома сайта, так как содержит информацию о настройках сервера, файлах и каталогах.',
        'сaution.scanner_set_password'     => "Сканер AI-Bolit запускается с паролем. Если это первый запуск сканера, вам нужно придумать сложный пароль и вписать его в файле ai-bolit.php в строке №34. <p>Например, <b>'PASS', =>'%s',</b><p>
После этого откройте сканер в браузере, указав пароль в параметре \"p\". <p>Например, так <b>http://mysite.ru/ai-bolit.php?p=%s</b>. ",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Внимание, скрипт выполнил быструю проверку сайта. Проверяются только наиболее критические файлы, но часть вредоносных скриптов может быть не обнаружена. Пожалуйста, запустите скрипт из командной строки для выполнения полного тестирования. Подробнее смотрите в <a href="https://revisium.com/ai/faq.php">FAQ вопрос №10</a>.</div>',
        'warning.weak_password'            => "Вы установили слабый пароль на скрипт AI-BOLIT. Укажите пароль не менее 8 символов, содержащий латинские буквы в верхнем и нижнем регистре, а также цифры. Например, такой <b>%s</b>",
        'warning.folder_read_permission'   => 'Текущая директория не доступна для чтения скрипту. Пожалуйста, укажите права на доступ <b>rwxr-xr-x</b> или с помощью командной строки <b>chmod +r имя_директории</b>',
        'warnings'                         => 'Предупреждения',
        'warning.reading_error'            => 'Непроверенные файлы - ошибка чтения',
        'info.time_elapsed'                => "Затрачено времени: <b>%s</b>. Сканирование начато %s, сканирование завершено %s",
        'info.files_checked'               => 'Всего проверено %s директорий и %s файлов.',
        'info.non_commercial_use'          => 'Сканер бесплатный только для личного некоммерческого использования. Информация по <a href="https://revisium.com/ai/faq.php#faq11" target=_blank>коммерческой лицензии</a> (пункт №11). <a href="https://revisium.com/images/mini_aibolit.jpg">Авторское свидетельство</a> о гос. регистрации в РосПатенте №2012619254 от 12 октября 2012 г.',
        'critical.title'                   => '<div class="title">Критические замечания</div>',
        'not_detected.shell_scripts'       => 'Вирусы и вредоносные скрипты не обнаружены.',
        'detected.shell_scripts'           => 'Эти файлы могут быть вредоносными или хакерскими скриптами',
        'detected.javascript'              => 'Эти файлы могут быть javascript вирусами',
        'detected.executables'             => 'Обнаружены сигнатуры исполняемых файлов unix и нехарактерных скриптов. Они могут быть вредоносными файлами',
        'detected.bad_links'               => 'Дорвеи, реклама, спам-ссылки, редиректы',
        'detected.phishing_pages'          => 'Обнаружены фишинговые страницы',
        'file.not_found.more_than'         => 'Не найдено файлов больше чем %s',
        'file.recommend_to_remove'         => 'Временные файлы или файлы(каталоги) - кандидаты на удаление по ряду причин',
        'file.scanned_manual'              => 'Просканированы только файлы, перечисленные в %s. Для полного сканирования удалите файл %s и запустите сканер повторно.',
        'file.suspicion.heuristic_analyze' => 'Эвристический анализ обнаружил подозрительные файлы. Проверьте их на наличие вредоносного кода.',
        'file.encrypted'                   => 'Зашифрованных файлов',
        'file.hidden'                      => 'Скрытых файлов',
        'file.added'                       => "Добавленные файлы",
        'file.updated'                     => "Измененные файлы",
        'file.deleted'                     => "Удаленные файлы",
        'file_structure.updates'           => "Изменения в файловой структуре",
        'hidden_files'                     => 'Скрытые файлы',
        'doorway.might'                    => 'Возможно, каталог с дорвеем',
        'doorway.not_found'                => 'Не найдено директорий c дорвеями',
        'suspicion.multiple'               => 'Двойное расширение, зашифрованный контент или подозрение на вредоносный скрипт. Требуется дополнительный анализ',
        'suspicion.malicious'              => 'Подозрение на вредоносный скрипт',
        'suspicion.htaccess'               => 'Подозрение на мобильный редирект, подмену расширений или автовнедрение кода',
        'suspicion.non_php'                => 'В не .php файле содержится стартовая сигнатура PHP кода. Возможно, там вредоносный код',
        'suspicion.hidden_link'            => 'Невидимые ссылки. Подозрение на ссылочный спам',
        'suspicion.doorway'                => 'Подозрение на дорвей',
        'suspicion.code'                   => 'Скрипт использует код, который часто встречается во вредоносных скриптах',
        'suspicion.obfuscated_variables'   => 'Подозрение на обфусцированные переменные',
        'suspicion.global_array'           => 'Подозрительное использование массива глобальных переменных',
        'suspicion.file_time'              => "Подозрительные параметры времени изменения файла",
        'suspicion.file_attributes'        => "Подозрительные атрибуты файла",
        'suspicion.file_location'          => "Подозрительное местоположение файла",
        'symlinks'                         => 'Символические ссылки (symlinks)',
        'hidden_links'                     => 'Невидимые ссылки',
        'link.symbolic'                    => 'Символических ссылок',
        'links.adware_spam'                => 'Рекламных ссылок и кодов',
        'links.empty'                      => 'Пустых ссылок',
        'display_only_first'               => 'Отображены только первые ',
        'skipped.adirignore'               => 'Директории из файла .adirignore были пропущены при сканировании',
        'founded_CMS'                      => 'Версии найденных CMS',
        'folder.unsafe_writable'           => 'Потенциально небезопасно! Директории, доступные скрипту на запись',
        'folder.unsafe_writable_not_found' => 'Не найдено директорий, доступных на запись скриптом',
        'folder.added'                     => "Добавленные каталоги",
        'folder.deleted'                   => "Удаленные каталоги",
        'memory_used'                      => 'Использовано памяти при сканировании: ',
        'notice.scan_express'              => '<div class="rep">Внимание! Выполнена экспресс-проверка сайта. Просканированы только файлы с расширением .php, .js, .html, .htaccess. В этом режиме могут быть пропущены вирусы и хакерские скрипты в файлах с другими расширениями. Чтобы выполнить более тщательное сканирование, поменяйте значение настройки на <b>\'scan_all_files\' => 1</b> в строке 50 или откройте сканер в браузере с параметром full: <b><a href="ai-bolit.php?p=&full">ai-bolit.php?p=&full</a></b>. <p>Не забудьте перед повторным запуском удалить файл %s</div>',
        'feedback_for_script'              => 'Мы будем чрезвычайно благодарны за любые упоминания скрипта AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. Ссылочку можно поставить на <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.',
        'report_for'                       => 'Отчет по ',
        'function.many_reference'          => 'Много косвенных вызовов функции',
        'str.abnormal_split'               => 'Дробление строки на символы',
        'scan.offer_modes_after_express'   => 'Сканирование выполнено в экспресс-режиме. Многие вредоносные скрипты могут быть не обнаружены.<br> Рекомендуем проверить сайт в режиме "Эксперт" или "Параноидальный". Подробно описано в <a href="https://revisium.com/ai/faq.php">FAQ</a> и инструкции к скрипту.',
        'mobile_redirects'                 => 'Мобильных редиректов',
        'skipped.large_file'               => 'Большие файлы (больше чем %s). Пропущено',
        'malware'                          => 'Вредоносных скриптов',
        'js_virused'                       => 'JS Вирусов',
        'phishing_pages'                   => 'Фишинговых страниц',
        'executable_files'                 => 'Исполняемых файлов',
        'iframe_injections'                => 'IFRAME вставок',
        'skipped_large_file'               => 'Пропущенных больших файлов',
        'error.read_file'                  => 'Ошибок чтения файлов',
        'suspicious'                       => 'Подозрительных',
        'report.summary'                   => 'Сводный отчет',
        'footer'                           => TemplateList::FOOTER_RU,
        'notice.files_may_not_malicious'   => "Обращаем внимание, что обнаруженные файлы не всегда являются вирусами и хакерскими скриптами. Сканер минимизирует число ложных обнаружений, но это не всегда возможно, так как найденный фрагмент может встречаться как во вредоносных скриптах, так и в обычных.<p>Для диагностического сканирования без ложных срабатываний мы разработали специальную версию <u><a href=\"https://revisium.com/ru/blog/ai-bolit-4-ISP.html\" target=_blank style=\"background: none; color: #303030\">сканера для хостинг-компаний</a></u>.",
        'script.vulnerable'                => "Уязвимости в скриптах",
        'path'                             => 'Путь',
        'property_change'                  => 'Изменение свойств',
        'content_change'                   => 'Изменение содержимого',
        'size'                             => 'Размер',
        'php_config'                       => 'Конфигурация PHP',
    ];

    const EN = [
        //variables for javascript
        'data_table.length_menu'           => 'Display _MENU_ records',
        'data_table.zero_records'          => 'Not found',
        'data_table.info'                  => 'Display from _START_ to _END_ of _TOTAL_ files',
        'data_table.info_empty'            => 'No files',
        'data_table.info_filtered'         => '(total _MAX_)',
        'data_table.search'                => 'Filter/Search:',
        'data_table.paginate.first'        => 'First',
        'data_table.paginate.previous'     => 'Previous',
        'data_table.paginate.next'         => 'Next',
        'data_table.paginate.last'         => 'Last',
        'data_table.aria.sort_ascending'   => ': activate to sort row ascending order',
        'data_table.aria.sort_descending'  => ': activate to sort row descending order',
        'header.scan_report_title'         => 'AI-Bolit v@@VERSION@@ Scan Report:',
        'offer.when_no_critical'           => '',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_EN,
        'offer.when_has_critical'          => TemplateList::OFFER_EN,
        'сaution.aibolit_file'             => 'Caution! Do not leave either ai-bolit.php or report file on server and do not provide direct links to the report file. Report file contains sensitive information about your website which could be used by hackers. So keep it in safe place and don\'t leave on website!',
        'сaution.scanner_set_password'     => "Open AI-BOLIT with password specified in the beggining of file in PASS variable. <br/>E.g. http://you_website.com/ai-bolit.php?p=<b>%s</b>",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Attention! Script has performed quick scan. It scans only .html/.js/.php files  in quick scan mode so some of malicious scripts might not be detected. <br>Please launch script from a command line thru SSH to perform full scan.',
        'warning.weak_password'            => "Your password for AI-BOLIT is too weak. Password must be more than 8 character length, contain both latin letters in upper and lower case, and digits. E.g. <b>%s</b>",
        'warning.folder_read_permission'   => 'Current folder is not readable. Please change permission for <b>rwxr-xr-x</b> or using command line <b>chmod +r folder_name</b>',
        'warnings'                         => 'Warnings',
        'warning.reading_error'            => 'Reading error. Skipped.',
        'info.time_elapsed'                => "<div class=\"rep\">%s malicious signatures known, %s virus signatures and other malicious code. Elapsed: <b>%s</b
>.<br/>Started: %s. Stopped: %s</div> ",
        'info.files_checked'               => 'Scanned %s folders and %s files.',
        'info.non_commercial_use'          => 'For non-commercial use only.',
        'critical.title'                   => '<div class="title">Critical</div>',
        'detected.shell_scripts'           => 'Shell script signatures detected. Might be a malicious or hacker\'s scripts',
        'not_detected.shell_scripts'       => 'Shell scripts signatures not detected.',
        'detected.javascript'              => 'Javascript virus signatures detected:',
        'detected.executables'             => 'Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits:',
        'detected.bad_links'               => 'This script has black-SEO links or linkfarm. Check if it was installed by yourself:',
        'detected.phishing_pages'          => 'Phishing pages detected:',
        'file.not_found.more_than'         => 'Files greater than %s not found',
        'file.recommend_to_remove'         => 'Files recommended to be remove due to security reason:',
        'file.scanned_manual'              => 'Quick scan through the files from %s. For full scan remove %s and launch scanner once again.',
        'file.suspicion.heuristic_analyze' => 'Heuristic Analyzer has detected suspicious files. Check if they are malware.',
        'file.encrypted'                   => 'Encrypted files',
        'file.hidden'                      => 'Hidden files',
        'files_may_not_malicious'          => "Notice! Some of detected files may not contain malicious code. Scanner tries to minimize a number of false positives, but sometimes it's impossible, because same piece of code may be used either in malware or in normal scripts.",
        'file.added'                       => "Added files",
        'file.updated'                     => "Modified files",
        'file.deleted'                     => "Deleted files",
        'file_structure.updates'           => "Integrity Check Report",
        'hidden_files'                     => 'Hidden files:',
        'doorway.might'                    => 'Files might be a part of doorway:',
        'doorway.not_found'                => 'Doorway folders not detected',
        'suspicion.multiple'               => 'Suspicious encoded strings, extra .php extention or external includes detected in PHP files. Might be a malicious or hacker\'s script:',
        'suspicion.malicious'              => 'Might be a malicious or hacker\'s script:',
        'suspicion.htaccess'               => 'Malicious code in .htaccess (redirect to external server, extention handler replacement or malicious code auto-append):',
        'suspicion.non_php'                => 'Non-PHP file has PHP signature. Check for malicious code:',
        'suspicion.hidden_link'            => 'These files have invisible links, might be black-seo stuff:',
        'suspicion.doorway'                => 'Folders contained too many .php or .html files. Might be a doorway:',
        'suspicion.code'                   => 'Suspicious code detected. It\'s usually used in malicious scrips:',
        'suspicion.obfuscated_variables'   => 'Suspected for obfuscated variables',
        'suspicion.global_array'           => 'Suspected for $GLOBAL array usage',
        'suspicion.file_time'              => "Suspicious file mtime and ctime",
        'suspicion.file_attributes'        => "Suspicious file permissions",
        'suspicion.file_location'          => "Suspicious file location",
        'symlinks'                         => 'Symlinks:',
        'hidden_links'                     => 'List of invisible links:',
        'link.symbolic'                    => 'Symbolic links',
        'links.adware_spam'                => 'Adware and spam links',
        'links.empty'                      => 'Empty links',
        'display_only_first'               => 'Displayed first ',
        'skipped.adirignore'               => 'The following list of files specified in .adirignore has been skipped:',
        'founded_CMS'                      => 'CMS found:',
        'folder.unsafe_writable'           => 'Potentially unsafe! Folders which are writable for scripts:',
        'folder.unsafe_writable_not_found' => 'Writable folders not found',
        'folder.added'                     => "Added directories",
        'folder.deleted'                   => "Deleted directories",
        'memory_used'                      => 'Memory used: ',
        'notice.scan_express'              => '<div class="notice"><span class="vir">[!]</span> Ai-BOLIT is working in quick scan mode, only .php, .html, .htaccess files will be checked. Change the following setting \'scan_all_files\' => 1 to perform full scanning.</b>. </div>',
        'feedback_for_script'              => "I'm sincerely appreciate reports for any bugs you may found in the script. Please email me: <a href=\"mailto:audit@revisium.com\">audit@revisium.com</a>.<p> Also I appriciate any reference to the script in your blog or forum posts. Thank you for the link to download page: <a href=\"https://revisium.com/aibo/\">https://revisium.com/aibo/</a>",
        'report_for'                       => 'Report for ',
        'function.many_reference'          => 'Function called by reference',
        'str.abnormal_split'               => 'Abnormal split of string',
        'scan.offer_modes_after_express'   => 'Scanning has been done in simple mode. It is strongly recommended to perform scanning in "Expert" mode. See readme.txt for details.',
        'mobile_redirects'                 => 'Mobile redirects',
        'skipped.large_file'               => 'Large files (greater than %s! Skipped:',
        'malware'                          => 'Malware',
        'js_virused'                       => 'JS viruses',
        'phishing_pages'                   => 'Phishing pages',
        'executable_files'                 => 'Unix executables',
        'iframe_injections'                => 'IFRAME injections',
        'skipped_large_file'               => 'Skipped big files',
        'critical.error_read_file'         => 'Reading errors',
        'suspicious'                       => 'Suspicious',
        'report.summary'                   => 'Summary',
        'footer'                           => TemplateList::FOOTER_EN,
        'script.vulnerable'                => "Vulnerable Scripts",
        'path'                             => 'Path',
        'property_change'                  => 'iNode Changed',
        'content_change'                   => 'Modified',
        'size'                             => 'Size',
        'php_config'                       => 'PHP Info',
    ];
}


class UserList
{
    private $users = [];

    public function add($uid)
    {
        $this->users[$uid] = '';
    }

    public function getList()
    {
        ksort($this->users);
        return array_keys($this->users);
    }

    public function setList($list)
    {
        $this->users = $list;
    }
}


/**
 * Class HyperScan
 * contains Hyperscan related functions
 */
class HyperScan
{
    private static $usage = [];
    private static $critical_content_hs = '';
    private static $scratch_content_hs;
    private static $interesting_hs = '7ZrLUhpBFIZ7huEyiiJe8IIoKt7wMm1VllYFNqkskpSLPIDvkY3LLF1mmefIiqos8hAs8hDZYMlAuofu6e4fUQgaielf29Nfn+5zpmemAM/QbDabhHjJixNCyFWCcN3++PyNKDnRL5F/lUXx8TJr2cUelwfMIbuKa4umv8vkCiv5lWvm1I9Dz3FXPilXNBmXaP2y8H2p9O8xOi9abD1HQjQ+1xNj0jqiuZDfhXEUX5+EsYTWl3H1fQwrvq5RGW3NvrBU2HXNV2Zt+65FsLmrPCF57QpmidrHlGiDVK7HKk8EuwkvmUpn/Kni3Tzq+ufez6TzQ+fbsmXLli2/DH7u9xvLli1btmzZ8rNzLU/I5RwbZ5aylq3X04OKJ3Wtz+fWwY/LEsAeMNZhUsBp4AywD8zrHHwfUkXWHDiwGcwplU6zlvIc4nENKh/1SZbXRq3jHAnb6fY0bD5UVlhZ/cH9aS5xGpyh9/YU8VA51q5zvXshul/YRW3cV7ACdTXddrvtbrcT3vKeVEd1w2jY9Idh2L4JdbXD8CaMhx7MH7bbrVbrv7cdHG9PxnGNa9n90HraPK2h5t3+afybyTiPdv/WWmvtS7PjqsZag9tBD32HEfscs7/1/dOv2Q/T+vNRqcsxQkfa2QpkHhm3scA+r8VJ7s+PGv14zl/LPHp+twfdn0yj5B/xOM7ffnz/TubR8yfHuWZWVlYvRljr+JfF/y+uuapec33Pd1rGfQl8I+wFFndG0FzGrB2dERJ//+UhnYn1Afu51gpUgajkeI6oCHH5Pmten/ykn/KV0lrfz/j+lOwT1hy310/4/Rrg70/4l8ULPVdYjNPE5wRe0kt5nuK04kzs751TvqmAnZZp31ecVTwT+435VJs/q6/PMQW5uVw+l1M8r3gh9lN9PtXmL5rrl4x4BaagsFxYKRQUrypei/1Un0+1+UVz/boZj5rxS0xBaaO0WSopLiveiv1Un0+1+dvm+h0zHjXjV5iCym5lr1JRvA8c+anOVPMfmOsPzXjUjF9lClg7qlYVHwNHfqozVf4Tcz01450yBaeRgKnONPZTcz5lCmikiB2mwHGdhDP8q10AjCsnoVauaxo4C4x14FngHPAccB54HngBGL62SpaAC8DLwCvAq8BrwEXgdeAS8AbwJnAZeAsYnwfsAONb7i7wHvA+8AHwIXAV+Aj4GPgE+BSY3+/8PeKruBGpGMfnL6jHfh7zWPoN';
    private static $scratch_interesting_hs;
    private static $log_hs = '7ZtNk9REGMefZF72jd0MD6ALC7sDgryIAr6iogwKCIgUBw8cPGCVJ7+CB+cjcPDgkYMHLlbxDdwqrdKjR6v24FegysuyLDumJ88/yfN0ZmZnRmpgzW+rt///7qQ76STdPZ2ZtbW1NaJqjS4RUbtCjjs3l5kUQfp/X+qKaRodmO2PumrOZr69ovfvxNQlhj8a6jKcjpOoInWsL2f1Ta8keZa6BJRLOd2U8v46k+27gI0u6fPKn18tDgfkeJYkDXEo6RWJq7kAX8SSqYOkjDyBHLuLr5n264crp3V2+9s7jkuMYzpStFFRg+do1bSfj8MiZefV734KwJQj8JgKqkG8UbVST3wtJZhONwr1PsYOzp8gM9K8D8IkfijPwm1pvK8qyX29WknSW9XkMcZz91NYcHkacl3i0I6BdvfUz3Heqmx2Y47o+4jomLl+oHsIwYCLvwO4G4ev4/BNHO45Hzfs3bidv52N44bcv/1u4jGY91ICV1WQ98PQ3TpMu/pnTsf1T4vJvZX26S6tts00StLa0nH+4tLqWVqYu/3OV5P0ipxjut8Y1HMaz9Rtyvr33+PwBw2+Cuclbo9wDKsNot25Y8AYgjr7PYHNmOfKB/+xn/T5PO++bK8X24fD7r9nssdb+tKXvvSlL33pS1/60pd+Yr7dSNao7sfhYRyqQbPnyk/TeLum4dYZXDlgT8E2ReTXmlwZbjkRaxjbpuooSO6/V1oF1kh6nfyg/EmBpdcf5QDvh8kx3hf/G96NyIHvrWTapf8Q+u28P6ex/uvAOwUQUbpUXAjWwHY6WHObpaQ97LsoFzbD3nocVqTO/LroMAR9bujAfz2X1tPRLkv2k/J5/bJfLEY4/zybEq+PmD8pdpsboiXxgSB53tHfnpJ4l8Qn0z0+di/taHrAfXla4msST8Xh3HK2Tt6g7B2vO54Tko73q7bf3255GHcGlWf7Ndc2iB8tJVusLmXnjz6im38wK2DccQXlZ+VcuDhiUYXMF/VP2cm73DAYo5d3Y8i9KGmbbhvMEK3Obn9/155Pn6S355YLT54+eerduI+TTJf/2BnsELMRh82tjI3NjdQOrH9rYz2mjHdovDVuORvw6323ezyp89x8xuX/38+/jMu4jHdsPC4tSr5P1Rrrg3Knc/zwr9/9s3BrDvPUfh8r7w5dPuaUnQ7KfXQoq+PvGFv/oPn9MMd05c71L1EPyn2wnJuTF9Q/6td6Co/j8vUrqAfl3ll+/taCSkpKJsNO6gvc5+JWmK19/HkmidtTRO6r9Iu5bVuLyRpkc8S6MOxhHWfY5dCrErv3GKPSaujvcd6igoXPHtyS/bvfrZ7L0r+I/xy1OCMC3e+oRx5T0Uw0HUUzs3OJ35USzS9EUcOlURBFYSXJr8ahFod6roxB+ZOke1GHvz5mhaw39tmr1rrXc6rPLtuYnsz0yeu/QFVNXsr0rn+uZw7YNWiDfieX1TJPchuOcgzztEBRoyBjt5Cq4v2j7v9e9RO53xAVlr9HIIbovX9Rxl6BGEKzTyCG0LwkEENoXhaIITSLAjGEZr9ADKE5IBBDaJYEYgjNQYEYQnNIIIbQLAvEEJoVgRhC0xSIITSHBWIIzRGBGELzikAMoTkqEENojgnEEJpXBWIIzXGBGEJzQiCG0JwUiCE0pwRiCM1rAjGE5rRADKF5XSCG0LwhEENozgjEEJqzAjGE5pxADKF5UyCG0LwlEENo3haIITTvCMQQmncFYgjNewIxhOa8QAyheV8ghtB8IBBDaD4UiCE0FwRiCM1HAjGE5mOBGEJzUSCG0LQEYgjNJYEYQvOJQAyh+VQghtBcFoghNFcEYgjNVYEYQvOZQAyhuSYQQ2iuC8QQmhsCMYTmc4EYQnNTIIboAffKGJ+i7wbl8eZsxtufFNaNt/MfO6Gzszc7Y7PTHzvhsr+rWzDeTjwaxts5kW1qO6fx5ijGe3MQ4705hvHeHMJ4b45gvDcHML5pvDemG++N2cZ7Y7Lx3phrvDemGu+NmcZ7Y6Lx3phnvDemGe+NWcZ7Y5Lx3phjvDemGO+NGcZ7Y4LxXp9vvNenG+/12cZ7fbLxXp9rvNenGu/1mRI3G0mMjy34Peyz5l8=';
    private static $scratch_log_hs;

    private static $php;
    private static $scratch_php;

    private static $js;
    private static $scratch_js;

    private static $sus;
    private static $scratch_sus;

    private static $susext;
    private static $scratch_susext;

    private static $cron;
    private static $scratch_cron;

    private static $early_filter;
    private static $scratch_early_filter;

    public static function init()
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$critical_content_hs)), $db) === HS_SUCCESS) {
            self::$critical_content_hs = $db;
            if (hs_alloc_scratch(self::$critical_content_hs, self::$scratch_content_hs) === HS_SUCCESS) {
                self::$usage['critical'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$interesting_hs)), $db) === HS_SUCCESS) {
            self::$interesting_hs = $db;
            if (hs_alloc_scratch(self::$interesting_hs, self::$scratch_interesting_hs) === HS_SUCCESS) {
                self::$usage['interesting'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$log_hs)), $db) === HS_SUCCESS) {
            self::$log_hs = $db;
            if (hs_alloc_scratch(self::$log_hs, self::$scratch_log_hs) === HS_SUCCESS) {
                self::$usage['log'] = true;
            }
        }
        return true;
    }

    public static function initExtSusDb($file)
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        if (!file_exists($file)) {
            fwrite(STDERR, '[HS] Error loading hyperscan ext-suspicious db ' . $file . ' not exists.' . PHP_EOL);
            return false;
        }

        return self::loadExtSus($file);
    }

    public static function initExtDb($folder, $ver)
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        if (!file_exists($folder) || !is_dir($folder)) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $folder . ' not exists.' . PHP_EOL);
            return false;
        }
        return self::load($folder, $ver);
    }

    public static function initEarlyFilterDb($db_file)
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        if (!file_exists($db_file) || !is_file($db_file)) {
            fwrite(STDERR, '[HS] Error loading early filter hyperscan db: ' . $db_file . ' not exists.' . PHP_EOL);
            return false;
        }
        return self::load_early_filter($db_file);
    }

    public static function matchCritical($content)
    {
        $time = AibolitHelpers::currentTime();
        if (self::$usage['early_filter'] ?? false) {
            // if available, use the provided early filter
            $res = self::match($content, self::$early_filter, self::$scratch_early_filter);
        } else {
            // otherwise, use the built-in filter
            $res = self::match($content, self::$critical_content_hs, self::$scratch_content_hs);
        }
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function matchInteresting($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$interesting_hs, self::$scratch_interesting_hs);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function matchLog($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$log_hs, self::$scratch_log_hs);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function canMatchCritical()
    {
        return self::$usage['early_filter'] ?? self::$usage['critical'] ?? false;
    }

    public static function canMatchInteresting()
    {
        return self::$usage['interesting'] ?? false;
    }

    public static function canMatchLog()
    {
        return self::$usage['log'] ?? false;
    }

    public static function hs_precheck($content, $unwrapped, $check_sus, &$ret = null)
    {

        $ret = 'no_match';

        if (!self::canMatchPhp() || !self::canMatchJs() || !self::canMatchSus()) {
            return true;
        }

        $o = 'o:?';
        $u = 'u:?';
        if (self::canMatchPhp()) {
            if ((self::matchPhp($unwrapped) && $u = 'u:1') || (self::matchPhp($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_php';
                return true;
            }
        }

        if (self::canMatchJs()) {
            if ((self::matchJs($unwrapped) && $u = 'u:1') || (self::matchJs($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_js';
                return true;
            }
        }

        if (self::canMatchCron()) {
            if ((self::matchCron($unwrapped) && $u = 'u:1') || (self::matchCron($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_cron';
                return true;
            }
        }

        if ($check_sus && self::canMatchSus()) {
            if ((self::matchSus($unwrapped) && $u = 'u:1') || (self::matchSus($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_sus';
                return true;
            }
        }

        return false;
    }

    public static function hs_precheckSusExt($content, $unwrapped, &$ret = null)
    {
        $ret = 'no_match';
        $o = 'o:?';
        $u = 'u:?';
        if (self::canMatchSusExt()) {
            if ((($id_sign = self::matchSusExt($unwrapped)) && $u = 'u:1') || (($id_sign = self::matchSusExt($content)) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_sus_extended';
                return $id_sign;
            }
        }
        return false;
    }



    private static function match($content, $db, $scratch)
    {
        $id_sign = false;
        $err = hs_scan($content, HS_MODE_BLOCK, $db, $scratch, function ($id, $from, $to) use (&$id_sign) {
            $id_sign = $id;
            return false;
        });
        return $id_sign;
    }

    private static function matchPhp($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$php, self::$scratch_php);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchJs($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$js, self::$scratch_js);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchSus($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$sus, self::$scratch_sus);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchSusExt($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$susext, self::$scratch_susext);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    private static function matchCron($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$cron, self::$scratch_cron);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    private static function canMatchPhp()
    {
        return self::$usage['php'] ?? false;
    }

    private static function canMatchJs()
    {
        return self::$usage['js'] ?? false;
    }

    private static function canMatchSus()
    {
        return self::$usage['sus'] ?? false;
    }

    private static function canMatchSusExt()
    {
        return self::$usage['susext'] ?? false;
    }

    private static function canMatchCron()
    {
        return self::$usage['cron'] ?? false;
    }

    private static function load($folder, $ver)
    {
        $version = @file_get_contents($folder . '/' . 'version.txt');
        if ($version !== $ver) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $version . ' != ' . $ver . PHP_EOL);
            return false;
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_php.db', $db) === HS_SUCCESS) {
            self::$php = $db;
            if (hs_alloc_scratch(self::$php, self::$scratch_php) === HS_SUCCESS) {
                self::$usage['php'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_js.db', $db) === HS_SUCCESS) {
            self::$js = $db;
            if (hs_alloc_scratch(self::$js, self::$scratch_js) === HS_SUCCESS) {
                self::$usage['js'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_sus.db', $db) === HS_SUCCESS) {
            self::$sus = $db;
            if (hs_alloc_scratch(self::$sus, self::$scratch_sus) === HS_SUCCESS) {
                self::$usage['sus'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_cron.db', $db) === HS_SUCCESS) {
            self::$cron = $db;
            if (hs_alloc_scratch(self::$cron, self::$scratch_cron) === HS_SUCCESS) {
                self::$usage['cron'] = true;
            }
        }

        return true;
    }

    private static function loadExtSus($file)
    {
        $db = null;
        if (hs_database_mmap_deserialize($file, $db) === HS_SUCCESS) {
            self::$susext = $db;
            if (hs_alloc_scratch(self::$susext, self::$scratch_susext) === HS_SUCCESS) {
                self::$usage['susext'] = true;
            }
        }

        return true;
    }

    private static function load_early_filter($db_file)
    {
        $db = null;
        if (hs_database_mmap_deserialize($db_file, $db) === HS_SUCCESS) {
            self::$early_filter = $db;
            if (hs_alloc_scratch(self::$early_filter, self::$scratch_early_filter) === HS_SUCCESS) {
                self::$usage['early_filter'] = true;
                fwrite(STDERR, 'Early filter loaded' . PHP_EOL);
            }
        }
        return true;
    }
}


if (!defined('CLS_PERFORMANCE_STATS')) {
    define('CLS_PERFORMANCE_STATS', true);
}
class PerformanceStats
{
    const HS_SMART_STAT     = 'smart_time_hs';
    const HS_SCAN_STAT      = 'scan_time_hs';
    const PCRE_SMART_STAT   = 'smart_time_preg';
    const PCRE_SCAN_STAT    = 'scan_time_preg';
    const FINDER_STAT       = 'finder_time';
    const CAS_STAT          = 'cas_time';
    const DEOBF_STAT        = 'deobfuscate_time';

    private static $performance_stats = [];
    private static $performance_types = [
        self::HS_SMART_STAT,
        self::HS_SCAN_STAT,
        self::PCRE_SMART_STAT,
        self::PCRE_SCAN_STAT,
        self::FINDER_STAT,
        self::CAS_STAT,
        self::DEOBF_STAT
    ];

    public static function initPerformanceItems()
    {
        foreach (self::getPerformanceTypes() as $item) {
            self::$performance_stats[$item] = 0;
        }
    }

    public static function addPerformanceItem($item, $time)
    {
        self::$performance_stats[$item] += $time;
    }

    public static function getPerformanceItem($item)
    {
        if (!isset(self::$performance_stats[$item])) {
            return 0;
        }
        return self::$performance_stats[$item];
    }

    public static function getPerformanceTypes()
    {
        return self::$performance_types;
    }
}


if (!defined('CLS_PROGRESS')) {
    define('CLS_PROGRESS', true);
}

if (!defined('FUNC_JSON_ENCODE')) {
    define('FUNC_JSON_ENCODE', function_exists('json_encode'));
}
if (!defined('FUNC_AIBOLIT_ON_PROGRESS_UPDATE')) {
    define('FUNC_AIBOLIT_ON_PROGRESS_UPDATE', function_exists('aibolit_onProgressUpdate'));
}
/**
 * Tracking progress of scan
 * Class Progress
 */
class Progress
{
    const STAGE_START   = 'start';
    const STAGE_LIST    = 'list';
    const STAGE_SCAN    = 'scan';
    const STAGE_DONE    = 'done';

    const DETECT_PHP    = 'php';
    const DETECT_JS     = 'js';
    const DETECT_SUS    = 'sus';
    const DETECT_PHS    = 'phs';

    const PREFIX_ADD    = 'add';
    const PREFIX_NO     = 'no';

    const ALLOWED_STAGES = [self::STAGE_START, self::STAGE_LIST, self::STAGE_SCAN, self::STAGE_DONE];

    private static $updated;
    private static $started;
    private static $stage_started;
    private static $files_total;
    private static $current_file;
    private static $stage;
    private static $last_saved;

    private static $progress_log;
    private static $shared_mem;
    private static $create_shared_mem = false;

    private static $detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
    private static $prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

    private static $progress_string;
    private static $progress_array;

    private static $print_func;

    /**
     * Init progress
     */
    public static function init()
    {
        $time           = AibolitHelpers::currentTime();
        self::$started  = $time;
        self::$detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
        self::$prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

        self::$updated          = $time;
        self::$stage_started    = $time;
        self::$files_total      = 0;
        self::$current_file     = '';
        self::$stage            = self::STAGE_START;

        self::$progress_log = null;
        self::$shared_mem   = null;

        self::$progress_array = [
            'self'          => __FILE__,
            'started'       => self::$started,
            'updated'       => self::$updated,
            'progress'      => 0,
            'time_elapsed'  => 0,
            'time_left'     => 0,
            'files_left'    => 0,
            'files_total'   => 0,
            'current_file'  => '',
            'stage'         => self::$stage,
            'list_speed'    => null,
            'scan_speed'    => null,
        ];
    }

    /**
     * Get average files/sec
     * @param int $files
     * @param float $time
     * @return float
     */
    private static function getAvg(int $files, float $time): float
    {
        if ($time < 1) {
            return 0;
        }
        $fs = floor($files / round($time, 0));
        if ($fs > 0) {
            return round($fs, 2);
        }
        return 0;
    }

    /**
     * update data of list stage progress
     * @param int $total_files
     */
    public static function updateList(int $total_files)
    {
        if (self::$stage !== self::STAGE_LIST) {
            return;
        }
        self::$updated  = AibolitHelpers::currentTime();
        $elapsed_time   = AibolitHelpers::currentTime() - self::$started;
        $fs             = self::getAvg($total_files, (AibolitHelpers::currentTime() - self::$stage_started));
        $stat = '';
        if ($fs > 0) {
            $stat = ' [Avg: ' . $fs . ' files/s]';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "[$l_FN] Selected: " . self::$files_total . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['list_speed']     = $fs;

        if (FUNC_AIBOLIT_ON_PROGRESS_UPDATE) {
            aibolit_onProgressUpdate(self::$progress_array); /** @phpstan-ignore-line */
        }

        self::save();
    }

    /**
     * update data of scan stage progress
     * @param int $index
     */
    public static function updateScan(int $index)
    {
        if (self::$stage !== self::STAGE_SCAN) {
            return;
        }
        self::$updated   = AibolitHelpers::currentTime();
        $total_files     = self::$files_total;
        $elapsed_time    = AibolitHelpers::currentTime() - self::$started;
        $percent         = number_format($total_files ? $index * 100 / $total_files : 0, 1);
        $stat            = '';
        $left_time       = 0;
        $fs              = self::getAvg($index, (AibolitHelpers::currentTime() - self::$stage_started));
        $left_files      = $total_files - $index;
        if ($fs > 0) {
            $left_time = ($left_files / $fs); //ceil($left_files / $fs);
            $stat = ' [Avg: ' . $fs . ' files/s' . ($left_time > 0 ? ' Left: ' . AibolitHelpers::seconds2Human($left_time) : '') . '] [Mlw:' . (self::$detected[self::DETECT_PHP] + self::$detected[self::DETECT_SUS]) . '|' . (self::$detected[self::DETECT_JS] + self::$detected[self::DETECT_PHS]) . ']';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "$percent% [$l_FN] " . $index . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['progress']       = $percent;
        self::$progress_array['time_left']      = round($left_time);
        self::$progress_array['files_left']     = $left_files;
        self::$progress_array['scan_speed']     = $fs;

        if (FUNC_AIBOLIT_ON_PROGRESS_UPDATE) {
            aibolit_onProgressUpdate(self::$progress_array); /** @phpstan-ignore-line */
        }
        self::save();
    }

    /**
     * update stage + time in progress data
     */
    public static function update()
    {
        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round((AibolitHelpers::currentTime() - self::$started), 0);
    }

    /**
     * stage 'done' of progress
     */
    public static function done()
    {
        self::setStage(self::STAGE_DONE);

        if (self::$progress_log !== null && file_exists(self::$progress_log)) {
            @unlink(self::$progress_log);
        }
        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->close(self::$create_shared_mem);
        }
        self::$shared_mem = null;
        self::$progress_log = null;
        self::$create_shared_mem = false;
    }

    /**
     * Call user-provided function for output to cli
     */
    public static function print()
    {
        $text = str_pad(self::$progress_string ?? '', 160, ' ', STR_PAD_RIGHT);
        if (is_callable(self::$print_func)) {
            call_user_func(self::$print_func, str_repeat(chr(8), 160) . $text, false);
        }
    }

    /**
     * Flush all data to file, shared-memory and cli
     */
    public static function save()
    {
        self::print();
        if (self::$progress_log && (time() - self::$last_saved > 1)) {
            if (FUNC_JSON_ENCODE) {
                file_put_contents(self::$progress_log, json_encode(self::$progress_array));
            } else {
                file_put_contents(self::$progress_log, serialize(self::$progress_array));
            }

            self::$last_saved = time();
        }

        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->write(self::$progress_array);
        }
    }

    /**
     * Setter for total files
     * @param int $files_total
     */
    public static function setFilesTotal(int $files_total)
    {
        self::$files_total = $files_total;
    }

    /**
     * Setter for current file in progress
     * @param string $current_file
     */
    public static function setCurrentFile(string $current_file)
    {
        self::$current_file = $current_file;
    }

    /**
     * Getter for current progress stage
     * @return string
     */
    public static function getStage(): string
    {
        return self::$stage;
    }

    /**
     * Setter for current progress stage
     * @param string $stage
     */
    public static function setStage(string $stage)
    {
        if (!in_array($stage, self::ALLOWED_STAGES)) {
            return;
        }
        self::$stage = $stage;
        self::$stage_started = AibolitHelpers::currentTime();
        self::$updated = AibolitHelpers::currentTime();
        self::update();
        self::save();
    }

    /**
     * Setter for progress log file
     * @param string $progress_log
     */
    public static function setProgressLog(string $progress_log)
    {
        self::$progress_log = $progress_log;
        self::update();
        self::save();
    }

    /**
     * Getter for shared-memory region
     * @return resource
     */
    public static function getSharedMem()
    {
        return self::$shared_mem;
    }

    /**
     * Setter for shared-memory region
     * @param string $shared_mem
     * @return bool
     */
    public static function setSharedMem(string $shared_mem): bool
    {
        if (self::$create_shared_mem) {
            @$shid = new SharedMem((int)$shared_mem, "n", 0600, 5000);
        } else {
            @$shid = new SharedMem((int)$shared_mem, "w", 0, 0);
        }
        if ($shid->isValid()) {
            self::$shared_mem = $shid;
            self::update();
            self::save();
            return true;
        }

        return false;
    }

    /**
     * Setter for detection data
     * @param int[] $detected
     */
    public static function setDetected(array $detected)
    {
        self::$detected[self::DETECT_PHP] = $detected[self::DETECT_PHP] ?? self::$detected[self::DETECT_PHP];
        self::$detected[self::DETECT_JS] = $detected[self::DETECT_JS] ?? self::$detected[self::DETECT_JS];
        self::$detected[self::DETECT_SUS] = $detected[self::DETECT_SUS] ?? self::$detected[self::DETECT_SUS];
        self::$detected[self::DETECT_PHS] = $detected[self::DETECT_PHS] ?? self::$detected[self::DETECT_PHS];
    }

    /**
     * Setter for prefixes for filepath
     * @param string[] $prefixes
     */
    public static function setPrefixes(array $prefixes)
    {
        self::$prefixes[self::PREFIX_ADD] = $prefixes[self::PREFIX_ADD] ?? self::$prefixes[self::PREFIX_ADD];
        self::$prefixes[self::PREFIX_NO] = $prefixes[self::PREFIX_NO] ?? self::$prefixes[self::PREFIX_NO];
    }

    /**
     * Setter for flag if we create shared-memory region
     * @param bool $create_shared_mem
     */
    public static function setCreateSharedMem(bool $create_shared_mem)
    {
        self::$create_shared_mem = $create_shared_mem;
    }

    /**
     * Getter for flag if we create shared-memory region
     * @return bool
     */
    public static function isCreateSharedMem(): bool
    {
        return self::$create_shared_mem;
    }

    /**
     * Set external function for cli output
     * @param callable $print_func
     * @return bool
     */
    public static function setPrintFunc(callable $print_func): bool
    {
        if (!is_callable($print_func)) {
            return false;
        }
        self::$print_func = $print_func;
        return true;
    }
}


if (!defined('CLS_PROC_STATS')) {
    define('CLS_PROC_STATS', true);
}
class ProcStats
{
    const STATUS = 'status';
    const IO = 'io';
    const STAT = 'stat';

    public static function collectAll(): array
    {
        return [
            self::STATUS => self::parse(@file_get_contents('/proc/' . getmypid() . '/' . self::STATUS)),
            self::IO => self::parse(@file_get_contents('/proc/' . getmypid() . '/' . self::IO)),
            self::STAT => explode(' ', @file_get_contents('/proc/' . getmypid() . '/' . self::STAT))
        ];
    }

    private static function parse($string): array
    {
        $data = [];
        $lines = explode("\n", $string);
        foreach ($lines as $line) {
            $tmp = explode(':', $line);
            if ($tmp !== false) {
                $data[trim($tmp[0])] = trim(str_replace(' kB', '', $tmp[1] ?? ''));
            }
        }
        return $data;
    }
}


class ZipScanner
{
    private $filepath;
    private $filter;
    private $debug;
    private $vars;
    private $callback;
    private $max_size_scan_bytes;

    /**
     * @param string $filepath
     * @param Variables $vars
     * @param FileFilter|null $finder
     * @param Callback|null $callback
     */
    public function __construct(string $filepath, Variables $vars, DebugMode $debug, $filter, $callback = null, $max_size_scan_bytes = null)
    {
        $this->filepath             = $filepath;
        $this->filter               = $filter;
        $this->debug                = $debug;
        $this->vars                 = $vars;
        $this->callback             = $callback;
        $this->max_size_scan_bytes  = $max_size_scan_bytes;
    }

    /**
     * @param string $filepath
     * @return bool
     */
    public static function isZip(string $filepath)
    {
        return @file_get_contents($filepath, false, null, 0, 4) === "PK\x3\x4";
    }

    /**
     * @param int $maxSize
     * @param int $maxFiles
     * @return bool
     * @throws Exception
     */
    public function scan(int $maxSize = 0, int $maxFiles = 0, int $maxFolders = 0): bool
    {
        $zipStat = stat($this->filepath);
        if (!$zipStat) {
            throw new Exception();
        }

        if ($maxSize > 0 && $zipStat['size'] > $maxSize) {
            return false;
        }

        $zip = new Zip($this->filepath);
        if (!$zip->open()) {
            throw new Exception();
        }

        $countFiles = 0;
        $countFolders = 0;
        $totalFiles = $zip->archive->numFiles;
        for ($i = 0; $i < $totalFiles; $i++) {
            if ($maxFiles > 0 && $countFiles >= $maxFiles) {
                break;
            }
            if ($maxFolders > 0 && $countFolders >= $maxFolders) {
                break;
            }

            $fileinfo               = new ZipFileInfo($zip, $i, $this->filepath, $zipStat);
            $archive_filepath       = $fileinfo->getFilename();
            $size                   = $fileinfo->getSize();
            $is_folder              = $size === 0 && (substr($archive_filepath, -1) === '/');

            if ($is_folder) {
                $countFolders++;
                continue;
            }

            $countFiles++;

            if ($size === 0) {
                continue;
            }

            $scan = new Scanner(null, $this->vars, $this->debug, $this->max_size_scan_bytes);

            if (!is_null($this->callback)) {
                call_user_func($this->callback, false);
            }

            if (
                $this->filter instanceof ZipFileFilter
                && !$this->filter->needToScan(
                    $fileinfo,
                    false,
                    ZipFileFilter::SKIP_ZIP_CHECKERS
                )
            ) {
                continue;
            }

            $res = $scan->QCR_ScanFile(
                $fileinfo,
                $this->vars,
                null,
                $i,
                false
            );

            if ($res && $res[0] == RapidScanStorageRecord::RX_MALWARE) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param ZipArchive $zip
     * @return int
     */
    private function getTotalUncompressedSize(ZipArchive $zip): int
    {
        $totalSize = 0;

        for ($i = 0; $i < $zip->numFiles; $i++) {
            $fileStats = $zip->statIndex($i);
            $totalSize += $fileStats['size'];
        }

        return $totalSize;
    }
}


class ZipFileFilter extends FileFilter
{
    const SKIP_ZIP_CHECKERS = [
        'check_is_not_root',
        'check_is_not_system',
        'check_is_file',
    ];

    public function __construct()
    {
        $this->zipFile = true;

        parent::__construct();
    }
}


class ZipFileInfo extends FileInfo
{
    protected $index    = 0;
    protected $filename = '';
    protected $size     = 0;
    protected $modified = 0;
    protected $zip;
    protected $fullFilename;
    protected $zipFilename;
    protected $zipStat;

    public function __construct(Zip $zip, $index, $zipFullFilename, $zipStat)
    {
        $this->zip         = $zip;
        $this->index       = $index;
        $this->zipFilename = $zipFullFilename;
        $this->zipStat     = $zipStat;
        $this->_setStat();
        parent::__construct($this->filename, $this->index, null);
    }

    protected function _setStat()
    {
        /** @var array $info */
        $info           = $this->zip->getFileInfo($this->index);
        $this->size     = $info['size'];
        $this->filename = 'zip://' . $this->zipFilename . '#' . $info['name'];
        $this->created  = $this->zipStat['ctime'];
        $this->modified = $this->zipStat['mtime'];
    }

    public function getStat()
    {
        return [
            'size'  => $this->size,
            'name'  => $this->filename,
            'ctime' => $this->created,
            'mtime' => $this->modified,
        ];
    }
}


if (!defined('CLS_DECISION_MAKING_STATS')) {
    define('CLS_DECISION_MAKING_STATS', true);
}
/**
 * Class to accumulate decision-making stats
 */
class DecisionMakingStats
{
    const CHECKER_SCAN = 'SCAN';
    const CHECKER_SCAN_DISABLED = self::CHECKER_SCAN . '(disabled)';
    const CHECKER_SCAN_CRON = self::CHECKER_SCAN . '(cron)';
    const CHECKER_SKIP = 'SKIP';
    const VERDICT_OK = self::CHECKER_SCAN;
    const NO_EXT_GROUP = 'no_ext';
    const NO_SIZE_GROUP = 'no_size';
    const EXT_TOTAL = 'total';
    const EXT_OTHER = 'other';
    const EXT_UNKNOWN = 'unknown';
    const EXT_DIR = '/dir';
    const TOP_EXT_COUNT = 2;

    /**
     * Hardcoded known exts aggregated from /etc/mime.types from CentOS7, CentOS8, Ubuntu22, Debian11, Alma9.7
     * @var string[]
     */
    private static $hardcoded_exts = ['a2l', 'aml', 'ez', 'atf', 'atfx', 'atxml', 'atom', 'atomcat', 'atomdeleted',
        'atomsvc', 'dwd', 'held', 'rsat', 'apxml', 'xdd', 'xcs', 'cbor', 'c3ex', 'ccmp', 'ccxml', 'cdfx', 'cdmia', 'cdmic',
        'cdmid', 'cdmio', 'cdmiq', 'cea', 'cellml', 'cml', 'clue', 'cmsc', 'cpl', 'csrattrs', 'mpd', 'mpdd', 'davmount',
        'dcd', 'dcm', 'dii', 'dit', 'xmls', 'dssc', 'xdssc', 'dvc', 'es', 'efi', 'emma', 'emotionml', 'epub', 'exi',
        'finf', 'fdt', 'pfr', 'geojson', 'gpkg', 'glbin', 'glbuf', 'gml', 'gz', 'tgz', 'stk', 'ink', 'inkml', 'ipfix',
        'its', 'js', 'jrd', 'json', 'json-patch', 'jsonld', 'lgr', 'wlnk', 'lostxml', 'lostsyncxml', 'lpf', 'lxf', 'hqx',
        'mads', 'mrc', 'mrcx', 'nb', 'ma', 'mb', 'mml', 'mbox', 'meta4', 'mets', 'mf4', 'maei', 'musd', 'mods', 'm21',
        'mp21', 'doc', 'mxf', 'nq', 'nt', 'orq', 'ors', 'bin', 'lha', 'lzh', 'exe', 'class', 'so', 'dll', 'img', 'iso',
        'oda', 'odx', 'opf', 'ogx', 'oxps', 'relo', 'pdf', 'pdx', 'pem', 'pgp', 'sig', 'p10', 'p12', 'pfx', 'p7m', 'p7c',
        'p7s', 'p8', 'p8e', 'cer', 'crl', 'pkipath', 'pki', 'pls', 'ps', 'eps', 'ai', 'provx', 'cw', 'cww', 'hpub', 'rnd',
        'rct', 'rdf-crypt', 'xsf', 'pskcxml', 'rdf', 'rapd', 'sls', 'rusd', 'rif', 'rnc', 'rld', 'rl', 'rfcxml', 'rs',
        'gbr', 'mft', 'roa', 'rtf', 'scim', 'scq', 'scs', 'spq', 'spp', 'sdp', 'senml-etchc', 'senml-etchj', 'senmlc',
        'senml', 'senmlx', 'senmle', 'sensmlc', 'sensml', 'sensmlx', 'sensmle', 'soc', 'shf', 'siv', 'sieve', 'cl',
        'smil', 'smi', 'sml', 'rq', 'srx', 'sql', 'gram', 'grxml', 'sru', 'ssml', 'stix', 'swidtag', 'tau', 'auc', 'tcu',
        'cuc', 'jsontd', 'ter', 'tsa', 'sac', 'tur', 'tuc', 'tei', 'teicorpus', 'odd', 'tfi', 'tsq', 'tsr', 'tsd', 'trig',
        'ttml', 'gsheet', 'rsheet', 'td', 'uis', '1km', 'plb', 'psb', 'pvb', 'sms', 'tcap', 'imgcal', 'pwn', 'aso', 'imp',
        'acu', 'atc', 'acutc', 'swf', 'fcdt', 'fxp', 'fxpl', 'xdp', 'xfdf', 'list3820', 'listafp', 'afp', 'pseg3820',
        'ovl', 'psg', 'ahead', 'azf', 'azs', 'azw3', 'acc', 'ami', 'ota', 'apkg', 'cii', 'fti', 'dist', 'distz', 'pkg',
        'mpkg', 'keynote', 'm3u8', 'numbers', 'pages', 'swi', 'artisan', 'iota', 'aep', 'package', 'bmml', 'ac2', 'bmpr',
        'mpm', 'ep', 'le', 'bmi', 'rep', 'tlclient', 'cdxml', 'pgn', 'mmd', 'cdy', 'csl', 'cla', 'rp9', 'c4g', 'c4d', 'c4f',
        'c4p', 'c4u', 'c11amc', 'c11amz', 'coffee', 'xodt', 'xott', 'xodp', 'xotp', 'xods', 'xots', 'cbr', 'cbz', 'ica',
        'icf', 'icd', 'ic0', 'ic1', 'ic2', 'ic3', 'ic4', 'ic5', 'ic6', 'ic7', 'ic8', 'csp', 'cst', 'cdbcmsg', 'ign',
        'ignition', 'cmc', 'clkx', 'clkk', 'clkp', 'clkt', 'clkw', 'wbs', 'ssvc', 'pml', 'ppd', 'curl', 'dart', 'rdz',
        'dbf', 'deb', 'udeb', 'uvf', 'uvvf', 'uvd', 'uvvd', 'uvt', 'uvvt', 'uvx', 'uvvx', 'uvz', 'uvvz', 'fe_launch',
        'dsm', 'dna', 'docjson', 'scld', 'dpg', 'mwc', 'dpgraph', 'dfac', 'fla', 'ait', 'svc', 'geo', 'dzr', 'mag', 'nml',
        'esf', 'msf', 'qam', 'slt', 'ssf', 'qcall', 'qca', 'espass', 'es3', 'et3', 'asice', 'sce', 'asics', 'tst', 'mpw',
        'pub', 'ecigprofile', 'ecig', 'ecigtheme', 'ez2', 'ez3', 'dim', 'fdf', 'msd', 'mseed', 'seed', 'dataless', 'flb',
        'zfc', 'gph', 'ftc', 'sfd', 'fm', 'fnc', 'ltf', 'fsc', 'oas', 'oa2', 'oa3', 'fg5', 'bh2', 'ddd', 'xdw', 'xbd',
        'xct', 'fzs', 'txd', 'g3', 'ggb', 'ggt', 'gex', 'gre', 'gxt', 'g2w', 'g3w', 'gmx', 'kml', 'kmz', 'gqf',
        'gqs', 'gac', 'ghf', 'gim', 'grv', 'gtm', 'tpl', 'vcg', 'hal', 'zmm', 'hbci', 'hbc', 'kom', 'upa', 'pkd', 'bpd',
        'hdt', 'les', 'hpgl', 'hpi', 'hpid', 'hps', 'jlt', 'pcl', 'sfd-hdstx', 'x3d', 'emm', 'mpy', 'irm', 'sc', 'icc',
        'icm', '1905.1', 'igl', 'imf', 'imi', 'ivp', 'ivu', 'imscc', 'igm', 'xpw', 'xpx', 'i2g', 'qbo', 'qfx', 'rcprofile',
        'irp', 'xpr', 'fcs', 'jam', 'rms', 'jisp', 'joda', 'ktz', 'ktr', 'karbon', 'chrt', 'kfo', 'flw', 'kon', 'kpr', 'kpt',
        'ksp', 'kwd', 'kwt', 'htke', 'kia', 'kne', 'knp', 'sdf', 'skp', 'skd', 'skm', 'skt', 'sse', 'lasjson', 'lasxml',
        'lbd', 'lbe', 'lcs', 'lca', 'loom', '123', 'wk4', 'wk3', 'wk1', 'apr', 'vew', 'prz', 'pre', 'nsf', 'ntf', 'ndl',
        'ns4', 'ns3', 'ns2', 'nsh', 'nsg', 'or3', 'or2', 'org', 'scm', 'lwp', 'sam', 'portpkg', 'mvt', 'mdc', 'mmdb',
        'mcd', 'mc1', 'cdkey', 'mwf', 'mfm', 'flo', 'igx', 'mif', 'daf', 'dis', 'mbk', 'mqy', 'msl', 'plc', 'txf', 'mpn',
        'mpc', 'xul', '3mf', 'cil', 'asf', 'cab', 'xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw', 'xltm', 'xlam', 'xlsb', 'xlsm',
        'eot', 'chm', 'ims', 'lrm', 'thmx', 'ppt', 'pps', 'pot', 'ppam', 'pptm', 'sldm', 'ppsm', 'potm', 'mpp', 'mpt',
        'tnef', 'tnf', 'docm', 'dotm', 'wcm', 'wdb', 'wks', 'wps', 'wpl', 'xps', 'msa', 'mseq', 'crtr', 'cif', 'mus',
        'msty', 'taglet', 'entity', 'request', 'bkm', 'kcm', 'nimn', 'nitf', 'nlu', 'nds', 'sfc', 'smc', 'nnd', 'nns',
        'nnw', 'ac', 'ngdat', 'n-gage', 'rpst', 'rpss', 'edm', 'edx', 'ext', 'odc', 'otc', 'odb', 'odf', 'odg', 'otg',
        'odi', 'oti', 'odp', 'otp', 'ods', 'ots', 'odt', 'odm', 'ott', 'oth', 'xo', 'dd2', 'tam', 'tamp', 'tamx', 'tat',
        'tatp', 'tatx', 'obgx', 'obg', 'oeb', 'oxt', 'osm', 'sldx', 'ppsx', 'potx', 'xlsx', 'xltx', 'docx', 'dotx', 'ndc',
        'mgp', 'dp', 'esa', 'oxlicg', 'prc', 'pdb', 'pqa', 'oprc', 'plp', 'dive', 'paw', 'str', 'ei6', 'pil', 'efif', 'wg',
        'plf', 'pbd', 'preminet', 'box', 'vbox', 'mgz', 'psfs', 'qps', 'ptid', 'bar', 'qxd', 'qxt', 'qwd', 'qwt', 'qxl',
        'qxb', 'quox', 'quiz', 'tree', 'rar', 'bed', 'mxl', 'cryptonote', 'link66', 'st', 'sar', 'scd', 'sla', 'slaz',
        's3df', 'scsf', 'sdoc', 'sdo', 's1w', 'seml', 'sem', 'smht', 'smh', 'sppt', 's1p', 'stif', 'sxls', 'sxl', 's1e',
        'stml', 's1h', 'spdf', 'spd', 's1a', 'see', 'sema', 'semd', 'semf', 'ssv', 'ifm', 'itp', 'iif', 'ipk', 'shp',
        'shx', 'sr', 'twd', 'twds', 'mmf', 'notebook', 'teacher', 'ptrom', 'pt', 'fo', 'zfo', 'sdkm', 'sdkd', 'dxp',
        'sfs', 'sqlite', 'sqlite3', 'smzip', 'sm', 'wadl', 'sus', 'susp', 'xsm', 'bdm', 'xdm', 'ddf', 'tao', 'pcap', 'cap',
        'dmp', 'qvd', 'ppttc', 'vfr', 'viaframe', 'tmo', 'tpt', 'mxs', 'tra', 'ufdl', 'ufd', 'frm', 'utz', 'umj',
        'unityweb', 'uoml', 'uo', 'urim', 'urimap', 'vmt', 'vcx', 'mxi', 'study-inter', 'model-inter', 'vwx', 'istc',
        'isws', 'ves', 'vsc', 'vsd', 'vst', 'vsw', 'vss', 'vis', 'vsf', 'sic', 'slc', 'wbxml', 'wmlc', 'wmlsc', 'wtb',
        'p2p', 'wsc', 'wmc', 'm', 'nbp', 'wpd', 'wqd', 'stf', 'wv', 'xar', 'xfdl', 'xfd', 'cpkg', 'dpkg', 'ppkg', 'xlim',
        'hvd', 'hvs', 'hvp', 'osf', 'saf', 'spf', 'yme', 'cmp', 'zir', 'zirz', 'zaz', 'vxml', 'vcj', 'wif', 'wgt', 'wsdl',
        'wspolicy', 'xav', 'xca', 'xdf', 'xel', 'xer', 'xns', 'xhtml', 'xhtm', 'xht', 'xlf', 'dtd', 'xop', 'xsl', 'xslt',
        'mxml', 'xhvml', 'xvml', 'xvm', 'yang', 'yin', 'zip', 'zst', '726', 'adts', 'aac', 'ass', 'ac3', 'amr', 'awb',
        'acn', 'aal', 'atx', 'at3', 'aa3', 'omg', 'au', 'snd', 'dls', 'evc', 'evb', 'enw', 'evw', 'lbc', 'l16', 'mhas',
        'mxmf', 'm4a', 'mp3', 'mpga', 'mp1', 'mp2', 'oga', 'ogg', 'opus', 'spx', 'sid', 'psid', 'qcp', 'smv', 'loas',
        'xhe', 'koz', 'uva', 'uvva', 'eol', 'mlp', 'dts', 'dtshd', 'plj', 'lvp', 'pya', 'vbk', 'ecelp4800', 'ecelp7470',
        'ecelp9600', 'multitrack', 'rip', 'smp3', 'smp', 's1m', 'ttc', 'otf', 'ttf', 'woff', 'woff2', 'exr', 'avci', 'avcs',
        'bmp', 'dib', 'cgm', 'drle', 'emf', 'fits', 'fit', 'fts', 'heic', 'heics', 'heif', 'heifs', 'hej2', 'hsj2', 'gif',
        'ief', 'jls', 'jp2', 'jpg2', 'jph', 'jhc', 'jpg', 'jpeg', 'jpe', 'jfif', 'jpm', 'jpgm', 'jpx', 'jpf', 'jxr', 'jxra',
        'jxrs', 'jxs', 'jxsc', 'jxsi', 'jxss', 'ktx', 'png', 'btif', 'btf', 'pti', 'svg', 'svgz', 't38', 'tiff', 'tif', 'tfx',
        'psd', 'azv', 'uvi', 'uvvi', 'uvg', 'uvvg', 'djvu', 'djv', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'pgb',
        'ico', 'apng', 'mdi', 'hdr', 'rgbe', 'xyze', 'spng', 'spn', 's1n', 'sgif', 'sgi', 's1g', 'sjpg', 'sjp', 's1j',
        'tap', 'vtf', 'wbmp', 'xif', 'pcx', 'wmf', 'u8msg', 'u8dsn', 'u8mdn', 'u8hdr', 'eml', 'mail', 'art', 'glb', 'gltf',
        'igs', 'iges', 'msh', 'mesh', 'silo', 'mtl', 'obj', 'stl', 'dae', 'dwf', 'gdl', 'gsm', 'win', 'dor', 'lmp', 'rsm',
        'msm', 'ism', 'gtw', 'moml', 'mts', 'ogex', 'x_b', 'xmt_bin', 'x_t', 'xmt_txt', 'usdz', 'bsp', 'vtu', 'wrl', 'vrml',
        'x3db', 'x3dv', 'x3dvz', 'bmed', 'vpm', 'appcache', 'manifest', 'ics', 'ifb', 'css', 'csv', 'csvs', 'soa', 'zone',
        'html', 'htm', 'cnd', 'markdown', 'md', 'miz', 'n3', 'txt', 'asc', 'text', 'pm', 'el', 'c', 'h', 'cc', 'hh', 'cxx',
        'hxx', 'f90', 'conf', 'log', 'provn', 'rst', 'tag', 'dsc', 'rtx', 'sgml', 'sgm', 'tsv', 'tr', 'roff', 'ttl', 'uris',
        'uri', 'vcf', 'vcard', 'a', 'abc', 'ascii', 'copyright', 'dms', 'sub', 'jtd', 'flt', 'fly', 'flx', 'gv', 'dot',
        'hgl', '3dml', '3dm', 'spot', 'spo', 'mpf', 'ccc', 'mc2', 'uric', 'jad', 'sos', 'ts', 'si', 'sl', 'wml', 'wmls',
        'vtt', 'xml', 'xsd', 'rng', 'ent', '3gp', '3gpp', '3g2', '3gpp2', 'm4s', 'mj2', 'mjp2', 'mp4', 'mpg4', 'm4v',
        'mpeg', 'mpg', 'mpe', 'm1v', 'm2v', 'ogv', 'mov', 'qt', 'uvh', 'uvvh', 'uvm', 'uvvm', 'uvu', 'uvvu', 'uvp', 'uvvp',
        'uvs', 'uvvs', 'uvv', 'uvvv', 'dvb', 'fvt', 'mxu', 'm4u', 'pyv', 'nim', 'bik', 'bk2', 'smk', 'smpg', 's11', 's14',
        'sswf', 'ssw', 'smov', 'smo', 's1q', 'yt', 'viv', 'cpt', 'metalink', 'owx', 'rss', 'apk', 'dd', 'dcf', 'o4a', 'o4v',
        'dm', 'drc', 'dr', 'sxc', 'stc', 'sxd', 'std', 'sxi', 'sti', 'sxm', 'sxw', 'sxg', 'stw', 'sis', 'mms', 'anx',
        'bcpio', 'torrent', 'bz2', 'vcd', 'crx', 'cpio', 'csh', 'dcr', 'dir', 'dxr', 'dvi', 'spl', 'gtar', 'hdf', 'jar',
        'jnlp', 'pack', 'kil', 'latex', 'nc', 'cdf', 'pl', 'rpm', 'sh', 'shar', 'sit', 'sv4cpio', 'sv4crc', 'tar', 'tcl',
        'tex', 'texinfo', 'texi', 'man', '1', '2', '3', '4', '5', '6', '7', '8', 'me', 'ms', 'ustar', 'src', 'xpi', 'xspf',
        'xz', 'mid', 'midi', 'kar', 'aif', 'aiff', 'aifc', 'axa', 'flac', 'mka', 'mod', 'ult', 'uni', 'm15', 'mtm', '669',
        'med', 'm3u', 'wax', 'wma', 'ram', 'rm', 'ra', 's3m', 'stm', 'wav', 'xyz', 'webp', 'ras', 'pnm', 'pbm', 'pgm',
        'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'sandboxed', 'pod', 'etx', 'webm', 'axv', 'flv', 'fxm', 'mkv', 'mk3d',
        'asx', 'wm', 'wmv', 'wmx', 'wvx', 'avi', 'movie', 'ice', 'sisx', 'atomsrv', 'lin', 'cu', 'tsp', 'hta', 'mjs', 'ser',
        'm3g', 'mdb', 'deploy', 'msu', 'msp', 'one', 'onetoc2', 'onetmp', 'onepkg', 'key', 'prf', 'p7z', 'epsi', 'epsf',
        'eps2', 'eps3', 'ddeb', 'cat', 'pptx', 'cod', 'sdc', 'sds', 'sda', 'sdd', 'sdw', 'sgl', 'wp5', 'wasm', 'wk',
        '7z', 'abw', 'dmg', 'cda', 'mph', 'wad', 'pfa', 'pfb', 'gsf', 'pcf', 'pcf.z', 'mm', 'gan', 'gnumeric', 'sgf',
        'gcf', 'taz', 'rhtml', 'phtml', 'pht', 'php', 'php3', 'php3p', 'php4', 'php5', 'phps', 'hwp', 'info', 'ins', 'isp',
        'iii', 'jmz', 'lyx', 'lzx', 'maker', 'frame', 'fb', 'book', 'fbdoc', 'application', 'com', 'bat', 'msi', 'wmd',
        'wmz', 'pac', 'nwc', 'o', 'oza', 'p7r', 'pyc', 'pyo', 'qgs', 'qtl', 'rdp', 'rb', 'sci', 'xcos', 'scr', 'sitx',
        'gf', 'pk', '~', '%', 'bak', 'old', 'sik', 'wz', 'crt', 'xcf', 'fig', 'csd', 'orc', 'sco', 'mpega', 'sofa', 'sd2',
        'alc', 'cac', 'cache', 'csf', 'cbin', 'cascii', 'ctab', 'cdx', 'c3d', 'cmdf', 'cpa', 'bsd', 'csml', 'csm', 'ctx',
        'cxf', 'cef', 'emb', 'embl', 'spc', 'inp', 'gam', 'gamin', 'fch', 'fchk', 'cub', 'gau', 'gjc', 'gjf', 'gal', 'gcg',
        'gen', 'hin', 'istr', 'ist', 'jdx', 'dx', 'kin', 'mcm', 'mmod', 'mol', 'rd', 'rxn', 'sd', 'tgf', 'mcif', 'mol2',
        'b', 'gpt', 'mop', 'mopcrt', 'zmt', 'moo', 'mvb', 'asn', 'prt', 'val', 'ros', 'sw', 'vms', 'vmd', 'xtel', 'jphc',
        'ktx2', 'b16', 'cr2', 'crw', 'cdr', 'pat', 'cdt', 'erf', 'jng', 'nef', 'orf', '323', 'shtml', 'uls', 'brf', 'srt',
        'sct', 'tm', 'bib', 'boo', 'h++', 'hpp', 'htc', 'c++', 'cpp', 'diff', 'patch', 'd', 'hs', 'java', 'ly', 'lhs',
        'moc', 'p', 'pas', 'gcd', 'py', 'scala', 'sfv', 'tk', 'ltx', 'sty', 'cls', 'vcs', 'dl', 'dif', 'dv', 'fli', 'gl',
        'lsf', 'lsx', 'mpv', 'mng', 'vrm', '1clr', 'cwl', 'exp', 'webmanifest', 'p21', 'stpnc', '210', 'ifc', 'sarif',
        'sarif-external-properties', 'age', 'arrow', 'arrows', 'lhzd', 'c9r', 'c9s', 'cryptomator', 'carjson', 'gdz',
        'genozip', 'ggs', 'car', 'las', '3tz', 'nebul', 'line', 'rlm', 'reload', 'smf', 'scl', 'aion', 'vtnstd', 'avif',
        'hif', 'jxl', 'stp', 'step', 'stpx', 'stpz', 'stpxz', 'u3d', 'pyox', 'vds', 'x3dz', 'cql', 'gff3', 'shaclc', 'shc',
        'shex', 'spdx', 'ged', 'hans', 'htaccess', 'cgi','sass', ''
    ];

    private static $structure = [];
    private static $top_extensions = ['php', 'js', 'html', self::EXT_TOTAL, self::EXT_DIR, self::EXT_UNKNOWN];

    private static $stat_settings = [
        'finder'                            => ['ext' => true, 'size' => true],
        'checker_is_file'                   => ['ext' => true, 'size' => false],
        'checker_size_range'                => ['ext' => true, 'size' => false],
        'checker_ext'                       => ['ext' => true, 'size' => false],
        'checker_ignore_excludes'           => ['ext' => false, 'size' => false],
        'checker_ignore_path_pattern'       => ['ext' => false, 'size' => false],
        'checker_file_patterns'             => ['ext' => false, 'size' => false],
        'checker_file_not_patterns'         => ['ext' => false, 'size' => false],
        'checker_is_not_root'               => ['ext' => false, 'size' => false],
        'checker_is_not_system'             => ['ext' => false, 'size' => false],
        'checker_file_older'                => ['ext' => false, 'size' => false],
        'checker_ignore_filename_template'  => ['ext' => false, 'size' => false],
        'checker_ignore_file'               => ['ext' => false, 'size' => false],
        'checker_only_filepath_template'    => ['ext' => false, 'size' => false],
        'checker_skip_ext'                  => ['ext' => true, 'size' => false],
        'checker_imunify_filter'            => ['ext' => true, 'size' => false],
        'rapid_scan'                        => ['ext' => false, 'size' => false],
        'cloud_assisted_scan'               => ['ext' => true, 'size' => false],
        'elf'                               => ['ext' => false, 'size' => false],
        'checker_size_range_sig_scan'       => ['ext' => true, 'size' => false],
        'smart_scan'                        => ['ext' => true, 'size' => false],
        'checker_before_norm'               => ['ext' => false, 'size' => false],
        'deobfuscator'                      => ['ext' => true, 'size' => false],
        'files_submitted_to_scan_hs'        => ['ext' => true, 'size' => true],
        'files_submitted_to_scan_pcre'      => ['ext' => true, 'size' => false],
        'hyperscan'                         => ['ext' => true, 'size' => false],
        'pcre'                              => ['ext' => true, 'size' => false],
    ];

    /**
     * @param string $item Ai-Bolit 'functional component/element/(whatever)', that processes files and sets verdicts to them
     * @param string $verdict a verdict, that was set by `item`, for a file at `$file`
     * @param FileInfo $file a file, for which the component `item` set verdict `verdict`
     * @param int $size size information for given file,
     * @return void
     */
    public static function addStatsItem(string $item, string $verdict, FileInfo $file, $size = null)
    {
        if ($size === null) {
            $size = $file->getSize();
        }

        if ($size === null) {
            return;
        }

        if (isset(self::$hardcoded_exts[0])) {
            self::$hardcoded_exts = array_flip(self::$hardcoded_exts);
        }

        $ext = isset(self::$hardcoded_exts[$file->getExtension()]) ? $file->getExtension() : self::EXT_UNKNOWN;

        $dir = $file->is_dir();
        $ext_group  = (isset(self::$stat_settings[$item]) && !self::$stat_settings[$item]['ext'])
            ? self::NO_EXT_GROUP
            : $ext;
        if ($ext_group === self::NO_EXT_GROUP && $dir) {
            return;
        }
        if ($dir) {
            $ext_group = self::EXT_DIR;
        }

        self::addStatsDataToArray($item, $verdict, $ext_group, $size);
        if ($ext_group !== self::EXT_DIR) {
            self::addStatsDataToArray($item, $verdict, self::EXT_TOTAL, $size);
        }
    }

    public static function addStatsDataToArray(string $item, string $verdict, string $ext, int $size)
    {
        $size_group = (isset(self::$stat_settings[$item]) && !self::$stat_settings[$item]['size']) ? self::NO_SIZE_GROUP : (int)floor(log($size, 2));

        if ($size_group !== self::NO_SIZE_GROUP) {
            if ($size_group <= 8) {
                $size_group = 8;
            } elseif ($size_group > 8 && $size_group <= 12) {
                $size_group = 12;
            } elseif ($size_group > 12 && $size_group <= 16) {
                $size_group = 16;
            } elseif ($size_group > 16 && $size_group <= 20) {
                $size_group = 20;
            } elseif ($size_group > 20 && $size_group <= 24) {
                $size_group = 24;
            } else {
                $size_group = 32;
            }
        }

        $path = &self::$structure[$item][$verdict][$ext];
        isset($path['ext_count']) ? $path['ext_count'] += 1 : $path['ext_count'] = 1;

        isset($path[$size_group]['count']) ? $path[$size_group]['count'] += 1       : $path[$size_group]['count'] = 1;
        isset($path[$size_group]['bytes']) ? $path[$size_group]['bytes'] += $size   : $path[$size_group]['bytes'] = $size;

        ///welford variance update
        isset($path[$size_group]['bytes_var'][0]) ?: $path[$size_group]['bytes_var'][0] = 0;
        isset($path[$size_group]['bytes_var'][1]) ?: $path[$size_group]['bytes_var'][1] = 0;
        self::welfordUpdate($size, $path[$size_group]['count'], $path[$size_group]['bytes_var']);
        ////////
    }

    /**
     * Update variance with welford's online algo
     * @param $size
     * @param $count
     * @param $res
     * @return mixed
     */
    public static function welfordUpdate($size, $count, &$res)
    {
        $delta = $size - $res[0];
        $res[0] += $delta / $count;
        $delta2 = $size - $res[0];
        $res[1] += $delta * $delta2;
        return $res;
    }

    /**
     * @return array
     */
    public static function getStats()
    {
        return self::$structure;
    }

    /**
     * Sort internal structure $top_extensions to the top of the list, next sort by ext_count value
     * @return void
     */
    private static function sortByTopExtsCountDesc()
    {
        foreach (self::$structure as &$verdicts) {
            foreach ($verdicts as &$extensions) {
                uksort($extensions, function ($a, $b) use ($extensions) {
                    if (in_array($a, self::$top_extensions) && !in_array($b, self::$top_extensions)) {
                        return -1;
                    }
                    if (in_array($b, self::$top_extensions) && !in_array($a, self::$top_extensions)) {
                        return 1;
                    }
                    if (in_array($a, self::$top_extensions) && in_array($b, self::$top_extensions)) {
                        return 0;
                    }
                    if ($extensions[$a]['ext_count'] === $extensions[$b]['ext_count']) {
                        return 0;
                    }
                    return ($extensions[$a]['ext_count'] > $extensions[$b]['ext_count']) ? -1 : 1;
                });
            }
        }
    }

    /**
     * Get final report from internal structure
     * @return array
     */
    public static function getReportData()
    {
        $report = [];

        self::sortByTopExtsCountDesc();

        //transfer php,js,html,total,dir,unknown and TOP_EXT_COUNT top extensions from internal structure to report
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                $i = 0;
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        if ($extension === self::NO_EXT_GROUP) {
                            break;
                        }
                        if ($i >= self::TOP_EXT_COUNT) {
                            break 2;
                        }
                        $keys = [];
                        $keys['extension'] = (string)$extension;
                        if ($size !== self::NO_SIZE_GROUP) {
                            $keys['file-size'] = $size;
                        }
                        $stat = [
                            'keys'      => $keys,
                            'count'     => $counters['count'],
                            'bytes'     => $counters['bytes'],
                            'bytes_var' => $counters['bytes_var'],
                        ];
                        $report[$item][$verdict][] = $stat;
                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    if ($extension !== self::NO_EXT_GROUP && !in_array($extension, self::$top_extensions, true)) {
                        $i++;
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //aggregate all left extensions in internal structure to 'other' extension
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        if (in_array($extension, [self::EXT_DIR, self::EXT_TOTAL, self::EXT_OTHER, self::NO_EXT_GROUP], true)) {
                            break;
                        }
                        $path = &self::$structure[$item][$verdict];

                        isset($path[self::EXT_OTHER][$size]['count'])
                            ? $path[self::EXT_OTHER][$size]['count'] += $path[$extension][$size]['count']
                            : $path[self::EXT_OTHER][$size]['count'] = $path[$extension][$size]['count'];

                        isset($path[self::EXT_OTHER][$size]['bytes'])
                            ? $path[self::EXT_OTHER][$size]['bytes'] += $path[$extension][$size]['bytes']
                            : $path[self::EXT_OTHER][$size]['bytes'] = $path[$extension][$size]['bytes'];

                        isset($path[self::EXT_OTHER][$size]['bytes_var'])
                            ? self::welfordUpdate($path[self::EXT_OTHER][$size]['bytes'], $path[self::EXT_OTHER][$size]['count'], $path[self::EXT_OTHER][$size]['bytes_var'])
                            : $path[self::EXT_OTHER][$size]['bytes_var'] = $path[$extension][$size]['bytes_var'];

                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //here must be left only in internal structure 'other'
        //transfer 'other' extension from internal structure to report
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        $keys = [];
                        if ($extension === self::NO_EXT_GROUP) {
                            break;
                        }
                        $keys['extension'] = (string)$extension;
                        if ($size !== self::NO_SIZE_GROUP) {
                            $keys['file-size'] = $size;
                        }
                        $stat = [
                            'keys'      => $keys,
                            'count'     => $counters['count'],
                            'bytes'     => $counters['bytes'],
                            'bytes_var' => $counters['bytes_var'],
                        ];
                        $report[$item][$verdict][] = $stat;
                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //calculate all bytes_var in report
        foreach ($report as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$counters) {
                foreach ($counters as $index => &$counter) {
                    $counter['bytes_var'] = $counter['count'] < 2 ? 0 : $counter['bytes_var'][1] / $counter['count'];
                }
                unset($counter);
            }
            unset($counters);
        }
        unset($verdicts);
        return $report;
    }
}


class IniConfig
{
    private static $config;
    private static $defaults = [
        'AT_CLKTCK' => 100,
    ];

    public static function parse($file)
    {
        if (!is_readable($file)) {
            throw new Exception("IniConfig: file '$file' is not readable");
        }
        if (self::$config === null) {
            self::$config = parse_ini_file($file);
        }
        return self::$config;
    }

    public static function get($key)
    {
        if (self::$config === null) {
            throw new Exception('IniConfig: no config loaded');
        }
        if (!isset(self::$config[$key]) && !isset(self::$defaults[$key])) {
            throw new Exception("IniConfig: no such key '$key'");
        }
        return self::$config[$key] ?? self::$defaults[$key];
    }
}


class HashVerdicts
{
    const API_URL = 'https://api.imunify360.com/api/hashes/report';
    const TOKEN_FILE = '/var/imunify360/iaid-token';
    protected static $hashes = [];
    protected static $count = 0;
    protected static $mh = null;
    protected static $ch = null;
    protected static $token = null;
    protected static $callback = null;

    public static function init($callback = null)
    {
        if (!defined('DEBUG_CA')) {
            define('DEBUG_CA', false);
        }
        if (!is_readable(self::TOKEN_FILE)) {
            return;
        }
        self::$token = trim(file_get_contents(self::TOKEN_FILE));
        if (!isset(self::$mh)) {
            self::$mh = curl_multi_init();
        }
        self::$callback = $callback;
    }

    public static function add($hash, $verdict)
    {
        if (!isset(self::$token)) {
            return;
        }
        self::$hashes[$verdict][] = $hash;
        self::$count++;
        if (self::$count >= CLOUD_ASSIST_LIMIT) {
            static::sendData(self::$hashes);
            self::$count = 0;
            self::$hashes = [];
        }
    }

    protected static function sendData(array $hashes)
    {
        if (!isset(self::$token) || empty($hashes)) {
            return;
        }
        self::curlMWait();
        if (is_resource(self::$ch)) {
            curl_multi_remove_handle(self::$mh, self::$ch);
            curl_close(self::$ch);
        }
        $headers = [
            'Content-Type: application/json',
            'X-Auth: ' . self::$token
        ];
        try {
            self::$ch = curl_init();
            curl_multi_add_handle(self::$mh, self::$ch);
            curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, 30);
            curl_setopt(self::$ch, CURLOPT_TIMEOUT, 30);
            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);
            curl_setopt(self::$ch, CURLOPT_URL, (!DEBUG_CA ? self::API_URL : (CA_API_URL_DEBUG . '/api/hashes/report')));
            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, json_encode($hashes));
            curl_multi_exec(self::$mh, $active);
        } catch (Exception $e) {
            curl_close(self::$ch);
            self::$ch = null;
        }
    }

    protected static function curlMWait()
    {
        do {
            if (!is_null(self::$callback)) {
                call_user_func(self::$callback, false);
            }
            $status = curl_multi_exec(self::$mh, $active);
            if ($active) {
                curl_multi_select(self::$mh);
            }
        } while ($active && $status == CURLM_OK);
    }

    public static function close()
    {
        if (!isset(self::$token)) {
            return;
        }
        if (self::$count > 0) {
            static::sendData(self::$hashes);
            self::$count = 0;
            self::$hashes = [];
        }
        self::curlMWait();
        if (is_resource(self::$ch)) {
            curl_multi_remove_handle(self::$mh, self::$ch);
            curl_close(self::$ch);
        }
        curl_multi_close(self::$mh);
        self::$mh = null;
        self::$ch = null;
        self::$token = null;
    }
}


class OsReleaseInfo
{
    private $prefix = '';
    private $release_file = '';
    const DEBIAN = ['debian'];
    const RHEL_FEDORA_CENTOS = ['rhel', 'fedora', 'centos'];
    const RHEL = ['rhel'];
    const UNKNOWN = ['unknown'];

    private $_supported_dists = [
        'SuSE', 'debian', 'fedora', 'redhat', 'centos',
        'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo',
        'UnitedLinux', 'turbolinux'];

    private $_release_filename = '(\w+)[-_](release|version)';
    private $_lsb_release_version = '(.+)'
    . ' release '
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';
    private $_release_version = '([^0-9]+)'
    . '(?: release )?'
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';

    private $release = [];

    public function __construct($prefix = '', $release_file = '/etc/os-release')
    {
        $this->prefix = $prefix;
        $this->release_file = $this->prefix . $release_file;
        $this->getRelease($this->release_file);
    }

    private function getOsReleaseAndVersion()
    {
        $ver = rtrim(@file_get_contents($this->prefix . '/etc/system-release'));
        return $ver ?: $this->release['VERSION'];
    }

    public function getOsVersion($release_and_version = false)
    {
        $rv = $release_and_version ? $release_and_version : $this->getOsReleaseAndVersion();
        if ($rv) {
            if (preg_match('~\s*(\d+\.\d+\S*)(\s|$)~', $rv, $m)) {
                return $m[1];
            }
        }
        return $this->release['VERSION_ID'] ? $this->release['VERSION_ID'] : false;
    }

    private function linuxDistribution($distname = '', $version = '', $id = '')
    {
        $dists = array_flip($this->_supported_dists);
        if (!file_exists($this->prefix . '/etc')) {
            return [$distname, $version, $id];
        }
        $file = '';
        $etc = scandir($this->prefix . '/etc');
        foreach ($etc as $file) {
            if (preg_match('~' . $this->_release_filename . '~', $file, $m)) {
                if (isset($dists[$m[1]])) {
                    $_distname = $m[1];
                    $distname = $m[1];
                    break;
                }
            }
        }
        $f = fopen($this->prefix . '/etc/' . $file, 'r');
        $firstline = fgets($f);
        fclose($f);
        list($_distname, $_version, $_id) = $this->_parseReleaseFile($firstline);

        if ($_distname) {
            $distname = $_distname;
        }

        if ($_version) {
            $version = $_version;
        }

        if ($_id) {
            $id = $_id;
        }

        return [$distname, $version, $id];
    }

    private function _parseReleaseFile($firstline)
    {
        $version = '';
        $id = '';
        if (preg_match('~' . $this->_lsb_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        if (preg_match('~' . $this->_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        $l = preg_split("~\s+~", trim($firstline), -1, PREG_SPLIT_NO_EMPTY);
        if (!empty($l)) {
            $version = $l[0];
            if (count($l) > 1) {
                $id = $l[1];
            }
        }
        return ['', $version, $id];
    }

    private function getReleaseFromFile($release_file)
    {
        $lines = file($release_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            list($k, $v) = explode('=', rtrim($line), 2);
            $this->release[$k] = trim($v, '"');
        }
        if (isset($this->release['ID_LIKE'])) {
            $this->release['ID_LIKE'] = preg_split('~\s+~', $this->release['ID_LIKE'], -1, PREG_SPLIT_NO_EMPTY);
        } else {
            $this->release['ID_LIKE'] = [$this->release['ID']];
        }
    }

    private function getRelease($release_file = '')
    {
        if (count($this->release) != 0) {
            return $this->release;
        }
        if ($this->release_file) {
            $release_file = $this->release_file;
        }
        $osid = '';
        if (file_exists($release_file)) {
            $this->getReleaseFromFile($release_file);
        } else {
            $d = $this->linuxDistribution();
            if ($d && isset($d[0])) {
                $osid = current(preg_split('~\s+~', strtolower($d[0]), -1, PREG_SPLIT_NO_EMPTY));
                if ($osid == 'red' && strpos($d[0], 'Red Hat Enterprise Linux')) {
                    $osid = 'rhel';
                }
                $this->release['ID'] = $osid;
                $this->release['PRETTY_NAME'] = "{$d[0]} {$d[1]} ({$d[2]})";
                if (in_array($osid, ['cloudlinux', 'centos', 'rhel'])) {
                    $this->release['ID_LIKE'] = self::RHEL_FEDORA_CENTOS;
                } elseif (in_array($osid, ['ubuntu', 'debian'])) {
                    $this->release['ID_LIKE'] = self::DEBIAN;
                } else {
                    $this->release['ID_LIKE'] = self::UNKNOWN;
                }
            } else {
                $this->release['ID'] = 'unknown';
                $this->release['ID_LIKE'] = self::UNKNOWN;
                $this->release['PRETTY_NAME'] = 'unknown';
            }
        }
        return $this->release;
    }

    public function getIdLike()
    {
        $rel = $this->getRelease();
        return $rel['ID_LIKE'];
    }

    public function isIdLikeCentos()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL_FEDORA_CENTOS as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function isIdLikeRhel()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function isIdLikeDebian()
    {
        $rel = $this->getRelease();
        foreach (self::DEBIAN as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function getPrettyName()
    {
        $rel = $this->getRelease();
        return $rel['PRETTY_NAME'];
    }

    public function getOs()
    {
        $rel = $this->getRelease();
        return $rel['ID'];
    }

    public function isRhel()
    {
        return $this->getOs() == 'rhel';
    }

    public function isCentos()
    {
        return $this->getOs() == 'centos';
    }

    public function isUbuntu()
    {
        return $this->getOs() == 'ubuntu';
    }

    public function isCloudlinux()
    {
        return $this->getOs() == 'cloudlinux';
    }

    public function isDebian()
    {
        return $this->getOs() == 'debian';
    }
}


/**
 * Class FileHashMemoryDb.
 *
 * Implements operations to load the file hash database into memory and work with it.
 */
class FileHashMemoryDb
{
    const HEADER_SIZE = 1024;
    const ROW_SIZE = 20;

    /**
     * @var int
     */
    private $count;
    /**
     * @var array
     */
    private $header;
    /**
     * @var resource
     */
    private $fp;
    /**
     * @var array
     */
    private $data;

    /**
     * Creates a new DB file and open it.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function create($filepath)
    {
        if (file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' already exists.');
        }

        $value = pack('V', 0);
        $header = array_fill(0, 256, $value);
        file_put_contents($filepath, implode($header));

        return new self($filepath);
    }

    /**
     * Opens a particular DB file.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function open($filepath)
    {
        if (!file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' does not exist.');
        }

        return new self($filepath);
    }

    /**
     * FileHashMemoryDb constructor.
     *
     * @param mixed $filepath
     * @throws Exception
     */
    private function __construct($filepath)
    {
        $this->fp = fopen($filepath, 'rb');

        if (false === $this->fp) {
            throw new Exception('File \'' . $filepath . '\' can not be opened.');
        }

        try {
            $this->header = unpack('V256', fread($this->fp, self::HEADER_SIZE));
            $this->count = (int) (max(0, filesize($filepath) - self::HEADER_SIZE) / self::ROW_SIZE);
            foreach ($this->header as $chunk_id => $chunk_size) {
                if ($chunk_size > 0) {
                    $str = fread($this->fp, $chunk_size);
                } else {
                    $str = '';
                }
                $this->data[$chunk_id] = $str;
            }
        } catch (Exception $e) {
            throw new Exception('File \'' . $filepath . '\' is not a valid DB file. An original error: \'' . $e->getMessage() . '\'');
        }
    }

    /**
     * Calculates and returns number of hashes stored in a loaded database.
     *
     * @return int number of hashes stored in a DB
     */
    public function count()
    {
        return $this->count;
    }

    /**
     * Find hashes in a DB.
     *
     * @param array $list of hashes to find in a DB
     * @return array list of hashes from the $list parameter that are found in a DB
     */
    public function find($list)
    {
        sort($list);

        $hash = reset($list);

        $found = [];

        foreach ($this->header as $chunk_id => $chunk_size) {
            if ($chunk_size > 0) {
                $str = $this->data[$chunk_id];

                do {
                    $raw = pack("H*", $hash);
                    $id  = ord($raw[0]) + 1;

                    if ($chunk_id == $id and $this->binarySearch($str, $raw)) {
                        $found[] = (string)$hash;
                    }
                } while ($chunk_id >= $id and $hash = next($list));

                if ($hash === false) {
                    break;
                }
            }
        }

        return $found;
    }

    /**
     * Searches $item in the $str using an implementation of the binary search algorithm.
     *
     * @param $str
     * @param $item
     * @return bool
     */
    private function binarySearch($str, $item)
    {
        $item_size = strlen($item);
        if ($item_size == 0) {
            return false;
        }

        $first = 0;

        $last = floor(strlen($str) / $item_size);

        while ($first < $last) {
            $mid = $first + (($last - $first) >> 1);
            $b   = substr($str, $mid * $item_size, $item_size);
            if (strcmp($item, $b) <= 0) {
                $last = $mid;
            } else {
                $first = $mid + 1;
            }
        }

        $b = substr($str, $last * $item_size, $item_size);
        if ($b == $item) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * FileHashDB destructor.
     */
    public function __destruct()
    {
        fclose($this->fp);
    }
}


class FilepathEscaper
{
    public static function encodeFilepath($filepath)
    {
        return str_replace(['\\', "\n", "\r"], ['\\\\', '\\n', '\\r'], $filepath);
    }

    public static function decodeFilepath($filepath)
    {
        return preg_replace_callback('~(\\\\+)(.)~', function ($matches) {
            $count = strlen($matches[1]);
            if ($count % 2 === 0) {
                return str_repeat('\\', $count / 2) . $matches[2];
            }
            return str_repeat('\\', floor($count / 2)) . stripcslashes('\\' . $matches[2]);
        }, $filepath);
    }

    public static function encodeFilepathByBase64($filepath)
    {
        return base64_encode($filepath);
    }

    public static function decodeFilepathByBase64($filepath_base64)
    {
        return base64_decode($filepath_base64);
    }
}


class StringToStreamWrapper
{
    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return void
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return [];
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option, $arg1, $arg2)
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "YToxNTY1OntzOjM6IuKAqCI7czoxOiIgIjtzOjM6IuKAqSI7czoxOiIgIjtzOjM6IuGagCI7czoxOiIgIjtzOjM6IuKAgCI7czoxOiIgIjtzOjM6IuKAgSI7czoxOiIgIjtzOjM6IuKAgiI7czoxOiIgIjtzOjM6IuKAgyI7czoxOiIgIjtzOjM6IuKAhCI7czoxOiIgIjtzOjM6IuKAhSI7czoxOiIgIjtzOjM6IuKAhiI7czoxOiIgIjtzOjM6IuKAiCI7czoxOiIgIjtzOjM6IuKAiSI7czoxOiIgIjtzOjM6IuKAiiI7czoxOiIgIjtzOjM6IuKBnyI7czoxOiIgIjtzOjI6IsKgIjtzOjE6IiAiO3M6Mzoi4oCHIjtzOjE6IiAiO3M6Mzoi4oCvIjtzOjE6IiAiO3M6Mjoiw4IiO3M6MToiICI7czoyOiLfuiI7czoxOiJfIjtzOjM6Iu+5jSI7czoxOiJfIjtzOjM6Iu+5jiI7czoxOiJfIjtzOjM6Iu+5jyI7czoxOiJfIjtzOjM6IuKAkCI7czoxOiItIjtzOjM6IuKAkSI7czoxOiItIjtzOjM6IuKAkiI7czoxOiItIjtzOjM6IuKAkyI7czoxOiItIjtzOjM6Iu+5mCI7czoxOiItIjtzOjI6ItuUIjtzOjE6Ii0iO3M6Mzoi4oGDIjtzOjE6Ii0iO3M6Mjoiy5ciO3M6MToiLSI7czozOiLiiJIiO3M6MToiLSI7czozOiLinpYiO3M6MToiLSI7czozOiLisroiO3M6MToiLSI7czoyOiLYjSI7czoxOiIsIjtzOjI6ItmrIjtzOjE6IiwiO3M6Mzoi4oCaIjtzOjE6IiwiO3M6MjoiwrgiO3M6MToiLCI7czozOiLqk7kiO3M6MToiLCI7czoyOiLNviI7czoxOiI7IjtzOjM6IuCkgyI7czoxOiI6IjtzOjM6IuCqgyI7czoxOiI6IjtzOjM6Iu+8miI7czoxOiI6IjtzOjI6ItaJIjtzOjE6IjoiO3M6Mjoi3IMiO3M6MToiOiI7czoyOiLchCI7czoxOiI6IjtzOjM6IuGbrCI7czoxOiI6IjtzOjM6Iu+4sCI7czoxOiI6IjtzOjM6IuGggyI7czoxOiI6IjtzOjM6IuGgiSI7czoxOiI6IjtzOjM6IuKBmiI7czoxOiI6IjtzOjI6IteDIjtzOjE6IjoiO3M6Mjoiy7giO3M6MToiOiI7czozOiLqnokiO3M6MToiOiI7czozOiLiiLYiO3M6MToiOiI7czoyOiLLkCI7czoxOiI6IjtzOjM6IuqTvSI7czoxOiI6IjtzOjM6Iu+8gSI7czoxOiIhIjtzOjI6IseDIjtzOjE6IiEiO3M6Mzoi4rWRIjtzOjE6IiEiO3M6MjoiypQiO3M6MToiPyI7czoyOiLJgSI7czoxOiI/IjtzOjM6IuClvSI7czoxOiI/IjtzOjM6IuGOriI7czoxOiI/IjtzOjM6IuqbqyI7czoxOiI/IjtzOjQ6IvCdha0iO3M6MToiLiI7czozOiLigKQiO3M6MToiLiI7czoyOiLcgSI7czoxOiIuIjtzOjI6ItyCIjtzOjE6Ii4iO3M6Mzoi6piOIjtzOjE6Ii4iO3M6NDoi8JCpkCI7czoxOiIuIjtzOjI6ItmgIjtzOjE6Ii4iO3M6Mjoi27AiO3M6MToiLiI7czozOiLqk7giO3M6MToiLiI7czozOiLjg7siO3M6MToityI7czozOiLvvaUiO3M6MToityI7czozOiLhm6siO3M6MToityI7czoyOiLOhyI7czoxOiK3IjtzOjM6IuK4sSI7czoxOiK3IjtzOjQ6IvCQhIEiO3M6MToityI7czozOiLigKIiO3M6MToityI7czozOiLigKciO3M6MToityI7czozOiLiiJkiO3M6MToityI7czozOiLii4UiO3M6MToityI7czozOiLqno8iO3M6MToityI7czozOiLhkKciO3M6MToityI7czoyOiLVnSI7czoxOiInIjtzOjM6Iu+8hyI7czoxOiInIjtzOjM6IuKAmCI7czoxOiInIjtzOjM6IuKAmSI7czoxOiInIjtzOjM6IuKAmyI7czoxOiInIjtzOjM6IuKAsiI7czoxOiInIjtzOjM6IuKAtSI7czoxOiInIjtzOjI6ItWaIjtzOjE6IiciO3M6Mjoi17MiO3M6MToiJyI7czoxOiJgIjtzOjE6IiciO3M6Mzoi4b+vIjtzOjE6IiciO3M6Mzoi772AIjtzOjE6IiciO3M6MjoiwrQiO3M6MToiJyI7czoyOiLOhCI7czoxOiInIjtzOjM6IuG/vSI7czoxOiInIjtzOjM6IuG+vSI7czoxOiInIjtzOjM6IuG+vyI7czoxOiInIjtzOjM6IuG/viI7czoxOiInIjtzOjI6Isq5IjtzOjE6IiciO3M6MjoizbQiO3M6MToiJyI7czoyOiLLiCI7czoxOiInIjtzOjI6IsuKIjtzOjE6IiciO3M6Mjoiy4siO3M6MToiJyI7czoyOiLLtCI7czoxOiInIjtzOjI6Isq7IjtzOjE6IiciO3M6Mjoiyr0iO3M6MToiJyI7czoyOiLKvCI7czoxOiInIjtzOjI6Isq+IjtzOjE6IiciO3M6Mzoi6p6MIjtzOjE6IiciO3M6Mjoi15kiO3M6MToiJyI7czoyOiLftCI7czoxOiInIjtzOjI6It+1IjtzOjE6IiciO3M6Mzoi4ZGKIjtzOjE6IiciO3M6Mzoi4ZuMIjtzOjE6IiciO3M6NDoi8Ja9kSI7czoxOiInIjtzOjQ6IvCWvZIiO3M6MToiJyI7czozOiLvvLsiO3M6MToiKCI7czozOiLinagiO3M6MToiKCI7czozOiLinbIiO3M6MToiKCI7czozOiLjgJQiO3M6MToiKCI7czozOiLvtL4iO3M6MToiKCI7czozOiLvvL0iO3M6MToiKSI7czozOiLinakiO3M6MToiKSI7czozOiLinbMiO3M6MToiKSI7czozOiLjgJUiO3M6MToiKSI7czozOiLvtL8iO3M6MToiKSI7czozOiLinbQiO3M6MToieyI7czo0OiLwnYSUIjtzOjE6InsiO3M6Mzoi4p21IjtzOjE6In0iO3M6Mzoi4ri/IjtzOjE6IrYiO3M6Mzoi4oGOIjtzOjE6IioiO3M6Mjoi2a0iO3M6MToiKiI7czozOiLiiJciO3M6MToiKiI7czo0OiLwkIyfIjtzOjE6IioiO3M6Mzoi4Zy1IjtzOjE6Ii8iO3M6Mzoi4oGBIjtzOjE6Ii8iO3M6Mzoi4oiVIjtzOjE6Ii8iO3M6Mzoi4oGEIjtzOjE6Ii8iO3M6Mzoi4pWxIjtzOjE6Ii8iO3M6Mzoi4p+LIjtzOjE6Ii8iO3M6Mzoi4qe4IjtzOjE6Ii8iO3M6NDoi8J2IuiI7czoxOiIvIjtzOjM6IuOHkyI7czoxOiIvIjtzOjM6IuOAsyI7czoxOiIvIjtzOjM6IuKzhiI7czoxOiIvIjtzOjM6IuODjiI7czoxOiIvIjtzOjM6IuS4vyI7czoxOiIvIjtzOjM6IuK8gyI7czoxOiIvIjtzOjM6Iu+8vCI7czoxOiJcIjtzOjM6Iu+5qCI7czoxOiJcIjtzOjM6IuKIliI7czoxOiJcIjtzOjM6IuKfjSI7czoxOiJcIjtzOjM6IuKntSI7czoxOiJcIjtzOjM6IuKnuSI7czoxOiJcIjtzOjQ6IvCdiI8iO3M6MToiXCI7czo0OiLwnYi7IjtzOjE6IlwiO3M6Mzoi44eUIjtzOjE6IlwiO3M6Mzoi5Li2IjtzOjE6IlwiO3M6Mzoi4ryCIjtzOjE6IlwiO3M6Mzoi6p24IjtzOjE6IiYiO3M6Mjoiy4QiO3M6MToiXiI7czoyOiLLhiI7czoxOiJeIjtzOjM6IuK4sCI7czoxOiKwIjtzOjI6IsuaIjtzOjE6IrAiO3M6Mzoi4oiYIjtzOjE6IrAiO3M6Mzoi4peLIjtzOjE6IrAiO3M6Mzoi4pemIjtzOjE6IrAiO3M6Mzoi4pK4IjtzOjE6IqkiO3M6Mzoi4pOHIjtzOjE6Iq4iO3M6Mzoi4ZutIjtzOjE6IisiO3M6Mzoi4p6VIjtzOjE6IisiO3M6NDoi8JCKmyI7czoxOiIrIjtzOjM6IuKelyI7czoxOiL3IjtzOjM6IuKAuSI7czoxOiI8IjtzOjM6IuKdriI7czoxOiI8IjtzOjI6IsuCIjtzOjE6IjwiO3M6NDoi8J2ItiI7czoxOiI8IjtzOjM6IuGQuCI7czoxOiI8IjtzOjM6IuGasiI7czoxOiI8IjtzOjM6IuGQgCI7czoxOiI9IjtzOjM6IuK5gCI7czoxOiI9IjtzOjM6IuOCoCI7czoxOiI9IjtzOjM6IuqTvyI7czoxOiI9IjtzOjM6IuKAuiI7czoxOiI+IjtzOjM6IuKdryI7czoxOiI+IjtzOjI6IsuDIjtzOjE6Ij4iO3M6NDoi8J2ItyI7czoxOiI+IjtzOjM6IuGQsyI7czoxOiI+IjtzOjQ6IvCWvL8iO3M6MToiPiI7czozOiLigZMiO3M6MToifiI7czoyOiLLnCI7czoxOiJ+IjtzOjM6IuG/gCI7czoxOiJ+IjtzOjM6IuKIvCI7czoxOiJ+IjtzOjM6IuKCpCI7czoxOiKjIjtzOjQ6IvCdn5AiO3M6MToiMiI7czo0OiLwnZ+aIjtzOjE6IjIiO3M6NDoi8J2fpCI7czoxOiIyIjtzOjQ6IvCdn64iO3M6MToiMiI7czo0OiLwnZ+4IjtzOjE6IjIiO3M6Mzoi6p2aIjtzOjE6IjIiO3M6MjoixqciO3M6MToiMiI7czoyOiLPqCI7czoxOiIyIjtzOjM6IuqZhCI7czoxOiIyIjtzOjM6IuGSvyI7czoxOiIyIjtzOjM6IuqbryI7czoxOiIyIjtzOjQ6IvCdiIYiO3M6MToiMyI7czo0OiLwnZ+RIjtzOjE6IjMiO3M6NDoi8J2fmyI7czoxOiIzIjtzOjQ6IvCdn6UiO3M6MToiMyI7czo0OiLwnZ+vIjtzOjE6IjMiO3M6NDoi8J2fuSI7czoxOiIzIjtzOjM6IuqeqyI7czoxOiIzIjtzOjI6IsicIjtzOjE6IjMiO3M6MjoixrciO3M6MToiMyI7czozOiLqnaoiO3M6MToiMyI7czozOiLis4wiO3M6MToiMyI7czoyOiLQlyI7czoxOiIzIjtzOjI6ItOgIjtzOjE6IjMiO3M6NDoi8Ja8uyI7czoxOiIzIjtzOjQ6IvCRo4oiO3M6MToiMyI7czo0OiLwnZ+SIjtzOjE6IjQiO3M6NDoi8J2fnCI7czoxOiI0IjtzOjQ6IvCdn6YiO3M6MToiNCI7czo0OiLwnZ+wIjtzOjE6IjQiO3M6NDoi8J2fuiI7czoxOiI0IjtzOjM6IuGPjiI7czoxOiI0IjtzOjQ6IvCRoq8iO3M6MToiNCI7czo0OiLwnZ+TIjtzOjE6IjUiO3M6NDoi8J2fnSI7czoxOiI1IjtzOjQ6IvCdn6ciO3M6MToiNSI7czo0OiLwnZ+xIjtzOjE6IjUiO3M6NDoi8J2fuyI7czoxOiI1IjtzOjI6Isa8IjtzOjE6IjUiO3M6NDoi8JGiuyI7czoxOiI1IjtzOjQ6IvCdn5QiO3M6MToiNiI7czo0OiLwnZ+eIjtzOjE6IjYiO3M6NDoi8J2fqCI7czoxOiI2IjtzOjQ6IvCdn7IiO3M6MToiNiI7czo0OiLwnZ+8IjtzOjE6IjYiO3M6Mzoi4rOSIjtzOjE6IjYiO3M6Mjoi0LEiO3M6MToiNiI7czozOiLhj64iO3M6MToiNiI7czo0OiLwkaOVIjtzOjE6IjYiO3M6NDoi8J2IkiI7czoxOiI3IjtzOjQ6IvCdn5UiO3M6MToiNyI7czo0OiLwnZ+fIjtzOjE6IjciO3M6NDoi8J2fqSI7czoxOiI3IjtzOjQ6IvCdn7MiO3M6MToiNyI7czo0OiLwnZ+9IjtzOjE6IjciO3M6NDoi8JCTkiI7czoxOiI3IjtzOjQ6IvCRo4YiO3M6MToiNyI7czozOiLgrIMiO3M6MToiOCI7czozOiLgp6oiO3M6MToiOCI7czozOiLgqaoiO3M6MToiOCI7czo0OiLwnqOLIjtzOjE6IjgiO3M6NDoi8J2fliI7czoxOiI4IjtzOjQ6IvCdn6AiO3M6MToiOCI7czo0OiLwnZ+qIjtzOjE6IjgiO3M6NDoi8J2ftCI7czoxOiI4IjtzOjQ6IvCdn74iO3M6MToiOCI7czoyOiLIoyI7czoxOiI4IjtzOjI6IsiiIjtzOjE6IjgiO3M6NDoi8JCMmiI7czoxOiI4IjtzOjM6IuCppyI7czoxOiI5IjtzOjM6IuCtqCI7czoxOiI5IjtzOjM6IuCnrSI7czoxOiI5IjtzOjM6IuC1rSI7czoxOiI5IjtzOjQ6IvCdn5ciO3M6MToiOSI7czo0OiLwnZ+hIjtzOjE6IjkiO3M6NDoi8J2fqyI7czoxOiI5IjtzOjQ6IvCdn7UiO3M6MToiOSI7czo0OiLwnZ+/IjtzOjE6IjkiO3M6Mzoi6p2uIjtzOjE6IjkiO3M6Mzoi4rOKIjtzOjE6IjkiO3M6NDoi8JGjjCI7czoxOiI5IjtzOjQ6IvCRoqwiO3M6MToiOSI7czo0OiLwkaOWIjtzOjE6IjkiO3M6Mzoi4o26IjtzOjE6ImEiO3M6Mzoi772BIjtzOjE6ImEiO3M6NDoi8J2QmiI7czoxOiJhIjtzOjQ6IvCdkY4iO3M6MToiYSI7czo0OiLwnZKCIjtzOjE6ImEiO3M6NDoi8J2StiI7czoxOiJhIjtzOjQ6IvCdk6oiO3M6MToiYSI7czo0OiLwnZSeIjtzOjE6ImEiO3M6NDoi8J2VkiI7czoxOiJhIjtzOjQ6IvCdloYiO3M6MToiYSI7czo0OiLwnZa6IjtzOjE6ImEiO3M6NDoi8J2XriI7czoxOiJhIjtzOjQ6IvCdmKIiO3M6MToiYSI7czo0OiLwnZmWIjtzOjE6ImEiO3M6NDoi8J2aiiI7czoxOiJhIjtzOjI6IsmRIjtzOjE6ImEiO3M6MjoizrEiO3M6MToiYSI7czo0OiLwnZuCIjtzOjE6ImEiO3M6NDoi8J2bvCI7czoxOiJhIjtzOjQ6IvCdnLYiO3M6MToiYSI7czo0OiLwnZ2wIjtzOjE6ImEiO3M6NDoi8J2eqiI7czoxOiJhIjtzOjI6ItCwIjtzOjE6ImEiO3M6Mzoi77yhIjtzOjE6IkEiO3M6NDoi8J2QgCI7czoxOiJBIjtzOjQ6IvCdkLQiO3M6MToiQSI7czo0OiLwnZGoIjtzOjE6IkEiO3M6NDoi8J2SnCI7czoxOiJBIjtzOjQ6IvCdk5AiO3M6MToiQSI7czo0OiLwnZSEIjtzOjE6IkEiO3M6NDoi8J2UuCI7czoxOiJBIjtzOjQ6IvCdlawiO3M6MToiQSI7czo0OiLwnZagIjtzOjE6IkEiO3M6NDoi8J2XlCI7czoxOiJBIjtzOjQ6IvCdmIgiO3M6MToiQSI7czo0OiLwnZi8IjtzOjE6IkEiO3M6NDoi8J2ZsCI7czoxOiJBIjtzOjI6Is6RIjtzOjE6IkEiO3M6NDoi8J2aqCI7czoxOiJBIjtzOjQ6IvCdm6IiO3M6MToiQSI7czo0OiLwnZycIjtzOjE6IkEiO3M6NDoi8J2dliI7czoxOiJBIjtzOjQ6IvCdnpAiO3M6MToiQSI7czoyOiLQkCI7czoxOiJBIjtzOjM6IuGOqiI7czoxOiJBIjtzOjM6IuGXhSI7czoxOiJBIjtzOjM6IuqTriI7czoxOiJBIjtzOjQ6IvCWvYAiO3M6MToiQSI7czo0OiLwkIqgIjtzOjE6IkEiO3M6MjoiyKciO3M6MToi5SI7czoyOiLIpiI7czoxOiLFIjtzOjQ6IvCdkJsiO3M6MToiYiI7czo0OiLwnZGPIjtzOjE6ImIiO3M6NDoi8J2SgyI7czoxOiJiIjtzOjQ6IvCdkrciO3M6MToiYiI7czo0OiLwnZOrIjtzOjE6ImIiO3M6NDoi8J2UnyI7czoxOiJiIjtzOjQ6IvCdlZMiO3M6MToiYiI7czo0OiLwnZaHIjtzOjE6ImIiO3M6NDoi8J2WuyI7czoxOiJiIjtzOjQ6IvCdl68iO3M6MToiYiI7czo0OiLwnZijIjtzOjE6ImIiO3M6NDoi8J2ZlyI7czoxOiJiIjtzOjQ6IvCdmosiO3M6MToiYiI7czoyOiLGhCI7czoxOiJiIjtzOjI6ItCsIjtzOjE6ImIiO3M6Mzoi4Y+PIjtzOjE6ImIiO3M6Mzoi4ZGyIjtzOjE6ImIiO3M6Mzoi4ZavIjtzOjE6ImIiO3M6Mzoi77yiIjtzOjE6IkIiO3M6Mzoi4oSsIjtzOjE6IkIiO3M6NDoi8J2QgSI7czoxOiJCIjtzOjQ6IvCdkLUiO3M6MToiQiI7czo0OiLwnZGpIjtzOjE6IkIiO3M6NDoi8J2TkSI7czoxOiJCIjtzOjQ6IvCdlIUiO3M6MToiQiI7czo0OiLwnZS5IjtzOjE6IkIiO3M6NDoi8J2VrSI7czoxOiJCIjtzOjQ6IvCdlqEiO3M6MToiQiI7czo0OiLwnZeVIjtzOjE6IkIiO3M6NDoi8J2YiSI7czoxOiJCIjtzOjQ6IvCdmL0iO3M6MToiQiI7czo0OiLwnZmxIjtzOjE6IkIiO3M6Mzoi6p60IjtzOjE6IkIiO3M6MjoizpIiO3M6MToiQiI7czo0OiLwnZqpIjtzOjE6IkIiO3M6NDoi8J2boyI7czoxOiJCIjtzOjQ6IvCdnJ0iO3M6MToiQiI7czo0OiLwnZ2XIjtzOjE6IkIiO3M6NDoi8J2ekSI7czoxOiJCIjtzOjI6ItCSIjtzOjE6IkIiO3M6Mzoi4Y+0IjtzOjE6IkIiO3M6Mzoi4Ze3IjtzOjE6IkIiO3M6Mzoi6pOQIjtzOjE6IkIiO3M6NDoi8JCKgiI7czoxOiJCIjtzOjQ6IvCQiqEiO3M6MToiQiI7czo0OiLwkIyBIjtzOjE6IkIiO3M6Mzoi772DIjtzOjE6ImMiO3M6Mzoi4oW9IjtzOjE6ImMiO3M6NDoi8J2QnCI7czoxOiJjIjtzOjQ6IvCdkZAiO3M6MToiYyI7czo0OiLwnZKEIjtzOjE6ImMiO3M6NDoi8J2SuCI7czoxOiJjIjtzOjQ6IvCdk6wiO3M6MToiYyI7czo0OiLwnZSgIjtzOjE6ImMiO3M6NDoi8J2VlCI7czoxOiJjIjtzOjQ6IvCdlogiO3M6MToiYyI7czo0OiLwnZa8IjtzOjE6ImMiO3M6NDoi8J2XsCI7czoxOiJjIjtzOjQ6IvCdmKQiO3M6MToiYyI7czo0OiLwnZmYIjtzOjE6ImMiO3M6NDoi8J2ajCI7czoxOiJjIjtzOjM6IuG0hCI7czoxOiJjIjtzOjI6Is+yIjtzOjE6ImMiO3M6Mzoi4rKlIjtzOjE6ImMiO3M6Mjoi0YEiO3M6MToiYyI7czozOiLqrq8iO3M6MToiYyI7czo0OiLwkJC9IjtzOjE6ImMiO3M6NDoi8J+djCI7czoxOiJDIjtzOjQ6IvCRo7IiO3M6MToiQyI7czo0OiLwkaOpIjtzOjE6IkMiO3M6Mzoi77yjIjtzOjE6IkMiO3M6Mzoi4oWtIjtzOjE6IkMiO3M6Mzoi4oSCIjtzOjE6IkMiO3M6Mzoi4oStIjtzOjE6IkMiO3M6NDoi8J2QgiI7czoxOiJDIjtzOjQ6IvCdkLYiO3M6MToiQyI7czo0OiLwnZGqIjtzOjE6IkMiO3M6NDoi8J2SniI7czoxOiJDIjtzOjQ6IvCdk5IiO3M6MToiQyI7czo0OiLwnZWuIjtzOjE6IkMiO3M6NDoi8J2WoiI7czoxOiJDIjtzOjQ6IvCdl5YiO3M6MToiQyI7czo0OiLwnZiKIjtzOjE6IkMiO3M6NDoi8J2YviI7czoxOiJDIjtzOjQ6IvCdmbIiO3M6MToiQyI7czoyOiLPuSI7czoxOiJDIjtzOjM6IuKypCI7czoxOiJDIjtzOjI6ItChIjtzOjE6IkMiO3M6Mzoi4Y+fIjtzOjE6IkMiO3M6Mzoi6pOaIjtzOjE6IkMiO3M6NDoi8JCKoiI7czoxOiJDIjtzOjQ6IvCQjIIiO3M6MToiQyI7czo0OiLwkJCVIjtzOjE6IkMiO3M6NDoi8JCUnCI7czoxOiJDIjtzOjM6IuKFviI7czoxOiJkIjtzOjM6IuKFhiI7czoxOiJkIjtzOjQ6IvCdkJ0iO3M6MToiZCI7czo0OiLwnZGRIjtzOjE6ImQiO3M6NDoi8J2ShSI7czoxOiJkIjtzOjQ6IvCdkrkiO3M6MToiZCI7czo0OiLwnZOtIjtzOjE6ImQiO3M6NDoi8J2UoSI7czoxOiJkIjtzOjQ6IvCdlZUiO3M6MToiZCI7czo0OiLwnZaJIjtzOjE6ImQiO3M6NDoi8J2WvSI7czoxOiJkIjtzOjQ6IvCdl7EiO3M6MToiZCI7czo0OiLwnZilIjtzOjE6ImQiO3M6NDoi8J2ZmSI7czoxOiJkIjtzOjQ6IvCdmo0iO3M6MToiZCI7czoyOiLUgSI7czoxOiJkIjtzOjM6IuGPpyI7czoxOiJkIjtzOjM6IuGRryI7czoxOiJkIjtzOjM6IuqTkiI7czoxOiJkIjtzOjM6IuKFriI7czoxOiJEIjtzOjM6IuKFhSI7czoxOiJEIjtzOjQ6IvCdkIMiO3M6MToiRCI7czo0OiLwnZC3IjtzOjE6IkQiO3M6NDoi8J2RqyI7czoxOiJEIjtzOjQ6IvCdkp8iO3M6MToiRCI7czo0OiLwnZOTIjtzOjE6IkQiO3M6NDoi8J2UhyI7czoxOiJEIjtzOjQ6IvCdlLsiO3M6MToiRCI7czo0OiLwnZWvIjtzOjE6IkQiO3M6NDoi8J2WoyI7czoxOiJEIjtzOjQ6IvCdl5ciO3M6MToiRCI7czo0OiLwnZiLIjtzOjE6IkQiO3M6NDoi8J2YvyI7czoxOiJEIjtzOjQ6IvCdmbMiO3M6MToiRCI7czozOiLhjqAiO3M6MToiRCI7czozOiLhl54iO3M6MToiRCI7czozOiLhl6oiO3M6MToiRCI7czozOiLqk5MiO3M6MToiRCI7czozOiLihK4iO3M6MToiZSI7czozOiLvvYUiO3M6MToiZSI7czozOiLihK8iO3M6MToiZSI7czozOiLihYciO3M6MToiZSI7czo0OiLwnZCeIjtzOjE6ImUiO3M6NDoi8J2RkiI7czoxOiJlIjtzOjQ6IvCdkoYiO3M6MToiZSI7czo0OiLwnZOuIjtzOjE6ImUiO3M6NDoi8J2UoiI7czoxOiJlIjtzOjQ6IvCdlZYiO3M6MToiZSI7czo0OiLwnZaKIjtzOjE6ImUiO3M6NDoi8J2WviI7czoxOiJlIjtzOjQ6IvCdl7IiO3M6MToiZSI7czo0OiLwnZimIjtzOjE6ImUiO3M6NDoi8J2ZmiI7czoxOiJlIjtzOjQ6IvCdmo4iO3M6MToiZSI7czozOiLqrLIiO3M6MToiZSI7czoyOiLQtSI7czoxOiJlIjtzOjI6ItK9IjtzOjE6ImUiO3M6Mjoiw6kiO3M6MToiZSI7czozOiLii78iO3M6MToiRSI7czozOiLvvKUiO3M6MToiRSI7czozOiLihLAiO3M6MToiRSI7czo0OiLwnZCEIjtzOjE6IkUiO3M6NDoi8J2QuCI7czoxOiJFIjtzOjQ6IvCdkawiO3M6MToiRSI7czo0OiLwnZOUIjtzOjE6IkUiO3M6NDoi8J2UiCI7czoxOiJFIjtzOjQ6IvCdlLwiO3M6MToiRSI7czo0OiLwnZWwIjtzOjE6IkUiO3M6NDoi8J2WpCI7czoxOiJFIjtzOjQ6IvCdl5giO3M6MToiRSI7czo0OiLwnZiMIjtzOjE6IkUiO3M6NDoi8J2ZgCI7czoxOiJFIjtzOjQ6IvCdmbQiO3M6MToiRSI7czoyOiLOlSI7czoxOiJFIjtzOjQ6IvCdmqwiO3M6MToiRSI7czo0OiLwnZumIjtzOjE6IkUiO3M6NDoi8J2coCI7czoxOiJFIjtzOjQ6IvCdnZoiO3M6MToiRSI7czo0OiLwnZ6UIjtzOjE6IkUiO3M6Mjoi0JUiO3M6MToiRSI7czozOiLitLkiO3M6MToiRSI7czozOiLhjqwiO3M6MToiRSI7czozOiLqk7AiO3M6MToiRSI7czo0OiLwkaKmIjtzOjE6IkUiO3M6NDoi8JGiriI7czoxOiJFIjtzOjQ6IvCQioYiO3M6MToiRSI7czo0OiLwnZCfIjtzOjE6ImYiO3M6NDoi8J2RkyI7czoxOiJmIjtzOjQ6IvCdkociO3M6MToiZiI7czo0OiLwnZK7IjtzOjE6ImYiO3M6NDoi8J2TryI7czoxOiJmIjtzOjQ6IvCdlKMiO3M6MToiZiI7czo0OiLwnZWXIjtzOjE6ImYiO3M6NDoi8J2WiyI7czoxOiJmIjtzOjQ6IvCdlr8iO3M6MToiZiI7czo0OiLwnZezIjtzOjE6ImYiO3M6NDoi8J2YpyI7czoxOiJmIjtzOjQ6IvCdmZsiO3M6MToiZiI7czo0OiLwnZqPIjtzOjE6ImYiO3M6Mzoi6qy1IjtzOjE6ImYiO3M6Mzoi6p6ZIjtzOjE6ImYiO3M6Mjoixb8iO3M6MToiZiI7czozOiLhup0iO3M6MToiZiI7czoyOiLWhCI7czoxOiJmIjtzOjQ6IvCdiJMiO3M6MToiRiI7czozOiLihLEiO3M6MToiRiI7czo0OiLwnZCFIjtzOjE6IkYiO3M6NDoi8J2QuSI7czoxOiJGIjtzOjQ6IvCdka0iO3M6MToiRiI7czo0OiLwnZOVIjtzOjE6IkYiO3M6NDoi8J2UiSI7czoxOiJGIjtzOjQ6IvCdlL0iO3M6MToiRiI7czo0OiLwnZWxIjtzOjE6IkYiO3M6NDoi8J2WpSI7czoxOiJGIjtzOjQ6IvCdl5kiO3M6MToiRiI7czo0OiLwnZiNIjtzOjE6IkYiO3M6NDoi8J2ZgSI7czoxOiJGIjtzOjQ6IvCdmbUiO3M6MToiRiI7czozOiLqnpgiO3M6MToiRiI7czoyOiLPnCI7czoxOiJGIjtzOjQ6IvCdn4oiO3M6MToiRiI7czozOiLhlrQiO3M6MToiRiI7czozOiLqk50iO3M6MToiRiI7czo0OiLwkaOCIjtzOjE6IkYiO3M6NDoi8JGioiI7czoxOiJGIjtzOjQ6IvCQiociO3M6MToiRiI7czo0OiLwkIqlIjtzOjE6IkYiO3M6NDoi8JCUpSI7czoxOiJGIjtzOjM6Iu+9hyI7czoxOiJnIjtzOjM6IuKEiiI7czoxOiJnIjtzOjQ6IvCdkKAiO3M6MToiZyI7czo0OiLwnZGUIjtzOjE6ImciO3M6NDoi8J2SiCI7czoxOiJnIjtzOjQ6IvCdk7AiO3M6MToiZyI7czo0OiLwnZSkIjtzOjE6ImciO3M6NDoi8J2VmCI7czoxOiJnIjtzOjQ6IvCdlowiO3M6MToiZyI7czo0OiLwnZeAIjtzOjE6ImciO3M6NDoi8J2XtCI7czoxOiJnIjtzOjQ6IvCdmKgiO3M6MToiZyI7czo0OiLwnZmcIjtzOjE6ImciO3M6NDoi8J2akCI7czoxOiJnIjtzOjI6IsmhIjtzOjE6ImciO3M6Mzoi4baDIjtzOjE6ImciO3M6Mjoixo0iO3M6MToiZyI7czoyOiLWgSI7czoxOiJnIjtzOjQ6IvCdkIYiO3M6MToiRyI7czo0OiLwnZC6IjtzOjE6IkciO3M6NDoi8J2RriI7czoxOiJHIjtzOjQ6IvCdkqIiO3M6MToiRyI7czo0OiLwnZOWIjtzOjE6IkciO3M6NDoi8J2UiiI7czoxOiJHIjtzOjQ6IvCdlL4iO3M6MToiRyI7czo0OiLwnZWyIjtzOjE6IkciO3M6NDoi8J2WpiI7czoxOiJHIjtzOjQ6IvCdl5oiO3M6MToiRyI7czo0OiLwnZiOIjtzOjE6IkciO3M6NDoi8J2ZgiI7czoxOiJHIjtzOjQ6IvCdmbYiO3M6MToiRyI7czoyOiLUjCI7czoxOiJHIjtzOjM6IuGPgCI7czoxOiJHIjtzOjM6IuGPsyI7czoxOiJHIjtzOjM6IuqTliI7czoxOiJHIjtzOjM6Iu+9iCI7czoxOiJoIjtzOjM6IuKEjiI7czoxOiJoIjtzOjQ6IvCdkKEiO3M6MToiaCI7czo0OiLwnZKJIjtzOjE6ImgiO3M6NDoi8J2SvSI7czoxOiJoIjtzOjQ6IvCdk7EiO3M6MToiaCI7czo0OiLwnZSlIjtzOjE6ImgiO3M6NDoi8J2VmSI7czoxOiJoIjtzOjQ6IvCdlo0iO3M6MToiaCI7czo0OiLwnZeBIjtzOjE6ImgiO3M6NDoi8J2XtSI7czoxOiJoIjtzOjQ6IvCdmKkiO3M6MToiaCI7czo0OiLwnZmdIjtzOjE6ImgiO3M6NDoi8J2akSI7czoxOiJoIjtzOjI6ItK7IjtzOjE6ImgiO3M6Mjoi1bAiO3M6MToiaCI7czozOiLhj4IiO3M6MToiaCI7czozOiLvvKgiO3M6MToiSCI7czozOiLihIsiO3M6MToiSCI7czozOiLihIwiO3M6MToiSCI7czozOiLihI0iO3M6MToiSCI7czo0OiLwnZCHIjtzOjE6IkgiO3M6NDoi8J2QuyI7czoxOiJIIjtzOjQ6IvCdka8iO3M6MToiSCI7czo0OiLwnZOXIjtzOjE6IkgiO3M6NDoi8J2VsyI7czoxOiJIIjtzOjQ6IvCdlqciO3M6MToiSCI7czo0OiLwnZebIjtzOjE6IkgiO3M6NDoi8J2YjyI7czoxOiJIIjtzOjQ6IvCdmYMiO3M6MToiSCI7czo0OiLwnZm3IjtzOjE6IkgiO3M6MjoizpciO3M6MToiSCI7czo0OiLwnZquIjtzOjE6IkgiO3M6NDoi8J2bqCI7czoxOiJIIjtzOjQ6IvCdnKIiO3M6MToiSCI7czo0OiLwnZ2cIjtzOjE6IkgiO3M6NDoi8J2eliI7czoxOiJIIjtzOjM6IuKyjiI7czoxOiJIIjtzOjI6ItCdIjtzOjE6IkgiO3M6Mzoi4Y67IjtzOjE6IkgiO3M6Mzoi4ZW8IjtzOjE6IkgiO3M6Mzoi6pOnIjtzOjE6IkgiO3M6NDoi8JCLjyI7czoxOiJIIjtzOjI6IsubIjtzOjE6ImkiO3M6Mzoi4o2zIjtzOjE6ImkiO3M6Mzoi772JIjtzOjE6ImkiO3M6Mzoi4oWwIjtzOjE6ImkiO3M6Mzoi4oS5IjtzOjE6ImkiO3M6Mzoi4oWIIjtzOjE6ImkiO3M6NDoi8J2QoiI7czoxOiJpIjtzOjQ6IvCdkZYiO3M6MToiaSI7czo0OiLwnZKKIjtzOjE6ImkiO3M6NDoi8J2SviI7czoxOiJpIjtzOjQ6IvCdk7IiO3M6MToiaSI7czo0OiLwnZSmIjtzOjE6ImkiO3M6NDoi8J2VmiI7czoxOiJpIjtzOjQ6IvCdlo4iO3M6MToiaSI7czo0OiLwnZeCIjtzOjE6ImkiO3M6NDoi8J2XtiI7czoxOiJpIjtzOjQ6IvCdmKoiO3M6MToiaSI7czo0OiLwnZmeIjtzOjE6ImkiO3M6NDoi8J2akiI7czoxOiJpIjtzOjI6IsSxIjtzOjE6ImkiO3M6NDoi8J2apCI7czoxOiJpIjtzOjI6IsmqIjtzOjE6ImkiO3M6MjoiyakiO3M6MToiaSI7czoyOiLOuSI7czoxOiJpIjtzOjM6IuG+viI7czoxOiJpIjtzOjI6Is26IjtzOjE6ImkiO3M6NDoi8J2biiI7czoxOiJpIjtzOjQ6IvCdnIQiO3M6MToiaSI7czo0OiLwnZy+IjtzOjE6ImkiO3M6NDoi8J2duCI7czoxOiJpIjtzOjQ6IvCdnrIiO3M6MToiaSI7czoyOiLRliI7czoxOiJpIjtzOjM6IuqZhyI7czoxOiJpIjtzOjI6ItOPIjtzOjE6ImkiO3M6Mzoi6q21IjtzOjE6ImkiO3M6Mzoi4Y6lIjtzOjE6ImkiO3M6NDoi8JGjgyI7czoxOiJpIjtzOjI6IsOtIjtzOjE6ImkiO3M6Mzoi772KIjtzOjE6ImoiO3M6Mzoi4oWJIjtzOjE6ImoiO3M6NDoi8J2QoyI7czoxOiJqIjtzOjQ6IvCdkZciO3M6MToiaiI7czo0OiLwnZKLIjtzOjE6ImoiO3M6NDoi8J2SvyI7czoxOiJqIjtzOjQ6IvCdk7MiO3M6MToiaiI7czo0OiLwnZSnIjtzOjE6ImoiO3M6NDoi8J2VmyI7czoxOiJqIjtzOjQ6IvCdlo8iO3M6MToiaiI7czo0OiLwnZeDIjtzOjE6ImoiO3M6NDoi8J2XtyI7czoxOiJqIjtzOjQ6IvCdmKsiO3M6MToiaiI7czo0OiLwnZmfIjtzOjE6ImoiO3M6NDoi8J2akyI7czoxOiJqIjtzOjI6Is+zIjtzOjE6ImoiO3M6Mjoi0ZgiO3M6MToiaiI7czozOiLvvKoiO3M6MToiSiI7czo0OiLwnZCJIjtzOjE6IkoiO3M6NDoi8J2QvSI7czoxOiJKIjtzOjQ6IvCdkbEiO3M6MToiSiI7czo0OiLwnZKlIjtzOjE6IkoiO3M6NDoi8J2TmSI7czoxOiJKIjtzOjQ6IvCdlI0iO3M6MToiSiI7czo0OiLwnZWBIjtzOjE6IkoiO3M6NDoi8J2VtSI7czoxOiJKIjtzOjQ6IvCdlqkiO3M6MToiSiI7czo0OiLwnZedIjtzOjE6IkoiO3M6NDoi8J2YkSI7czoxOiJKIjtzOjQ6IvCdmYUiO3M6MToiSiI7czo0OiLwnZm5IjtzOjE6IkoiO3M6Mzoi6p6yIjtzOjE6IkoiO3M6Mjoizb8iO3M6MToiSiI7czoyOiLQiCI7czoxOiJKIjtzOjM6IuGOqyI7czoxOiJKIjtzOjM6IuGSjSI7czoxOiJKIjtzOjM6IuqTmSI7czoxOiJKIjtzOjQ6IvCdkKQiO3M6MToiayI7czo0OiLwnZGYIjtzOjE6ImsiO3M6NDoi8J2SjCI7czoxOiJrIjtzOjQ6IvCdk4AiO3M6MToiayI7czo0OiLwnZO0IjtzOjE6ImsiO3M6NDoi8J2UqCI7czoxOiJrIjtzOjQ6IvCdlZwiO3M6MToiayI7czo0OiLwnZaQIjtzOjE6ImsiO3M6NDoi8J2XhCI7czoxOiJrIjtzOjQ6IvCdl7giO3M6MToiayI7czo0OiLwnZisIjtzOjE6ImsiO3M6NDoi8J2ZoCI7czoxOiJrIjtzOjQ6IvCdmpQiO3M6MToiayI7czozOiLihKoiO3M6MToiSyI7czozOiLvvKsiO3M6MToiSyI7czo0OiLwnZCKIjtzOjE6IksiO3M6NDoi8J2QviI7czoxOiJLIjtzOjQ6IvCdkbIiO3M6MToiSyI7czo0OiLwnZKmIjtzOjE6IksiO3M6NDoi8J2TmiI7czoxOiJLIjtzOjQ6IvCdlI4iO3M6MToiSyI7czo0OiLwnZWCIjtzOjE6IksiO3M6NDoi8J2VtiI7czoxOiJLIjtzOjQ6IvCdlqoiO3M6MToiSyI7czo0OiLwnZeeIjtzOjE6IksiO3M6NDoi8J2YkiI7czoxOiJLIjtzOjQ6IvCdmYYiO3M6MToiSyI7czo0OiLwnZm6IjtzOjE6IksiO3M6MjoizpoiO3M6MToiSyI7czo0OiLwnZqxIjtzOjE6IksiO3M6NDoi8J2bqyI7czoxOiJLIjtzOjQ6IvCdnKUiO3M6MToiSyI7czo0OiLwnZ2fIjtzOjE6IksiO3M6NDoi8J2emSI7czoxOiJLIjtzOjM6IuKylCI7czoxOiJLIjtzOjI6ItCaIjtzOjE6IksiO3M6Mzoi4Y+mIjtzOjE6IksiO3M6Mzoi4ZuVIjtzOjE6IksiO3M6Mzoi6pOXIjtzOjE6IksiO3M6NDoi8JCUmCI7czoxOiJLIjtzOjI6IteAIjtzOjE6ImwiO3M6Mzoi4oijIjtzOjE6ImwiO3M6Mzoi4o+9IjtzOjE6ImwiO3M6Mzoi77+oIjtzOjE6ImwiO2k6MTtzOjE6ImwiO3M6Mjoi2aEiO3M6MToibCI7czoyOiLbsSI7czoxOiJsIjtzOjQ6IvCQjKAiO3M6MToibCI7czo0OiLwnqOHIjtzOjE6ImwiO3M6NDoi8J2fjyI7czoxOiJsIjtzOjQ6IvCdn5kiO3M6MToibCI7czo0OiLwnZ+jIjtzOjE6ImwiO3M6NDoi8J2frSI7czoxOiJsIjtzOjQ6IvCdn7ciO3M6MToibCI7czozOiLvvKkiO3M6MToibCI7czozOiLihaAiO3M6MToibCI7czozOiLihJAiO3M6MToibCI7czozOiLihJEiO3M6MToibCI7czo0OiLwnZCIIjtzOjE6ImwiO3M6NDoi8J2QvCI7czoxOiJsIjtzOjQ6IvCdkbAiO3M6MToibCI7czo0OiLwnZOYIjtzOjE6ImwiO3M6NDoi8J2VgCI7czoxOiJsIjtzOjQ6IvCdlbQiO3M6MToibCI7czo0OiLwnZaoIjtzOjE6ImwiO3M6NDoi8J2XnCI7czoxOiJsIjtzOjQ6IvCdmJAiO3M6MToibCI7czo0OiLwnZmEIjtzOjE6ImwiO3M6NDoi8J2ZuCI7czoxOiJsIjtzOjI6IsaWIjtzOjE6ImwiO3M6Mzoi772MIjtzOjE6ImwiO3M6Mzoi4oW8IjtzOjE6ImwiO3M6Mzoi4oSTIjtzOjE6ImwiO3M6NDoi8J2QpSI7czoxOiJsIjtzOjQ6IvCdkZkiO3M6MToibCI7czo0OiLwnZKNIjtzOjE6ImwiO3M6NDoi8J2TgSI7czoxOiJsIjtzOjQ6IvCdk7UiO3M6MToibCI7czo0OiLwnZSpIjtzOjE6ImwiO3M6NDoi8J2VnSI7czoxOiJsIjtzOjQ6IvCdlpEiO3M6MToibCI7czo0OiLwnZeFIjtzOjE6ImwiO3M6NDoi8J2XuSI7czoxOiJsIjtzOjQ6IvCdmK0iO3M6MToibCI7czo0OiLwnZmhIjtzOjE6ImwiO3M6NDoi8J2alSI7czoxOiJsIjtzOjI6IseAIjtzOjE6ImwiO3M6MjoizpkiO3M6MToibCI7czo0OiLwnZqwIjtzOjE6ImwiO3M6NDoi8J2bqiI7czoxOiJsIjtzOjQ6IvCdnKQiO3M6MToibCI7czo0OiLwnZ2eIjtzOjE6ImwiO3M6NDoi8J2emCI7czoxOiJsIjtzOjM6IuKykiI7czoxOiJsIjtzOjI6ItCGIjtzOjE6ImwiO3M6Mjoi04AiO3M6MToibCI7czoyOiLXlSI7czoxOiJsIjtzOjI6ItefIjtzOjE6ImwiO3M6Mjoi2KciO3M6MToibCI7czo0OiLwnriAIjtzOjE6ImwiO3M6NDoi8J66gCI7czoxOiJsIjtzOjM6Iu+6jiI7czoxOiJsIjtzOjM6Iu+6jSI7czoxOiJsIjtzOjI6It+KIjtzOjE6ImwiO3M6Mzoi4rWPIjtzOjE6ImwiO3M6Mzoi4ZuBIjtzOjE6ImwiO3M6Mzoi6pOyIjtzOjE6ImwiO3M6NDoi8Ja8qCI7czoxOiJsIjtzOjQ6IvCQiooiO3M6MToibCI7czo0OiLwkIyJIjtzOjE6ImwiO3M6NDoi8J2IqiI7czoxOiJMIjtzOjM6IuKFrCI7czoxOiJMIjtzOjM6IuKEkiI7czoxOiJMIjtzOjQ6IvCdkIsiO3M6MToiTCI7czo0OiLwnZC/IjtzOjE6IkwiO3M6NDoi8J2RsyI7czoxOiJMIjtzOjQ6IvCdk5siO3M6MToiTCI7czo0OiLwnZSPIjtzOjE6IkwiO3M6NDoi8J2VgyI7czoxOiJMIjtzOjQ6IvCdlbciO3M6MToiTCI7czo0OiLwnZarIjtzOjE6IkwiO3M6NDoi8J2XnyI7czoxOiJMIjtzOjQ6IvCdmJMiO3M6MToiTCI7czo0OiLwnZmHIjtzOjE6IkwiO3M6NDoi8J2ZuyI7czoxOiJMIjtzOjM6IuKzkCI7czoxOiJMIjtzOjM6IuGPniI7czoxOiJMIjtzOjM6IuGSqiI7czoxOiJMIjtzOjM6IuqToSI7czoxOiJMIjtzOjQ6IvCWvJYiO3M6MToiTCI7czo0OiLwkaKjIjtzOjE6IkwiO3M6NDoi8JGisiI7czoxOiJMIjtzOjQ6IvCQkJsiO3M6MToiTCI7czo0OiLwkJSmIjtzOjE6IkwiO3M6Mzoi77ytIjtzOjE6Ik0iO3M6Mzoi4oWvIjtzOjE6Ik0iO3M6Mzoi4oSzIjtzOjE6Ik0iO3M6NDoi8J2QjCI7czoxOiJNIjtzOjQ6IvCdkYAiO3M6MToiTSI7czo0OiLwnZG0IjtzOjE6Ik0iO3M6NDoi8J2TnCI7czoxOiJNIjtzOjQ6IvCdlJAiO3M6MToiTSI7czo0OiLwnZWEIjtzOjE6Ik0iO3M6NDoi8J2VuCI7czoxOiJNIjtzOjQ6IvCdlqwiO3M6MToiTSI7czo0OiLwnZegIjtzOjE6Ik0iO3M6NDoi8J2YlCI7czoxOiJNIjtzOjQ6IvCdmYgiO3M6MToiTSI7czo0OiLwnZm8IjtzOjE6Ik0iO3M6MjoizpwiO3M6MToiTSI7czo0OiLwnZqzIjtzOjE6Ik0iO3M6NDoi8J2brSI7czoxOiJNIjtzOjQ6IvCdnKciO3M6MToiTSI7czo0OiLwnZ2hIjtzOjE6Ik0iO3M6NDoi8J2emyI7czoxOiJNIjtzOjI6Is+6IjtzOjE6Ik0iO3M6Mzoi4rKYIjtzOjE6Ik0iO3M6Mjoi0JwiO3M6MToiTSI7czozOiLhjrciO3M6MToiTSI7czozOiLhl7AiO3M6MToiTSI7czozOiLhm5YiO3M6MToiTSI7czozOiLqk58iO3M6MToiTSI7czo0OiLwkIqwIjtzOjE6Ik0iO3M6NDoi8JCMkSI7czoxOiJNIjtzOjQ6IvCdkKciO3M6MToibiI7czo0OiLwnZGbIjtzOjE6Im4iO3M6NDoi8J2SjyI7czoxOiJuIjtzOjQ6IvCdk4MiO3M6MToibiI7czo0OiLwnZO3IjtzOjE6Im4iO3M6NDoi8J2UqyI7czoxOiJuIjtzOjQ6IvCdlZ8iO3M6MToibiI7czo0OiLwnZaTIjtzOjE6Im4iO3M6NDoi8J2XhyI7czoxOiJuIjtzOjQ6IvCdl7siO3M6MToibiI7czo0OiLwnZivIjtzOjE6Im4iO3M6NDoi8J2ZoyI7czoxOiJuIjtzOjQ6IvCdmpciO3M6MToibiI7czoyOiLVuCI7czoxOiJuIjtzOjI6ItW8IjtzOjE6Im4iO3M6MjoiybQiO3M6MToibiI7czozOiLvvK4iO3M6MToiTiI7czozOiLihJUiO3M6MToiTiI7czo0OiLwnZCNIjtzOjE6Ik4iO3M6NDoi8J2RgSI7czoxOiJOIjtzOjQ6IvCdkbUiO3M6MToiTiI7czo0OiLwnZKpIjtzOjE6Ik4iO3M6NDoi8J2TnSI7czoxOiJOIjtzOjQ6IvCdlJEiO3M6MToiTiI7czo0OiLwnZW5IjtzOjE6Ik4iO3M6NDoi8J2WrSI7czoxOiJOIjtzOjQ6IvCdl6EiO3M6MToiTiI7czo0OiLwnZiVIjtzOjE6Ik4iO3M6NDoi8J2ZiSI7czoxOiJOIjtzOjQ6IvCdmb0iO3M6MToiTiI7czoyOiLOnSI7czoxOiJOIjtzOjQ6IvCdmrQiO3M6MToiTiI7czo0OiLwnZuuIjtzOjE6Ik4iO3M6NDoi8J2cqCI7czoxOiJOIjtzOjQ6IvCdnaIiO3M6MToiTiI7czo0OiLwnZ6cIjtzOjE6Ik4iO3M6Mzoi4rKaIjtzOjE6Ik4iO3M6Mzoi6pOgIjtzOjE6Ik4iO3M6NDoi8JCUkyI7czoxOiJOIjtzOjM6IuCwgiI7czoxOiJvIjtzOjM6IuCygiI7czoxOiJvIjtzOjM6IuC0giI7czoxOiJvIjtzOjM6IuC2giI7czoxOiJvIjtzOjM6IuClpiI7czoxOiJvIjtzOjM6IuCppiI7czoxOiJvIjtzOjM6IuCrpiI7czoxOiJvIjtzOjM6IuCvpiI7czoxOiJvIjtzOjM6IuCxpiI7czoxOiJvIjtzOjM6IuCzpiI7czoxOiJvIjtzOjM6IuC1piI7czoxOiJvIjtzOjM6IuC5kCI7czoxOiJvIjtzOjM6IuC7kCI7czoxOiJvIjtzOjM6IuGBgCI7czoxOiJvIjtzOjI6ItmlIjtzOjE6Im8iO3M6Mjoi27UiO3M6MToibyI7czozOiLvvY8iO3M6MToibyI7czozOiLihLQiO3M6MToibyI7czo0OiLwnZCoIjtzOjE6Im8iO3M6NDoi8J2RnCI7czoxOiJvIjtzOjQ6IvCdkpAiO3M6MToibyI7czo0OiLwnZO4IjtzOjE6Im8iO3M6NDoi8J2UrCI7czoxOiJvIjtzOjQ6IvCdlaAiO3M6MToibyI7czo0OiLwnZaUIjtzOjE6Im8iO3M6NDoi8J2XiCI7czoxOiJvIjtzOjQ6IvCdl7wiO3M6MToibyI7czo0OiLwnZiwIjtzOjE6Im8iO3M6NDoi8J2ZpCI7czoxOiJvIjtzOjQ6IvCdmpgiO3M6MToibyI7czozOiLhtI8iO3M6MToibyI7czozOiLhtJEiO3M6MToibyI7czozOiLqrL0iO3M6MToibyI7czoyOiLOvyI7czoxOiJvIjtzOjQ6IvCdm5AiO3M6MToibyI7czo0OiLwnZyKIjtzOjE6Im8iO3M6NDoi8J2dhCI7czoxOiJvIjtzOjQ6IvCdnb4iO3M6MToibyI7czo0OiLwnZ64IjtzOjE6Im8iO3M6Mjoiz4MiO3M6MToibyI7czo0OiLwnZuUIjtzOjE6Im8iO3M6NDoi8J2cjiI7czoxOiJvIjtzOjQ6IvCdnYgiO3M6MToibyI7czo0OiLwnZ6CIjtzOjE6Im8iO3M6NDoi8J2evCI7czoxOiJvIjtzOjM6IuKynyI7czoxOiJvIjtzOjI6ItC+IjtzOjE6Im8iO3M6Mzoi4YO/IjtzOjE6Im8iO3M6Mjoi1oUiO3M6MToibyI7czoyOiLXoSI7czoxOiJvIjtzOjI6ItmHIjtzOjE6Im8iO3M6NDoi8J64pCI7czoxOiJvIjtzOjQ6IvCeuaQiO3M6MToibyI7czo0OiLwnrqEIjtzOjE6Im8iO3M6Mzoi77urIjtzOjE6Im8iO3M6Mzoi77usIjtzOjE6Im8iO3M6Mzoi77uqIjtzOjE6Im8iO3M6Mzoi77upIjtzOjE6Im8iO3M6Mjoi2r4iO3M6MToibyI7czozOiLvrqwiO3M6MToibyI7czozOiLvrq0iO3M6MToibyI7czozOiLvrqsiO3M6MToibyI7czozOiLvrqoiO3M6MToibyI7czoyOiLbgSI7czoxOiJvIjtzOjM6Iu+uqCI7czoxOiJvIjtzOjM6Iu+uqSI7czoxOiJvIjtzOjM6Iu+upyI7czoxOiJvIjtzOjM6Iu+upiI7czoxOiJvIjtzOjI6ItuVIjtzOjE6Im8iO3M6Mzoi4LSgIjtzOjE6Im8iO3M6Mzoi4YCdIjtzOjE6Im8iO3M6NDoi8JCTqiI7czoxOiJvIjtzOjQ6IvCRo4giO3M6MToibyI7czo0OiLwkaOXIjtzOjE6Im8iO3M6NDoi8JCQrCI7czoxOiJvIjtpOjA7czoxOiJPIjtzOjI6It+AIjtzOjE6Ik8iO3M6Mzoi4KemIjtzOjE6Ik8iO3M6Mzoi4K2mIjtzOjE6Ik8iO3M6Mzoi44CHIjtzOjE6Ik8iO3M6NDoi8JGTkCI7czoxOiJPIjtzOjQ6IvCRo6AiO3M6MToiTyI7czo0OiLwnZ+OIjtzOjE6Ik8iO3M6NDoi8J2fmCI7czoxOiJPIjtzOjQ6IvCdn6IiO3M6MToiTyI7czo0OiLwnZ+sIjtzOjE6Ik8iO3M6NDoi8J2ftiI7czoxOiJPIjtzOjM6Iu+8ryI7czoxOiJPIjtzOjQ6IvCdkI4iO3M6MToiTyI7czo0OiLwnZGCIjtzOjE6Ik8iO3M6NDoi8J2RtiI7czoxOiJPIjtzOjQ6IvCdkqoiO3M6MToiTyI7czo0OiLwnZOeIjtzOjE6Ik8iO3M6NDoi8J2UkiI7czoxOiJPIjtzOjQ6IvCdlYYiO3M6MToiTyI7czo0OiLwnZW6IjtzOjE6Ik8iO3M6NDoi8J2WriI7czoxOiJPIjtzOjQ6IvCdl6IiO3M6MToiTyI7czo0OiLwnZiWIjtzOjE6Ik8iO3M6NDoi8J2ZiiI7czoxOiJPIjtzOjQ6IvCdmb4iO3M6MToiTyI7czoyOiLOnyI7czoxOiJPIjtzOjQ6IvCdmrYiO3M6MToiTyI7czo0OiLwnZuwIjtzOjE6Ik8iO3M6NDoi8J2cqiI7czoxOiJPIjtzOjQ6IvCdnaQiO3M6MToiTyI7czo0OiLwnZ6eIjtzOjE6Ik8iO3M6Mzoi4rKeIjtzOjE6Ik8iO3M6Mjoi0J4iO3M6MToiTyI7czoyOiLVlSI7czoxOiJPIjtzOjM6IuK1lCI7czoxOiJPIjtzOjM6IuGLkCI7czoxOiJPIjtzOjM6IuCsoCI7czoxOiJPIjtzOjQ6IvCQk4IiO3M6MToiTyI7czozOiLqk7MiO3M6MToiTyI7czo0OiLwkaK1IjtzOjE6Ik8iO3M6NDoi8JCKkiI7czoxOiJPIjtzOjQ6IvCQiqsiO3M6MToiTyI7czo0OiLwkJCEIjtzOjE6Ik8iO3M6NDoi8JCUliI7czoxOiJPIjtzOjM6IuKBsCI7czoxOiK6IjtzOjM6IuG1kiI7czoxOiK6IjtzOjI6IsWQIjtzOjE6ItYiO3M6Mzoi4o20IjtzOjE6InAiO3M6Mzoi772QIjtzOjE6InAiO3M6NDoi8J2QqSI7czoxOiJwIjtzOjQ6IvCdkZ0iO3M6MToicCI7czo0OiLwnZKRIjtzOjE6InAiO3M6NDoi8J2ThSI7czoxOiJwIjtzOjQ6IvCdk7kiO3M6MToicCI7czo0OiLwnZStIjtzOjE6InAiO3M6NDoi8J2VoSI7czoxOiJwIjtzOjQ6IvCdlpUiO3M6MToicCI7czo0OiLwnZeJIjtzOjE6InAiO3M6NDoi8J2XvSI7czoxOiJwIjtzOjQ6IvCdmLEiO3M6MToicCI7czo0OiLwnZmlIjtzOjE6InAiO3M6NDoi8J2amSI7czoxOiJwIjtzOjI6Is+BIjtzOjE6InAiO3M6Mjoiz7EiO3M6MToicCI7czo0OiLwnZuSIjtzOjE6InAiO3M6NDoi8J2boCI7czoxOiJwIjtzOjQ6IvCdnIwiO3M6MToicCI7czo0OiLwnZyaIjtzOjE6InAiO3M6NDoi8J2dhiI7czoxOiJwIjtzOjQ6IvCdnZQiO3M6MToicCI7czo0OiLwnZ6AIjtzOjE6InAiO3M6NDoi8J2ejiI7czoxOiJwIjtzOjQ6IvCdnroiO3M6MToicCI7czo0OiLwnZ+IIjtzOjE6InAiO3M6Mzoi4rKjIjtzOjE6InAiO3M6Mjoi0YAiO3M6MToicCI7czozOiLvvLAiO3M6MToiUCI7czozOiLihJkiO3M6MToiUCI7czo0OiLwnZCPIjtzOjE6IlAiO3M6NDoi8J2RgyI7czoxOiJQIjtzOjQ6IvCdkbciO3M6MToiUCI7czo0OiLwnZKrIjtzOjE6IlAiO3M6NDoi8J2TnyI7czoxOiJQIjtzOjQ6IvCdlJMiO3M6MToiUCI7czo0OiLwnZW7IjtzOjE6IlAiO3M6NDoi8J2WryI7czoxOiJQIjtzOjQ6IvCdl6MiO3M6MToiUCI7czo0OiLwnZiXIjtzOjE6IlAiO3M6NDoi8J2ZiyI7czoxOiJQIjtzOjQ6IvCdmb8iO3M6MToiUCI7czoyOiLOoSI7czoxOiJQIjtzOjQ6IvCdmrgiO3M6MToiUCI7czo0OiLwnZuyIjtzOjE6IlAiO3M6NDoi8J2crCI7czoxOiJQIjtzOjQ6IvCdnaYiO3M6MToiUCI7czo0OiLwnZ6gIjtzOjE6IlAiO3M6Mzoi4rKiIjtzOjE6IlAiO3M6Mjoi0KAiO3M6MToiUCI7czozOiLhj6IiO3M6MToiUCI7czozOiLhka0iO3M6MToiUCI7czozOiLqk5EiO3M6MToiUCI7czo0OiLwkIqVIjtzOjE6IlAiO3M6NDoi8J2QqiI7czoxOiJxIjtzOjQ6IvCdkZ4iO3M6MToicSI7czo0OiLwnZKSIjtzOjE6InEiO3M6NDoi8J2ThiI7czoxOiJxIjtzOjQ6IvCdk7oiO3M6MToicSI7czo0OiLwnZSuIjtzOjE6InEiO3M6NDoi8J2VoiI7czoxOiJxIjtzOjQ6IvCdlpYiO3M6MToicSI7czo0OiLwnZeKIjtzOjE6InEiO3M6NDoi8J2XviI7czoxOiJxIjtzOjQ6IvCdmLIiO3M6MToicSI7czo0OiLwnZmmIjtzOjE6InEiO3M6NDoi8J2amiI7czoxOiJxIjtzOjI6ItSbIjtzOjE6InEiO3M6Mjoi1aMiO3M6MToicSI7czoyOiLVpiI7czoxOiJxIjtzOjM6IuKEmiI7czoxOiJRIjtzOjQ6IvCdkJAiO3M6MToiUSI7czo0OiLwnZGEIjtzOjE6IlEiO3M6NDoi8J2RuCI7czoxOiJRIjtzOjQ6IvCdkqwiO3M6MToiUSI7czo0OiLwnZOgIjtzOjE6IlEiO3M6NDoi8J2UlCI7czoxOiJRIjtzOjQ6IvCdlbwiO3M6MToiUSI7czo0OiLwnZawIjtzOjE6IlEiO3M6NDoi8J2XpCI7czoxOiJRIjtzOjQ6IvCdmJgiO3M6MToiUSI7czo0OiLwnZmMIjtzOjE6IlEiO3M6NDoi8J2agCI7czoxOiJRIjtzOjM6IuK1lSI7czoxOiJRIjtzOjQ6IvCdkKsiO3M6MToiciI7czo0OiLwnZGfIjtzOjE6InIiO3M6NDoi8J2SkyI7czoxOiJyIjtzOjQ6IvCdk4ciO3M6MToiciI7czo0OiLwnZO7IjtzOjE6InIiO3M6NDoi8J2UryI7czoxOiJyIjtzOjQ6IvCdlaMiO3M6MToiciI7czo0OiLwnZaXIjtzOjE6InIiO3M6NDoi8J2XiyI7czoxOiJyIjtzOjQ6IvCdl78iO3M6MToiciI7czo0OiLwnZizIjtzOjE6InIiO3M6NDoi8J2ZpyI7czoxOiJyIjtzOjQ6IvCdmpsiO3M6MToiciI7czozOiLqrYciO3M6MToiciI7czozOiLqrYgiO3M6MToiciI7czozOiLhtKYiO3M6MToiciI7czozOiLisoUiO3M6MToiciI7czoyOiLQsyI7czoxOiJyIjtzOjM6IuqugSI7czoxOiJyIjtzOjI6IsqAIjtzOjE6InIiO3M6NDoi8J2IliI7czoxOiJSIjtzOjM6IuKEmyI7czoxOiJSIjtzOjM6IuKEnCI7czoxOiJSIjtzOjM6IuKEnSI7czoxOiJSIjtzOjQ6IvCdkJEiO3M6MToiUiI7czo0OiLwnZGFIjtzOjE6IlIiO3M6NDoi8J2RuSI7czoxOiJSIjtzOjQ6IvCdk6EiO3M6MToiUiI7czo0OiLwnZW9IjtzOjE6IlIiO3M6NDoi8J2WsSI7czoxOiJSIjtzOjQ6IvCdl6UiO3M6MToiUiI7czo0OiLwnZiZIjtzOjE6IlIiO3M6NDoi8J2ZjSI7czoxOiJSIjtzOjQ6IvCdmoEiO3M6MToiUiI7czoyOiLGpiI7czoxOiJSIjtzOjM6IuGOoSI7czoxOiJSIjtzOjM6IuGPkiI7czoxOiJSIjtzOjQ6IvCQkrQiO3M6MToiUiI7czozOiLhlociO3M6MToiUiI7czozOiLqk6MiO3M6MToiUiI7czo0OiLwlry1IjtzOjE6IlIiO3M6Mzoi772TIjtzOjE6InMiO3M6NDoi8J2QrCI7czoxOiJzIjtzOjQ6IvCdkaAiO3M6MToicyI7czo0OiLwnZKUIjtzOjE6InMiO3M6NDoi8J2TiCI7czoxOiJzIjtzOjQ6IvCdk7wiO3M6MToicyI7czo0OiLwnZSwIjtzOjE6InMiO3M6NDoi8J2VpCI7czoxOiJzIjtzOjQ6IvCdlpgiO3M6MToicyI7czo0OiLwnZeMIjtzOjE6InMiO3M6NDoi8J2YgCI7czoxOiJzIjtzOjQ6IvCdmLQiO3M6MToicyI7czo0OiLwnZmoIjtzOjE6InMiO3M6NDoi8J2anCI7czoxOiJzIjtzOjM6IuqcsSI7czoxOiJzIjtzOjI6Isa9IjtzOjE6InMiO3M6Mjoi0ZUiO3M6MToicyI7czozOiLqrqoiO3M6MToicyI7czo0OiLwkaOBIjtzOjE6InMiO3M6NDoi8JCRiCI7czoxOiJzIjtzOjM6Iu+8syI7czoxOiJTIjtzOjQ6IvCdkJIiO3M6MToiUyI7czo0OiLwnZGGIjtzOjE6IlMiO3M6NDoi8J2RuiI7czoxOiJTIjtzOjQ6IvCdkq4iO3M6MToiUyI7czo0OiLwnZOiIjtzOjE6IlMiO3M6NDoi8J2UliI7czoxOiJTIjtzOjQ6IvCdlYoiO3M6MToiUyI7czo0OiLwnZW+IjtzOjE6IlMiO3M6NDoi8J2WsiI7czoxOiJTIjtzOjQ6IvCdl6YiO3M6MToiUyI7czo0OiLwnZiaIjtzOjE6IlMiO3M6NDoi8J2ZjiI7czoxOiJTIjtzOjQ6IvCdmoIiO3M6MToiUyI7czoyOiLQhSI7czoxOiJTIjtzOjI6ItWPIjtzOjE6IlMiO3M6Mzoi4Y+VIjtzOjE6IlMiO3M6Mzoi4Y+aIjtzOjE6IlMiO3M6Mzoi6pOiIjtzOjE6IlMiO3M6NDoi8Ja8uiI7czoxOiJTIjtzOjQ6IvCQipYiO3M6MToiUyI7czo0OiLwkJCgIjtzOjE6IlMiO3M6Mzoi6p61IjtzOjE6It8iO3M6MjoizrIiO3M6MToi3yI7czoyOiLPkCI7czoxOiLfIjtzOjQ6IvCdm4MiO3M6MToi3yI7czo0OiLwnZu9IjtzOjE6It8iO3M6NDoi8J2ctyI7czoxOiLfIjtzOjQ6IvCdnbEiO3M6MToi3yI7czo0OiLwnZ6rIjtzOjE6It8iO3M6Mzoi4Y+wIjtzOjE6It8iO3M6NDoi8J2QrSI7czoxOiJ0IjtzOjQ6IvCdkaEiO3M6MToidCI7czo0OiLwnZKVIjtzOjE6InQiO3M6NDoi8J2TiSI7czoxOiJ0IjtzOjQ6IvCdk70iO3M6MToidCI7czo0OiLwnZSxIjtzOjE6InQiO3M6NDoi8J2VpSI7czoxOiJ0IjtzOjQ6IvCdlpkiO3M6MToidCI7czo0OiLwnZeNIjtzOjE6InQiO3M6NDoi8J2YgSI7czoxOiJ0IjtzOjQ6IvCdmLUiO3M6MToidCI7czo0OiLwnZmpIjtzOjE6InQiO3M6NDoi8J2anSI7czoxOiJ0IjtzOjM6IuG0myI7czoxOiJ0IjtzOjM6IuKKpCI7czoxOiJUIjtzOjM6IuKfmSI7czoxOiJUIjtzOjQ6IvCfnagiO3M6MToiVCI7czozOiLvvLQiO3M6MToiVCI7czo0OiLwnZCTIjtzOjE6IlQiO3M6NDoi8J2RhyI7czoxOiJUIjtzOjQ6IvCdkbsiO3M6MToiVCI7czo0OiLwnZKvIjtzOjE6IlQiO3M6NDoi8J2ToyI7czoxOiJUIjtzOjQ6IvCdlJciO3M6MToiVCI7czo0OiLwnZWLIjtzOjE6IlQiO3M6NDoi8J2VvyI7czoxOiJUIjtzOjQ6IvCdlrMiO3M6MToiVCI7czo0OiLwnZenIjtzOjE6IlQiO3M6NDoi8J2YmyI7czoxOiJUIjtzOjQ6IvCdmY8iO3M6MToiVCI7czo0OiLwnZqDIjtzOjE6IlQiO3M6MjoizqQiO3M6MToiVCI7czo0OiLwnZq7IjtzOjE6IlQiO3M6NDoi8J2btSI7czoxOiJUIjtzOjQ6IvCdnK8iO3M6MToiVCI7czo0OiLwnZ2pIjtzOjE6IlQiO3M6NDoi8J2eoyI7czoxOiJUIjtzOjM6IuKypiI7czoxOiJUIjtzOjI6ItCiIjtzOjE6IlQiO3M6Mzoi4Y6iIjtzOjE6IlQiO3M6Mzoi6pOUIjtzOjE6IlQiO3M6NDoi8Ja8iiI7czoxOiJUIjtzOjQ6IvCRorwiO3M6MToiVCI7czo0OiLwkIqXIjtzOjE6IlQiO3M6NDoi8JCKsSI7czoxOiJUIjtzOjQ6IvCQjJUiO3M6MToiVCI7czo0OiLwnZCuIjtzOjE6InUiO3M6NDoi8J2RoiI7czoxOiJ1IjtzOjQ6IvCdkpYiO3M6MToidSI7czo0OiLwnZOKIjtzOjE6InUiO3M6NDoi8J2TviI7czoxOiJ1IjtzOjQ6IvCdlLIiO3M6MToidSI7czo0OiLwnZWmIjtzOjE6InUiO3M6NDoi8J2WmiI7czoxOiJ1IjtzOjQ6IvCdl44iO3M6MToidSI7czo0OiLwnZiCIjtzOjE6InUiO3M6NDoi8J2YtiI7czoxOiJ1IjtzOjQ6IvCdmaoiO3M6MToidSI7czo0OiLwnZqeIjtzOjE6InUiO3M6Mzoi6p6fIjtzOjE6InUiO3M6Mzoi4bScIjtzOjE6InUiO3M6Mzoi6q2OIjtzOjE6InUiO3M6Mzoi6q2SIjtzOjE6InUiO3M6MjoiyosiO3M6MToidSI7czoyOiLPhSI7czoxOiJ1IjtzOjQ6IvCdm5YiO3M6MToidSI7czo0OiLwnZyQIjtzOjE6InUiO3M6NDoi8J2diiI7czoxOiJ1IjtzOjQ6IvCdnoQiO3M6MToidSI7czo0OiLwnZ6+IjtzOjE6InUiO3M6Mjoi1b0iO3M6MToidSI7czo0OiLwkJO2IjtzOjE6InUiO3M6NDoi8JGjmCI7czoxOiJ1IjtzOjM6IuKIqiI7czoxOiJVIjtzOjM6IuKLgyI7czoxOiJVIjtzOjQ6IvCdkJQiO3M6MToiVSI7czo0OiLwnZGIIjtzOjE6IlUiO3M6NDoi8J2RvCI7czoxOiJVIjtzOjQ6IvCdkrAiO3M6MToiVSI7czo0OiLwnZOkIjtzOjE6IlUiO3M6NDoi8J2UmCI7czoxOiJVIjtzOjQ6IvCdlYwiO3M6MToiVSI7czo0OiLwnZaAIjtzOjE6IlUiO3M6NDoi8J2WtCI7czoxOiJVIjtzOjQ6IvCdl6giO3M6MToiVSI7czo0OiLwnZicIjtzOjE6IlUiO3M6NDoi8J2ZkCI7czoxOiJVIjtzOjQ6IvCdmoQiO3M6MToiVSI7czoyOiLVjSI7czoxOiJVIjtzOjM6IuGIgCI7czoxOiJVIjtzOjQ6IvCQk44iO3M6MToiVSI7czozOiLhkYwiO3M6MToiVSI7czozOiLqk7QiO3M6MToiVSI7czo0OiLwlr2CIjtzOjE6IlUiO3M6NDoi8JGiuCI7czoxOiJVIjtzOjM6IuKIqCI7czoxOiJ2IjtzOjM6IuKLgSI7czoxOiJ2IjtzOjM6Iu+9liI7czoxOiJ2IjtzOjM6IuKFtCI7czoxOiJ2IjtzOjQ6IvCdkK8iO3M6MToidiI7czo0OiLwnZGjIjtzOjE6InYiO3M6NDoi8J2SlyI7czoxOiJ2IjtzOjQ6IvCdk4siO3M6MToidiI7czo0OiLwnZO/IjtzOjE6InYiO3M6NDoi8J2UsyI7czoxOiJ2IjtzOjQ6IvCdlaciO3M6MToidiI7czo0OiLwnZabIjtzOjE6InYiO3M6NDoi8J2XjyI7czoxOiJ2IjtzOjQ6IvCdmIMiO3M6MToidiI7czo0OiLwnZi3IjtzOjE6InYiO3M6NDoi8J2ZqyI7czoxOiJ2IjtzOjQ6IvCdmp8iO3M6MToidiI7czozOiLhtKAiO3M6MToidiI7czoyOiLOvSI7czoxOiJ2IjtzOjQ6IvCdm44iO3M6MToidiI7czo0OiLwnZyIIjtzOjE6InYiO3M6NDoi8J2dgiI7czoxOiJ2IjtzOjQ6IvCdnbwiO3M6MToidiI7czo0OiLwnZ62IjtzOjE6InYiO3M6Mjoi0bUiO3M6MToidiI7czoyOiLXmCI7czoxOiJ2IjtzOjQ6IvCRnIYiO3M6MToidiI7czozOiLqrqkiO3M6MToidiI7czo0OiLwkaOAIjtzOjE6InYiO3M6NDoi8J2IjSI7czoxOiJWIjtzOjI6ItmnIjtzOjE6IlYiO3M6Mjoi27ciO3M6MToiViI7czozOiLihaQiO3M6MToiViI7czo0OiLwnZCVIjtzOjE6IlYiO3M6NDoi8J2RiSI7czoxOiJWIjtzOjQ6IvCdkb0iO3M6MToiViI7czo0OiLwnZKxIjtzOjE6IlYiO3M6NDoi8J2TpSI7czoxOiJWIjtzOjQ6IvCdlJkiO3M6MToiViI7czo0OiLwnZWNIjtzOjE6IlYiO3M6NDoi8J2WgSI7czoxOiJWIjtzOjQ6IvCdlrUiO3M6MToiViI7czo0OiLwnZepIjtzOjE6IlYiO3M6NDoi8J2YnSI7czoxOiJWIjtzOjQ6IvCdmZEiO3M6MToiViI7czo0OiLwnZqFIjtzOjE6IlYiO3M6Mjoi0bQiO3M6MToiViI7czozOiLitLgiO3M6MToiViI7czozOiLhj5kiO3M6MToiViI7czozOiLhkK8iO3M6MToiViI7czozOiLqm58iO3M6MToiViI7czozOiLqk6YiO3M6MToiViI7czo0OiLwlryIIjtzOjE6IlYiO3M6NDoi8JGioCI7czoxOiJWIjtzOjQ6IvCQlJ0iO3M6MToiViI7czoyOiLJryI7czoxOiJ3IjtzOjQ6IvCdkLAiO3M6MToidyI7czo0OiLwnZGkIjtzOjE6InciO3M6NDoi8J2SmCI7czoxOiJ3IjtzOjQ6IvCdk4wiO3M6MToidyI7czo0OiLwnZSAIjtzOjE6InciO3M6NDoi8J2UtCI7czoxOiJ3IjtzOjQ6IvCdlagiO3M6MToidyI7czo0OiLwnZacIjtzOjE6InciO3M6NDoi8J2XkCI7czoxOiJ3IjtzOjQ6IvCdmIQiO3M6MToidyI7czo0OiLwnZi4IjtzOjE6InciO3M6NDoi8J2ZrCI7czoxOiJ3IjtzOjQ6IvCdmqAiO3M6MToidyI7czozOiLhtKEiO3M6MToidyI7czoyOiLRoSI7czoxOiJ3IjtzOjI6ItSdIjtzOjE6InciO3M6Mjoi1aEiO3M6MToidyI7czo0OiLwkZyKIjtzOjE6InciO3M6NDoi8JGcjiI7czoxOiJ3IjtzOjQ6IvCRnI8iO3M6MToidyI7czozOiLqroMiO3M6MToidyI7czo0OiLwkaOvIjtzOjE6IlciO3M6NDoi8JGjpiI7czoxOiJXIjtzOjQ6IvCdkJYiO3M6MToiVyI7czo0OiLwnZGKIjtzOjE6IlciO3M6NDoi8J2RviI7czoxOiJXIjtzOjQ6IvCdkrIiO3M6MToiVyI7czo0OiLwnZOmIjtzOjE6IlciO3M6NDoi8J2UmiI7czoxOiJXIjtzOjQ6IvCdlY4iO3M6MToiVyI7czo0OiLwnZaCIjtzOjE6IlciO3M6NDoi8J2WtiI7czoxOiJXIjtzOjQ6IvCdl6oiO3M6MToiVyI7czo0OiLwnZieIjtzOjE6IlciO3M6NDoi8J2ZkiI7czoxOiJXIjtzOjQ6IvCdmoYiO3M6MToiVyI7czoyOiLUnCI7czoxOiJXIjtzOjM6IuGOsyI7czoxOiJXIjtzOjM6IuGPlCI7czoxOiJXIjtzOjM6IuqTqiI7czoxOiJXIjtzOjM6IuGZriI7czoxOiJ4IjtzOjI6IsOXIjtzOjE6IngiO3M6Mzoi4qSrIjtzOjE6IngiO3M6Mzoi4qSsIjtzOjE6IngiO3M6Mzoi4qivIjtzOjE6IngiO3M6Mzoi772YIjtzOjE6IngiO3M6Mzoi4oW5IjtzOjE6IngiO3M6NDoi8J2QsSI7czoxOiJ4IjtzOjQ6IvCdkaUiO3M6MToieCI7czo0OiLwnZKZIjtzOjE6IngiO3M6NDoi8J2TjSI7czoxOiJ4IjtzOjQ6IvCdlIEiO3M6MToieCI7czo0OiLwnZS1IjtzOjE6IngiO3M6NDoi8J2VqSI7czoxOiJ4IjtzOjQ6IvCdlp0iO3M6MToieCI7czo0OiLwnZeRIjtzOjE6IngiO3M6NDoi8J2YhSI7czoxOiJ4IjtzOjQ6IvCdmLkiO3M6MToieCI7czo0OiLwnZmtIjtzOjE6IngiO3M6NDoi8J2aoSI7czoxOiJ4IjtzOjI6ItGFIjtzOjE6IngiO3M6Mzoi4ZWBIjtzOjE6IngiO3M6Mzoi4ZW9IjtzOjE6IngiO3M6Mzoi4ZmtIjtzOjE6IlgiO3M6Mzoi4pWzIjtzOjE6IlgiO3M6NDoi8JCMoiI7czoxOiJYIjtzOjQ6IvCRo6wiO3M6MToiWCI7czozOiLvvLgiO3M6MToiWCI7czozOiLihakiO3M6MToiWCI7czo0OiLwnZCXIjtzOjE6IlgiO3M6NDoi8J2RiyI7czoxOiJYIjtzOjQ6IvCdkb8iO3M6MToiWCI7czo0OiLwnZKzIjtzOjE6IlgiO3M6NDoi8J2TpyI7czoxOiJYIjtzOjQ6IvCdlJsiO3M6MToiWCI7czo0OiLwnZWPIjtzOjE6IlgiO3M6NDoi8J2WgyI7czoxOiJYIjtzOjQ6IvCdlrciO3M6MToiWCI7czo0OiLwnZerIjtzOjE6IlgiO3M6NDoi8J2YnyI7czoxOiJYIjtzOjQ6IvCdmZMiO3M6MToiWCI7czo0OiLwnZqHIjtzOjE6IlgiO3M6Mzoi6p6zIjtzOjE6IlgiO3M6MjoizqciO3M6MToiWCI7czo0OiLwnZq+IjtzOjE6IlgiO3M6NDoi8J2buCI7czoxOiJYIjtzOjQ6IvCdnLIiO3M6MToiWCI7czo0OiLwnZ2sIjtzOjE6IlgiO3M6NDoi8J2epiI7czoxOiJYIjtzOjM6IuKyrCI7czoxOiJYIjtzOjI6ItClIjtzOjE6IlgiO3M6Mzoi4rWdIjtzOjE6IlgiO3M6Mzoi4Zq3IjtzOjE6IlgiO3M6Mzoi6pOrIjtzOjE6IlgiO3M6NDoi8JCKkCI7czoxOiJYIjtzOjQ6IvCQirQiO3M6MToiWCI7czo0OiLwkIyXIjtzOjE6IlgiO3M6NDoi8JCUpyI7czoxOiJYIjtzOjI6IsmjIjtzOjE6InkiO3M6Mzoi4baMIjtzOjE6InkiO3M6Mzoi772ZIjtzOjE6InkiO3M6NDoi8J2QsiI7czoxOiJ5IjtzOjQ6IvCdkaYiO3M6MToieSI7czo0OiLwnZKaIjtzOjE6InkiO3M6NDoi8J2TjiI7czoxOiJ5IjtzOjQ6IvCdlIIiO3M6MToieSI7czo0OiLwnZS2IjtzOjE6InkiO3M6NDoi8J2VqiI7czoxOiJ5IjtzOjQ6IvCdlp4iO3M6MToieSI7czo0OiLwnZeSIjtzOjE6InkiO3M6NDoi8J2YhiI7czoxOiJ5IjtzOjQ6IvCdmLoiO3M6MToieSI7czo0OiLwnZmuIjtzOjE6InkiO3M6NDoi8J2aoiI7czoxOiJ5IjtzOjI6IsqPIjtzOjE6InkiO3M6Mzoi4bu/IjtzOjE6InkiO3M6Mzoi6q2aIjtzOjE6InkiO3M6MjoizrMiO3M6MToieSI7czozOiLihL0iO3M6MToieSI7czo0OiLwnZuEIjtzOjE6InkiO3M6NDoi8J2bviI7czoxOiJ5IjtzOjQ6IvCdnLgiO3M6MToieSI7czo0OiLwnZ2yIjtzOjE6InkiO3M6NDoi8J2erCI7czoxOiJ5IjtzOjI6ItGDIjtzOjE6InkiO3M6Mjoi0q8iO3M6MToieSI7czozOiLhg6ciO3M6MToieSI7czo0OiLwkaOcIjtzOjE6InkiO3M6Mzoi77y5IjtzOjE6IlkiO3M6NDoi8J2QmCI7czoxOiJZIjtzOjQ6IvCdkYwiO3M6MToiWSI7czo0OiLwnZKAIjtzOjE6IlkiO3M6NDoi8J2StCI7czoxOiJZIjtzOjQ6IvCdk6giO3M6MToiWSI7czo0OiLwnZScIjtzOjE6IlkiO3M6NDoi8J2VkCI7czoxOiJZIjtzOjQ6IvCdloQiO3M6MToiWSI7czo0OiLwnZa4IjtzOjE6IlkiO3M6NDoi8J2XrCI7czoxOiJZIjtzOjQ6IvCdmKAiO3M6MToiWSI7czo0OiLwnZmUIjtzOjE6IlkiO3M6NDoi8J2aiCI7czoxOiJZIjtzOjI6Is6lIjtzOjE6IlkiO3M6Mjoiz5IiO3M6MToiWSI7czo0OiLwnZq8IjtzOjE6IlkiO3M6NDoi8J2btiI7czoxOiJZIjtzOjQ6IvCdnLAiO3M6MToiWSI7czo0OiLwnZ2qIjtzOjE6IlkiO3M6NDoi8J2epCI7czoxOiJZIjtzOjM6IuKyqCI7czoxOiJZIjtzOjI6ItCjIjtzOjE6IlkiO3M6Mjoi0q4iO3M6MToiWSI7czozOiLhjqkiO3M6MToiWSI7czozOiLhjr0iO3M6MToiWSI7czozOiLqk6wiO3M6MToiWSI7czo0OiLwlr2DIjtzOjE6IlkiO3M6NDoi8JGipCI7czoxOiJZIjtzOjQ6IvCQirIiO3M6MToiWSI7czo0OiLwnZCzIjtzOjE6InoiO3M6NDoi8J2RpyI7czoxOiJ6IjtzOjQ6IvCdkpsiO3M6MToieiI7czo0OiLwnZOPIjtzOjE6InoiO3M6NDoi8J2UgyI7czoxOiJ6IjtzOjQ6IvCdlLciO3M6MToieiI7czo0OiLwnZWrIjtzOjE6InoiO3M6NDoi8J2WnyI7czoxOiJ6IjtzOjQ6IvCdl5MiO3M6MToieiI7czo0OiLwnZiHIjtzOjE6InoiO3M6NDoi8J2YuyI7czoxOiJ6IjtzOjQ6IvCdma8iO3M6MToieiI7czo0OiLwnZqjIjtzOjE6InoiO3M6Mzoi4bSiIjtzOjE6InoiO3M6Mzoi6q6TIjtzOjE6InoiO3M6NDoi8JGjhCI7czoxOiJ6IjtzOjQ6IvCQi7UiO3M6MToiWiI7czo0OiLwkaOlIjtzOjE6IloiO3M6Mzoi77y6IjtzOjE6IloiO3M6Mzoi4oSkIjtzOjE6IloiO3M6Mzoi4oSoIjtzOjE6IloiO3M6NDoi8J2QmSI7czoxOiJaIjtzOjQ6IvCdkY0iO3M6MToiWiI7czo0OiLwnZKBIjtzOjE6IloiO3M6NDoi8J2StSI7czoxOiJaIjtzOjQ6IvCdk6kiO3M6MToiWiI7czo0OiLwnZaFIjtzOjE6IloiO3M6NDoi8J2WuSI7czoxOiJaIjtzOjQ6IvCdl60iO3M6MToiWiI7czo0OiLwnZihIjtzOjE6IloiO3M6NDoi8J2ZlSI7czoxOiJaIjtzOjQ6IvCdmokiO3M6MToiWiI7czoyOiLOliI7czoxOiJaIjtzOjQ6IvCdmq0iO3M6MToiWiI7czo0OiLwnZunIjtzOjE6IloiO3M6NDoi8J2coSI7czoxOiJaIjtzOjQ6IvCdnZsiO3M6MToiWiI7czo0OiLwnZ6VIjtzOjE6IloiO3M6Mzoi4Y+DIjtzOjE6IloiO3M6Mzoi6pOcIjtzOjE6IloiO3M6NDoi8JGiqSI7czoxOiJaIjtzOjI6Isa/IjtzOjE6Iv4iO3M6Mjoiz7giO3M6MToi/iI7czoyOiLPtyI7czoxOiLeIjtzOjQ6IvCQk4QiO3M6MToi3iI7fQ==";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t.\"'\x0B\x0C\x00";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if (
            (isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if (
            $pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] === 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] === 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] === 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if (
            $pos_string && (isset($string[$pos_string]) && $string[$pos_string] === 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] === 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] === 'p')
        ) {
            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function unescape($string, $save_length = false)
    {
        if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) {
            return $string;
        }
        $strippedStr = stripcslashes($string);
        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            $strippedStr = preg_replace_callback('~\*\s+\/~msi', function ($m) {
                return str_pad('*/', strlen($m[0]));
            }, $strippedStr);
            return $strippedStr;
        }
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        $halt_postfix = '';
        if (
            preg_match('~__halt_compiler~mis', $string)
            && preg_match('~__halt_compiler\(\s{0,2000}\)\s{0,2000};.*$~mis', $string, $m, PREG_OFFSET_CAPTURE)
        ) {
            $pos = $m[0][1];
            $halt_postfix = $m[0][0];
            $string = substr($string, 0, $pos);
        }
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr . $halt_postfix;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr . $halt_postfix;
        }
    }

    public static function normalize($string, $save_length = false, &$error = null)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        $bad_chars = ['配', '内'];
        $string = str_replace($bad_chars, ' ', $string);
        $string = str_replace("\xEF\xBB\xBF", '   ', $string); //BOM

        $string = preg_replace_callback('~\bchr\s*\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function ($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function ($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $pattern = '~%([0-9a-fA-F]{2})~';
        if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) {
            $pattern = '~% {0,2}([0-9a-fA-F]{2})~';
        }
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback($pattern, function ($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
        }

        $last_char = $string[-1] ?? '';

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = str_replace($search, $replace, $string);
            if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) {
                $string .= $last_char;
            }
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    if (strpos($m[0], '  ') !== false) {
                        $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0]));
                    }
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
            $iter++;
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        $string = self::concatenate_strings($string, $save_length);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function ($m) {
            if (preg_match('~(?:\w[^\x00-\x7F]|[^\x00-\x7F]\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<\?\s*p\s*h\s*p~msi', function ($m) {
            return str_pad('<?php', strlen($m[0]), ' ');
        }, $string);

        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = str_replace(' ', '  ', $string);  //0xc2, 0xa0

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = trim($string);
        } else {
            $string = str_replace('<?php', '<?   ', $string);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        return $string;
    }

    public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if (strlen($string_normalized) == $start_pos + 1) {
            return $start_pos;
        }

        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            for ($i = $start_pos + 1, $iMax = strlen($string_orig); $i < $iMax; $i++) {
                if ($string_orig[$i] === ')') {
                    break;
                }
            }
            $start_pos = $i;
        }

        if (
            ($string_orig[$start_pos - 1] === '<' && $string_orig[$start_pos] === '?')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '*')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '/')
        ) {
            return $start_pos;
        }

        for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) {
            if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') {
                break;
            }
        }
        return $i - 1;
    }

    public static function get_start_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        $result_pos = $start_pos;
        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            $start_pos -= 1;
        }

        for ($i = $start_pos - 1; $i > 1; $i--) {
            if ($string_orig[$i] === ' ') {
                continue;
            } elseif ($string_orig[$i] === '.' && $string_orig[$i - 1] !== '\\') {
                $result_pos = $i;
                break;
            } else {
                $result_pos = $start_pos;
                break;
            }
        }
        for ($i = $result_pos - 1; $i >= 0; $i--) {
            if ($string_orig[$i] != ' ' && $string_normalized[$i] == ' ') {
                $result_pos = $i;
            } else {
                break;
            }
        }
        return $result_pos;
    }

    public static function string_pos($string, $needle, $unescape = false)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string_strip_whitespace = self::strip_whitespace($string, true);
        $needle = self::strip_whitespace($needle, false);
        $needle = preg_replace('~(?<!\:)//[^?\n]{1,15}(\n?\?>)~msi', '$1', $needle);

        $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) {
            $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?';
            return str_pad($ret, strlen($m[0]), ' ');
        }, $string_strip_whitespace);

        $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) {
            return str_pad('?>', strlen($m[0]), ' ', STR_PAD_LEFT);
        }, $string);

        if ($unescape) {
            $string = self::unescape($string, true);
        }

        $string = self::normalize($string, true);
        $needle = self::normalize($needle, false);
        $tempString = $string;
        $string = preg_replace_callback('~(?<![\*\\\\])/\*(?:(?:[^\*]|\*(?!\/))*)\*/~', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $string = $tempString;
        }
        $tempNeedle = $needle;
        $needle = preg_replace('~(?<![\*\\\\])/\*(([^\*]|\*(?!\/))*)\*/~', '', $needle); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $needle = $tempNeedle;
        }
        for ($i = 1; $i <= 7; $i++) {
            $dist_string = $string;
            // Removing multiline comments with spaces
            $string = preg_replace_callback('~(?<![\*\\\\ ]) {0,' . $i . '}/ {' . ($i - 1) . ',' . $i . '}\* {' . ($i - 1) . ',' . $i . '}(([^\*]| {' . $i . '}\* {' . ($i - 1) . ',' . $i . '}(?!\/))*) {' . ($i - 1) . ',' . $i . '}\* {' . ($i - 1) . ',' . $i . '}/~msi', function ($m) {
                return str_repeat(' ', strlen($m[0]));
            }, $string);
            if (preg_last_error() !== 0) {
                $string = $dist_string;
            }
        }

        $string = preg_replace_callback('~% *([\da-f]) *([\da-f])~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);
        $string = preg_replace_callback('~\\\\  x  ([\da-f])  ([\da-f])  ~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);

        $needle = self::concatenate_strings($needle, true);
        $needle = preg_replace('~\s+~msi', '', $needle);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if (trim($string[$i]) === '' && @trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $start = self::get_start_of_extended_length($string, $string_strip_whitespace, $start);
                    $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i);
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function concatenate_strings($string, $save_length)
    {
        $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);
        return $string;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    private static function extend_string_with_spaces($string, $strippedStr)
    {
        $strippedStr = str_replace('<?php  ', '<?php ', $strippedStr);

        $in_comment_ml = false;
        $in_comment_nl = false;
        $iMax = strlen($string);
        $jMax = strlen($strippedStr);

        if ($iMax === $jMax) {
            return $string;
        }

        $newStr = '';
        $j = 0;

        for ($i = 0; $i < $iMax; $i++) {
            $have_next = ($i + 1) < $iMax;
            if (isset($strippedStr[$j]) && trim($strippedStr[$j]) === '') {
                $j++;
                $i--;
                continue;
            }
            if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) {
                $newStr .= $string[$i];
                $j++;
            } elseif ((trim($string[$i]) === '/' && $have_next && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) {
                $in_comment_ml = true;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '*' && $have_next && trim($string[$i + 1]) === '/') && $in_comment_ml) {
                $in_comment_ml = false;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '/' && $have_next && trim($string[$i + 1]) === '/') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= '  ';
                $i++;
            } elseif ((trim($string[$i]) === '#') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } elseif (($string[$i] === "\n" || $string[$i] === "\r") && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= ' ';
            } elseif (isset($string[$i]) && $have_next && isset($string[$i + 1]) && $string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= $string[$i];
                $j++;
            } elseif ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) {
                $newStr .= ' ';
            } else {
                $newStr .= ' ';
            }
        }
        return $newStr;
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}


if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text, &$bom = false)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        $bom = false;
        if ($first3 == self::UTF8_BOM) {
            $bom = true;
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            $bom = true;
            return 'UTF-16LE';
        } elseif (isset($first4[3]) && $first4[0] === "\0" && $first4[1] !== "\0" && $first4[2] === "\0" && $first4[3] !== "\0") {
            return 'UTF-16BE';
        } elseif (isset($first4[3]) && $first4[0] !== "\0" && $first4[1] === "\0" && $first4[2] !== "\0" && $first4[3] === "\0") {
            return 'UTF-16LE';
        } elseif (isset($first4[3]) && $first4[0] === "\0" && $first4[1] === "\0" && $first4[2] === "\0" && $first4[3] !== "\0") {
            return 'UTF-32BE';
        } elseif (isset($first4[3]) && $first4[0] !== "\0" && $first4[1] === "\0" && $first4[2] === "\0" && $first4[3] === "\0") {
            return 'UTF-32LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return FUNC_ICONV;
    }

    public static function convertToCp1251($from, $str)
    {
        $str = self::unsetUtf16Pairs($str);
        $str = self::removeUTF8MultiByteCharacters($str);
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', $str);
        }
        return $ret;
    }

    public static function removeUTF8MultiByteCharacters($string)
    {
        $cleanText = '';
        $string = preg_replace("~\A\xEF\xBB\xBF~mis", '', $string);
        $textLength = strlen($string);

        for ($i = 0; $i < $textLength; $i++) {
            $byte = ord($string[$i]);
            $bytesLeft = 0;

            if (($byte & 0b10000000) == 0) {
                // 1-byte character
                $bytesLeft = 0;
            } elseif (($byte & 0b11100000) == 0b11000000) {
                // 2-byte character
                $bytesLeft = 1;
            } elseif (($byte & 0b11110000) == 0b11100000) {
                // 3-byte character
                $bytesLeft = 2;
            } elseif (($byte & 0b11111000) == 0b11110000) {
                // 4-byte character
                $bytesLeft = 3;
            }

            if ($bytesLeft === 0) {
                $cleanText .= $string[$i];
            } else {
                // Skip bytes for multi-byte characters
                $i += $bytesLeft;
                $cleanText .= '?';
            }
        }
        return $cleanText;
    }


    public static function checkUtf8Bytes($string_in_utf8, $position_without_multibyte, $length_without_multibyte, $bom = false)
    {
        $length = strlen($string_in_utf8);
        $index = 0;
        $start_position = 0;
        $stop_position = 0;
        $current_position_without_multibyte = 0;

        if ($bom) {
            $index += 3;
        }
        while ($index < $length) {
            $last_index = $index;
            $byte = ord($string_in_utf8[$index]);
            if (($byte & 0x80) == 0) {
                // 1 byte char
                $index++;
            } elseif (($byte & 0xE0) == 0xC0) {
                // 2 byte char
                $index += 2;
            } elseif (($byte & 0xF0) == 0xE0) {
                // 3 byte char
                $index += 3;
            } elseif (($byte & 0xF8) == 0xF0) {
                // 4 byte char
                $index += 4;
            } else {
                // Invalid byte
                $index++;
            }

            if ($current_position_without_multibyte === $position_without_multibyte) {
                $start_position = $last_index;
            }

            if ($current_position_without_multibyte - $position_without_multibyte >= $length_without_multibyte - 1) {
                $stop_position = $index;
                break;
            }

            $current_position_without_multibyte++;
        }
        return [$start_position, $stop_position - $start_position];
    }


    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }

    public static function convertFromUTF8($to, $str)
    {
        return @iconv('UTF-8', $to, $str);
    }

    public static function countUtf16Pairs($string)
    {
        $count = 0;
        for ($i = 0; $i < strlen($string); $i++) {
            if (
                (
                    isset($string[$i + 4])
                    && (ord($string[$i + 1]) >= 0xD8 && ord($string[$i + 1]) <= 0xDB)
                    && (ord($string[$i]) >= 0x00 && ord($string[$i]) <= 0xFF)
                    && (ord($string[$i + 3]) >= 0xDC && ord($string[$i + 3]) <= 0xDF)
                    && (ord($string[$i + 2]) >= 0x00 && ord($string[$i + 2]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                ) || (
                    isset($string[$i + 4])
                    && (ord($string[$i]) >= 0xD8 && ord($string[$i]) <= 0xDB)
                    && (ord($string[$i + 1]) >= 0x00 && ord($string[$i + 1]) <= 0xFF)
                    && (ord($string[$i + 2]) >= 0xDC && ord($string[$i + 2]) <= 0xDF)
                    && (ord($string[$i + 3]) >= 0x00 && ord($string[$i + 3]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                )
            ) {
                $count++;
                $i += 3;
            }
        }
        return $count;
    }

    public static function unsetUtf16Pairs($string)
    {
        $new_str = '';
        for ($i = 0; $i < strlen($string); $i++) {
            if (
                (
                    isset($string[$i + 4])
                    && (ord($string[$i + 1]) >= 0xD8 && ord($string[$i + 1]) <= 0xDB)
                    && (ord($string[$i]) >= 0x00 && ord($string[$i]) <= 0xFF)
                    && (ord($string[$i + 3]) >= 0xDC && ord($string[$i + 3]) <= 0xDF)
                    && (ord($string[$i + 2]) >= 0x00 && ord($string[$i + 2]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                ) || (
                    isset($string[$i + 4])
                    && (ord($string[$i]) >= 0xD8 && ord($string[$i]) <= 0xDB)
                    && (ord($string[$i + 1]) >= 0x00 && ord($string[$i + 1]) <= 0xFF)
                    && (ord($string[$i + 2]) >= 0xDC && ord($string[$i + 2]) <= 0xDF)
                    && (ord($string[$i + 3]) >= 0x00 && ord($string[$i + 3]) <= 0xFF)
                    && (ord($string[$i + 4]) === 0)
                )
            ) {
                $i += 3;
            } else {
                $new_str .= $string[$i];
            }
        }

        return $new_str;
    }
}


/**
 * Class RapidScanStorageRecord.
 *
 * Implements db record for RapidScan
 */
class RapidScanStorageRecord extends FileInfo
{
    const WHITE                  = 1;  // white listed file in cloud db
    const WHITE_EXTENDED         = 12; // white extended listed file in cloud db
    const BLACK                  = 6;  // black listed file in cloud db
    const DUAL_USE               = 2;  // dual used listed file in cloud db
    const UNKNOWN                = 3;  // unknown file --> file not listed in cloud db
    const HEURISTIC              = 4;  // detected as heuristic
    const CONFLICT               = 5;  // we have filename hashing conflict for this file
    const NEWFILE                = 0;  // this is a new file (or content changed)
    const RX_MALWARE             = 7;  // detected as malware by rx scan
    const RX_SUSPICIOUS          = 8;  // detected as suspicious by rx scan
    const RX_SUSPICIOUS_EXTENDED = 13;  //detected as suspicious_extended by rx scan
    const RX_SUSPICIOUS_IGNORED  = 14;  //detected as suspicious_ignored by whitelisted hash
    const RX_GOOD                = 9;  // detected as good by rx scan
    const RX_SKIPPED_SMART       = 10; // skipped by smart scan
    const RX_SKIPPED_DIE         = 11; // skipped by smart scan

    /**
     * @var string;
     */
    protected $filename;
    /**
     * @var
     */
    protected $size;
    /**
     * @var int
     */
    private $key;
    /**
     * @var int
     */
    private $scanned_ts;
    /**
     * @var int
     */
    private $updated_ts;
    /**
     * @var int
     */
    private $verdict;
    /**
     * @var string
     */
    protected $sha2;
    /**
     * @var string
     */
    private $signature = '';
    /**
     * @var string
     */
    private $snippet = '';

    /**
     * RapidScanStorageRecord constructor.
     * @param $key
     * @param $scanned_ts
     * @param int $verdict
     * @param $sha2
     * @param string $signature
     */
    public function __construct($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts = 0, $size = 0, $i = 0)
    {
        $this->filename     = $filename;
        $this->key          = $key;
        $this->scanned_ts   = $scanned_ts;
        $this->verdict      = $verdict;
        $this->sha2         = $sha2;
        $this->sha256       = bin2hex($sha2);
        $this->snippet      = $snippet;
        $this->updated_ts   = $updated_ts;
        $this->size         = $size;
        $this->index        = $i;

        if ($this->sha256 === '') {
            $this->sha256 = 0;
        }

        if ($signature !== '') {
            $this->signature = self::padTo10Bytes($signature);
        }
        $this->checkCrontabFile();
    }

    /**
     * Create db storage record from file
     * @param $filename
     * @param string $signature
     * @param int $verdict
     * @return RapidScanStorageRecord
     * @throws Exception
     */
    public static function fromFile($file, $i = 0, $signature = '', $verdict = self::UNKNOWN, $snippet = '')
    {
        $filename = '';
        $stat = [];
        $inode = 0;
        $ctime = 0;
        $mtime = 0;
        $size  = 0;

        if (is_string($file) && file_exists($file)) {
            $filename = $file;
            $stat = stat($filename);
            $inode = $stat['ino'];
            $ctime = $stat['ctime'];
            $mtime = $stat['mtime'];
            $size  = $stat['size'];
        } elseif ($file instanceof FileInfo && $file->file_exists()) {
            $filename = $file->getFilename();
            $inode = $file->getInode();
            $ctime = $file->getCreated();
            $mtime = $file->getModified();
            $size  = $file->getSize();
            $i = $file->getIndex();
        }
        if (!file_exists($filename)) {
            throw new Exception('File \'' . $filename . '\' doesn\'t exists.');
        }

        $key = self::getDBKey($filename, $inode);
        $scanned_ts = time();
        $updated_ts = max($mtime, $ctime);
        $sha2 = '';
        if (!$verdict) {
            $verdict = self::NEWFILE;
        }
        if ($signature !== '') {
            $signature = self::padTo10Bytes($signature);
        }
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts, $size, $i);
    }

    private static function getDBKey($filename, $inode)
    {
        $inode_cirlce = $inode % 1000000000; // Because starting from $inode>=1B there may be a chance of integer overflow
        return (int)((string)self::fileNameHash($filename) . (string)$inode_cirlce);
    }

    /**
     * @param $array
     * @return RapidScanStorageRecord
     */
    public static function fromArray($array, $i = 0)
    {
        $key        = $array['key'];
        $scanned_ts = $array['scanned_ts'];
        $sha2       = hex2bin($array['sha2']);
        $verdict    = $array['verdict'];
        $signature  = $array['signature'];
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, '', '', 0, 0, $i);
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $array['key']           = $this->key;
        $array['scanned_ts']    = $this->scanned_ts;
        $array['verdict']       = $this->verdict;
        $array['sha2']          = bin2hex($this->sha2);
        $array['signature']     = $this->signature;
        return $array;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getTsFromValue($value)
    {
        $timestamp  = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        return $scanned_ts;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getVerdictFromValue($value)
    {
        return (int)ord($value[8]);
    }

    public static function getVerdictNameFromValue($value)
    {
        switch ($value) {
            case self::WHITE:
                return 'WHITE';
            case self::WHITE_EXTENDED:
                return 'WHITE_EXTENDED';
            case self::BLACK:
                return 'BLACK';
            case self::DUAL_USE:
                return 'DUAL_USE';
            case self::UNKNOWN:
                return 'UNKNOWN';
            case self::HEURISTIC:
                return 'HEURISTIC';
            case self::CONFLICT:
                return 'CONFLICT';
            case self::NEWFILE:
                return 'NEWFILE';
            case self::RX_MALWARE:
                return 'RX_MALWARE';
            case self::RX_SUSPICIOUS:
                return 'RX_SUSPICIOUS';
            case self::RX_GOOD:
                return 'RX_GOOD';
            case self::RX_SKIPPED_SMART:
                return 'RX_SKIPPED_SMART';
            case self::RX_SKIPPED_DIE:
                return 'RX_SKIPPED_DIE';
            case self::RX_SUSPICIOUS_EXTENDED:
                return 'RX_SUSPICIOUS_EXTENDED';
            case self::RX_SUSPICIOUS_IGNORED:
                return 'RX_SUSPICIOUS_IGNORED';
        }
        return '';
    }

    /**
     * @return void
     */
    public function calcSha2()
    {
        $this->sha2 = hex2bin($this->getSha256());
    }

    /**
     * @param int $verdict
     */
    public function setVerdict($verdict)
    {
        $this->verdict = $verdict;
    }

    /**
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @param $signature
     */
    public function setSignature($signature)
    {
        if ($signature !== '') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * @param $ts
     */
    public function setScannedTs($ts)
    {
        $this->scanned_ts = $ts;
    }

    /**
     * Unpack bytestring $value to RapidScanStorageRecord
     * @param $hash
     * @param $value
     * @return RapidScanStorageRecord
     */
    public static function unpack($hash, $value)
    {
        // pack format
        // 8 bytes timestamp
        // 1 byte verdict
        // 32 bytes sha2
        // 10 bytes signature (only for BLACK, DUAL_USE, RX_MALWARE, RX_SUSPICIOUS, RX_SUSPICIOUS_EXTENDED, RX_SUSPICIOUS_IGNORED)
        // note - we will hold bloomfilter for file later on for those that are WHITE
        // it will be used to detect installed apps

        $signature = '';
        $timestamp = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        $verdict = $value[8];
        $verdict = (int)ord($verdict);
        $sha2 = substr($value, 9, 32);
        if (
            in_array($verdict, [
            self::BLACK,
            self::DUAL_USE,
            self::RX_MALWARE,
            self::RX_SUSPICIOUS,
            self::RX_SUSPICIOUS_EXTENDED,
            self::RX_SUSPICIOUS_IGNORED
            ])
        ) {
            $signature = substr($value, 41, 10);  # 10 bytes signature string
        }
        if (strlen($value) > 51) {
            $snippet = substr($value, 51);
        } else {
            $snippet = '';
        }

        if ($verdict === RapidScanStorageRecord::CONFLICT) { // Do not use sha256 from Rapid DB bacause this entry might be wrong
            $sha2 = '';
        }

        return new self($hash, $scanned_ts, $verdict, $sha2, $signature, '', $snippet);
    }

    /**
     * Pack RapidScanStorageRecord to bytestring to save in db
     * @return string
     */
    public function pack()
    {
        $signature = '';
        if (strlen($this->signature) > 0) {
            $signature = $this->signature;
        }
        return (($this->scanned_ts < 0) ? str_pad(pack("l", $this->scanned_ts), 8, "\xff") : str_pad(pack("l", $this->scanned_ts), 8, "\x00")) . pack("c", $this->verdict) . $this->sha2 . $signature . $this->snippet;
    }

    /**
     * Hash function for create hash of full filename to store in db as key
     * @param $str
     * @return int
     */
    private static function fileNameHash($str)
    {
        for ($i = 0, $h = 5381, $len = strlen($str); $i < $len; $i++) {
            $h = (($h << 5) + $h + ord($str[$i])) & 0x7FFFFFFF;
        }
        return $h;
    }

    /**
     * Convert string to utf-8 and fitting/padding it to 10 bytes
     * @param $str
     * @return string
     */
    private static function padTo10Bytes($str)
    {
        # convert string to bytes in UTF8, and add 0 bytes to pad it to 10
        # cut to 10 bytes of necessary
        $str = iconv('ISO-8859-1', 'UTF-8', $str);
        $len = strlen($str);
        if ($len < 10) {
            $str = str_pad($str, 10, "\x00");
        } elseif ($len > 10) {
            $str = substr($str, 0, 10);
        }
        return $str;
    }

    /**
     * @return int
     */
    public function getScannedTs()
    {
        return $this->scanned_ts;
    }

    /**
     * @return int
     */
    public function getUpdatedTs()
    {
        return $this->updated_ts;
    }

    /**
     * @return int
     */
    public function getVerdict()
    {
        return $this->verdict;
    }

    /**
     * @return string
     */
    public function getSha2()
    {
        return $this->sha2;
    }

    /**
     * @return string
     */
    public function getSignature()
    {
        return trim($this->signature, "\0");
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * @param $filename
     */
    public function setFilename($filename)
    {
        $this->filename = $filename;
        $stat = stat($filename);
        $this->size = $stat['size'];
        $this->updated_ts = max($stat['mtime'], $stat['ctime']);
    }

    /**
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * @param $filename
     */
    public function setSnippet($snippet)
    {
        $this->snippet = $snippet;
    }
}


/**
 * Interface RapidScanStorage implements class to work with RapidScan db
 * @package Aibolit\Lib\Scantrack
 */
class RapidScanStorage
{
    const DB_VERSION = '1.0';

    protected $db_ver = '0';
    /**
     * @var string
     */
    protected $old_dir;
    /**
     * @var string
     */
    protected $new_dir;
    /**
     * @var resource
     */
    protected $new_db;
    /**
     * @var resource
     */
    protected $old_db;
    /**
     * @var resource
     */
    private $wb;
    /**
     * @var int
     */
    public $batch_count;

    /**
     * RapidScanStorage constructor.
     * @param $base - folder where db located
     */
    public function __construct($base)
    {
        if (!is_dir($base) && !mkdir($base, 0750) && !is_dir($base)) {
            throw new Exception(sprintf('Directory "%s" was not created', $base));
        }

        $this->old_dir = $base . '/current';
        $this->new_dir = $base . '/new';
        $options = [
            'create_if_missing' => true,
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->db_ver = $this->getDbVersion();
        if ($this->needMigrate()) {
            $this->migrateDb();
        }

        $this->new_db = new LevelDBWrap($this->new_dir, $options);

        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        }

        $this->storeVersion();

        $this->wb = null;  // will be use to track writing to batch
        $this->batch_count = 0;
    }

    /**
     * @param RapidScanStorageRecord $record
     * @return bool
     */
    public function put(RapidScanStorageRecord $record)
    {
        $this->startBatch();
        $this->batch_count++;
        $value = $this->wb->put(pack('P', $record->getKey()), $record->pack());
        return $value;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getNew($hash)
    {
        $value = $this->new_db->get(pack('P', $hash));
        if ($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getOld($hash)
    {
        $value = $this->old_db->get(pack('P', $hash));
        if ($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool
     */
    public function delete($hash)
    {
        $return = $this->new_db->delete(pack('P', $hash));
        return $return;
    }

    /**
     * @param bool $leave
     * Close db, remove old db, move new to a new space
     * if $leave == true leave old folder, remove new (for tests)
     */
    public function finish($leave = false)
    {
        $this->old_db->close();
        $this->flushBatch();
        $this->new_db->close();
        if ($leave) {
            self::rmtree($this->new_dir);
        } else {
            self::rmtree($this->old_dir);
            rename($this->new_dir, $this->old_dir);
        }
    }

    /**
     * Start batch operations
     */
    private function startBatch()
    {
        if (!$this->wb) {
            $this->wb = new LevelDBWriteBatch();
            $this->batch_count = 0;
        }
    }

    /**
     *  write all data in a batch, reset batch
     */
    public function flushBatch()
    {
        if ($this->wb) {
            $this->new_db->write($this->wb);
            $this->batch_count = 0;
            $this->wb = null;
        }
    }
    /**
     * Helper function to remove folder tree
     * @param $path
     */
    public static function rmTree($path)
    {
        if (is_dir($path)) {
            foreach (scandir($path) as $name) {
                if (in_array($name, ['.', '..'])) {
                    continue;
                }
                $subpath = $path . DIRECTORY_SEPARATOR . $name;
                self::rmTree($subpath);
            }
            rmdir($path);
        } else {
            unlink($path);
        }
    }

    public function getOldTsForRescan($freq, $limit)
    {
        $freq           = $freq == 0 ? 1 : $freq;
        $i              = 0;
        $k              = 0;
        $timestamps     = [];
        $first_key      = false;
        $rewind_cnt     = 0;
        $it = $this->old_db->getIterator();

        for ($it->seek(random_bytes(1)), $i = 0; $i <= $limit; $it->next()) {
            if (!$it->valid()) {
                if ($rewind_cnt > 2) { // Empty base
                    break;
                }
                $it->rewind();
                $rewind_cnt++;
            }

            $key = $it->key();
            if ($first_key === false) {
                $first_key = $key;
            } elseif ($first_key === $key) {
                break;
            }
            $value = $it->current();
            if (!$value) {
                continue;
            }

            if (
                in_array(
                    RapidScanStorageRecord::getVerdictFromValue($value),
                    [
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED
                    ]
                )
            ) {
                $i++;
                $timestamps[] = RapidScanStorageRecord::getTsFromValue($value);
            }
        }
        unset($it);
        sort($timestamps, SORT_NUMERIC);
        if ($i < $limit) {
            $limit = $i;
            $freq = 1;
        }
        $k = (int)($limit / $freq) - 1;
        return isset($timestamps[$k]) ? $timestamps[$k] : false;
    }

    public function getVersion()
    {
        return $this->db_ver;
    }

    private function getDbVersion()
    {
        if (!file_exists($this->old_dir . '/version.txt')) {
            return '0';
        }
        return trim(file_get_contents($this->old_dir . '/version.txt'));
    }

    private function needMigrate()
    {
        if ($this->db_ver === '0') {
            return true;
        }
        return false;
    }

    private function migrateDb()
    {
        $options = [
            'create_if_missing' => true,
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->new_db = new LevelDBWrap($this->new_dir, $options);
        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);

            $this->storeVersion();
            $this->finish();

            return;
        }

        $this->wb = null;  // will be use to track writing to batch
        $this->batch_count = 0;
        $this->startBatch();
        foreach ($this->old_db->getIterator() as $key => $value) {
            $this->new_db->put(pack('P', (int)$key), $value);
            $this->batch_count++;
            if ($this->batch_count > 1000) {
                $this->flushBatch();
            }
        }
        $this->flushBatch();
        $this->storeVersion();
        $this->finish();
    }

    private function storeVersion()
    {
        file_put_contents($this->new_dir . '/version.txt', RapidScanStorage::DB_VERSION);
    }
}


/**
 * For work with Cloud Assisted Storage
 * @package Aibolit\Lib\Scantrack
 */
class CloudAssistedStorage
{
    private $db_filepath = '';

    public function __construct($folder)
    {
        if (!is_dir($folder) && !mkdir($folder, 0750) && !is_dir($folder)) {
            throw new Exception(sprintf('Directory "%s" was not created', $folder));
        }
        $this->db_filepath = $folder . DIRECTORY_SEPARATOR . 'cloud_assisted_verdicts.json';
    }

    public function getList()
    {
        if (!file_exists($this->db_filepath)) {
            return [];
        }
        $content = file_get_contents($this->db_filepath);
        if (!$content) {
            return [];
        }
        $list = json_decode($content, true);
        if (!$list || !is_array($list)) {
            return [];
        }
        return $list;
    }

    public function putList($list)
    {
        file_put_contents($this->db_filepath, json_encode($list));
    }

    public function delete()
    {
        if (!file_exists($this->db_filepath)) {
            return;
        }
        unlink($this->db_filepath);
    }
}


/**
 * This is actual class that does account level scan
 * and remembers the state of scan
 * Class RapidAccountScan
 * @package Aibolit\Lib\Scantrack
 */
class RapidAccountScan
{
    const RESCAN_ALL        = 0; // mode of operation --> rescan all files that are not white/black/dual_use using cloud scanner & regex scanner
    const RESCAN_NONE       = 1; // don't re-scan any files that we already scanned
    const RESCAN_SUSPICIOUS = 2; // only re-scan suspicious files using only regex scanner

    const MAX_BATCH     = 1000; // max files to write in a db batch write
    const MAX_TO_SCAN   = 1000; // max files to scan using cloud/rx scanner at a time

    private $db;
    private $cas_db;
    private $cas_list = [];
    private $vars = null;

    /**
     * @var RapidScanStorageRecord[]
     */
    private $scanlist;
    private $collisions;
    private $processedFiles;
    private $rescan_count = 0;
    private $rescan_rx_good_count = 0;
    private $counter = 0;
    private $str_error = false;
    private $scanner = null;
    private $freq;
    private $old_rescan_ts = false;
    private $ca = null;

    /**
     * RapidAccountScan constructor.
     * @param RapidScanStorage $rapidScanStorage
     */
    public function __construct(Scanner $scanner, RapidScanStorage $rapidScanStorage, CloudAssistedRequest $ca, CloudAssistedStorage $cloudAssistedStorage, Variables &$vars, int $counter = 0)
    {
        $this->db = $rapidScanStorage;
        $this->cas_db = $cloudAssistedStorage;
        $this->ca = $ca;
        $this->vars = $vars;
        $this->scanlist = [];
        $this->collisions = [];
        $this->processedFiles = 0;
        $this->counter = $counter;
        $this->scanner = $scanner;
        $this->freq = $vars->options['rapid-scan-rescan-frequency'] ?? false;

        if ($this->freq !== false) {
            $this->old_rescan_ts = $this->db->getOldTsForRescan($this->freq, 1000);
        }
    }

    /**
     * Get str error
     */
    public function getStrError()
    {
        return $this->str_error;
    }

    /**
     * Get count of rescan(regexp) files
     */
    public function getRescanCount()
    {
        return $this->rescan_count;
    }

    /**
     * Get count of rescan(regexp) RX_GOOD files
     */
    public function getRescanRxGoodCount()
    {
        return $this->rescan_rx_good_count;
    }

    /**
     * placeholder for actual regex scan
     * return RX_GOOD, RX_MALWARE, RX_SUSPICIOUS and signature from regex scanner
     * if we got one
     */
    private function regexScan(FileInfo $fileinfo, $i, $vars)
    {
        $this->rescan_count++;
        if (defined('CLS_PROGRESS')) {
            Progress::setCurrentFile($fileinfo->getFilename());
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);

            Progress::updateScan(++$this->processedFiles);
        }
        $return = $this->scanner->QCR_ScanFile($fileinfo, $vars, null, $i, false);
        return $return;
    }

    /**
     * we will have batch of new files that we will scan
     * here we will write them into db once we scanned them
     * we need to check that there is no conflicts/collisions
     * in names, for that we check for data in db if such filename_hash
     * already exists, but we also keep set of filename_hashes of given
     * batch, to rule out conflicts in current batch as well
     */
    private function writeNew()
    {
        $this->collisions = [];
        foreach ($this->scanlist as $fileinfo) {
            if (in_array($fileinfo->getKey(), $this->collisions) || $this->db->getNew($fileinfo->getKey())) {
                $fileinfo->setVerdict(RapidScanStorageRecord::CONFLICT);
            }
            if ($fileinfo->getVerdict() === RapidScanStorageRecord::BLACK) {
                continue;
            }
            $this->collisions [] = $fileinfo->getKey();
            $this->db->put($fileinfo);
        }
    }

    /**
     * given a batch do cloudscan
     * @throws \Exception
     */
    private function doCloudScan()
    {
        if (count($this->scanlist) <= 0) {
            return;
        }

        $index_table    = [];
        $blackfiles     = [];
        $sha_list       = [];

        foreach ($this->scanlist as $i => $fileinfo) {
            $fileinfo->setVerdict(RapidScanStorageRecord::UNKNOWN);
            if ($this->isSkipCA($fileinfo)) {
                $this->caAddStatsItem('skipped', $fileinfo);
                continue;
            }
            $sha_list[] = bin2hex($fileinfo->getSha2());
            $index_table[] = $i;
        }

        $white_raw              = [];
        $black_raw              = [];
        $verdicts_black_raw     = [];
        $injection_raw          = [];
        $verdicts_injection_raw = [];
        $white_extended_raw     = [];

        try {
            list(
                $white_raw,
                $white_extended_raw,
                $black_raw,
                $verdicts_black_raw,
                $injection_raw,
                $verdicts_injection_raw
            ) = $this->ca->checkFilesByHash($sha_list);
        } catch (\Exception $e) {
            fwrite(STDERR, 'Warning: [CAS] ' . $e->getMessage() . PHP_EOL);
            $this->str_error = $e->getMessage();
        }

        $white_merged = array_merge($white_raw, $white_extended_raw);
        $dual = array_intersect($white_merged, array_merge($black_raw, $injection_raw));
        $black_raw = array_diff($black_raw, $white_merged);
        $injection_raw = array_diff($injection_raw, $white_merged);

        foreach ($white_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE);
            $this->caAddStatsItem('white', $this->scanlist[$index_table[$index]]);
        }
        foreach ($white_extended_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE_EXTENDED);
            $this->caAddStatsItem('white_extended', $this->scanlist[$index_table[$index]]);
        }
        $signatures_db = [];
        foreach ($black_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_black_raw[$i]) ? $verdicts_black_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
                'fi'        => $this->scanlist[$index_table[$index]],
            ];
            $this->caAddStatsItem('black', $this->scanlist[$index_table[$index]]);
        }
        foreach ($injection_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_injection_raw[$i]) ? $verdicts_injection_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
                'fi'        => $this->scanlist[$index_table[$index]],
            ];
            $this->caAddStatsItem('injection', $this->scanlist[$index_table[$index]]);
        }

        $signatures_list = $this->cas_db->getList();
        foreach ($signatures_db as $hash => $sig) {
            $this->cas_list[$hash] = $sig;
            if (isset($signatures_list[$hash])) {
                continue;
            }
            $signatures_list[$hash] = $sig;
        }
        $this->cas_db->putList($signatures_list);

        foreach ($dual as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::DUAL_USE);
            $this->scanlist[$index_table[$index]]->setSignature('DUAL'); //later on we will get sig info from cloud
            $this->caAddStatsItem('dual_use', $this->scanlist[$index_table[$index]]);
        }

        // we can now update verdicts in batch for those that we know
        //add entries to report, when needed

        foreach ($blackfiles as $filepath => $file_stat) {
            $this->vars->blackFiles[] = $file_stat['fi']->getIndex();
            $this->vars->blackFilesSig[] = [$file_stat['ras_sigid'] => $file_stat['sn'] ?? 'cld'];
            $this->scanner->AddResult($file_stat['fi'], $file_stat['fi']->getIndex(), $this->vars);
        }

        unset($white_raw, $black_raw, $injection_raw, $dual, $sha_list, $index_table);
    }

    /**
     * regex scan a single file, add entry to report if needed
     * @param $fileInfo
     * @param $i
     */
    private function _regexScan($fileInfo, $i, $vars)
    {
        $regex_res = $this->regexScan($fileInfo, $i, $vars);
        if (!is_array($regex_res)) {
            return;
        }

        list($result, $sigId, $snippet) = $regex_res;
        $fileInfo->setVerdict($result);
        $fileInfo->setScannedTs(time());
        if (
            $result !== RapidScanStorageRecord::RX_GOOD
            || $result !== RapidScanStorageRecord::RX_SKIPPED_SMART
            || $result !== RapidScanStorageRecord::RX_SKIPPED_DIE
        ) {
            $fileInfo->setSignature($sigId);
            $fileInfo->setSnippet($snippet);
        }
    }

    /**
     * regex scan batch of files.
     */
    private function doRegexScan($vars)
    {
        foreach ($this->scanlist as $i => $fileinfo) {
            if (
                !in_array($fileinfo->getVerdict(), [
                RapidScanStorageRecord::WHITE,
                RapidScanStorageRecord::WHITE_EXTENDED,
                RapidScanStorageRecord::BLACK,
                RapidScanStorageRecord::DUAL_USE
                ])
            ) {
                if (!$this->isSkipCA($fileinfo)) {
                    $this->caAddStatsItem(true, $fileinfo);
                }
                $this->_regexScan($fileinfo, $i, $vars);
                $fileinfo->cleanContentCache();
            }
        }
    }

    private function processScanList($vars)
    {
        $this->doCloudScan();
        $this->doRegexScan($vars);
        $this->writeNew();
        $this->scanlist = [];
    }

    private function scanFile($filename, $rescan, $i, $vars)
    {
        $rxgood_rescan = false;
        $file = new FileInfo($filename, $i, $vars->hashtable);

        if (!$file->file_exists()) {
            return false;
        }
        $file = RapidScanStorageRecord::fromFile($file);

        $old_value = $this->db->getOld($file->getKey());
        $old_scanned = 0;
        if ($old_value) {
            $old_value->setIndex($file->getIndex());
            $old_scanned = $old_value->getScannedTs();
            if ($file->getUpdatedTs() <= $old_scanned) {
                $file = $old_value;
                $file->setFilename($filename);
            }
        }

        if (
            $file->getVerdict() === RapidScanStorageRecord::UNKNOWN
            || $file->getVerdict() === RapidScanStorageRecord::CONFLICT
            || $file->getUpdatedTs() > $old_scanned
        ) {
            // these files have changed, or we know nothing about them, lets re-calculate sha2
            // and do full scan
            $file->calcSha2();
            $this->rsAddStatsItem(true, $file);
            $file->setVerdict(RapidScanStorageRecord::NEWFILE);
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() === RapidScanStorageRecord::BLACK) {
            $this->scanlist[$i] = $file;
            $this->rsAddStatsItem(true, $file);
        } elseif ($file->getVerdict() === RapidScanStorageRecord::DUAL_USE) {
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (
            $rescan === self::RESCAN_NONE
            && $file->getVerdict() === RapidScanStorageRecord::RX_MALWARE
        ) {
            //these files were detected as rx malware before, let's report them
            $sigId = $file->getSignature();

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                if (strtolower($file->getExtension()) === 'js') {
                    $vars->criticalJS[] = $i;
                    $vars->criticalJSFragment[] = $snippet;
                    $vars->criticalJSSig[] = $sigId;
                } else {
                    $vars->criticalPHP[] = $i;
                    $vars->criticalPHPFragment[] = $snippet;
                    $vars->criticalPHPSig[] = $sigId;
                }
                $this->scanner->AddResult($file, $i, $vars);
                $this->db->put($file);
                $this->rsAddStatsItem(false, $file);
            } else {
                $this->scanlist[$i] = $file;
                $this->rsAddStatsItem(true, $file);
            }
        } elseif (
            $rescan === self::RESCAN_NONE && AI_EXTRA_WARN
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS
        ) {
            //these files were detected as rx suspicious before, let's report them
            $sigId = $file->getSignature();

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                $vars->warningPHP[] = $i;
                $vars->warningPHPFragment[] = $snippet;
                $vars->warningPHPSig[] = $sigId;
                $this->scanner->AddResult($file, $i, $vars);
                $this->db->put($file);
                $this->rsAddStatsItem(false, $file);
            } else {
                $this->scanlist[$i] = $file;
                $this->rsAddStatsItem(true, $file);
            }
        } elseif (
            $rescan === self::RESCAN_NONE
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS_IGNORED
        ) {
            //these files were detected as rx suspicious_ignored before, let's report them
            $sigId = $file->getSignature();

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                $vars->suspiciousIgn[] = $i;
                $vars->suspiciousIgnFragment[] = $snippet;
                $vars->suspiciousIgnSig[] = $sigId;
                $this->scanner->AddResult($file, $i, $vars);
                $this->db->put($file);
                $this->rsAddStatsItem(false, $file);
            } else {
                $this->scanlist[$i] = $file;
                $this->rsAddStatsItem(true, $file);
            }
        } elseif (
            $rescan === self::RESCAN_NONE
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED
        ) {
            //these files were detected as rx suspicious_extended before, let's report them
            $vars->suspiciousExt[] = $i;
            $vars->suspiciousExtSig[] = 'SMW-ESUS-' . $file->getSignature();
            $vars->suspiciousExtFragment[] = $file->getSnippet();
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (
            (
                $rescan === self::RESCAN_ALL
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED,
                    RapidScanStorageRecord::RX_SUSPICIOUS_IGNORED,
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_MALWARE,
                    RapidScanStorageRecord::HEURISTIC
                ])
            )
            || (
                $rescan === self::RESCAN_SUSPICIOUS
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::RX_SUSPICIOUS_IGNORED,
                    RapidScanStorageRecord::HEURISTIC,
                    RapidScanStorageRecord::BLACK,
                    RapidScanStorageRecord::RX_MALWARE,
                ])
            )
            || (
                $this->freq !== false && $this->old_rescan_ts !== false
                && $rescan === self::RESCAN_SUSPICIOUS
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED
                ])
                && $old_scanned <= $this->old_rescan_ts
                && $rxgood_rescan = true
            )
        ) {
            //rescan all mode, all none white/black/dual listed files need to be re-scanned fully
            if ($rxgood_rescan) {
                $this->rescan_rx_good_count++;
            }
            $this->scanlist[$i] = $file;
            $this->rsAddStatsItem(true, $file);
        } elseif (
            defined('USE_HEURISTICS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) { //mode === RESCAN_NONE
            //these files were detected as HEURISTIC before, let's report them as malware
            $snippet = $file->getSnippet();
            $vars->criticalPHP[] = $i;
            $vars->criticalPHPFragment[] = $snippet;
            $vars->criticalPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (
            defined('USE_HEURISTICS_SUSPICIOUS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) {
            //these files were detected as HEURISTIC, let's report them as suspicious
            $snippet = $file->getSnippet();
            $vars->warningPHP[] = $i;
            $vars->warningPHPFragment[] = $snippet;
            $vars->warningPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (
            $file->getVerdict() === RapidScanStorageRecord::WHITE_EXTENDED
            && $file->getUpdatedTs() <= $old_scanned
        ) {
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED) {
            //these files were detected as rx suspicious_extended before, let's report them
            $vars->suspiciousExt[] = $i;
            $vars->suspiciousExtSig[] = 'SMW-ESUS-' . $file->getSignature();
            $vars->suspiciousExtFragment[] = $file->getSnippet();
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } else {
            //in theory -- we should have only white files here...
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        }

        if (count($this->scanlist) >= self::MAX_TO_SCAN) {
            // our scan list is big enough
            // let's flush db, and scan the list
            $this->db->flushBatch();
            $this->processScanList($vars);
        }

        if ($this->db->batch_count >= self::MAX_BATCH) {
            //we have added many entries to db, time to flush it
            $this->db->flushBatch();
            $this->processScanList($vars);
        }
        unset($file);
    }

    public function scan($files, $vars, $rescan = self::RESCAN_SUSPICIOUS)
    {
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        $i = 0;
        $this->cas_list = $this->cas_db->getList();

        foreach ($files as $filepath) {
            $counter = $this->counter + $i;
            $vars->totalFiles++;
            $this->processedFiles = $counter - $vars->totalFolder - count($this->scanlist);
            if (defined('CLS_PROGRESS')) {
                Progress::setCurrentFile($filepath);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($this->processedFiles);
            }
            $this->scanFile($filepath, $rescan, $counter, $vars);
            $i++;
        }

        if ($rescan == self::RESCAN_ALL) {
            $this->cas_db->delete();
            $this->cas_list = [];
            foreach ($this->vars->blackFiles as $blackfile) {
                $key = key($this->vars->blackFilesSig[$blackfile]);
                $this->cas_list[$key] = $this->vars->blackFilesSig[$blackfile][$key];
            }
            $this->cas_db->putList($this->cas_list);
        }

        //let's flush db again
        $this->db->flushBatch();

        //process whatever is left in our scan list
        if (count($this->scanlist) > 0) {
            $this->processScanList($vars);
        }

        $this->whitelistening();

        //close databases and rename new into 'current'
        $this->db->finish();
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_DONE);
        }
    }

    private function whitelistening()
    {
        // whitelist
        $snum = 0;

        if (!isset($this->vars->structure['crc']) && !isset($this->vars->structure['sha256'])) {
            return;
        }

        $vars = $this->vars;

        $list = $this->scanner->check_whitelist($vars->structure['crc'] ?? [], $snum);
        $list_sha256 = $this->scanner->check_whitelist_sha256($vars->structure['sha256'] ?? []);
        $keys = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP',
            'suspiciousExt',
            'blackFiles'
        ];
        foreach ($keys as $p) {
            if (empty($vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';
            if ($p === 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $vars->{$p}[$i];
                if ($vars->structure['crc'][$id] !== 0 && in_array($vars->structure['crc'][$id], $list)) {
                    if ($p === 'blackFiles') {
                        $this->rescan_count++;
                    }
                    $rec = RapidScanStorageRecord::fromFile($vars->structure['n'][$id], $id);
                    $rec->calcSha2();
                    $rec->setVerdict(RapidScanStorageRecord::RX_GOOD);
                    $this->db->put($rec);
                    unset($vars->{$p}[$i], $vars->{$p_Sig}[$i], $vars->{$p_Fragment}[$i]);
                } elseif ($vars->structure['sha256'][$id] !== 0 && in_array($vars->structure['sha256'][$id], $list_sha256)) {
                    $rec = RapidScanStorageRecord::fromFile($vars->structure['n'][$id], $id);
                    $rec->calcSha2();
                    $rec->setVerdict(RapidScanStorageRecord::RX_SUSPICIOUS_IGNORED);
                    $this->db->put($rec);
                    $vars->suspiciousIgn[] = $vars->{$p}[$i];
                    if (isset($vars->{$p_Fragment}[$i])) {
                        $vars->suspiciousIgnFragment[] = $vars->{$p_Fragment}[$i];
                    }
                    if (isset($vars->{$p_Sig}[$i])) {
                        $vars->suspiciousIgnSig[] = $vars->{$p_Sig}[$i];
                    }
                    unset($vars->{$p}[$i], $vars->{$p_Sig}[$i], $vars->{$p_Fragment}[$i]);
                }
            }

            $vars->{$p}             = array_values($vars->{$p});
            if (!empty($vars->{$p_Fragment})) {
                $vars->{$p_Fragment} = array_values($vars->{$p_Fragment});
            }
            if (!empty($vars->{$p_Sig})) {
                $vars->{$p_Sig} = array_values($vars->{$p_Sig});
            }
        }
    }

    /**
     * Check if the file should be skipped from cloud assisted scan.
     *
     * @param \RapidScanStorageRecord $fileinfo
     *
     * @return bool True if the file should be skipped from cloud assisted scan, false otherwise.
     */
    private function isSkipCA($fileinfo)
    {
        if (substr($fileinfo->getFilename(), -1) === DIR_SEPARATOR) {
            return true;
        }

        if ($fileinfo->getSize() < 0) {
            return true;
        }

        if ($fileinfo->isCron()) {
            return true;
        }

        if (
            defined('CLOUDSCAN_MAX_ELF_SIZE') && CLOUDSCAN_MAX_ELF_SIZE > 0
            && $fileinfo->isBinary()
            && $fileinfo->getSize() <= CLOUDSCAN_MAX_ELF_SIZE
        ) {
            // binary (ELF files) have a different size limit
            return false;
        }

        if ((MAX_SIZE_TO_CLOUDSCAN > 0 && $fileinfo->getSize() > MAX_SIZE_TO_CLOUDSCAN)) {
            return true;
        }

        return false;
    }

    private function rsAddStatsItem(bool $rescan, RapidScanStorageRecord $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            $verdict = RapidScanStorageRecord::getVerdictNameFromValue($file->getVerdict());
            $verdict .= ($rescan ? '-RESCAN' : '');
            DecisionMakingStats::addStatsItem('rapid_scan', $verdict, $file);
        }
    }

    private function caAddStatsItem($verdict, RapidScanStorageRecord $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::VERDICT_OK;
            }
            DecisionMakingStats::addStatsItem('cloud_assisted_scan', $verdict, $file);
        }
    }
}


/**
 * DbFolderSpecification class file.
 */

/**
 * Class DbFolderSpecification.
 *
 * It can be use for checking requirements for a folder that is used for storing a RapidScan DB.
 */
class DbFolderSpecification
{
    /**
     * Check whether a particular folder satisfies requirements.
     *
     * @param string $folder
     * @return bool
     */
    public function satisfiedBy($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        } elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (
            ($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0020)                       // group without r
            && !($perms & 0x0010)                       // group without w
            && (!($perms & 0x0008) || ($perms & 0x0400))// group without x
            && !($perms & 0x0004)                       // other without r
            && !($perms & 0x0002)                       // other without w
            && (!($perms & 0x0001) || ($perms & 0x0200))// other without x
        ) {
            return true;
        }
        return false;
    }
}


class LevelDBWrap
{
    private $db;

    public function __construct(string $dir, array $options = null)
    {
        if ($options) {
            $this->db = new LevelDB($dir, $options);
        } else {
            $this->db = new LevelDB($dir);
        }
    }

    public function get(string $key)
    {
        return $this->db->get($key);
    }

    public function put(string $key, string $value)
    {
        return $this->db->put($key, $value);
    }

    public function write($batch)
    {
        return $this->db->write($batch);
    }

    public function delete(string $key)
    {
        return $this->db->delete($key);
    }

    public function getIterator()
    {
        return $this->db->getIterator();
    }

    public function close()
    {
        if (version_compare(phpversion('leveldb'), '0.3.0', '<')) {
            $this->db->close();
        }

        $this->db = null;
    }
}


/**
 * CriticalFileSpecification class file.
 */

/**
 * Class CriticalFileSpecification.
 */
class CriticalFileSpecification
{
    /**
     * @var array list of extension
     */
    private $extensions = [
        'php',
        'htaccess',
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml',
        'susp',
        'suspected',
        'infected',
        'vir',
        'ico',
        'js',
        'json',
        'com',
        ''
    ];

    private $js_extensions = [
        'js',
        'json',
        'html',
        'htm',
        'suspicious'
    ];

    private $phish_extensions = [
        'js',
        'html',
        'htm',
        'suspected',
        'php',
        'phtml',
        'pht',
        'php7'
    ];

    private $error = 0;

    private $critical_content = '~\bcurl_exec\b|\blmp_block_info\b\$\w{1,10}\s*\x28|\bmail\s*\x28|\bfputs\b|EICAR-STANDARD-ANTIVIRUS-TEST-FILE|bank|(?:(?:^#!/us|\bch))r\b|(?:^#!/bi|(?:(?:sqliteCreateF|create_f))unctio|(?:(?:fsock|\bp))ope)n|(?:<\s*htm|(?:(?:setInter|\be))va)l\b|(?:(?:\b(?:cop|rin)|<\s*bod))y\b|(?:setTimeou|accoun|(?:(?:ob_sta|asse))r|<(?:(?:objec|scrip)))t|(?:\bmove_)|(?:\bfwrit|reg_replac|(?:(?:base64_dec|fromCharC))od|<(?:(?:\s*titl|ifram)))e|(?:(?:<\s*for|\bsyste))m[\s\x28]|(?:(?:call_user_fun|\bexe))c|(?:\barray|\bmysql|file_(?:(?:ge|pu))t)_|(?:(?:RewriteCon|<embe))d|(?:(?:navigator|document|location|\$this|window))\.|^\s*<\?(?:(?:php|=))|\$(?:(?:(?:GLOBAL|_FILE))S|_(?:SERVER|(?:GE|(?:(?:REQUE|PO))S)T))~smiS';

    public function __construct()
    {
        $this->extensions = array_flip(array_merge($this->extensions, $this->js_extensions, $this->phish_extensions));
    }

    /**
     * Check whether a particular file with specified extension is critical.
     *
     * @param string $ext
     * @param string $type
     * @return bool
     */
    public function satisfiedBy($ext, $type)
    {
        return isset($this->extensions[$ext]);
    }

    /**
     * Check whether a particular content is critical.
     *
     * @param string $content
     * @param string $type
     * @return bool
     */
    public function satisfiedByContent($content, $type)
    {
        if (HyperScan::canMatchCritical()) {
            return HyperScan::matchCritical($content);
        }
        $time = AibolitHelpers::currentTime();
        $res = preg_match($this->critical_content, $content, $l_Found) ? true : false;
        if ($this->error === 0) {
            $this->error = preg_last_error();
        }
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    public function getError()
    {
        return $this->error;
    }
}


class Zip
{
    const ERRORS = [
        ZipArchive::ER_EXISTS => 'File already exists.',
        ZipArchive::ER_INCONS => 'Zip archive inconsistent',
        ZipArchive::ER_INVAL  => 'Invalid argument.',
        ZipArchive::ER_MEMORY => 'Malloc failure .',
        ZipArchive::ER_NOENT  => 'No such file.',
        ZipArchive::ER_NOZIP  => 'Not a zip archive .',
        ZipArchive::ER_OPEN   => 'Can\'t open file.',
        ZipArchive::ER_READ   => 'Read error.',
        ZipArchive::ER_SEEK   => 'Seek error.'
    ];

    /**
     * @var ZipArchive
     */
    public $archive;
    public $filename;
    public $error_code;
    public $error_message;

    /**
     * @param string $filename
     */
    public function __construct(string $filename)
    {
        $this->filename = $filename;
    }

    /**
     * @return bool|false
     */
    public function open(): bool
    {
        $archive = new ZipArchive();
        $res = $archive->open($this->filename);
        if ($res !== true) {
            $this->error_message = self::ERRORS[$res] ?? 'Zip error';
            $this->error_code    = $res;
            return false;
        }

        $this->archive = $archive;

        return true;
    }

    public function close()
    {
        $this->archive->close();
    }

    /**
     * @param int $index
     * @return array|false
     */
    public function getFileInfo(int $index)
    {
        return $this->archive->statIndex($index);
    }


    /**
     * @param int $index
     * @return false|string
     */
    public function getFileContent(int $index)
    {
        return $this->archive->getFromIndex($index);
    }
}


if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Helpers
{
    const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis';
    const GOTO_MAX_HOPS        = 12000;

    /*************************************************************************************************************/
    /*                                Frequently used functions for deobfuscators                                */
    /*************************************************************************************************************/

    /**
     * This method normalizes string, converts characters to a readable form and some other things.
     * Also, the method can save the number of characters in the string by adding spaces if the number of characters has decreased.
     *
     * @param $string
     * @param false $save_length
     * @return string
     */
    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function ($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function ($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function ($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    /**
     * Code formatting. Not used in procu2 and ai-bolit
     *
     * @param $source
     * @return string
     */
    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_GOTO:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:
                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    /**
     * Replace create_function(...) with function(){}
     *
     * @param $str
     * @return string
     */
    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        $str = stripcslashes($str);
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] === '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } elseif ($str[$i] === ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    /**
     * Calculate functions and simple mathematical expressions in code.
     * This function is applicable for simple expressions, if they are complex, then it may produce an incorrect result, in this case use MathCalc.
     *
     * @param $expr
     * @return string
     */
    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        $expr = str_replace([' ', "\r", "\n", "\t"], '', $expr);
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]((int)$expr_arr[2]);
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x") !== false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                } elseif ($expr_arg[0] === '0' && (strlen($expr_arg) > 1) && (strpos($expr_arg, '.') === false)) {
                    $expr = str_replace($expr_arg, octdec($expr_arg), $expr);
                    $expr_arg = octdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = (float)$expr_arr[1][$pos] + (float)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    /**
     * Get code inside eval()
     *
     * @param $string
     * @return string
     */
    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    /**
     * Method for unwrapping goto constructs.
     *
     * @param string $content
     * @return string
     */
    public static function unwrapGoto(&$content): string
    {
        $processed = [];
        if (!preg_match('~\$[^\[\(\)\]=\+\-]{1,20}~msi', $content)) {
            return $content;
        }
        $label_num = 0;
        $label_name = 'tmp_spec_label';

        $replaceVars = [];

        $orig = $content;

        $content = preg_replace_callback('~\bgoto ([^\w;]+);~msi', function ($m) use (&$replaceVars, &$label_num, $label_name) {
            $label_num++;
            $newName = $label_name . $label_num;
            $replaceVars[] = [$m[1], $newName];
            return 'goto ' . $newName . '; ';
        }, $content);

        if (!empty($replaceVars)) {
            foreach ($replaceVars as $replaceVar) {
                $content = str_replace($replaceVar[0], $replaceVar[1], $content);
            }
        }

        $content = preg_replace_callback('~\b(if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*)(goto\s*(?:\w+);)~msi', function ($m) {
            return $m[1] . ' { ' . $m[3] . ' } ';
        }, $content);

        preg_match_all('~\bgoto\s?(\w+);~msi', $content, $gotoMatches, PREG_SET_ORDER);
        $gotoCount = count($gotoMatches);
        if ($gotoCount === 0 || $gotoCount > self::GOTO_MAX_HOPS) {
            return $content;
        }

        $label_num = 0;
        $label_name = 'tmp_label';

        $res      = '';
        $hops     = self::GOTO_MAX_HOPS;
        if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $content, $m)) {
            $res .= trim($m[1]) . PHP_EOL;
        }

        if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $content, $m, PREG_OFFSET_CAPTURE)) {
            $orig = substr($content, 0, $m[1][1]);
            $content = str_replace('<?php ' . $orig, '', $content);
        }

        $content = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function ($m) use (&$label_num, $label_name) {
            $label_num++;
            return $label_name . $label_num . ': ' . $m[0];
        }, $content);

        //try to match all if's conditions it can be if or loop
        preg_match_all('~\b(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~msi', $content, $conds, PREG_SET_ORDER);
        foreach ($conds as $cond) {
            preg_match('~\b\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi', $content, $while);
            preg_match('~\b' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi', $content, $do);
            preg_match('~\b(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi', $content, $m);
            preg_match('~\b(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi', $content, $ifelse);
            preg_match('~\b(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi', $content, $m);
            preg_match('~\b(\w+):[^:;]+[:;]\s*goto\s*(' . $m[1] . ');~msi', $content, $m);
            preg_match('~\b(\w+):\s*' . $ifelse[2] . ':\s*goto\s*(\w+);~msi', $content, $m);
            if (!empty($m) && ($m[2] === $cond[1])) { // if goto in last match point to this if statement - we have a loop, otherwise - if-else
                $ifelse = [];
            }
            if (preg_match('~\b\w+:\s*goto\s*' . $while[1] . ';\s*goto\s*\w+;~msi', $content) === 0) {
                $while = [];
            }

            if (empty($do) && empty($ifelse)) { //reverse conditions except do while & if else
                if ($cond[2][1] === '!') {
                    $cond[2] = substr_replace($cond[2], '', 1, 1);
                } else {
                    $cond[2] = '(!' . $cond[2] . ')';
                }
            }

            if (!empty($ifelse)) {
                $content = str_replace(
                    $cond[0],
                    $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';',
                    $content
                );
                preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $content, $m2);
                $content = str_replace(
                    $m2[0],
                    $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';',
                    $content
                );
            } elseif (!empty($do)) {
                preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $content, $match);
                $tmp = $cond[0];
                $content = str_replace(
                    $match[0],
                    $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ',
                    $content
                );
                $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';';
                $content = str_replace($tmp, $cond[0], $content);
            } else {
                if (!empty($while)) { //loop change if to while, reverse condition, exchange labels; in last goto $tmp_labelN
                    preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $content, $match);
                    $content = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $content);
                    $content = str_replace(
                        $cond[0],
                        $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';',
                        $content
                    );
                } else { //just if - need to reverse condition and exchange labels; in last need goto to $tmp_labelN
                    $tmp = $cond[0];
                    $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';';
                    $content = str_replace($tmp, $cond[0], $content);
                    preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $content, $match);
                    $content = str_replace(
                        $match[0],
                        $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3],
                        $content
                    );
                }
            }
        }

        $nextGotoPos = 0;
        while (
            $nextGotoPos !== false
            && $hops-- > 0
            && preg_match('~goto\s(\w+);~msi', substr($content, $nextGotoPos), $gotoNameMatch, PREG_OFFSET_CAPTURE)
        ) {
            $gotoNameStr    = $gotoNameMatch[1][0] . ':';
            $gotoNameStrLen = strlen($gotoNameStr);
            $gotoPos        = strpos($content, $gotoNameStr);
            $nextGotoPos    = strpos($content, 'goto ', $gotoPos);
            $cutUntilPos    = ($nextGotoPos - $gotoPos) - $gotoNameStrLen;
            if ($gotoPos === false) {
                return $orig;
            }
            if (in_array($gotoNameStr, $processed)) {
                $nextGotoPos    = strpos($content, 'goto ', strpos($content, $gotoNameMatch[0][0]) + 1);
                continue;
            }
            $processed[] = $gotoNameStr;

            if ($nextGotoPos) {
                $substr = substr($content, $gotoPos + $gotoNameStrLen, $cutUntilPos);
            } else {
                $substr = substr($content, $gotoPos + $gotoNameStrLen);
            }

            $piece = trim($substr);
            $piece === '' ?: $res .= $piece . ' ';
        }
        $res = preg_replace('~\w{1,20}:~msi', '', $res);
        $res = stripcslashes($res);
        if (strpos($res, 'hex2bin("') !== false) {
            $res = preg_replace_callback('~hex2bin\((?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . hex2bin($m[1]) . '\'';
            }, $res);
        }
        if (strpos($res, 'pack("H') !== false) {
            $res = preg_replace_callback('~pack\("([^"]+)",\s*(?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . pack($m[1], $m[2]) . '\'';
            }, $res);
        }
        return $res;
    }

    /**
     * Get text inside quotes (' or ")
     *
     * @param $string
     * @return string
     */
    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        if (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        return '';
    }

    /**
     * Get the value in quotes, the parity of the quotes is not checked.
     *
     * @param $string
     * @return array
     */
    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    /**
     * Apply some formatting rules to the code
     *
     * @param $string
     * @return string
     */
    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    /**
     * Parse array values of string and return array
     *
     * @param $string
     * @return array
     */
    public static function prepareArray($string)
    {
        $string = rtrim($string, ',');
        $array_string = Helpers::normalize($string);
        $list_str = explode(',', $array_string);
        $result = [];
        foreach ($list_str as $element) {
            $key = null;
            $value = $element;
            if (strpos($element, '=>') !== false) {
                list($key, $value) = explode('=>', $element);
            }
            $key = is_null($key) ? $key : trim($key, '\'"');
            $value = is_null($value) ? $value : trim($value, '\'"');

            if (is_null($key)) {
                $result[] = $value;
            } else {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    /**
     * Detect text encoding
     *
     * @param $text
     * @return false|string
     */
    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    /**
     * Function safety check
     *
     * @param $func Function name
     * @return bool
     */
    public static function isSafeFunc($func)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzdecode', 'gzuncompress', 'strrev', 'strlen',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes', 'chr',
            'htmlspecialchars_decode', 'convert_uudecode','pack', 'ord',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin',
            'trim', 'ltrim', 'rtrim', 'helpers::unserialize', 'utf8_encode',
        ];

        return in_array(strtolower($func), $safeFuncs);
    }

    /**
     * Convert the function to a safe one and return a boolean result was it possible to do it
     *
     * @param $func
     * @return bool
     */
    public static function convertToSafeFunc(&$func)
    {
        $replacedFuncs = [
            'unserialize' => 'Helpers::unserialize',
        ];

        $lowerFunc = strtolower($func);

        if (isset($replacedFuncs[$lowerFunc])) {
            $func = $replacedFuncs[$lowerFunc];
        }

        return self::isSafeFunc($func);
    }

    /**
     * Calculates a simple mathematical construct
     *
     * @param $task
     * @return string
     */
    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                list($subSearch, $number_1, $operator, $number_2) = $subMatch;
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    /**
     * From the content located in the input variable $content, get the values of the variables that can be calculated using the dictionary ($dictionary).
     * For example:
     * $dictionary: 'adnmpytr%uiqchsw_6jfoxkebzgl4v'
     * $content: $L1=$L1{8}.$L1{12}
     * return: ['$L1' => '%c']
     *
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content): array
    {
        $vars = [];
        preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all(
                '~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i],
                $varMatches
            );
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }
        return $vars;
    }

    /**
     * From the content located in the input variable $content, calculate the variable values of which are concatenated from the variables of the dictionaries located in $vars.
     * Dictionary variables must already be in $vars when the function is run.
     *
     * @param array  $vars
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionaryDynamically(array &$vars = [], string $content = ''): array
    {
        preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'\])?(\.)?\s?\.?=\s?((?:\$(?:GLOBALS\[\')?\w+(?:\'\])?[{\[]?\d*[}\]]?\s?\.?\s?)+);~msi', $content, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'])?[{\[]?(\d+)?[}\]]?~msi', $varsMatch[3], $subVarsMatches, PREG_SET_ORDER);
            $concat = '';
            $varsMatch[1] = str_replace('GLOBALS[\'', '', $varsMatch[1]);
            foreach ($subVarsMatches as $subVarsMatch) {
                $subVarsMatch[1] = str_replace('GLOBALS[\'', '', $subVarsMatch[1]);
                if (isset($subVarsMatch[2])) {
                    $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? '';
                } elseif ($varsMatch[1] !== $subVarsMatch[1]) {
                    $concat .= $vars[$subVarsMatch[1]];
                }
            }
            if (isset($vars[$varsMatch[1]])) {
                $vars[$varsMatch[1]] .= $concat;
            } else {
                $vars[$varsMatch[1]] = $concat;
            }
        }
        return $vars;
    }

    /**
     * Concatenate content of variables.
     * Examples: CheckDeobfuscationHelpersTest::testConcatVariableValues
     *
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str): string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars);
        $strVar = '';
        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }
        return $strVar;
    }

    /**
     * Concatenate simple strings inside which there may be chunks of PHP code
     * Examples: CheckDeobfuscationHelpersTest::testConcatStr
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str): string
    {
        preg_match_all('~(\.?)\s?[\'"(]([\w=\+/%&();]+)[)\'"]\s?~msi', $str, $concatStrings);
        $strVar = '';
        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }
        return $strVar;
    }

    /**
     * Concats simple strings without variable in content globally
     * Examples: CheckDeobfuscationHelpersTest::concatStringsInContent()
     *
     * @param string $str
     * @return string
     */
    public static function concatStringsInContent($str): string
    {
        $strVar = preg_replace_callback('~(?:[\'"(][\w=();]*[)\'"]\s?\.?\s?){2,}~msi', static function ($m) {
            return '\'' . self::concatStr($m[0]) . '\'';
        }, $str);
        return $strVar;
    }

    /**
     * Replace the elements of the dictionary array with its values.
     * Examples: CheckDeobfuscationHelpersTest::testReplaceVarsFromDictionary()
     *
     * @param string $dictionaryVar
     * @param array $dictionaryValue
     * @param string $str
     * @param bool $quote
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str, $quote = true): string
    {
        $result = $str;
        $result = preg_replace_callback(
            '~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"(]?([\da-fx]+)[\'")]?[\]}]\s?(\.)?\s?)~msi',
            function ($match) use ($dictionaryValue, $dictionaryVar, $quote) {
                if (substr($match[2], 0, 2) === '0x') {
                    $match[2] = hexdec($match[2]);
                }
                if ($match[1] !== $dictionaryVar || !isset($dictionaryValue[(int)$match[2]])) {
                    return $match[0];
                }
                $lastChar = $match[3] ?? '';
                $value = $dictionaryValue[(int)$match[2]];
                $value = str_replace(['\'', '.'], ['@@quote@@', '@@dot@@'], $value);
                $value = $quote ? '\'' . $value . '\'' : $value;
                return $value . $lastChar;
            },
            $result
        );
        $result = str_replace('\'.\'', '', $result);
        $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', '.'], $result);
        return $result;
    }

    /**
     * @param string $arrayName
     * @param array  $array
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string
    {
        $result = preg_replace_callback(
            '~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi',
            function ($match) use ($array, $arrayName) {
                if ($match[1] !== $arrayName) {
                    return $match[0];
                }
                return $array[$match[2]] ?? $match[0];
            },
            $str
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     * @return array
     */
    public static function collectVars(&$str, $trimQuote = '"', &$vars = [], $remove = false): array
    {
        if (!is_string($str)) {
            return $vars;
        }
        if (is_string($trimQuote)) {
            $tmp = $trimQuote;
            $trimQuote = [];
            $trimQuote[] = $tmp;
        }

        preg_match_all('~(\$(?:GLOBALS\[[\'"])?\w+)(?:[\'"]\])?\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $varName = $match;
            $varName = str_replace(['GLOBALS[\'', 'GLOBALS["'], '', $varName);
            $varValue = $matches[3][$index];
            foreach ($trimQuote as $quote) {
                $varValue = str_replace("$quote.$quote", '', $varValue);
                $varValue = trim($varValue, $quote);
            }
            $varValue = stripcslashes($varValue);
            if ($matches[2][$index] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }
        }
        if ($remove) {
            $str = str_replace($matches[0], '', $str);
        }

        return $vars;
    }

    /**
     * Collects concated variable vars or str from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     */
    public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array
    {
        // @phpstan-ignore-next-line
        if (!isset($vars)) {
            $vars = [];
        }
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $varName = $match[1];
            $varValue = '';

            preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER);
            foreach ($varsMatch as $varMatch) {
                if ($varMatch[1] !== '') {
                    $varValue .= $varMatch[1];
                } else {
                    $varValue .= $vars[$varMatch[2]] ?? '';
                }

                $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue);
                $varValue = stripcslashes(trim($varValue, $trimQuote));
            }

            if ($match[2] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }

            if ($remove) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"'): string
    {
        preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array
    {
        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=\*]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"])?(?:,\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $func = $match[2];
            $param1 = $match[3];
            $param2 = $match[4];
            $param3 = $match[5];

            if (self::convertToSafeFunc($func)) {
                if ($func === 'str_replace') {
                    $ret = @self::executeWrapper($func, [$param1, $param2, $param3]);
                } elseif (in_array($func, ['trim', 'ltrim', 'rtrim', 'pack'])) {
                    $ret = @self::executeWrapper($func, [$param1, $param2]);
                } else {
                    $ret = @self::executeWrapper($func, [$param1]);
                }
            }
            $vars[$match[1]] = self::convertToSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret);

            if ($delete) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects chr wrapped vars (concated or not) with one arg from str
     * ex. var1 = chr(123+323); var2 = chr(122+5432); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectChrVars(string $str, &$vars = []): array
    {
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\s?\(\d+[-+*//\s]+\d+\)[\s.]*)+);~msi',
            $str,
            $chrVars,
            PREG_SET_ORDER
        );

        foreach ($chrVars as $varStr) {
            $func = MathCalc::calcRawString($varStr[2]);
            preg_match_all('~\d+~msi', $func, $nums, PREG_SET_ORDER);
            $func = '';
            foreach ($nums as $num) {
                $func .= chr($num[0]);
            }
            $vars[$varStr[1]] = $func;
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false): string
    {
        $result = $str;

        uksort($vars, static function ($a, $b) {
            return strlen($b) <=> strlen($a);
        });
        foreach ($vars as $name => $value) {
            $sub_name = substr($name, 1);
            $result = preg_replace_callback(
                '~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi',
                function ($m) use ($value, $sub_name, $toStr) {
                    if ($m[2] !== $sub_name) {
                        return $m[0];
                    }
                    if ($toStr) {
                        return $m[1] . "'$value'";
                    }

                    return $m[1] . $value;
                },
                $result
            );

            if (!is_string($value)) {
                continue;
            }
            $result = str_replace(
                ['{' . $name . '}', $name . '('],
                [$value, trim($value, '\'"') . '('],
                $result
            );

            if (!$isFunc && !$toStr) {
                $result = str_replace($name, $value, $result);
            } elseif ($toStr) {
                $result = str_replace($name, "'$value'", $result);
            }
        }

        return $result;
    }

    /**
     * Removes duplicated string variables after replacing
     *
     * @param string $str
     *
     * @return string
     */
    public static function removeDuplicatedStrVars($str): string
    {
        return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi', '', $str);
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        array_walk($chars, static function (&$x) {
            $x = "'$x'";
        });
        $parts = explode(';', $str);
        foreach ($parts as &$part) {
            $vals = explode('=', $part);
            $part = str_replace($vals[1], strtr($vals[1], $chars), $part);
        }
        $str = implode(';', $parts);
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    /**
     * Expand base64decode() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceBase64Decode($str, $quote = '\'')
    {
        $hangs = 10;
        while (preg_match(self::REGEXP_BASE64_DECODE, $str) && $hangs--) {
            $str = preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) {
                if (substr($m[1], 0, 2) === '\x') {
                    $m[1] = stripcslashes($m[1]);
                }
                return $quote . base64_decode($m[1]) . $quote;
            }, $str);
        }
        return $str;
    }

    /**
     * Expand hex2bin() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceHex2Bin($str, $quote = '\'')
    {
        return preg_replace_callback('~hex2bin\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~msi', static function ($m) use ($quote) {
            return $quote . hex2bin($m[1]) . $quote;
        }, $str);
    }

    /**
     * Calc min(), max() and round().
     * This function can be used with simple constructions, if they are complex, then it is better to use a separate MathCalc class.
     *
     * @param string $string
     * @param int $max_iterations
     * @return string
     */
    public static function replaceMinMaxRound($string, $max_iterations = 15)
    {
        $i = 0;
        $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_multi_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi';
        while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_single_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_brackets, ['Helpers','calc'], $string);
            $i++;
        }

        return $string;
    }

    /**
     * Calc XOR with key
     *
     * @param string $encrypted
     * @param string $key
     * @return string
     */
    public static function xorWithKey($encrypted, $key)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax;) {
            for ($j = 0; $j < strlen($key) && $i < strlen($encrypted); $j++, $i++) {
                $res .= $encrypted[$i] ^ $key[$j];
            }
        }
        return $res;
    }

    /**
     * Calc XOR when char xored with previous char
     *
     * @param string $encrypted
     * @return string
     */
    public static function xorWithPrevChar($encrypted)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; $i++) {
            $num = $encrypted[$i];
            $res .= $encrypted[++$i] ^ $num;
        }
        return $res;
    }

    /**
     * Similar to the native PHP function unserialize(), but it is safe as it only supports simple data types.
     *
     * @param string $string
     * @return array|bool|float|int|string|null
     */
    public static function unserialize(&$string)
    {
        $type = substr($string, 0, 2);
        $string = substr($string, 2);
        switch ($type) {
            case 'N;':
                return null;
            case 'b:':
                list($ret, $string) = explode(';', $string, 2);
                return (bool)(int)$ret;
            case 'i:':
                list($ret, $string) = explode(';', $string, 2);
                return (int)$ret;
            case 'd:':
                list($ret, $string) = explode(';', $string, 2);
                return (float)$ret;
            case 's:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) {
                    return '';
                }
                $ret = substr($string, 1, $length);
                $string = substr($string, $length + 3);
                return $ret;
            case 'a:':
                $ret = [];
                list($length, $string) = explode(':', $string, 2);
                if ($string[0] !== '{') {
                    return '';
                }
                $length = (int) $length;
                $string = substr($string, 1);
                for ($i = 0; $i < $length; $i++) {
                    $ret[self::unserialize($string)] = self::unserialize($string);
                }
                if ($string === '') {
                    return $ret;
                }
                $end = substr($string, 0, 2);
                if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') {
                    return '';
                }
                $string = substr($string, 2);
                return $ret;
            case 'O:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                $string = substr($string, $length + 3);
                list($length, $string) = explode(':', $string, 2);
                $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string);
                return '';
            default:
                return '';
        }
    }

    /**
     * Post processing after deobfuscation
     *
     * @param string $deobfuscated
     * @return string
     */
    public static function postProcess($deobfuscated): string
    {
        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($matches) use ($match) {
                if ($matches[1] !== $match[1]) {
                    return $matches[0];
                }
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        if (strpos($deobfuscated, '${$') !== false) {
            preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $matches);
            preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
            $replace_to = [];
            foreach ($matches[1] as $k => $match) {
                $index = array_search($match, $matches2[1]);
                if ($index !== false) {
                    $replace_to[] = '$' . $matches2[2][$index];
                } else {
                    unset($matches[0][$k]);
                }
            }
            if (!empty($replace_to)) {
                $deobfuscated = str_replace($matches[0], $replace_to, $deobfuscated);
            }
        }

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }
        return $deobfuscated;
    }

    /*************************************************************************************************************/
    /*                                Helper functions for individual obfuscators                                */
    /*************************************************************************************************************/

    /**
     * @param $a
     * @param $b
     *
     * @return string
     */
    public static function decodefuncDictVars($a, $b)
    {
        $c = preg_split("//", $a, -1, PREG_SPLIT_NO_EMPTY);
        foreach ($c as $d => $e) {
            $c[$d] = chr(ord($e) + $b);
        }
        $res = implode("", $c);

        return $res;
    }

    /**
     * @param $string
     * @param $amount
     *
     * @return string
     */
    public static function rotencode($string, $amount)
    {
        $key = substr($string, 0, 1);
        if (strlen($string) == 1) {
            return chr(ord($key) + $amount);
        } else {
            return chr(ord($key) + $amount) . self::rotencode(
                substr($string, 1, strlen($string) - 1),
                $amount
            );
        }
    }

    /**
     * @param string $data
     * @param string $key
     *
     * @return string
     */
    public static function decodeEvalFileContentBySize(string $data, string $key): string
    {
        $res = '';
        $key = md5($key) . md5($key . $key);
        $key_len = strlen($key);
        $data_len = strlen($data);
        for ($i = 0; $i < $data_len; $i++) {
            $res .= chr(ord($data[$i]) ^ ord($key[$i % $key_len]));
        }

        return $res;
    }

    /**
     * @param string $key
     * @param string $data
     *
     * @return string
     */
    public static function decodeFuncVars(string $key, string $data): string
    {
        $hakfku = $data;
        $keyLen = strlen($key);
        $dataLen = strlen($hakfku);
        $res = "";
        for ($i = 0; $i < $dataLen;) {
            for ($j = 0; ($j < $keyLen && $i < $dataLen); $j++, $i++) {
                $res .= $hakfku[$i] ^ $key[$j];
            }
        }

        return $res;
    }

    public static function dictionarySampleDecode($string)
    {
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, -7);
        $str3 = substr($string, -5);
        return gzinflate(base64_decode($str1 . $str2 . $str3));
    }

    public static function dictionarySampleDecode2($string)
    {
        $last = substr($string, -2);
        $arr = str_split($string);
        $result = '';
        for ($i = 0; $i < count($arr) - 2; $i = $i + 2) {
            $result .= $arr[$i + 1] . $arr[$i];
        }
        $result .= $last;
        return $result;
    }

    public static function codelock_dec($codelock_v)
    {
        switch ($codelock_v) {
            case "A":
                $dv = 0;
                break;
            case "B":
                $dv = 1;
                break;
            case "C":
                $dv = 2;
                break;
            case "D":
                $dv = 3;
                break;
            case "E":
                $dv = 4;
                break;
            case "F":
                $dv = 5;
                break;
            case "G":
                $dv = 6;
                break;
            case "H":
                $dv = 7;
                break;
            case "I":
                $dv = 8;
                break;
            case "J":
                $dv = 9;
                break;
            case "K":
                $dv = 10;
                break;
            case "L":
                $dv = 11;
                break;
            case "M":
                $dv = 12;
                break;
            case "N":
                $dv = 13;
                break;
            case "O":
                $dv = 14;
                break;
            case "P":
                $dv = 15;
                break;
            case "Q":
                $dv = 16;
                break;
            case "R":
                $dv = 17;
                break;
            case "S":
                $dv = 18;
                break;
            case "T":
                $dv = 19;
                break;
            case "U":
                $dv = 20;
                break;
            case "V":
                $dv = 21;
                break;
            case "W":
                $dv = 22;
                break;
            case "X":
                $dv = 23;
                break;
            case "Y":
                $dv = 24;
                break;
            case "Z":
                $dv = 25;
                break;
            case "a":
                $dv = 26;
                break;
            case "b":
                $dv = 27;
                break;
            case "c":
                $dv = 28;
                break;
            case "d":
                $dv = 29;
                break;
            case "e":
                $dv = 30;
                break;
            case "f":
                $dv = 31;
                break;
            case "g":
                $dv = 32;
                break;
            case "h":
                $dv = 33;
                break;
            case "i":
                $dv = 34;
                break;
            case "j":
                $dv = 35;
                break;
            case "k":
                $dv = 36;
                break;
            case "l":
                $dv = 37;
                break;
            case "m":
                $dv = 38;
                break;
            case "n":
                $dv = 39;
                break;
            case "o":
                $dv = 40;
                break;
            case "p":
                $dv = 41;
                break;
            case "q":
                $dv = 42;
                break;
            case "r":
                $dv = 43;
                break;
            case "s":
                $dv = 44;
                break;
            case "t":
                $dv = 45;
                break;
            case "u":
                $dv = 46;
                break;
            case "v":
                $dv = 47;
                break;
            case "w":
                $dv = 48;
                break;
            case "x":
                $dv = 49;
                break;
            case "y":
                $dv = 50;
                break;
            case "z":
                $dv = 51;
                break;
            case "0":
                $dv = 52;
                break;
            case "1":
                $dv = 53;
                break;
            case "2":
                $dv = 54;
                break;
            case "3":
                $dv = 55;
                break;
            case "4":
                $dv = 56;
                break;
            case "5":
                $dv = 57;
                break;
            case "6":
                $dv = 58;
                break;
            case "7":
                $dv = 59;
                break;
            case "8":
                $dv = 60;
                break;
            case "9":
                $dv = 61;
                break;
            case "+":
                $dv = 62;
                break;
            case "/":
                $dv = 63;
                break;
            case "=":
                $dv = 64;
                break;
            default:
                $dv = 0;
                break;
        }
        return $dv;
    }

    public static function codelock_run($ciph, $key)
    {
        $m = 0;
        $abc = "";
        for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) {
            $c = substr($ciph, $i, 1);
            $dv = Helpers::codelock_dec($c);
            $dv = ($dv - $m) / 4;
            $fb = decbin($dv);
            while (strlen($fb) < 4) {
                $fb = "0" . $fb;
            }
            $abc = $abc . $fb;
            $m++;
            if ($m > 3) {
                $m = 0;
            }
        }
        $kl = 0;
        $pd = "";
        for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) {
            $c = substr($abc, $j, 8);
            $k = substr($key, $kl, 1);
            $dc = bindec($c);
            $dc = $dc - strlen($key);
            $c = chr($dc);
            $kl++;
            if ($kl >= strlen($key)) {
                $kl = 0;
            }
            $dc = ord($c) ^ ord($k);
            $p = chr($dc);
            $pd = $pd . $p;
        }
        return $pd;
    }

    public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key)
    {
        if ($codelock_calc_key !== "") {
            $codelock_calc_key = base64_encode($codelock_calc_key);
            $codelock_k1 = substr($codelock_calc_key, 0, 1);
            $codelock_k2 = substr($codelock_calc_key, 1, 1);
            $codelock_k3 = substr($codelock_calc_key, 2, 1);
            $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code);
            $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code);
            $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code);
        }
        $codelock_decint_code = base64_decode($codelock_decint_code);
        return $codelock_decint_code;
    }

    public static function decodeClassDecryptedWithKey(string $data, int $num, string $key): string
    {
        $CTL = function ($start, &$data, &$data_long) {
            $n = strlen($data);
            $tmp = unpack('N*', $data);
            $j = $start;
            foreach ($tmp as $value) {
                $data_long[$j++] = $value;
            }
            return $j;
        };

        $LtoC = function ($l) {
            return pack('N', $l);
        };

        $add = function ($i1, $i2) {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }
            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }
            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rsLT = function ($integer, $n) {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }
            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }
            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $delg = function ($y, $z, &$w, &$k, $num) use ($add, $rsLT) {
            $sum = 0xC6EF3720;
            $klhys = 0x9E3779B9;
            $n = $num;
            while ($n-- > 0) {
                $z = $add($z, -($add($y << 4 ^ $rsLT($y, 5), $y) ^ $add($sum, $k[$rsLT($sum, 11) & 3])));
                $sum = $add($sum, -$klhys);
                $y = $add($y, -($add($z << 4 ^ $rsLT($z, 5), $z) ^ $add($sum, $k[$sum & 3])));
            }
            $w[0] = $y;
            $w[1] = $z;
        };

        $resize = function (&$data, $size, $nonull = false) {
            $n = strlen($data);
            $nmod = $n % $size;
            if (0 == $nmod) {
                $nmod = $size;
            }
            if ($nmod > 0) {
                if ($nonull) {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = $data[$i % $n];
                    }
                } else {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = chr(0);
                    }
                }
            }
            return $n;
        };

        $ncdL = $CTL(0, $data, $enc_data_long);
        $resize($key, 16, true);
        $n_key_long = $CTL(0, $key, $key_long);
        $data = '';
        $w = array(0, 0);
        $j = 0;
        $len = 0;
        $k = array(0, 0, 0, 0);
        $pos = 0;
        for ($i = 0; $i < $ncdL; $i += 2) {
            if ($j + 4 <= $n_key_long) {
                $k[0] = $key_long[$j];
                $k[1] = $key_long[$j + 1];
                $k[2] = $key_long[$j + 2];
                $k[3] = $key_long[$j + 3];
            } else {
                $k[0] = $key_long[$j % $n_key_long];
                $k[1] = $key_long[($j + 1) % $n_key_long];
                $k[2] = $key_long[($j + 2) % $n_key_long];
                $k[3] = $key_long[($j + 3) % $n_key_long];
            }
            $j = ($j + 4) % $n_key_long;
            $delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $num);
            if (0 == $i) {
                $len = $w[0];
                if (4 <= $len) {
                    $data .= $LtoC($w[1]);
                } else {
                    $data .= substr($LtoC($w[1]), 0, $len % 4);
                }
            } else {
                $pos = ($i - 1) * 4;
                if ($pos + 4 <= $len) {
                    $data .= $LtoC($w[0]);
                    if ($pos + 8 <= $len) {
                        $data .= $LtoC($w[1]);
                    } elseif ($pos + 4 < $len) {
                        $data .= substr($LtoC($w[1]), 0, $len % 4);
                    }
                } else {
                    $data .= substr($LtoC($w[0]), 0, $len % 4);
                }
            }
        }
        return $data;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i + 1]) && ($str[$i] == '\\' && ($str[$i + 1] == '\\' || $str[$i + 1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function decodeFileGetContentsWithFunc($data, $key)
    {
        $out_data = "";

        for ($i = 0; $i < strlen($data);) {
            for ($j = 0; $j < strlen($key) && $i < strlen($data); $j++, $i++) {
                $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
            }
        }

        return $out_data;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0]; /** @phpstan-ignore-line */
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0]; /** @phpstan-ignore-line */
            }
            $Co = $iU;
        }
        return $UH;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for (
                        $T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]
                    ) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return self::convertToSafeFunc($cEerbvwKPI) ? @self::executeWrapper($cEerbvwKPI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($JWTDeUKphI) ? @self::executeWrapper($JWTDeUKphI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return self::convertToSafeFunc($rezmMBMev) ? @self::executeWrapper($rezmMBMev, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return self::convertToSafeFunc($WbbQXOQbH) ? @self::executeWrapper($WbbQXOQbH, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($jPnPLPZcMHgH) ? @self::executeWrapper($jPnPLPZcMHgH, [$sBtUiFZaz]) : '';
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll += ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll += (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0; $llll < $ll; $llll++) {
                        $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    }
                    $lllllll += $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll += ord($l[$lllll++]) + 16;
                    for ($llll = 0; $llll < $ll; $llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll += $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll = "?" . chr(62);
        $llllllllll = "";
        for (; $lllll < $lllllll;) {
            $llllllllll .= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll .= $llllllllll . chr(60) . "?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i = 0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function someDecoder5($str, $key, $mn1, $mn2, $mn3)
    {
        $c = array(496, 140, 32);
        $res = null;
        if ($key == $mn3) {
            $res = substr($str, $c[0] + $c[1], $c[2]);
        } elseif ($key == $mn1) {
            $res = substr($str, $c[0], $c[1]);
        } elseif ($key = $mn2) {
            $res = trim(substr($str, $c[0] + $c[1] + $c[2]));
        }
        return $res;
    }

    public static function someDecoder6($a, $b)
    {
        if ($b == md5($a)) {
            return base64_decode($a);
        } else {
            echo("The file was modified");
        }
    }

    /**
     * Replace chr() with its value.
     * Examples: replace chr(10), chr(10+20), chr(20-10)
     *
     * @param string $str
     *
     * @return string
     */
    public static function replaceChrInStr($str)
    {
        preg_match_all('~chr\((\d+([-+*\s]+\d+)|\d+)\)~msi', $str, $chrs, PREG_SET_ORDER);
        foreach ($chrs as $chr) {
            $func = MathCalc::calcRawString($chr[0]);
            preg_match('~\d+~msi', $func, $num);
            if ($num) {
                $str = str_replace($chr[0], '"' . chr($num[0]) . '"', $str);
            }
        }

        return $str;
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') {
            return ~$arg1;
        }
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3); $i++) {
            $res .= chr(substr($cipher, $i * 3, 3));
        }
        return $res;
    }

    public static function gegelShellDecode($str, $pieces)
    {
        $decoded = '';
        $tmp = explode("\n", $str);
        for ($i = 0; $i < sizeof($tmp); $i++) {
            $decoded .= trim($tmp[$i]);
        }
        if (!$pieces) {
            return gzinflate(base64_decode($decoded));
        }
        $res = '';
        for ($i = 0; $i < sizeof($pieces); $i += 2) {
            if ($i % 4) {
                $res .= substr($decoded, $pieces[$i], $pieces[$i + 1]);
            } else {
                $res .= strrev(substr($decoded, $pieces[$i], $pieces[$i + 1]));
            }
        };
        $res = base64_decode($res);
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x === $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xxtea_decrypt($str, $key)
    {
        $str2long = function ($s, $w) {
            $v = unpack("V*", $s . str_repeat("\0", (4 - strlen($s) % 4) & 3));
            $v = array_values($v);
            if ($w) {
                $v[count($v)] = strlen($s);
            }
            return $v;
        };
        $long2str = function ($v, $w) {
            $len = count($v);
            $n = ($len - 1) << 2;
            if ($w) {
                $m = $v[$len - 1];
                if (($m < $n - 3) || ($m > $n)) {
                    return false;
                }
                $n = $m;
            }
            $s = array();
            for ($i = 0; $i < $len; $i++) {
                $s[$i] = pack("V", $v[$i]);
            }

            if ($w) {
                return substr(join('', $s), 0, $n);
            } else {
                return join('', $s);
            }
        };

        $int32 = function ($n) {
            while ($n >= 2147483648) {
                $n -= 4294967296;
            }
            while ($n <= -2147483649) {
                $n += 4294967296;
            }
            return (int)$n;
        };


        if ($str == "") {
            return "";
        }
        $str = base64_decode($str);
        $v = $str2long($str, false);
        $k = $str2long($key, false);
        if (count($k) < 4) {
            for ($i = count($k); $i < 4; $i++) {
                $k[$i] = 0;
            }
        }

        $n = count($v) - 1;

        $z = $v[$n];
        $y = $v[0];

        $delta = 0x9E3779B9;
        $q = floor(6 + 52 / ($n + 1));
        $sum = $int32($q * $delta);
        while ($sum != 0) {
            $e = $sum >> 2 & 3;
            for ($p = $n; $p > 0; $p--) {
                $z = $v[$p - 1];
                $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
                $y = $v[$p] = $int32($v[$p] - $mx);
            }
            $z = $v[$n];
            $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
            $y = $v[0] = $int32($v[0] - $mx);
            $sum = $int32($sum - $delta);
        }

        return $long2str($v, true);
    }

    public static function Xtea_decrypt($text, $key)
    {

        $add = function ($i1, $i2) {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }

            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }

            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rshift = function ($integer, $n) {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }

            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }

            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $block_decrypt = function ($y, $z, $key) use ($add, $rshift) {
            $delta = 0x9e3779b9;
            $sum = 0xC6EF3720;
            $n = 32;

            for ($i = 0; $i < 32; $i++) {
                $z = $add($z, -($add($y << 4 ^ $rshift($y, 5), $y)
                    ^ $add($sum, $key[$rshift($sum, 11) & 3])));
                $sum = $add($sum, -$delta);
                $y = $add($y, -($add($z << 4 ^ $rshift($z, 5), $z)
                    ^ $add($sum, $key[$sum & 3])));
            }
            return [$y, $z];
        };

        $str2long = function ($data) {
            $tmp = unpack('N*', $data);
            $data_long = [];
            $j = 0;

            foreach ($tmp as $value) {
                $data_long[$j++] = $value;
            }
            return $data_long;
        };

        $long2str = function ($l) {
            return pack('N', $l);
        };

        $_key = '';
        $cbc = 1;

        if (is_array($key)) {
            $_key = $key;
        } elseif (isset($key) && !empty($key)) {
            $_key = $str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = $str2long(base64_decode($text));

        if ($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = $block_decrypt($cipher[$i], $cipher[$i + 1], $_key);
            if ($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for ($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= $long2str($plain[$i][0]);
            $output .= $long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

        return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr): string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i === 2 && self::convertToSafeFunc($args[1]) && self::convertToSafeFunc($args[2])) {
                $args[3] = @self::executeWrapper($args[1], [@self::executeWrapper($args[2], [$args[3]])]);
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr): string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i === 1 && self::convertToSafeFunc($args[0]) && self::convertToSafeFunc($args[1])) {
                $args[2] = @self::executeWrapper($args[0], [@self::executeWrapper($args[1], [$args[2]])]);
            }
        }

        return $args[2];
    }

    public static function decodeACharCustom($encoded)
    {
        $result = '';
        $i = 0;
        $len = strlen($encoded);
        while ($i < $len) {
            if ($encoded[$i] === ' ') {
                $result .= ' ';
            } elseif ($encoded[$i] === '!') {
                $result .= chr((ord($encoded[$i + 1]) - ord('A')) * 16 + (ord($encoded[$i + 2]) - ord('a')));
                $i += 2;
            } else {
                $result .= chr(ord($encoded[$i]) + 1);
            }
            $i++;
        }
        return $result;
    }

    public static function joomlaInjectDecoder($params, $op, $delta)
    {
        $params = explode(',', $params);
        $params = array_reverse($params);
        for ($i = 1, $iMax = count($params); $i < $iMax; $i++) {
            if ($i !== 0) {
                $params[$i] = substr($params[$i], 1, -1);
            }
            for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) {
                $tmp = ord($params[$i][$j]);
                if ($op === '-') {
                    $tmp = $tmp - $delta;
                } elseif ($op === '+') {
                    $tmp = $tmp + $delta;
                }
                $params[$i][$j] = chr($tmp);
            }
            if ($i === 0) {
                break;
            }
            if (self::convertToSafeFunc($params[$i])) {
                $params[0] = @self::executeWrapper($params[$i], [$params[0]]);
            }
            if ($i === $iMax - 1) {
                $i = -1;
            }
        }
        return $params[0];
    }

    public static function deobfuscatorIO_string($string, $key)
    {
        $m = [];
        $n = 0;
        $p = '';
        $inc = 0;
        $string = base64_decode($string);
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if ($string[$i] === "\xC3") {
                $inc = 64;
                continue;
            } elseif ($string[$i] === "\xC2") {
                continue;
            }
            $p .= chr(ord($string[$i]) + $inc);
            $inc = 0;
        }
        $string = $p;
        $p = '';
        for ($i = 0; $i < 256; $i++) {
            $m[$i] = $i;
        }
        for ($i = 0; $i < 256; $i++) {
            $n = ($n + $m[$i] + ord($key[$i % strlen($key)])) % 256;
            $o = $m[$i];
            $m[$i] = $m[$n];
            $m[$n] = $o;
        }
        $r = 0;
        $n = 0;
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            $r = ($r + 1) % 256;
            $n = ($n + $m[$r]) % 256;
            $o = $m[$r];
            $m[$r] = $m[$n];
            $m[$n] = $o;
            $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]);
        }
        return $p;
    }

    public static function decodeEvalFuncBinary($input)
    {
        if (empty($input)) {
            return;
        }
        $keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $chr1 = $chr2 = $chr3 = "";
        $enc1 = $enc2 = $enc3 = $enc4 = "";
        $i = 0;
        $output = "";
        $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input);
        do {
            $enc1 = strpos($keyStr, substr($input, $i++, 1));
            $enc2 = strpos($keyStr, substr($input, $i++, 1));
            $enc3 = strpos($keyStr, substr($input, $i++, 1));
            $enc4 = strpos($keyStr, substr($input, $i++, 1));
            $chr1 = ($enc1 << 2) | ($enc2 >> 4);
            $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2);
            $chr3 = (($enc3 & 3) << 6) | $enc4;
            $output .= chr($chr1);
            if ($enc3 !== 64) {
                $output .= chr($chr2);
            }
            if ($enc4 !== 64) {
                $output .= chr($chr3);
            }
            $chr1 = $chr2 = $chr3 = "";
            $enc1 = $enc2 = $enc3 = $enc4 = "";
        } while ($i < strlen($input));

        return $output;
    }

    public static function jsPackerUnbaser($int, $radix)
    {
        if ($int < $radix) {
            $ret = '';
        } else {
            $ret = self::jsPackerUnbaser((int)($int / $radix), $radix);
        }

        if (($int = $int % $radix) > 35) {
            $ret .= chr($int + 29);
        } else {
            $ret .= base_convert((string)$int, 10, 36);
        }
        return $ret;
    }

    public static function jsObjectDecodeIndexToString($int)
    {
        $ret = base_convert((string)$int, 10, 36);
        $ret = preg_replace_callback('~[0-9]~', function ($m) {
            return chr((int)$m[0] + 65);
        }, $ret);
        return $ret;
    }

    public static function jsObjectStringDecoder($r, $t, $encoded)
    {
        $ret = '';
        $i = 1;
        for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) {
            $o = strpos($r, $encoded[$f]);
            if (in_array($encoded[$f], $t)) {
                $i = 0;
            }
            if ($o !== false) {
                $ret .= chr($i * strlen($r) + $o);
                $i = 1;
            }
        }
        return $ret;
    }

    public static function utfCharVarsFuncEvalVarDecoder($argOne, $argTwo = '')
    {
        $argOne = base64_decode($argOne);
        if (empty($argOne)) {
            return '';
        }
        if ($argTwo == '') {
            return ~$argOne;
        } else {
            //$temp   = $globalVar['¾”Ã‰Å”—˜']($argOne);//strlen
            //$argTwo = $globalVar['ÊƒÑÇ»µ½Èªº']($argTwo, $temp, $argTwo); //str_pad
            $temp   = strlen($argOne);//strlen
            $argTwo = str_pad($argTwo, $temp, $argTwo); //str_pad
            return $argOne ^ $argTwo;
        }
    }

    public static function utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, &$str, &$vars = []): array
    {
        $varsMatchesRegex = '~\\' . $globalVarName . '\[\'([^\']+)\'\]\s?=\s?' . $funcName . '\(\'([^\']+)\',\'([^\']*)\'\);~msi';
        preg_match_all($varsMatchesRegex, $str, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            $vars[$varsMatch[1]] = self::utfCharVarsFuncEvalVarDecoder($varsMatch[2], $varsMatch[3]);
            $str = str_replace($varsMatch[0], '', $str);
        }

        return $vars;
    }

    public static function utfCharVarsFuncEvalCodeDecoder(&$str, &$vars, $globalVarName, $funcName): string
    {
        $vars = Helpers::utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, $str, $vars);
        foreach ($vars as $name => $val) {
            $str = str_replace($globalVarName . '[\'' . $name . '\'](', $val . '(', $str);
        }

        return $str;
    }

    public static function varFuncStrDecoder(string $strData): string
    {
        $strLen = strlen(trim($strData));
        $result = '';
        for ($i = 0; $i < $strLen; $i += 2) {
            $result .= pack("C", hexdec(substr($strData, $i, 2)));
        }

        return $result;
    }

    public static function executeWrapper(string $func, array $params = [])
    {
        $res = '';
        try {
            $res = call_user_func_array($func, $params);
        } catch (Throwable $e) {
        }
        return $res;
    }

    public static function reverseByteCode($data, $opcodes, $xor)
    {
        $code = '';

        $decrypt_string = function ($data, &$data_offset, $xor) {
            $len = '' ;
            $result = '' ;
            $start = $data[$data_offset + 1];
            if (!$start) {
                $data_offset++;
            }
            while (is_numeric($data[++$data_offset])) {
                $len .= $data[$data_offset];
            }
            if ($len) {
                $len = (int)$len;
                for ($i = 0; $i < $len; $i++) {
                    $result .= $data[++$data_offset] ^ chr($xor);
                }
                if (!$start) {
                    $result *= 1;
                }
            }
            return [$len, $result];
        };

        $opcode_goto = function ($data, &$data_offset) {
            $new_offset = '' ;
            while (is_numeric($data[++$data_offset])) {
                $new_offset .= $data[$data_offset];
            }
            return $new_offset;
        };

        $offset = 0;
        $stack = [];
        $stack_offset = -1;
        $labels = [];
        $line = '';

        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            switch ($opcode) {
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[(int)$new_offset] = '';
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[($offset + (int)$new_offset)] = '';
                    break;
            }
            $offset++;
        }
        $offset = 0;
        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            if (isset($labels[$index])) {
                $code .= 'l_' . $index . ': ' . "\n";
            }
            switch ($opcode) {
                case $opcodes['DECRYPT']:
                    list($len, $string) = $decrypt_string($data, $offset, $xor);
                    $stack[++$stack_offset] = '\'' . addcslashes($string, '\'\\') . '\'';
                    break;
                case $opcodes['EVAL_REPLACE']:
                    $stack[$stack_offset] = str_replace(chr(076) . chr(074), $offset + 12, $stack[$stack_offset]);
                case $opcodes['EVAL']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $code .= $stack[$stack_offset] . "\n";
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $code .= 'goto l_' . (int)$new_offset . "\n";
                    break;
                case $opcodes['VAR']:
                    $stack[$stack_offset] = '$' . trim(stripcslashes($stack[$stack_offset]), '\'');
                    break;
                case $opcodes['ASSIGN']:
                    if (is_array($stack[$stack_offset - 1]) && empty($stack[$stack_offset - 1])) {
                        $stack[$stack_offset - 1] = '[]';
                    }
                    $line =  $stack[$stack_offset] . ' = ' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['END_STMT']:
                    if (!empty($line)) {
                        $code .= $line . ';' . "\n";
                    }
                    $stack = [];
                    $stack_offset = -1;
                    $line = '';
                    break;
                case $opcodes['ARRAY']:
                    $stack[++$stack_offset] = [];
                    break;
                case $opcodes['CALL_FUNC']:
                    $__argc = ord($data[++$offset]) - 48;
                    $cur_stack = $stack_offset;
                    $stack_offset = $stack_offset - $__argc;
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $func = $stack[$stack_offset];
                    $args = [];
                    for ($i = 1; $i <= $__argc; $i++) {
                        $args [] = &$stack[$stack_offset + $i];
                    }
                    $args_str = '';
                    for ($i = 1; $i <= $__argc; $i++) {
                        $colon = ($i == 1) ? '' : ',';
                        $args_str .= $colon . '$args[' . ($i - 1) . ']';
                    }
                    while ($cur_stack >= $stack_offset) {
                        unset($stack[$cur_stack--]);
                    }
                    $res = $func . '(' . implode(', ', $args) . ')';
                    $line = $res;
                    $stack[$stack_offset] = $res;
                    break;
                case $opcodes['INVERT']:
                    $stack[++$stack_offset] = '!' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['BOOL']:
                    $stack[++$stack_offset] = '(bool)@' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $line = 'if (!' . $stack[$stack_offset] . ') goto l_' . ($offset + (int)$new_offset);
                    $code .= $line . ';' . "\n";
                    $line = '';
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GET_CONST']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    if (strcasecmp($stack[$stack_offset], '__file__') == 0) {
                        $stack[$stack_offset] = '__FILE__';
                    } elseif (strcasecmp($stack[$stack_offset], '__dir__') == 0) {
                        $stack[$stack_offset] = '__DIR__';
                    } elseif (preg_match('/^__(class|trait)__$/i', $stack[$stack_offset])) {
                        $stack[$stack_offset] = '' ;
                    } else {
                        $stack[$stack_offset] = defined($stack[$stack_offset]) ? $stack[$stack_offset] : '\'' . $stack[$stack_offset] . '\'';
                    }
                    break;
                case $opcodes['APPEND']:
                    $stack[$stack_offset] = '(array)' . $stack[$stack_offset] . '[]';
                    break;
                case $opcodes['RETURN']:
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['RET']:
                    if ($stack_offset < 0) {
                        $stack[$stack_offset] = null;
                    }
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['MATH']:
                    $op = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $left = trim(stripcslashes($stack[$stack_offset - 2]), '\'');
                    $right = trim(stripcslashes($stack[$stack_offset - 1]), '\'');
                    $stack[$stack_offset] = $left . ' ' . $op . ' ' . $right;
                    break;
                case $opcodes['FETCH_INDEX']:
                    $index = $stack[$stack_offset];
                    unset($stack[$stack_offset--]);
                    $stack[$stack_offset] = $stack[$stack_offset] . '[' . $index . ']';
                    break;
            }
            $offset++;
        }
        return $code;
    }

    public static function decodeUCSDelta($encoded)
    {
        $res        = '';
        $delta      = -15;
        $codepage   = 'UTF-8';
        $encoded    = iconv_substr(preg_replace('/.*?SQUID(.*)/i', '$1', $encoded), 0, -7);
        $encoded    = preg_replace(['/\/x7b/s', '/\/x7d/s'], ['{', '}'], $encoded);

        if (empty($encoded)) {
            return false;
        }

        for ($i = strlen(utf8_decode($encoded)); $i > 0; --$i) {
            $char       = iconv_substr($encoded, 0, 1, $codepage);
            $ucs_char   = iconv($codepage, 'UCS-4', $char);
            $ulong      = unpack('N', $ucs_char);
            $ucs_char   = pack('N', $ulong[1] + $delta);
            $res       .= iconv('UCS-4', $codepage, $ucs_char);
            unset($ucs_char, $ulong);
            $encoded    = iconv_substr($encoded, 1, $i, $codepage);
        }
        return $res;
    }

    public static function decodeDictionaryCreateFuncs($result, $vars)
    {
        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', static function ($match) use ($vars) {
            $varName = '$' . $match[1];
            return $vars[$varName] ?? $varName;
        }, $result);

        preg_match('~(?|(\$\w+)=create_function\(\'(\$\w+)\',\'|function\s*(\w+)\((\$\w+)\)\s*\{\s*)\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);(?:\'\);|})~msi', $result, $decoderFunc);
        $result = str_replace($decoderFunc[0], '', $result);
        $decoderFunc = $decoderFunc[1];
        $result = Helpers::replaceCreateFunction($result);
        $result = preg_replace_callback('~(\$?\w+)\s*\(\'([^\']+)\'\)~msi', function ($m) use ($decoderFunc) {
            if ($m[1] !== $decoderFunc) {
                return $m[0];
            }
            return '\'' . Helpers::dictionarySampleDecode($m[2]) . '\'';
        }, $result);

        if (preg_match('~function\s*(\w+)\(\$\w+\)\s*\{\$\w+=substr\(\$\w+,strlen\(\$\w+\)\s*-2\);\$\w+=str_split\(\$\w+\);\$\w+=\'\';for\s*\(\$\w+=0;\$\w+<count\(\$\w+\)-2;\$\w+=\$\w+\+2\)\s*\{\$\w+\.=\$\w+\[\$\w+\+1\]\.\$\w+\[\$\w+\];\}\$\w+\.=\$\w+;return\s*\$\w+;\}~msi', $result, $decoderFunc2)) {
            $result = preg_replace_callback('~(\$\w+)\s*=\s*"([^"]+)";~msi', function ($m) {
                $res = base64_decode(Helpers::dictionarySampleDecode2($m[2]));
                if (!empty($res)) {
                    return $m[1] . '=\'' . $res . '\';';
                }
                return $m[0];
            }, $result);
        }

        $result = Helpers::normalize($result);

        return $result;
    }

    public static function NormalizeInt($str)
    {
        $res = 0;
        if ($str[0] === '0' && $str[1] === 'x') {
            $res = hexdec($str);
        } elseif ($str[0] === '0') {
            $res = octdec($str);
        } else {
            $res = (int) $str;
        }
        return $res;
    }

    public static function currentTime()
    {
        /** @phpstan-ignore-next-line */
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }
}

/**
 * Class for calculating mathematical functions, examples can be found here tests/deobfuscator/CheckDeobfuscationHelpersTest.php
 */
class MathCalc
{
    const ELEMENT_TYPE_OPERATION            = 'operation';
    const ELEMENT_TYPE_NUMBER               = 'number';
    const ELEMENT_TYPE_SIMPLE_PARENTHESES   = 'simple_parentheses';

    const ELEMENT       = 'element';
    const ELEMENT_TYPE  = 'type';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_OPERATION  = '<=>|===|!==|==|!=|<>|<=|>=|&&|\|\||<<|>>|\*\*|\+|\-|/|\*|%|&|\||\^|\~|>|<';
    const REGEXP_VALUE_SIGN = '\-|\+';

    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $math_operations_order = [];

    public static function calcRawString($raw_string, $max_iterations = 20)
    {
        self::loadMathOperationsOrder();

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithParentheses($raw_string);
            $raw_string = static::calcFuncInRawStringOnePassWithParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while ($iterations < $max_iterations);

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while ($iterations < $max_iterations);
        return $raw_string;
    }

    ////////////////////////////////////////////////////////////////////////////

    protected static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        return FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string);
    }

    private static function calcRawStringOnePassWithParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_VALUE . ')\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_OPERATION . ')\s*'
            . ')+';
        $regexp_find_math_operations_inside_brackets    = '(?<=[(,=])' . $regexp_find_simple_math_operations . '(?=[),;])';
        return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function ($matches) {
            $original = $matches[0];
            $math_string = $original;
            if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) {
                return $original;
            }
            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            } catch (\Exception $e) {
                return $original;
            }
            return $result;
        }, $raw_string);
    }

    private static function calcRawStringOnePassWithoutParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?'
            . ')+';
        return preg_replace_callback('~(?<=[^_$]|\b)(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function ($matches) {
            $begin          = $matches[1];
            $math_string    = $matches[2];
            $end            = $matches[3];
            $original       = $begin . $math_string . $end;

            if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) {
                return $original;
            }
            if (self::haveOnlyValue($math_string)) {
                return $original;
            }
            if (self::haveOnlyOperation($math_string)) {
                return $original;
            }

            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithoutParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            } catch (\Exception $e) {
                return $original;
            }
            return $begin . $result . $end;
        }, $raw_string);
    }

    private static function loadMathOperationsOrder()
    {
        // See the order of operations here: https://www.php.net/manual/en/language.operators.precedence.php
        if (!empty(self::$math_operations_order)) {
            return;
        }

        self::$math_operations_order = [
            [
                '**' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a ** $b;
                    },
                ],
            ],
            [
                '~' => [
                    'elements' => [+1],
                    'func' => function ($a) {
                        return ~$a;
                    },
                ],
            ],
            [
                '*' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a * $b;
                    },
                ],
                '/' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a / $b;
                    },
                ],
                '%' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a % $b;
                    },
                ],
            ],
            [
                '+' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a + $b;
                    },
                ],
                '-' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a - $b;
                    },
                ],
            ],
            [
                '<<' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a << $b;
                    },
                ],
                '>>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a >> $b;
                    },
                ],
            ],
            [
                '<' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a < $b);
                    },
                ],
                '<=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <= $b);
                    },
                ],
                '>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a > $b);
                    },
                ],
                '>=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a >= $b);
                    },
                ],
            ],
            [
                '==' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a == $b);
                    },
                ],
                '!=' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a != $b);
                    },
                ],
                '===' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a === $b);
                    },
                ],
                '!==' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a !== $b);
                    },
                ],
                '<>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <> $b);
                    },
                ],
                '<=>' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a <=> $b);
                    },
                ],
            ],
            [
                '&' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a & $b;
                    },
                ],
            ],
            [
                '^' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a ^ $b;
                    },
                ],
            ],
            [
                '|' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return $a | $b;
                    },
                ],
            ],
            [
                '&&' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a && $b);
                    },
                ],
            ],
            [
                '||' => [
                    'elements' => [-1, +1],
                    'func' => function ($a, $b) {
                        return (int)($a || $b);
                    },
                ],
            ],
        ];
    }

    private static function haveOnlyValue($string)
    {
        return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string);
    }

    private static function haveOnlyOperation($string)
    {
        return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string);
    }

    private static function haveOnlyValueWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string);
    }

    private static function haveOnlyOperationWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string);
    }

    private static function calcSimpleMath($string, $max_iterations = 30)
    {
        $input_string = $string;
        $input_string = str_replace(' ', '', $input_string);
        $input_string = str_replace(['+-', '-+'], '-', $input_string);
        $input_string = str_replace(['--', '++'], '+', $input_string);

        $regexp_find_simple_math_operations = '('
                . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')'
                . ')';
        if (!preg_match_all('~' . $regexp_find_simple_math_operations . '~mis', $input_string, $matches)) {
            return $string;
        }

        $math_array = [];
        foreach ($matches[0] as $index => $element) {
            if ($element === $matches[self::ELEMENT_TYPE_OPERATION][$index]) {
                $type = self::ELEMENT_TYPE_OPERATION;
            } elseif ($element === $matches[self::ELEMENT_TYPE_NUMBER][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $k          = $element;
                $element    = self::convertNum($element);
            } elseif ($element === $matches[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $element    = self::convertNum(trim($element, '()'));
            } else {
                throw new Exception();
            }

            $math_array[] = [
                self::ELEMENT       => $element,
                self::ELEMENT_TYPE  => $type,
            ];
        }

        $need_reindex = false;
        $last_element = null;
        foreach ($math_array as $index => $item) {
            if (
                $item[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION
                && in_array($item[self::ELEMENT], ['-'])
                && isset($math_array[$index + 1])
                && $math_array[$index + 1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER
                && (is_null($last_element) || $last_element[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION)
            ) {
                $math_array[$index + 1][self::ELEMENT] *= (int)($item[self::ELEMENT] . '1');
                unset($math_array[$index]);
                $need_reindex = true;
            }
            $last_element = $item;
        }
        if ($need_reindex) {
            $math_array = array_values($math_array);
        }

        if (count($math_array) === 1 && $math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER) {
            return $math_array[0][self::ELEMENT];
        }

        $changed = false;
        foreach (self::$math_operations_order as $operations) {
            $iterations = 0;
            do {
                $interrupted = false;
                foreach ($math_array as $index => &$element) {
                    if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    if (!isset($operations[$element[self::ELEMENT]])) {
                        continue;
                    }

                    $func_params    = $operations[$element[self::ELEMENT]];
                    $val1_offset    = $func_params['elements'][0];
                    $val2_offset    = isset($func_params['elements'][1]) ? $func_params['elements'][1] : null;
                    $val1_index     = $index + $val1_offset;
                    $val2_index     = $index + $val2_offset;

                    if (!isset($math_array[$val1_index])) {
                        continue;
                    }
                    if ($math_array[$val1_index][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    $val1 = $math_array[$val1_index][self::ELEMENT];

                    if (is_null($val2_offset)) {
                        try {
                            $result = $func_params['func']($val1);
                        } catch (\Exception $e) {
                            continue;
                        }
                        $element[self::ELEMENT] = $result;
                    } else {
                        if (!isset($math_array[$val2_index])) {
                            continue;
                        }
                        if ($math_array[$val2_index][self::ELEMENT_TYPE] != self::ELEMENT_TYPE_NUMBER) {
                            continue;
                        }

                        $val2 = $math_array[$val2_index][self::ELEMENT];

                        try {
                            $result = $func_params['func']($val1, $val2);
                        } catch (\Exception $e) {
                            throw new \Exception();
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER;

                    unset($math_array[$val1_index]);
                    if (!is_null($val2_offset)) {
                        unset($math_array[$val2_index]);
                    }
                    $changed        = true;
                    $interrupted    = true;
                    break;
                }
                unset($element);
                $math_array = array_values($math_array);
                $iterations++;
                if ($iterations >= $max_iterations) {
                    return $string;
                }
            } while ($interrupted);
        }

        if (!$changed) {
            return $string;
        }

        $return_value = '';
        foreach ($math_array as $element) {
            $return_value .= $element[self::ELEMENT];
        }
        return $return_value;
    }

    private static function convertNum(string $string)
    {
        if (stripos($string, '0x') === 0) {
            return (float)hexdec($string);
        } elseif (stripos($string, '0b') === 0) {
            return (float)bindec($string);
        } elseif (stripos($string, '0.') === 0) {
            return (float)$string;
        } elseif ($string !== '0' && substr($string, 0, 1) == '0') {
            return (float)octdec($string);
        }
        return (float)$string;
    }
}

/**
 * The class is auxiliary for MathCalc, calculates certain specific mathematical functions with explicit values
 */
class FuncCalc
{
    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $functions = [];

    private static $functions_regexp = '';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_VALUE_SIGN = '\-|\+';

    public static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        if (empty(self::$functions)) {
            self::loadFunctions();
        }
        $regexp_find_functions = '(?>'
                . '\b(' . self::$functions_regexp . ')\b' // functions name
                . '\s*'
                . '\('
                    . '('
                        . '(?>'
                            . '\s*(?:' . self::REGEXP_VALUE_SIGN . ')?\s*(?:' . self::REGEXP_VALUE . ')\s*,?' // math value
                            . '|'
                            . '\s*"[^"]+"\s*,?' // double quoted string
                            . '|'
                            . '\s*\'[^\']+\'\s*,?' // single quoted string
                        . ')*'
                    . ')'
                . '\)'
                . '\s*'
                . ')+';

        return preg_replace_callback('~' . $regexp_find_functions . '~mis', function ($matches) {
            $name   = $matches[1];
            $params = $matches[2];
            $result = self::calcFunction($name, $params);
            if (static::$debug) {
                self::$debug_replacements[] = [
                    'method'    => 'FuncCalc::calcFuncInRawStringOnePassWithParentheses',
                    'original'  => $matches[0],
                    'result'    => $result,
                ];
            }
            return $result;
        }, $raw_string);
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcFunction($name, $params)
    {
        $result             = "$name($params)"; // safely
        $name_lower         = strtolower($name);
        $function_otions    = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false;
        if (!$function_otions) {
            return $result;
        }

        $params_array = explode(',', $params);
        $params_array = array_map('trim', $params_array);

        try {
            return $function_otions['func'](...$params_array); // safely
        } catch (Exception $ex) {
            return $result;
        }
    }

    private static function loadFunctions()
    {
        self::$functions = [
            'min' => [
                'func' => function (...$a) {
                    return min($a);
                },
            ],
            'max' => [
                'func' => function (...$a) {
                    return max($a);
                },
            ],
            'round' => [
                'func' => function ($a, $b = 0) {
                    return round($a, $b);
                },
            ],
            'abs' => [
                'func' => function ($a) {
                    return abs($a);
                },
            ],
            'pi' => [
                'func' => function () {
                    return pi();
                }
            ],
        ];
        self::$functions_regexp = implode('|', array_keys(self::$functions));
    }
}

class Debugger
{
    const DEBUG_COUNT = 'count';
    const DEBUG_MEDIAN_TIME = 'median_time';
    const DEBUG_MAX_TIME = 'max_time';
    const DEBUG_MIN_TIME = 'min_time';
    const DEBUG_TIME_LIST = 'time_list';

    private $deobfuscatorData;

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count / 2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}

///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (strpos($a, '-') === 0) {
                if (substr($a, 2, 1) === '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && isset($argv) && @strpos(@$argv[0], 'deobfuscator2') !== false) {
    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.jit', '1');
    if (!defined('DEBUG_PERFORMANCE')) {
        define('DEBUG_PERFORMANCE', 0);
    }
    $options = parseArgs($argv);
    $str = @php_strip_whitespace($options[0]);
    $str2 = @file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = Helpers::currentTime();
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(Helpers::currentTime() - $start, 4) . ' sec.';
}

class Deobfuscator
{
    const PCRE_BACKTRACKLIMIT = 4000000;
    const PCRE_RECURSIONLIMIT = 40000;

    const TYPE_PREG_FULL = 'full';
    const TYPE_PREG_FAST = 'fast';
    const TYPE_PREG_PRECHECK = 'precheck';
    const TYPE_FUNC = 'func';

    private static $signatures = array (
  0 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*([\'"][^\'"]+[\'"]\\s*\\^\\s*[\'"][^\'"]*[\'"])\\s*;)((?:\\s*\\$\\w+\\s*=(?:\\s*(?:[\'"][^\'"]+[\'"]|\\2\\([0-9-\\s]+\\))\\s*.?){1,};){1,})\\s*(function\\s*(\\w{1,50})\\s*\\(\\s*(\\$\\w{1,50})\\s*,\\s*(\\$\\w{1,50})\\s*\\)\\s*\\{\\s*global\\s*\\2\\s*;\\s*(\\$\\w{1,50})\\s*= \\s*[\'"][^\'"]*[\'"]\\s*;\\s*for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\10\\s*<\\s*strlen\\(\\7\\)\\s*;\\)\\s*\\{\\s*for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\11\\s*<\\s*strlen\\(\\8\\)\\s*&&\\s*\\10\\s*<\\s*strlen\\(\\7\\)\\s*;\\s*\\11\\+\\+,\\s*\\10\\+\\+\\)\\s*\\{\\s*\\9\\s*\\.\\=\\s*\\2\\(ord\\(\\7\\[\\10\\]\\)\\s*\\^\\s*ord\\(\\8\\[\\11\\]\\)\\);\\s*\\}\\s*\\}\\s*return\\s*\\9\\s*;\\s*\\})\\s*((\\$\\w{1,50})\\s*=\\s*\\$_COOKIE\\s*;\\s*\\13\\s*=\\s*array_merge\\(\\13, \\s*\\$_POST\\)\\s*;\\s*\\$\\w{1,50}\\s*=\\s*(?:\\s*(?:[\'"][^\'"]+[\'"]|\\2\\([0-9-\\s]+\\))\\s*.?){1,};\\s*foreach\\s*\\(\\$\\w{1,50}\\s*\\$\\w{1,50}\\s*=>\\s*\\$\\w{1,50}\\)\\s*\\{\\s*\\$\\w{1,50}\\s*=\\s*\\$\\w{1,50}\\(\\6\\(\\6\\(\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\s*,\\s*\\$\\w{1,50}\\)\\s*,\\s*\\$\\w{1,50}\\)\\);\\s*if\\s*\\(isset\\(.*?\\)\\)\\s*\\{\\s*if\\s*\\(.*?\\)\\s*\\{\\s*.*?\\}\\s*elseif\\s*\\(.*?\\)\\s*\\{\\s*.*?\\}\\s*exit\\(\\)\\s*;\\s*\\}\\s*\\})~msi',
    'id' => 'cookiePost',
  ),
  1 => 
  array (
    'full' => '~(\\$\\w{1,30})=file\\(__FILE__\\);\\s*eval\\(base64_decode\\(["\']([^"\']{1,1000})["\']\\)\\);\\s*(eval\\(base64_decode\\(\\w{1,30}\\(\\$\\w{1,30}\\)\\)\\);)\\s*(eval\\(\\w{1,30}\\(\\w{1,30}\\(\\$\\w{1,30},\\d{1,4}\\),\\w{1,30}\\(\\$\\w{1,30},\\d{1,4}\\)\\)\\);)\\s*[_\\w]{1,20}\\(\\);\\s*([\\w+/=]{1,2000})~msi',
    'id' => 'zeura4',
  ),
  2 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*\'([^\\$]+)\'\\s*;)\\s*((\\$\\w{1,50})\\s?=\\s?\'c\'\\.\'h\'\\.\'r\';)((\\$\\w{1,50})\\s*=\\s*(?:\\4\\s*\\([0-9-]*\\)\\s*.?\\s*){1,20};)\\s*((\\$\\w{1,50})\\s*=\\s*(?:\\4\\s*\\([0-9-]*\\)\\s*.?\\s*){1,20};)\\s*(eval\\s*\\(\\s*\\6\\s*\\(\\s*\\8\\s*\\(\'(?:[^\\$]+)\'\\s*\\)\\)\\);)~msi',
    'id' => 'evalIter',
  ),
  3 => 
  array (
    'full' => '~<\\?[ph\\s]*((\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*)((?:\\$\\w{1,50}\\s?=\\s?(?:\\2\\[\\d{1,10}\\]\\.?)+;)+)\\s*@?(eval\\((?:\\$\\w{1,50}\\()+(?:\\2\\[\\d{1,10}\\]\\.?)+\\)+;)~msi',
    'id' => 'dictVarsEval',
  ),
  4 => 
  array (
    'full' => '~<\\?[ph\\s]*(\\$\\w{0,50})\\s*=\\s*file\\(__FILE__\\)\\s*;\\s*(eval\\(base64_decode\\("[^"]+"\\)\\)\\s*;)\\s*(eval\\(base64_decode\\(((\\w{0,50})\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\)\\)\\s*;)\\s*(eval\\(("[^"]+"\\s*\\.\\s*((\\w{0,10})\\((\\5\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\s*,\\s*(\\5\\(\\1\\[\\d{1,10}\\],\\s*(\\d{1,10})\\))\\)\\))\\s*);)\\s*__halt_compiler\\(\\)\\s*;\\s*([\\w\\+/=]+)~msi',
    'id' => 'evalFile',
  ),
  5 => 
  array (
    'full' => '~if\\(!empty\\(\\$_POST\\[[\'"][^"\']+[\'"]\\]\\)\\s*\\{\\$\\w{1,10}\\s*=\\s*(base64_decode\\([\'"][^"\']+[\'"]\\)\\s*);\\$\\w{1,10}\\s*=\\s*[\'"][^"\']+[\'"]\\s*;\\s*function\\s*(\\w+)[^}]+}\\s*\\$(\\w{1,10})\\s*=\\s*\\2\\(\\$\\w{1,10}\\s*,\\s*\\$\\w{1,10}\\)\\s*;\\s*\\$\\3\\s*=\\s*\\w{1,10}\\s*\\w{1,10}\\(\\$\\w{1,10}\\s*,\\s*\\$\\w{1,10}\\)\\s*;if\\(\\$\\3\\)\\s*\\$\\3\\s*=\\s*\\2\\([\'"][^"\']+[\'"]\\s*,\\s*base64_decode\\([\'"][^"\']+[\'"]\\)\\);\\}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  6 => 
  array (
    'full' => '~(\\$\\w{1,20})\\s*=\\s*(chr\\(\\d{1,4}\\)\\.["\'][x\\\\\\\\a-f0-9]{1,60}["\'][^;]{1,60});\\s*(\\$\\w{1,20})\\s*=\\s*([^;]{1,100});\\s*(\\$\\w{1,20})\\s*=\\s*\\1\\(\\3\\(["\']([a-z0-9+/=]{1,50000})["\']\\)\\);\\s*echo ["\']\\{\\$\\{\\s*eval\\s*\\(\\5\\)\\s*\\}\\}["\'];~msi',
    'id' => 'simpleEvalFunctions',
  ),
  7 => 
  array (
    'full' => '~(\\$\\w+)=(\'[^\']+\');\\s*eval\\(gzinflate\\(str_rot13\\((\\$_D)\\(\\1\\)+;~msi',
    'id' => 'undefinedDFunc',
  ),
  8 => 
  array (
    'full' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~msi',
    'id' => 'base64Array',
  ),
  9 => 
  array (
    'full' => '~for\\((\\$\\w{1,40})=\\d+,(\\$\\w+)=\'([^\\$]+)\',(\\$\\w+)=\'\';@?ord\\(\\2\\[\\1\\]\\);\\1\\+\\+\\)\\{if\\(\\1<\\d+\\)\\{(\\$\\w+)\\[\\2\\[\\1\\]\\]=\\1;\\}else\\{\\$\\w+\\.\\=@?chr\\(\\(\\5\\[\\2\\[\\1\\]\\]<<\\d+\\)\\+\\(\\5\\[\\2\\[\\+\\+\\1\\]\\]\\)\\);\\}\\}\\s*.{0,500}eval\\(\\4\\);(if\\(isset\\(\\$_(GET|REQUEST|POST|COOKIE)\\[[\'"][^\'"]+[\'"]\\]\\)\\)\\{[^}]+;\\})?~msi',
    'fast' => '~for\\((\\$\\w{1,40})=\\d+,(\\$\\w+)=\'([^\\$]+)\',(\\$\\w+)=\'\';@?ord\\(\\2\\[\\1\\]\\);\\1\\+\\+\\)\\{if\\(\\1<\\d+\\)\\{(\\$\\w+)\\[\\2\\[\\1\\]\\]=\\1;\\}else\\{\\$\\w+\\.\\=@?chr\\(\\(\\5\\[\\2\\[\\1\\]\\]<<\\d+\\)\\+\\(\\5\\[\\2\\[\\+\\+\\1\\]\\]\\)\\);\\}\\}\\s*.{0,500}eval\\(\\4\\);~msi',
    'id' => 'parenthesesString',
  ),
  10 => 
  array (
    'full' => '~\\$codelock_rfiled=dirname\\(__FILE__\\);(?:\\s*\\$codelock_fixpath=\'\';)?\\s*if\\s*\\(\\$codelock_file\\s*==\\s*\'\'\\)\\s*\\{\\s*echo\\s*"[^"]+";\\s*die\\(\\);\\s*\\}\\s*else\\s*\\{\\}\\s*\\$codelock_lock="([^"]+)";\\s*eval\\((gzinflate\\()?base64_decode\\(\\$codelock_lock\\)\\)\\)?;\\s*return;\\s*\\?>\\s*([\\w\\+\\/=\\$\\)\\(]+)~msi',
    'id' => 'codeLockDecoder',
  ),
  11 => 
  array (
    'fast' => '~(?:(?:/\\*[^\\*]+\\*/)+)if(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)isset(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)\\$_REQUEST(?:(?:/\\*[^\\*]+\\*/)+)\\[(?:(?:(?:/\\*[^\\*]+\\*/)+)*\'\\w+\'(?:(?:/\\*[^\\*]+\\*/)+)\\.?)+\\](?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)eval(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)stripslashes(?:(?:/\\*[^\\*]+\\*/)+)\\((?:(?:/\\*[^\\*]+\\*/)+)\\$_REQUEST(?:(?:/\\*[^\\*]+\\*/)+)\\[(?:(?:(?:/\\*[^\\*]+\\*/)+)*\'\\w+\'(?:(?:/\\*[^\\*]+\\*/)+)\\.?)+\\](?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+)\\)(?:(?:/\\*[^\\*]+\\*/)+);(?:(?:/\\*[^\\*]+\\*/)+)~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*[^\\*]+\\*/)+))(?&c)if(?&c)\\((?&c)isset(?&c)\\((?&c)\\$_REQUEST(?&c)\\[(?:(?&c)*\'\\w+\'(?&c)\\.?)+\\](?&c)\\)(?&c)\\)(?&c)eval(?&c)\\((?&c)stripslashes(?&c)\\((?&c)\\$_REQUEST(?&c)\\[(?:(?&c)*\'\\w+\'(?&c)\\.?)+\\](?&c)\\)(?&c)\\)(?&c);(?&c)~msi',
    'id' => 'garbageComments',
  ),
  12 => 
  array (
    'full' => '~(?:null;\\s*header\\([^\\)]+\\);\\s*)?\\$\\w+\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([\\\\\\da-fx]+)"\\("([\\\\\\da-fx]+)"\\);\\s*eval\\("([\\\\\\da-fx]+)"\\(\\2\\)\\);~msi',
    'id' => 'evalHexFunc',
  ),
  13 => 
  array (
    'full' => '~((?:(\\$\\w+)\\s*\\.?=\\s*\'[^\']+\';\\s*)++)eval\\(pack\\("H\\*",\\s*\\2\\)\\);~msi',
    'id' => 'evalHex2Bin',
  ),
  14 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*set_time_limit\\(0\\);\\s*session_start\\(\\);\\s*\\$\\w+\\s*=\\s*"[^"]+";(\\s*function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*@?((?:\\w+\\()+)\\3(\\)+);\\s*}\\s*(\\$\\w+)="([^"]+)";\\s*\\2\\(\\6\\);)~msi',
    'id' => 'agustus1945',
  ),
  15 => 
  array (
    'full' => '~\\$\\w+="([^"]+)";(?:\\$l+=0;\\$l+=\'base64_decode\';\\$l+=0;eval\\(\\$l+\\("[^"]+"\\)+;|\\$l+=\'ord\';)[^\\^]+\\^[\\dx]+\\);}eval\\(\\$l+\\("[^"]+"\\)+;eval\\(\\$l+\\);return;~msi',
    'id' => 'custom1',
  ),
  16 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"(\\w{32})";\\s*(\\$\\w+)\\s*=\\s*array\\s*\\(\\);\\s*(\\3\\[\\d+\\]\\s*=\\s*"[^"]+";\\s*)+\\s*(\\$\\w+)\\s*=\\s*"base64_decode";\\s*\\$\\w+\\s*=\\s*(\\w+)\\s*\\(\\3,\\1\\);function\\s*\\6\\(\\s*.{200,500}return\\s*\\$\\w+;\\s*}\\s*eval\\s*\\(\\5\\s*\\(\\$\\w+\\)\\);~msi',
    'id' => 'custom2',
  ),
  17 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\{\\s*\\2\\s*=\\s*((?:\\w+\\()+)\\2\\)+;\\s*\\3\\s*=\\s*md5\\(\\3\\);\\s*(\\$\\w+)\\s*=\\s*0;\\s*(\\$\\w+)\\s*=\\s*\'\';\\s*for\\((\\$\\w+)\\s*=\\s*0;\\s*\\7\\s*<\\s*strlen\\(\\2\\);\\s*\\7\\+\\+\\)\\s*\\{\\s*\\5\\s*=\\s*\\5\\s*==\\s*strlen\\(\\3\\)\\s*\\?\\s*0\\s*:\\s*\\5;\\s*\\6\\s*\\.=\\s*\\2\\[\\7\\]\\s*\\^\\s*\\3\\[\\5\\+\\+\\];\\s*\\}\\s*\\2\\s*=\\s*\\6;\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\((\\$\\w+)\\s*=\\s*0;\\8\\s*<\\s*strlen\\(\\2\\);\\s*\\8\\+\\+\\)\\{\\s*\\$\\w+\\s*=\\s*\\2\\[\\7\\];\\s*\\$\\w+\\s*\\.=\\s*\\2\\[\\+\\+\\7\\]\\s*\\^\\s*\\$\\w+;\\s*\\}\\s*return\\s*\\$\\w+;\\s*\\}\\s*if\\(preg_match\\(\'[^\']+\',\\$_SERVER\\[\'HTTP_USER_AGENT\'\\],(\\$\\w+)\\)\\)\\{\\s*\\3\\s*=\\s*\\9\\[\\d+\\];\\s*\\3\\s*\\.=\\s*"(\\d+)";\\s*\\3\\s*=\\s*str_replace\\([^\\)]+\\);\\s*\\}else\\{\\s*die\\(\\);\\s*\\}\\s*\\2\\s*=\\s*\'([^\']+)\';\\s*eval\\(\\1\\(\\2,\\3\\)\\);~msi',
    'id' => 'decryptWithUserAgent',
  ),
  18 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*\'[bs64_dcogzinflate\\.\'\\s]+;\\s*)+(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*eval\\((?:\\$\\w+\\()+\\2\\)+;~msi',
    'id' => 'evalVarB64',
  ),
  19 => 
  array (
    'full' => '~(function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\'\';\\s*[^}]+\\}\\s*return\\s*\\$\\w+;\\s*\\}\\s*)?(?:\\$\\w+=\\w+\\(\'[^\']+\'\\);)+(\\$\\w+)=\\$\\w+\\(\'\',\\s*\\$\\w+\\(\'([^\']+)\'\\)\\);\\3\\(\\);~msi',
    'id' => 'createFuncHex2Bin',
  ),
  20 => 
  array (
    'full' => '~(define\\(\'([^\']+)\', \'[^\']+\'\\);\\$GLOBALS\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*?)\',([0-9a-fx]+),\\s*([\\-0-9a-f]+)\\)+;.*?)(?:if\\(!function_exists\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\[\\{]\\d+[\\}\\]]\\)+\\{function\\s*hex2bin\\(\\$\\w+\\)\\s*(?:[^}\\]]+[\\]\\}])+\\}function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{(?:\\8=substr\\(\\8,\\(int\\)\\(hex2bin\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]]\\s*[\\{\\[][0-9a-fx]+[\\}\\]]\\)+[;,]\\s*)+\\(int\\)\\(hex2bin\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;return\\s*\\8;\\}(?:\\$\\w+=\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]];)+function\\s*(\\w+)\\((\\$\\w+)\\)\\{(?:global\\s*\\$\\w+;)+\\s*return\\s*strrev\\(gzinflate\\(\\$\\w+\\(\\7\\(\\10\\)+;\\s*\\}(?:eval\\()+\\9\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;|((\\$\\w+)=urldecode\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\);((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)eval\\(\\$\\w+\\(\\$GLOBALS[\\{\\[]\\2[\\}\\]][\\{\\[][0-9a-fx]+[\\}\\]]\\)+;))~msi',
    'id' => 'explodeGzinflateSubstr',
  ),
  21 => 
  array (
    'full' => '~eval\\(\'\\?>\'\\.base64_decode\\(strtr\\(substr\\("([^"]+)",(\\d+)\\*2\\),substr\\("\\1",\\2,\\2\\),\\s*substr\\("\\1",0,\\2\\)+~msi',
    'id' => 'evalStrtr',
  ),
  22 => 
  array (
    'full' => '~(?:eval\\(base64_decode\\("[^"]+"\\)+;\\s*)+eval\\(base64_decode\\((\\w+)\\((\\$\\w+)\\[\\d\\],\\d+\\)+;eval\\((\\w+)\\(\\1\\(\\2\\[\\d+\\],\\d+\\),\\1\\(\\2\\[\\d+\\],\\d+\\),\\2\\)\\);__halt_compiler\\(\\);([\\w\\+/=]+)~msi',
    'id' => 'evalB64Chunks',
  ),
  23 => 
  array (
    'fast' => '~function\\s{0,50}(\\w+)\\(\\$\\w+,\\s{0,50}\\$\\w+\\s?\\)\\s{0,50}\\{\\s{0,50}(?:\\$\\w+\\s{0,50}=\\s{0,50}[\'"]([^\'"]+)[\'"];\\s{0,50})?(\\$\\w+\\s{0,50}=\\s{0,50}base64_encode\\s{0,50}\\(\\$\\w+\\);\\s{0,50})?(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:strlen|base64_decode)\\(\\$\\w+\\);\\s{0,50})+(?:if\\s{0,50}\\(\\$\\w+\\s{0,50}<=\\s{0,50}\\$\\w+\\)\\s{0,50}\\{\\s{0,50}return\\s{0,50}\\$\\w+\\s{0,50}\\^\\s{0,50}\\$\\w+;\\s{0,50}\\}|(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:""|0);\\s{0,50})+while\\s{0,50}\\(\\$\\w+\\s{0,50}<\\s{0,50}strlen\\s{0,50}\\(\\$\\w+\\)+\\s{0,50}\\{)\\s{0,50}for\\s{0,50}\\(\\s{0,50}\\$\\w+\\s{0,50}=\\s{0,50}0;\\s{0,50}\\$\\w+\\s{0,50}<\\s{0,50}(?:strlen\\s{0,50}\\()?\\$\\w+\\)?;\\s{0,50}(?:\\+\\+\\$\\w+|\\$\\w+\\+\\+)\\)\\s{0,50}\\{\\s{0,50}[^\\^]+\\^\\s{0,50}[^}]+[\\}\\s]+return\\s{0,50}(base64_decode\\(|gzuncompress\\s*\\(\\s*base64_decode\\s*\\()?\\$\\w+\\)?\\)?;\\s{0,50}\\};?\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}"([^"]+)";\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}(?:"([^"]+)"|\'([^\']+)\');\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}\\1\\((?:base64_decode\\()?(?:\\5|\\7)\\)?,\\s{0,50}(?:\\5|\\7)\\);\\s{0,50}eval\\s{0,50}\\(\\10\\);~msi',
    'full' => '~function\\s{0,50}(\\w+)\\(\\$\\w+,\\s{0,50}\\$\\w+\\s?\\)\\s{0,50}\\{\\s{0,50}(?:\\$\\w+\\s{0,50}=\\s{0,50}[\'"]([^\'"]+)[\'"];\\s{0,50})?(\\$\\w+\\s{0,50}=\\s{0,50}base64_encode\\s{0,50}\\(\\$\\w+\\);\\s{0,50})?(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:strlen|base64_decode)\\(\\$\\w+\\);\\s{0,50})+(?:if\\s{0,50}\\(\\$\\w+\\s{0,50}<=\\s{0,50}\\$\\w+\\)\\s{0,50}\\{\\s{0,50}return\\s{0,50}\\$\\w+\\s{0,50}\\^\\s{0,50}\\$\\w+;\\s{0,50}\\}|(?:\\$\\w+\\s{0,50}=\\s{0,50}(?:""|0);\\s{0,50})+while\\s{0,50}\\(\\$\\w+\\s{0,50}<\\s{0,50}strlen\\s{0,50}\\(\\$\\w+\\)+\\s{0,50}\\{)\\s{0,50}for\\s{0,50}\\(\\s{0,50}\\$\\w+\\s{0,50}=\\s{0,50}0;\\s{0,50}\\$\\w+\\s{0,50}<\\s{0,50}(?:strlen\\s{0,50}\\()?\\$\\w+\\)?;\\s{0,50}(?:\\+\\+\\$\\w+|\\$\\w+\\+\\+)\\)\\s{0,50}\\{\\s{0,50}[^\\^]+\\^\\s{0,50}[^}]+[\\}\\s]+return\\s{0,50}(base64_decode\\(|gzuncompress\\s*\\(\\s*base64_decode\\s*\\()?\\$\\w+\\)?\\)?;\\s{0,50}\\};?\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}"([^"]+)";\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}(?|"([^"]+)"|\'([^\']+)\');\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}\\1\\((?:base64_decode\\()?(?:\\5|\\7)\\)?,\\s{0,50}(?:\\5|\\7)\\);\\s{0,50}eval\\s{0,50}\\(\\9\\);~msi',
    'id' => 'b64FuncEval',
  ),
  24 => 
  array (
    'full' => '~(\\$\\w+)=create_function\\(((?:base64_decode\\(\'[^\']+\'\\)|chr\\([0-9a-fx\\-/]+\\)|str_rot13\\(\'[^\']+\'\\))\\.?,?)+\\);\\1\\(base64_decode\\(((?:base64_decode\\(\'[^\']+\'\\)|chr\\([0-9a-fx\\-/]+\\)|str_rot13\\(\'[^\']+\'\\)|\'[^\']*\')\\.?,?)+\\)\\);~msi',
    'id' => 'createFuncB64StrRotChr',
  ),
  25 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\(__FILE__,\\s*\'\\w\'\\);\\s*fseek\\(\\1,\\s*\\d+\\);\\s*(\\$\\w+)\\s*=\\s*stream_get_contents\\(\\1\\);\\s*fclose\\(\\1\\);\\s*(\\$\\w+)\\s*=\\s*create_function\\(\'\',\\s*gzuncompress\\(strrev\\(\\2\\)\\)\\);\\s*\\3\\(\\);\\s*__halt_compiler\\(\\);\\s*(.*)~msi',
    'id' => 'gzuncompressStrrev',
  ),
  26 => 
  array (
    'full' => '~@?(?:eval|assert)\\(str_rot13\\(\\s*(["\'])(riny\\((?:pbaireg_hhqrpbqr|fgeeri|tmvasyngr)\\((?:[^;]+;)+)\\1\\s*\\)\\);~msi',
    'id' => 'strRot13ConvertUUDecode',
  ),
  27 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=@?\\1\\(\'([^\']+)\',"([^"]+)"\\);\\s*@?\\3\\("([^"]+)"\\);~msi',
    'id' => 'createFuncHex',
  ),
  28 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strrev\\("\\(lave"\\);\\s*(\\$\\w+)\\s*=\\s*\\$\\w+\\s*\\.\\s*"base64_decode\\("\\s*\\.\\s*base64_decode\\(strrev\\(\\$\\w+\\)\\)\\s*\\.\\s*"\\)\\);";\\s*eval\\(strrev\\(strrev\\(\\4\\)\\)\\);\\s*}\\s*\\$\\w+\\s*=\\s*strrev\\("\\("\\);\\s*\\$\\w+\\s*=\\s*strrev\\(""\\{\\$\\w+\\}""\\);\\s*\\$\\w+\\s*=\\s*strrev\\("\\)"\\);\\s*\\$\\w+\\s*=\\s*strrev\\("\\)"\\);\\s*(\\$\\w+)\\s*=(?:\\s*\\$\\w+\\s*\\.?)+;\\s*\\3\\(strrev\\(base64_encode\\(\\5\\)\\)\\);~msi',
    'id' => 'evalStrrev',
  ),
  29 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*eval\\(base64_decode\\(substr\\(strrev\\(\\1\\),\\s*(\\d+),(\\-\\d+)\\)\\)\\);~msi',
    'id' => 'evalSubstr',
  ),
  30 => 
  array (
    'full' => '~((?:\\$\\w+\\.?=\'[^\']+\';\\s*)+)\\$\\w+=\\$\\w+;function\\s*(\\w+)\\((\\$\\w+),(\\$\\w+)\\)\\s*\\{(\\$\\w+)=\'\';for\\((\\$\\w+)=0;\\6<strlen\\(\\3\\);\\)for\\(\\5=0;\\5<strlen\\(\\4\\);\\5\\+\\+,\\6\\+\\+\\)(\\$\\w+)\\.=\\3\\{\\6\\}\\^\\4\\{\\5\\};return\\s*\\7;\\};(\\$\\w+)=base64_decode\\(\\8\\);@?(\\$\\w+)=\\2\\(\\8,\'([^\']+)\'\\);@?eval\\(@?gzuncompress\\(\\9\\)\\);~msi',
    'id' => 'XorGzUncompress',
  ),
  31 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)\\s*=\\s*str_replace\\("([^"]+)","","([^"]+)"\\);\\s*(\\$\\w+)=\'([base64_dco\\.\']+)\';\\s*@?eval\\(\\6\\(\\3\\("([^"]+)",\\s*"",\\s*\\1\\)\\)\\);~msi',
    'id' => 'evalStrReplace',
  ),
  32 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";(\\$\\w+)\\s*=\\s*base64_decode\\("([^"]+)"\\);eval\\(base64_decode\\(\\3\\)\\);(?:\\s*\\$\\w+\\s*=\\s*"[^"]+";)?~msi',
    'id' => 'sistemitComEnc',
  ),
  33 => 
  array (
    'full' => '~(function\\s*(\\w+)\\((\\$\\w+)\\){\\s*return\\s*(base64_decode|gzinflate|eval)\\(\\$\\w+(,\\d+)?\\);}\\s*)+(\\$\\w+)="([^"]+)";(preg_replace\\(\'/\\.\\*/e\',"([\\\\x0-9a-f]+)",\'\\.\'\\);)~msi',
    'id' => 'funcs',
  ),
  34 => 
  array (
    'full' => '~if\\(!defined\\(\'(\\w+)\'\\)\\)define\\(\'\\1\',__FILE__\\);(?:\\s*@eval\\(base64_decode\\(\'([^\']+)\'\\)\\);)+\\s*@chop\\(base64_decode\\(\'([^\']+)\'\\)~msi',
    'id' => 'fakeChop',
  ),
  35 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*"[^"]*"(?:\\.\\$\\w+)?;\\s*)+(\\$\\w+)=(?:\\$\\w+\\.?)+;\\s*eval\\(str_rot13\\(gzinflate\\(str_rot13\\(base64_decode\\(\\(\\1\\)\\)\\)\\)\\)\\);~msi',
    'id' => 'R4C',
  ),
  36 => 
  array (
    'full' => '~((?:\\$GLOBALS\\["[^"]+"\\]=base64_decode\\("[^"]*"\\);)+).{0,10}((?:\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]=base64_decode\\(\\$GLOBALS\\["[^"]+"\\]\\);)+).{0,10}(?:((?:\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]=base64_decode\\(\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\);)+).{0,10}(\\$\\w+)=\\$_POST\\[\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\];if\\(\\4\\!=\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\)\\s*\\{(\\$\\w+)=base64_decode\\(\\$_POST\\[\\$GLOBALS\\[\\$GLOBALS\\[\\$GLOBALS\\["[^"]+"\\]\\]\\]\\]\\);)?@?eval\\((?:"\\\\\\$\\w+=\\5;"\\);\\}|(?:\\w+\\()+\\$GLOBALS\\[\\$GLOBALS\\["([^"]+)"\\]\\]\\)\\)\\)\\);)~msi',
    'id' => 'manyGlobals',
  ),
  37 => 
  array (
    'full' => '~((?:\\$GLOBALS\\["[^"]+"\\]=base64_decode\\("[^"]*"\\);)+).*?if\\(md5\\(\\$_GET\\[\\$GLOBALS\\["[^"]+"\\]\\]\\).*?echo\\s?\\$GLOBALS\\["[^"]+"\\];}+\\s?\\?>~msi',
    'id' => 'manyGlobals',
  ),
  38 => 
  array (
    'full' => '~eval\\(\'\\$(\\w+)\\s*=\\s*"([^"]+)";\\$(\\w+)\\s*=\\s*"([^"]+)";(eval\\((?:\\w+\\()+)(\\$\\{"\\3"\\}\\s*\\.\\s*\\$\\{"\\1"})(\\)+;)\'\\);~msi',
    'id' => 'blackshadow',
  ),
  39 => 
  array (
    'full' => '~if\\(\\!\\s?defined\\(\\s?\'([^\']+)\'\\)\\)\\s?define\\(\\s?\'\\1\',\\s?\'[^\']+\'\\)?;\\s?call_user_func_array\\([\'"\\w\\s]+,\\s?array\\(\\d\\)\\);[^\\$]+(\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\s?=\\s?explode\\(\\s?\'([^\']+)\',\\s?gzinflate\\(\\s?substr\\(\\s?\'((?:[^\']+\')+),(\\dx\\w{1,50}),\\s?(\\-?[\\w]{1,50})\\)+;\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\s?=\\s*call_user_func_array\\([^,]+,\\s?array\\(\\s?\'([^\']+)\',\\s?\\$[GET_LOBALS]+\\[\\s?[\'"]?\\1[\'"]?\\]\\[(0x\\d+)\\]\\)+;)(?:.*?\\$[GET_LOBALS]+{\\s?[\'"]?\\1[\'"]?})+[^;]+;~msi',
    'id' => 'callUserFuncsPackDefinedVar',
  ),
  40 => 
  array (
    'fast' => '~((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\))(?>.*?((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\)))+(?:.*?goto\\s*(\\w+);\\s*.*?\\5:\\s*goto\\s*(\\w+);(?>[^\\\\]+[^;]+;\\s*)+\\w+:|=>pack\\(\\$\\w+,"[^"]+"\\),pack\\(\\$\\w+,"[^"]+"\\)=>\\$\\w+\\];\\$\\w+=\\$\\w+;\\w+:[^;]+;goto\\s*(\\w+);.*?(\\w+):)~msi',
    'full' => '~((\\$\\w+)=chr\\(72\\)\\s*\\.\\s*chr\\(42\\);\\$\\w+=.*?pack\\(\\2,"[^"]+"\\))(?>.*?(?1))+(?|.*?goto\\s*(\\w+);\\s*.*?\\3:\\s*goto\\s*(\\w+);(?>[^\\\\]+[^;]+;\\s*)+\\w+:|=>pack\\(\\$\\w+,"[^"]+"\\),pack\\(\\$\\w+,"[^"]+"\\)=>\\$\\w+\\];\\$\\w+=\\$\\w+;\\w+:[^;]+;goto\\s*(\\w+);.*?\\3:)~msi',
    'id' => 'SDCMS',
  ),
  41 => 
  array (
    'full' => '~goto\\s[^;]+;\\s?(?:\\w{1,50}:\\s?)?.{0,1920}?if\\s?\\(!@preg_match\\("\\\\\\w{1,50}.*?\\w{1,50}:[\\s}]+\\?>~msi',
    'id' => 'goto',
  ),
  42 => 
  array (
    'full' => '~(?:class\\s*(\\w+)\\s*\\{\\s*)?(?:function\\s*\\w+\\(\\)\\s*\\{\\s*)?(?:\\$[^;\\s]+\\s*=\\s*\\d;\\s*[^;\\s]+:\\s*if\\s*\\([^\\)]+\\)+\\s*\\{\\s*goto\\s*[^;\\s]+;\\s*\\}\\s*\\$[^;\\s]+[^:]+:\\s*[^;]+;\\s*)?goto [^;\\s]+;\\s*(?:[^;\\s]+:\\s*(?:[^;\\s]+:\\s*)?.*?goto\\s*[^;\\s]+;\\s*(?:}\\s*goto\\s*[^;\\s]+;)?(?:goto\\s*[^;\\s]+;)?\\s*)+(?:\\s*/\\*[^\\*]+\\*/\\s*)?[^;\\s]+:\\s*(?|}|[^;>]+;)(?:\\s*goto\\s*[^;\\s]+;\\s*[^;\\s]+:\\s*[^;\\s]+:\\s*|(?:\\s*die;\\s*}\\s*)?\\s*goto\\s*[^;\\s]+;\\s*[^;\\s]+:\\s*\\}?)?(?:(?:.*?goto\\s*\\w{1,50};)?(?:\\s*\\w{1,50}:\\s?)+)?(?:(?:[^;]+;\\s*goto\\s*\\w+;\\s*)+\\w+:\\s*include\\s*[^;]+;)?(foreach\\s*\\([^{]+(\\{(?:[^{}]|(?2))*\\}))?(?(1).*?\\s*\\}\\s*new\\s*\\1\\(\\);|)~msi',
    'fast' => '~goto [^;\\s]+;\\s*([^;\\s]+:\\s*(?>[^;\\s]+:\\s*)?.*?goto\\s*[^;\\s]+;\\s*(?>}\\s*goto\\s*[^;\\s]+;)?(?>goto\\s*[^;\\s]+;)?\\s*)+[^;\\s]+:\\s*[^;]+(?>;|\\?>)~msi',
    'precheck' => 
    array (
      0 => '~goto [^;\\s]+;\\s*~msi',
    ),
    'id' => 'goto',
  ),
  43 => 
  array (
    'full' => '~goto\\s*(\\w+);\\s*.*?\\1:\\s*goto\\s*(\\w+);(?:[^\\\\]+[^;]+;\\s*)+\\w+:\\s*(?:;|\\?>)~msi',
    'id' => 'goto',
  ),
  44 => 
  array (
    'full' => '~\\$\\w+\\s=\\sfile_get_contents\\(base64_decode\\(["\'][^"\']+["\']\\)\\s\\.\\sbase64_decode\\(["\'][^"\']+[\'"]\\)\\s\\.\\s\\$\\w+\\s\\.\\s["\'][^\'"]+["\']\\s\\.\\s\\$_SERVER\\[["\'][^\'"]+[\'"]\\]\\s\\.\\s["\'][^"\']+["\']\\s\\.\\s\\$_SERVER\\[["\'][^"\']+["\']\\]\\);.*?\\s\\$\\w+\\s=\\sbase64_decode\\(["\'][^"\']+["\']\\);\\s.*?\\s@unlink\\(\\$_SERVER\\[["\'][^"\']+["\']\\]\\);~msi',
    'id' => 'gotoBase64Decode',
  ),
  45 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:str_rot13\\(\\$\\w{1,50}\\)|[\'"][^"\']+[\'"]|base64_decode\\("(?:{\\$\\w{1,50}})+"\\));\\s*)+(\\$\\w{1,50})\\s?=\\s?base64_decode\\("((?:{\\$\\w{1,50}})+)"\\);\\s?eval\\(\\1\\);~msi',
    'id' => 'gotoStrRot13Vars',
  ),
  46 => 
  array (
    'precheck' => 
    array (
      0 => '~(\\$\\{"GLOBALS"\\}\\["\\w+"\\])\\s*=\\s*"\\w+";~msi',
      1 => '~\\s*exec\\(\\$\\w+\\);\\s*echo\\s*"[^"]+";~msi',
    ),
    'full' => '~(\\$\\{"GLOBALS"\\}\\["\\w+"\\])\\s*=\\s*"\\w+";\\s*(?:\\$\\{"GLOBALS"\\}\\["(\\w+)"\\]\\s*=\\s*"\\w+";\\s*)+.*?;\\s*\\$\\{\\1\\}\\s*=\\s*[\\"\'][^;]+[\\"\'];\\s*exec\\(\\$\\w+\\);\\s*echo\\s*"[^"]+";\\s*\\}\\s*\\}~msi',
    'id' => 'gotoShell',
  ),
  47 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\'[^\']++\';\\s*)*eval\\(base64_decode\\(substr\\("(?:[^"]++)",(?:\\d+),(?:-?\\d+)\\)\\.base64_decode\\(strrev\\("[^"]++"(?:\\.(?:substr\\("(?:[^"]++)",(?:\\d++),(?:-?\\d++)\\)|"(?:[^"]+)"))++\\)\\)\\)\\);(?:\\$\\w+\\s*=\\s*\'[^\']++\';\\s*)*~msi',
    'id' => 'substrEmpty',
  ),
  48 => 
  array (
    'full' => '~function\\s{0,50}(\\w+)\\((\\$\\w+)\\)\\s{0,50}\\{\\s{0,50}\\2\\s{0,50}=\\s{0,50}substr\\(\\2,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f]+)\\3\\)+;\\s{0,50}\\2\\s{0,50}=\\s{0,50}substr\\(\\2,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f]+)\\5\\)*,\\s{0,50}\\(int\\)\\s{0,50}\\(?(?:hex2bin\\()?([\'"])([0-9a-f\\-]+)\\7\\)+;\\s{0,50}return\\s{0,50}\\2;\\s{0,50}\\}\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}([\'"])[^\'"]+\\10;\\s{0,50}(\\$\\w+)\\s{0,50}=\\s{0,50}[\'"]base64_decode[\'"];\\s{0,50}function\\s{0,50}\\w+\\((\\$\\w+)\\)\\s{0,50}{\\s{0,50}global\\s{0,50}\\9;\\s{0,50}global\\s{0,50}\\11;\\s{0,50}return\\s{0,50}strrev\\(gzinflate\\(\\11\\(\\1\\(\\12\\)\\)\\)\\);\\s{0,50}\\}\\s{0,50}(?:(?:eval\\()+\\w+\\(([\'"]))?([^\'"]+)\\13\\)+;~msi',
    'id' => 'Obf_20200522_1',
  ),
  49 => 
  array (
    'full' => '~(\\$auth_pass\\s*=\\s*"[^"]+";\\s*(?:/\\*[^\\*]+\\*/\\s*)?)\\$__="";((?:\\$__=\\$__\\."[^"]+";\\s*)+)\\$\\w+=\\$__;function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\{\\s*for\\((\\$\\w+)=0;\\6<strlen\\(\\4\\);\\)\\s*for\\((\\$\\w+)=0;\\7<strlen\\(\\5\\);\\7\\+\\+,\\s*\\6\\+\\+\\)\\s*(\\$\\w+)\\s*\\.=\\s*\\4\\{\\6\\}\\s*\\^\\s*\\5\\{\\7\\};\\s*return\\s*\\8;\\s*\\};(\\$\\w+)=base64_decode\\(\\9\\);\\$__=\\3\\(\\9,"([^"]+)"\\);\\$_=create_function\\("",\\$__\\);\\$_\\(\\);~msi',
    'id' => 'b64xoredkey',
  ),
  50 => 
  array (
    'full' => '~(eval\\(gzinflate\\(base64_decode\\("([^"]+)"\\)\\)\\);\\s*)((?:eval\\((?:\\$\\w+\\()+"[^"]+"\\)+;\\s*)+)~msi',
    'id' => 'linesCond',
  ),
  51 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*\'[\'.error_reporting]+;\\s*\\1\\(0\\);((?:\\s*\\$\\w+\\s*=\\s*[\'abcdefgilnorstz64_.]+;)+)((?:\\s*\\$\\w+\\s*=\\s*\'[^;]+\';)+)((?:\\s*\\$\\w+\\()+)(\\$\\w+)[\\s\\)]+;\\s*die\\(\\);~mis',
    'id' => 'blackScorpShell',
  ),
  52 => 
  array (
    'fast' => '~()(\\$\\w+)\\s*=\\s*basename(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)trim(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)preg_replace(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)rawurldecode(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)"[%0-9A-F\\.]+"(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*),\\s*\'\',\\s*__FILE__(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*);(\\$\\w+)\\s*=\\s*"([%\\w\\.\\-\\~]+)";(?:(\\$\\w+)=[^;]+;\\5(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\'\',\\s*\'};\'\\s*\\.\\s*(?:(?:/\\*\\w+\\*/)*)\\()?(?:eval(?:(?:/\\*\\w+\\*/)*)\\()?(?:(?:/\\*\\w+\\*/)*)rawurldecode(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\s*\\^\\s*substr(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)str_repeat(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\2,\\s*(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)/strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\2(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\s*\\+\\s*1(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*),\\s*0,(?:(?:/\\*\\w+\\*/)*)\\s*strlen(?:(?:/\\*\\w+\\*/)*)\\((?:(?:/\\*\\w+\\*/)*)\\3(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:/\\*\\w+\\*/)*)\\)(?:(?:(?:/\\*\\w+\\*/)*)\\s*\\.\\s*\'{\'(?:(?:/\\*\\w+\\*/)*)\\))?(?:(?:/\\*\\w+\\*/)*);~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*\\w+\\*/)*))(\\$\\w+)\\s*=\\s*basename(?&c)\\((?&c)trim(?&c)\\((?&c)preg_replace(?&c)\\((?&c)rawurldecode(?&c)\\((?&c)"[%0-9A-F\\.]+"(?&c)\\)(?&c),\\s*\'\',\\s*__FILE__(?&c)\\)(?&c)\\)(?&c)\\)(?&c);(\\$\\w+)\\s*=\\s*"([%\\w\\.\\-\\~]+)";(?:(\\$\\w+)=[^;]+;\\5(?&c)\\((?&c)\'\',\\s*\'};\'\\s*\\.\\s*(?&c)\\()?(?:eval(?&c)\\()?(?&c)rawurldecode(?&c)\\((?&c)\\3(?&c)\\)(?&c)\\s*\\^\\s*substr(?&c)\\((?&c)str_repeat(?&c)\\((?&c)\\2,\\s*(?&c)\\((?&c)strlen(?&c)\\((?&c)\\3(?&c)\\)(?&c)/strlen(?&c)\\((?&c)\\2(?&c)\\)(?&c)\\)(?&c)\\s*\\+\\s*1(?&c)\\)(?&c),\\s*0,(?&c)\\s*strlen(?&c)\\((?&c)\\3(?&c)\\)(?&c)\\)(?&c)\\)(?:(?&c)\\s*\\.\\s*\'{\'(?&c)\\))?(?&c);~msi',
    'id' => 'xorFName',
  ),
  53 => 
  array (
    'full' => '~(\\$\\w{1,40})=base64_decode\\(\'[^\']+\'\\);(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);(\\$\\w+)=base64_decode\\(\'([^\']+)\'\\);eval\\(\\1\\(gzuncompress\\(\\2\\(\\3\\)\\)\\)\\);~msi',
    'id' => 'phpMess',
  ),
  54 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"([^\\"]+)\\";\\s*\\$\\w+\\s*=\\s*\\$\\w+\\(\\1,\\"[^\\"]+\\",\\"[^\\"]+\\"\\);\\s*\\$\\w+\\(\\"[^\\"]+\\",\\"[^\\"]+\\",\\"\\.\\"\\);~msi',
    'id' => 'pregReplaceSample05',
  ),
  55 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\w+\\(\'[^\\)]+\'\\);\\s*(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\\)]+\'\\);\\s*(\\$\\w+)\\s*=\\s*\\"([^\\"]+)\\";\\s*(\\$\\w+)\\s*=\\s*[^;]+;\\s*\\2\\(\\5,\\"[^\']+\'\\3\'[^\\"]+\\",\\"\\.\\"\\);~msi',
    'id' => 'pregReplaceB64',
  ),
  56 => 
  array (
    'full' => '~preg_replace\\([\'"]/\\(\\.\\*\\)/e[\'"],[\'"]([^\'"]+)[\'"],\\s?NULL\\);~msi',
    'id' => 'pregReplaceStr',
  ),
  57 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'([^\']+)\';\\s*\\1\\s*=\\s*gzinflate\\s*\\(base64_decode\\s*\\(\\1\\)\\);\\s*\\1\\s*=\\s*str_replace\\s*\\(\\"__FILE__\\",\\"\'\\$\\w+\'\\",\\1\\);\\s*eval\\s*\\(\\1\\);~msi',
    'id' => 'GBE',
  ),
  58 => 
  array (
    'full' => '~\\$GLOBALS\\[\'([_\\d]{3,20})\'\\]=array\\(([^;]*)\\);\\s*\\?><\\?\\s*function\\s*(_\\d{1,20})\\(\\$\\w{1,10}\\)\\s*{\\$\\w{1,10}=array\\(([^;]{10,1000})\\);return base64_decode\\(\\$\\w{1,10}\\[\\$\\w{1,10}\\]\\);}\\s*\\?><\\?php\\s*(if\\(\\3\\(\\d{1,3}\\)==\\$_GET\\[\\3\\(\\d{1,3}\\)\\]\\)\\s*{[^}]{0,100}\\}if[^}]{3,500}\\})~msi',
    'id' => 'globalsArrayDictFunc',
  ),
  59 => 
  array (
    'full' => '~(?:if\\s*\\(\\!isset\\(\\$\\w+\\)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\\w+;\\s*)?(\\$GLOBALS\\[\\s*[\'"]_+\\w{1,60}[\'"]\\s*\\])\\s*=\\s*\\s*array\\s*\\(\\s*(?>base64_decode\\s*\\([^)]+\\)[,\\)]|\'\\w*\'[,\\)])+;\\s*(?>\\?>\\s*\\<\\?(?>php)?\\s*)?(?:function\\s*(\\w+)\\((\\$\\w+)\\)\\{(?>static\\s*\\$\\w+=\\s*\\w+;\\s*if\\(\\$\\w+\\s*==\\s*\\w+\\)\\s*)?(\\$\\w+)=array\\([^\\)]+\\);return\\s*base64_decode\\(\\4\\[\\3\\]\\);\\})?\\s*(?>\\?\\>\\s*)?(?:\\<\\?(?>php)?(?:\\s*\\$GLOBALS\\[\\2\\(\\d+\\)\\]=array\\((?:\\1\\[\\d+\\]\\((?:\\2\\(\\d+\\)\\s*\\.?)+\\)+[,;])+)\\s*\\?\\>)?(?>\\<\\?)?(?>php)?(?:\\s*\\1\\[\\d+\\].+?\\2\\(\\d+\\)\\);exit\\(\\);[\\}\\s]+|\\s*\\1\\[\\d+\\]\\s*\\([^)]+\\)[^|]+[^;]+;\\s*if\\(\\1\\[\\d+\\]\\([^{]+\\{\\s*\\$\\w+=\\s*\\w+;\\s*include\\(\\$_\\d+\\);\\}|\\s*function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{[^}]+\\}\\s*\\?\\>\\<\\?\\s*\\$\\w+=\\$GLOBALS\\[\\2\\(\\d+\\)\\]\\[[^?]+\\$GLOBALS\\[\\2\\(\\d+\\)\\]\\[[^]]+\\]\\((?:\\$\\w+,?)+\\);|\\s*@?\\1\\[\\d+\\]\\([^@]+@\\1\\[\\d+\\]\\("[^"]+"\\);|(?:\\s*\\$\\w+\\s*\\.?=[^;]+;)+foreach\\([^)]+\\)\\1\\[\\d+\\]\\((?:\\$\\w+,?)+\\);|\\s*@?\\1\\[\\d+\\]\\([^@]+@\\1\\[\\d+\\]\\(\\2[^}]+\\}\\}else[^}]+\\}\\}|\\s*\\1\\[\\d+\\]\\([^?]+\\?[^?]+[^>]+>[^}]+}foreach\\([^}]+}[^|]+\\|\\|\\s*(?:[^}]+\\}){18}if\\(isset\\(\\$\\w+\\[\\2\\(\\d+\\)\\]\\)\\)\\{[^}]+}\\w+\\(\\$\\w+\\);if\\(\\$\\w+\\s*==\\s*\\$\\w+\\)\\w+\\(\\$\\w+\\);|\\s*@\\1\\[\\d+\\]\\((?:[^?]+\\?)+[^;]+;@\\1\\[\\d+\\]\\([^}]+}{5}|(?:function[^}]+})+(?:[^}]+})+}[^!]+(?:[^}]+})+else{return\\s*\\2\\(\\d+\\);\\}\\}|\\s*\\1\\[\\d+\\]\\(\\d+\\);(?:[^}]+})+\\s*if\\([^}]+\\}\\s*\\w+\\(\\s*\\2\\(\\d+\\)[^;]+;\\s*\\}|\\s*if\\([^}]+\\}\\}if\\([^}]+\\}\\1\\[\\d+\\]\\(\\$\\w+\\);\\}\\}|\\1\\[\\d+\\]\\((?:[^}]+}+)+if\\(@?\\$\\w+\\[\\2\\(\\d+\\)\\]\\!=\\s*[^{]+\\{\\$\\w+=\\w+\\(\\$\\w+\\[\\2\\(\\d+\\)\\]\\);if\\(\\1\\[\\d+\\]\\s*\\(\\2\\(\\d+\\),[^)]+\\)\\)\\{\\1\\[\\d+\\]\\(\\2\\(\\d+\\),\\$\\w+\\);\\}\\}|(?:\\s*[^}]+\\})+echo\\s*\\$\\w+;[^;]+;|[^}]+\\}else{[^}]+\\}\\}else\\{[^}]+\\}echo\\s*\\1\\[\\d+\\]\\([^}]+}\\s*}|\\$\\w+=\\2\\(\\d+\\);[^;]+;\\1\\[\\d+\\]\\((?:\\2\\(\\d+\\),?)+\\);|[^}]+}else{\\s*[^}]+\\}\\}else\\{[^}]+\\}if[^}]+}else\\s*if[^}]+\\}if[^{]+{\\1\\[\\d+\\]\\([^}]+\\}\\s*\\}|\\1\\[\\d+\\]\\s*\\([^}]+\\}if\\([^}]+}if\\(\\1[^}]+\\}else\\s*if\\([^}]+\\}\\1\\[\\d+\\]\\([^}]+\\}if\\([^)]+\\)\\]==\\s*\\2\\(\\d+\\)+eval\\(\\1\\[\\d+\\]\\(\\$\\w+[^)]+\\)+;|(?:[^}]+\\})+echo\\s*\\$\\w+;|(?:[^}]+\\}+)+;|\\1\\[\\d+\\]\\((?:[^{]+\\{+)+\\1\\[\\d+\\]\\(\\2[^;]+;\\}\\}|(?:[^{]+\\{)+\\1\\[\\d+\\]\\(\\2\\(\\d+\\)+;\\}echo\\s*\\$\\w+;|(?:[^{]+\\{)+[^}]+}if\\(@?\\$\\w+\\[\\2\\(\\d+\\)\\][^)]+\\)+eval\\(\\1\\[\\d+\\]\\(\\$\\w+[^)]+\\)+;|\\s*(?:\\$_\\d{1,3}=\\1\\[\\d{1,3}\\]\\(\\$_POST\\[\\2\\(\\d{1,3}\\)\\]\\);){1,10}\\$_\\d{1,3}=\\1\\[\\d{1,3}\\]\\([$_\\d,]{1,30}\\);if\\([$_\\d,]{2,5}\\){echo\\s\\2\\(\\d{1,3}\\);}else\\{echo\\s\\2\\(\\d{1,3}\\)\\s*\\.[_\\d$]{1,3};}\\s*\\?\\>)~msi',
    'fast' => '~\\$GLOBALS\\[\\s*[\'"]_+\\w{1,60}[\'"]\\s*\\]\\s*=\\s*\\s*array\\s*\\(\\s*base64_decode\\s*\\(~msi',
    'id' => 'Bitrix',
  ),
  60 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?__FILE__;\\s?(?:\\$\\w{1,50}\\s?=\\s?__LINE__;\\s?)?\\$\\w{1,50}\\s?=\\s?(\\d{1,10});\\s?eval\\(+((?:base64_decode\\(|gzuncompress\\()+[\'"][^"\']+[\'"]\\)+);\\s?return;\\s*\\?>\\s*([^\\s]+)~msi',
    'id' => 'lockit3',
  ),
  61 => 
  array (
    'full' => '~\\$\\w{1,40}\\s*=\\s*(__FILE__|__LINE__);\\s*\\$\\w{1,40}\\s*=\\s*(\\d+);\\s*eval(\\s*\\()+\\$?\\w+\\s*\\([\'"][^\'"]+[\'"](\\s*\\))+;\\s*return\\s*;\\s*\\?>(.+)~msi',
    'id' => 'B64inHTML',
  ),
  62 => 
  array (
    'full' => '~<\\?php\\s+(?:/[*/].*?)?(?:\\$[O0]*=__FILE__;\\s*)?(\\$[O0]*)=urldecode\\(\'([%a-f0-9]+)\'\\);(\\$(GLOBALS\\[\')?[O0]*(\'\\])?=(\\d+);)?(.*?)(\\$(GLOBALS\\[\')?[O0]*(\'\\])?\\.?=(\\$(GLOBALS\\[\')?[O0]*(\'\\])?([{\\[]\\d+[}\\]])?\\.?)+;)+([^\\?]+)\\?\\>[\\s\\w\\~=/+\\\\^{`%|@[\\]}]+~msi',
    'fast' => '~(\\$[O0]*)=urldecode\\(\'([%a-f0-9]+)\'\\);(\\$(GLOBALS\\[\')?[O0]*(\'\\])?=(\\d+);)?(.*?)(\\$(GLOBALS\\[\')?[O0]*(\'\\])?\\.?=(\\$(GLOBALS\\[\')?[O0]*(\'\\])?([{\\[]\\d+[}\\]])?\\.?)+;)+([^\\?]+)\\?\\>[\\s\\w\\~=/+\\\\^{`%|@[}]+~msi',
    'id' => 'LockIt',
  ),
  63 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\\s*@?eval\\s*\\(\\1\\s*\\([^\\)]+\\)+\\s*;~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*\\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\\s*@?eval\\s*\\(\\1\\s*\\(~msi',
    'id' => 'FOPO',
  ),
  64 => 
  array (
    'full' => '~\\$_F=__FILE__;\\$_X=\'([^\']+\');eval\\([^\\)]+\\)+;~msi',
    'fast' => '~\\$_F=__FILE__;\\$_X=\'([^\']+\');eval\\(~ms',
    'id' => 'ByteRun',
  ),
  65 => 
  array (
    'precheck' => 
    array (
      0 => '~(urldecode|base64_decode){0,1}~msi',
      1 => '~(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}~msi',
      2 => '~(\\$\\w{1,40}=\'[^\']+\';\\s*)+(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}~msi',
    ),
    'full' => '~(\\$\\w{1,40}=\'[^\']+\';\\s*)+(\\$[\\w{1,40}]+)=(urldecode|base64_decode){0,1}\\(?[\'"]([\\w+%=-]+)[\'"]\\)?;((\\$\\w+)=[^;]+;)+[^\\(]+\\(\'Content-Type.*?;\\${"[^"]+"}\\["[\\\\x0-9a-f]+"\\]\\(\\);~msi',
    'id' => 'Urldecode',
  ),
  66 => 
  array (
    'full' => '~(\\$[\\w{1,40}]+)\\s?=\\s?(urldecode|base64_decode)\\(?[\'"]([\\w+%=\\-/\\\\\\*]+)[\'"]\\);(\\s*\\$\\w+\\.?\\s?=\\s?@?((?:\\$\\w+\\s*\\.\\s*)?\\$\\w+[{\\[]\\d+[}\\]]\\s*[\\.;]?\\s*)+)+((\\$\\w+=["\']([^\'"]+)[\'"];\\s*eval\\(\'\\?>\'\\.[\\$\\w\\(\\)\\*\\d,\\s]+);|(eval\\(\\s*\\$\\w+\\([\'"]([^\'"]+)[\'"][)\\s]+;)|header\\(\'[^\']+\'\\);(?:\\$\\w+=\\${[^}]+}\\[[^\\]]+\\]\\(\'.*?\'?;}?\'\\);)+\\${[^}]+}\\[[^\\]]+\\]\\(\\);)~msi',
    'id' => 'UrlDecode2',
  ),
  67 => 
  array (
    'precheck' => 
    array (
      0 => '~(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+~msi',
    ),
    'fast' => '~(?:\\$\\w{1,40}\\s?=\\s?[\'"]?[\\d\\w]+[\'"]?;\\s*)*()(?:(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+(?:global\\s*\\$\\w+;\\s*)?(\\$[\\w{1,40}]+)\\s?=\\s?urldecode\\(\\2\\);|\\$\\w{1,40}\\s?=\\s?urldecode\\([\'"][^\'"]+[\'"]\\);(?:\\s*header\\(\'Content-Type:[^\\)]+\\);\\s*(?:\\$\\w+="\\d+";\\s*)+)?function\\s*\\w+\\([^{]+\\{global\\s*\\$\\w+;)\\s*.+?\\$\\w{1,40}(?:.{1,1000}\\$\\w{1,40}[{\\[]\\d+[}\\]]\\.?)+?.*?(?:function\\s*(\\w+)\\(\\$\\w+\\s*=\\s*\'\'\\)\\{global\\s*\\$\\w{1,40};@.+\\5\\(\\);|function\\s*\\w+\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\s*\\{\\$\\w+\\s*[^)]+\\)[^}]+;\\}|header\\((?:\\$\\w{1,40}[\\[\\{]\\d+[\\]\\}]\\s?\\.?\\s?)+\\).?\\s?})~msi',
    'full' => '~(?:\\$\\w{1,40}\\s?=\\s?[\'"]?[\\d\\w]+[\'"]?;\\s*)*()(?|(?:(\\$\\w{1,40})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*)+(?:global\\s*\\$\\w+;\\s*)?(\\$[\\w{1,40}]+)\\s?=\\s?urldecode\\(\\2\\);|(\\$\\w{1,40})\\s?=\\s?urldecode\\([\'"]([^\'"]+)[\'"]\\);(?:\\s*header\\(\'Content-Type:[^\\)]+\\);\\s*(?:\\$\\w+="\\d+";\\s*)+)?function\\s*\\w+\\([^{]+\\{global\\s*(\\$\\w+);)\\s*.+?\\4(?:.{1,1000}\\4[{\\[]\\d+[}\\]]\\.?)+?.*?(?:function\\s*(\\w+)\\(\\$\\w+\\s*=\\s*\'\'\\)\\{global\\s*\\4;@.+\\5\\(\\);|function\\s*\\w+\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\s*\\{\\$\\w+\\s*[^)]+\\)[^}]+;\\}|header\\((?:\\4[\\[\\{]\\d+[\\]\\}]\\s?\\.?\\s?)+\\).?\\s?})~msi',
    'id' => 'UrlDecode3',
  ),
  68 => 
  array (
    'full' => '~(?:@?session_start\\(\\);)?(?:@?(?:set_time_limit|error_reporting)\\(\\d+\\);){1,2}(?:ini_set\\(base64_decode\\([\'"][^\'"]+[\'"]\\)|@\\$\\w{1,50}=\\$_POST\\[base64_decode\\([\'"][^\'"]+[\'"]\\)\\];|if\\((?:\\w{1,50}\\(\\)\\){foreach\\(\\$_POST\\s{0,50}as\\s{0,50}\\$\\w{1,50}=>\\$\\w{1,50}\\)|\\$_GET|!empty\\(\\$_SERVER\\[))(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\)+\\.?){1,200}\\]?(?:\\)\\)|;})?(?:;return\\s?\\$\\w{1,50};})?;?~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  69 => 
  array (
    'full' => '~echo\\s{0,50}base64_decode\\(\'[^\']+\'\\);\\s{0,50}echo\\s{0,50}base64_decode\\(\'[^\']+\'\\)\\.php_uname\\(\\)\\.base64_decode\\(\'[^\']+\'\\);.*?else\\s{0,50}{\\s{0,50}echo\\s{0,50}base64_decode\\(\'[^\']+\'\\);\\s{0,50}}}}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  70 => 
  array (
    'full' => '~{(\\$\\w{1,100})\\s?=(?:\\s?base64_decode\\(\'[^\']+\'\\)\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\1\\(base64_decode\\(\'[^\']+\'\\),(?:\\s?base64_decode\\(\'[^\']+\'\\)\\.?)+\\);\\2\\(base64_decode\\(\'([^\']+)\'\\)\\);exit;}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  71 => 
  array (
    'full' => '~eval\\(base64_decode\\(\'[^\']+\'\\)\\.file_get_contents\\(base64_decode\\(\'[^\']+\'\\)\\)\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  72 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}->get\\(base64_decode\\([\'"][^\'"]+[\'"]\\)(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\)){1,200}\\)\\s?\\)\\s?{~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  73 => 
  array (
    'full' => '~\\${base64_decode\\(\'[^\']+\'\\)}\\[base64_decode\\(\'[^\']+\'\\)]\\s?=\\s?base64_decode\\(\'[^\']+\'\\);if\\(isset\\(\\$_GET\\[base64_decode\\(\'[^\']+\'\\)]\\).*?\\${\\${base64_decode\\(\'[^\']+\'\\)}\\[base64_decode\\(\'[^\']+\'\\)]}\\(base64_decode\\(\'[^\']+\'\\)\\);exit;}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  74 => 
  array (
    'fast' => '~(?:\\$GLOBALS\\["[^"]+"\\]\\s*=\\s*base64_decode\\s*\\((?:"[^"]*")?(?:\'[^\']*\')?\\);\\s*)+function\\s*(\\w+)\\s*\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*curl_init\\s*\\(\\$GLOBALS[^}]+\\}\\s*(\\$\\w+)\\s*=\\s*\\1\\s*\\(\\$GLOBALS\\[[^\\)]+\\);\\s*eval\\s*\\((?:"[^"]*"\\s*\\.\\s*)?\\2\\);~msi',
    'full' => '~(?:\\$GLOBALS\\["[^"]+"\\]\\s*=\\s*base64_decode\\s*\\((?|"[^"]*"|\'[^\']*\')\\);\\s*)+function\\s*(\\w+)\\s*\\(\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*curl_init\\s*\\(\\$GLOBALS[^}]+\\}\\s*(\\$\\w+)\\s*=\\s*\\1\\s*\\(\\$GLOBALS\\[[^\\)]+\\);\\s*eval\\s*\\((?:"[^"]*"\\s*\\.\\s*)?\\2\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  75 => 
  array (
    'fast' => '~()(?:error_reporting\\(0\\);\\s*ignore_user_abort;\\s*sleep\\(\\d+\\);)?\\$\\w+\\s*=\\s*\\(\\(\\!empty\\(\\$_SERVER\\[(?:base64_decode\\(\'[^\']+\'\\))\\s*\\]\\)+\\s*\\?\\s*(?:base64_decode\\(\'[^\']+\'\\))\\s*:[^;]+;\\s*\\$\\w+\\s*=\\s*str_replace\\((?:base64_decode\\(\'[^\']+\'\\)),\\s*\'\',\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*(?:base64_decode\\(\'[^\']+\'\\));\\s*)+\\$\\w+\\s*=\\s*rand\\(\\d+,\\s*\\d+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*base64_decode\\((?:base64_decode\\(\'[^\']+\'\\))\\);\\s*)+.*?\\$\\w+\\s*=\\s*array\\((?:(?:base64_decode\\(\'[^\']+\'\\)),?\\s*)+\\);\\s*for\\s*\\([^}]+\\}\\s*(\\$\\w+)\\s*=\\s*basename\\(__FILE__,\\s*(?:base64_decode\\(\'[^\']+\'\\))\\)[^;]+;\\s*(\\$\\w+)\\s*=\\s*file_get_contents\\(\\2\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\([^;]+;\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*exec\\((?:base64_decode\\(\'[^\']+\'\\))[^;]+;~msi',
    'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\\(\'[^\']+\'\\))))(?:error_reporting\\(0\\);\\s*ignore_user_abort;\\s*sleep\\(\\d+\\);)?\\$\\w+\\s*=\\s*\\(\\(\\!empty\\(\\$_SERVER\\[(?&s)\\s*\\]\\)+\\s*\\?\\s*(?&s)\\s*:[^;]+;\\s*\\$\\w+\\s*=\\s*str_replace\\((?&s),\\s*\'\',\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*(?&s);\\s*)+\\$\\w+\\s*=\\s*rand\\(\\d+,\\s*\\d+\\);\\s*(?:if\\s*\\(\\$\\w+\\s*==\\s*\\d+\\)\\s*\\$\\w+\\s*=\\s*base64_decode\\((?&s)\\);\\s*)+.*?\\$\\w+\\s*=\\s*array\\((?:(?&s),?\\s*)+\\);\\s*for\\s*\\([^}]+\\}\\s*(\\$\\w+)\\s*=\\s*basename\\(__FILE__,\\s*(?&s)\\)[^;]+;\\s*(\\$\\w+)\\s*=\\s*file_get_contents\\(\\2\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\([^;]+;\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*exec\\((?&s)[^;]+;~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  76 => 
  array (
    'full' => '~if\\s?\\(isset\\(\\$_POST\\[[\'"][^\'"]+[\'"]\\]\\)\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?substr\\(\\$_POST\\[[\'"][^\'"]+[\'"]\\],\\s?\\d+\\);(?:[^;]+;\\s?){2}\\$\\w{1,50}\\s?=\\s?proc_open\\(base64_decode\\([\'"][^\'"]+[\'"]\\),\\s?array[^;]+;\\s?}~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  77 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?ignore_user_abort\\(true\\);\\s?sleep\\(\\d{1,5}\\);(?:\\$\\w{1,50}\\s?=\\s?rand[^;]+;)?(?:(?:if\\(\\$\\w{1,50}==\\d+\\))?(\\$\\w{1,100})\\s?=\\s?base64_decode\\(base64_decode\\(\'[^\']+\'\\)\\);)+.*?chmod\\((?:base64_decode\\()?[\'"]?[^\'"]+[\'"]?\\)?,\\d+\\);.*?base64_decode\\((?:base64_decode\\()?[\'"][^\'"]+[\'"]\\)\\);(?:chmod\\()?(?:.*?base64_decode\\([\'"][^\'"]+[\'"]\\))+(?:\\.__DIR__\\."[^"]+",\\$\\w+\\);@?unlink\\("?\\$\\w+"?\\));~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  78 => 
  array (
    'fast' => '~()(?:\\$\\w+\\s*=\\s*"\\w{32}";|=@?NULL;)(?:\\s*(?:(?:\\$\\{)+(?:(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))|\\$\\w+)\\}(?:\\[(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\])?\\}?|\\$\\w+)=(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\));)+\\s*eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\(\\$\\{\\$\\{(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\}\\[(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))\\]\\}\\)+;\\s*(?:__halt_compiler\\(\\);)?\\s*exit;~msi',
    'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\\((?:\\"[^\\"]+\\"|\'[^\']+\')\\))))(?:\\$\\w+\\s*=\\s*"\\w{32}";|=@?NULL;)(?:\\s*(?:(?:\\$\\{)+(?:(?&s)|\\$\\w+)\\}(?:\\[(?&s)\\])?\\}?|\\$\\w+)=(?&s);)+\\s*eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\(\\$\\{\\$\\{(?&s)\\}\\[(?&s)\\]\\}\\)+;\\s*(?:__halt_compiler\\(\\);)?\\s*exit;~msi',
    'id' => 'manyB64WithVarNorm',
  ),
  79 => 
  array (
    'full' => '~explode\\(\\"\\*\\*\\*\\",\\s*\\$\\w+\\);\\s*eval\\(eval\\(\\"return strrev\\(base64_decode\\([^\\)]+\\)+;~msi',
    'fast' => '~explode\\(\\"\\*\\*\\*\\",\\s*\\$\\w+\\);\\s*eval\\(eval\\(\\"return strrev\\(base64_decode\\(~msi',
    'id' => 'cobra',
  ),
  80 => 
  array (
    'full' => '~\\$[O0]+=\\(base64_decode\\(strtr\\(fread\\(\\$[O0]+,(\\d+)\\),\'([^\']+)\',\'([^\']+)\'\\)\\)\\);eval\\([^\\)]+\\)+;~msi',
    'fast' => '~\\$[O0]+=\\(base64_decode\\(strtr\\(fread\\(\\$[O0]+,(\\d+)\\),\'([^\']+)\',\'([^\']+)\'\\)\\)\\);eval\\(~msi',
    'id' => 'strtrFread',
  ),
  81 => 
  array (
    'full' => '~if\\s*\\(\\!extension_loaded\\(\'IonCube_loader\'\\)\\).+pack\\(\\"H\\*\\",\\s*\\$__ln\\(\\"/\\[A-Z,\\\\r,\\\\n\\]/\\",\\s*\\"\\",\\s*substr\\(\\$__lp,\\s*([0-9a-fx]+\\-[0-9a-fx]+)\\)\\)\\)[^\\?]+\\?\\>\\s*[0-9a-z\\r\\n]+~msi',
    'fast' => '~IonCube_loader~ms',
    'id' => 'FakeIonCube',
  ),
  82 => 
  array (
    'full' => '~(\\$\\w{1,40})="([\\w\\]\\[\\<\\&\\*\\_+=/]{300,})";\\$\\w+=\\$\\w+\\(\\1,"([\\w\\]\\[\\<\\&\\*\\_+=/]+)","([\\w\\]\\[\\<\\&\\*\\_+=/]+)"\\);~msi',
    'id' => 'strtrBase64',
  ),
  83 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*array\\((\'[^\']+\',?)+\\);\\s*.+?(\\$_\\w{1,40}\\[\\w+\\])\\s*=\\s*explode\\(\'([^\']+)\',\\s*\'([^\']+)\'\\);.+?(\\2\\[[a-fx\\d]+\\])\\(\\);(.+?\\2)+.+}~msi',
    'fast' => '~(\\$_\\w{1,40}\\[\\w+\\])\\s*=\\s*explode\\(\'([^\']+)\',\\s*\'([^\']+)\'\\);.+?(\\1\\[[a-fx\\d]+\\])\\(\\);~msi',
    'id' => 'explodeSubst',
  ),
  84 => 
  array (
    'full' => '~(\\$[\\w{1,40}]+)\\s*=\\s*\'([\\w+%=\\-\\#\\\\\'\\*]+)\';(\\$[\\w+]+)\\s*=\\s*Array\\(\\);(\\3\\[\\]\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;+)+(.+\\3)[^}]+}~msi',
    'fast' => '~(\\$[\\w{1,40}]+)\\s*=\\s*\'([\\w+%=\\-\\#\\\\\'\\*]+)\';(\\$[\\w+]+)\\s*=\\s*Array\\(\\);(\\3\\[\\]\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;+)+~msi',
    'id' => 'subst',
  ),
  85 => 
  array (
    'full' => '~if\\s{0,50}\\(!(?:function_exists|\\$\\W{1,50})\\(\\"([\\w\\W]{1,50})\\"\\)\\)\\s{0,50}{\\s{0,50}function \\1\\(.+?eval\\(\\1\\(\\"([^\\"]+)\\"\\)\\);~msi',
    'fast' => '~if\\s{0,50}\\(!(?:function_exists|\\$\\W{1,50})\\(\\"([\\w\\W]{1,50})\\"\\)\\)\\s{0,50}{\\s{0,50}function \\1\\(.+?eval\\(\\1\\(\\"[^\\"]+\\"\\)\\);~msi',
    'id' => 'decoder',
  ),
  86 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\\"riny\\(\\"\\.(\\$\\w+)\\(\\"base64_decode\\"\\);\\s*(\\$\\w+)\\s*=\\s*\\2\\(\\1\\.\'\\("([^"]+)"\\)\\);\'\\);\\s*\\$\\w+\\(\\3\\);~msi',
    'id' => 'GBZ',
  ),
  87 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$GLOBALS\\[\'[^\']+\'\\]\\s*=\\s*Array\\(\\);\\s*global\\s*\\$\\w+;(\\$\\w{1,40})\\s*=\\s*\\$GLOBALS;\\$\\{"\\\\x[a-z0-9\\\\]+"\\}\\[(\'\\w+\')\\]\\s*=\\s*\\"(([^\\"\\\\]|\\\\.)*)\\";\\1\\[(\\1\\[\\2\\]\\[\\d+\\].?).+?exit\\(\\);\\}+~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*\\$GLOBALS;\\$\\{"\\\\x[a-z0-9\\\\]+"\\}\\[(\'\\w+\')\\]\\s*=\\s*\\"(([^\\"\\\\]|\\\\.)*)\\";\\1\\[(\\1\\[\\2\\]\\[\\d+\\].?)~msi',
    'id' => 'globalsArray',
  ),
  88 => 
  array (
    'full' => '~(\\${(["\\w\\\\]+)}\\[["\\w\\\\]+\\]=["\\w\\\\]+;)+((\\${\\${(["\\w\\\\]+)}\\[["\\w\\\\]+\\]}).?=((urldecode\\(["%\\w]+\\);)|(\\${\\${["\\w\\\\]+}\\[["\\w\\\\]+\\]}{\\d+}.?)+;))+eval\\(\\${\\${["\\w\\\\]+}\\[["\\w\\\\]+\\]}\\(["\\w+=]+\\)\\);~msi',
    'id' => 'xbrangwolf',
  ),
  89 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'(\\\\.|[^\']){0,100}\';\\s*\\$\\w+\\s*=\\s*\'(\\\\.|[^\']){0,100}\'\\^\\1;[^)]+\\)+;\\s*\\$\\w+\\(\\);~msi',
    'fast' => '~((?>\\$\\w{1,40}))\\s*=\\s*\'((?>\\.|[^\']){0,100})\';\\s*\\$\\w+\\s*=\\s*\'((?>\\.|[^\']){0,100})\'\\^\\1;~msi',
    'id' => 'xoredVar',
  ),
  90 => 
  array (
    'full' => '~(?:(?:\\$\\w+=\'[^\']+\';\\s*)+(?:\\$\\w+=\'[^\']+\'\\^\'[^\']+\';\\s*)+.{0,50})?\\$\\w{1,40}=\'[^\']{0,100}(?:\'\\^\')?[^\']*\';(?:\\$\\w{1,40}=\\w{1,3};)?(?:\\$\\w{1,40}=\'[^\']+(?:\'\\^\')?[^\']*\';)+(?:.{0,6000}?)if\\(\\$\\w{1,40}==\\$\\w{1,40}\\(\\$\\w{1,40}\\)\\){(?:.{0,6000}?)(\\$\\w+)=\\$\\w+\\(\\$\\w+,\\$\\w+\\);\\1\\(\'[^\']+\',\'[^\']+\'\\);}.{0,300}\\$\\w{1,40}(?:\\(\'[^\']{0,100}\',\'[^\']{0,100}\'\\))?(?:.{0,300}\\s*;\\s*\'[^\']+\';){0,2}~msi',
    'fast' => '~\\$\\w{1,40}=\'[^\']{0,100}(?:\'\\^\')[^\']*\';(?:\\$\\w{1,40}=\'[^\']+(?:\'\\^\')?[^\']*\';)+~msi',
    'id' => 'xoredVar',
  ),
  91 => 
  array (
    'full' => '~(\\$\\w+)=fopen\\(__FILE__,\'r\'\\);(\\$\\w+)=fread\\(\\1,filesize\\(__FILE__\\)\\);fclose\\(\\1\\);(\\$\\w+)=explode\\(hex2bin\\(\'([^\']+)\'\\),\\2\\)\\[(\\d)\\];(\\$\\w+)=\\[\\];for\\((\\$\\w+)=0;\\7<strlen\\(\\3\\);\\7\\+\\+\\)\\6\\[\\]=ord\\(\\3\\[\\7\\]\\)\\s*xor\\s*\\7;eval\\(hex2bin\\(base64_decode\\(implode\\(array_map\\(hex2bin\\(\'([^\']+)\'\\),\\6\\)\\)\\)\\)\\);__halt_compiler\\(\\);\\w+~msi',
    'id' => 'D5',
  ),
  92 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*\'([^\']*)\';\\s*(\\$\\w{1,40})\\s*=\\s*explode\\s*\\((chr\\s*\\(\\s*\\(\\d+\\-\\d+\\)\\)),substr\\s*\\(\\1,\\s*\\((\\d+\\-\\d+)\\),\\s*\\(\\s*(\\d+\\-\\d+)\\)\\)\\);\\s*(\\$\\w{1,40})\\s*=\\s*\\3\\[\\d+\\]\\s*\\(\\3\\[\\s*\\(\\d+\\-\\d+\\)\\]\\);\\s*(\\$\\w{1,40})\\s*=\\s*\\3\\[\\d+\\]\\s*\\(\\3\\[\\s*\\(\\d+\\-\\d+\\)\\]\\);\\s*if\\s*\\(!function_exists\\s*\\(\'([^\']*)\'\\)\\)\\s*\\{\\s*function\\s*\\9\\s*\\(.+\\1\\s*=\\s*\\$\\w+[+\\-\\*]\\d+;~msi',
    'fast' => '~(\\$\\w{1,40})\\s=\\s\'([^\']*)\';\\s(\\$\\w{1,40})=explode\\((chr\\(\\(\\d+\\-\\d+\\)\\)),substr\\(\\1,\\((\\d+\\-\\d+)\\),\\((\\d+\\-\\d+)\\)\\)\\);\\s(\\$\\w{1,40})\\s=\\s\\3\\[\\d+\\]\\(\\3\\[\\(\\d+\\-\\d+\\)\\]\\);\\s(\\$\\w{1,40})\\s=\\s\\3\\[\\d+\\]\\(\\3\\[\\(\\d+\\-\\d+\\)\\]\\);\\sif\\s\\(!function_exists\\(\'([^\']*)\'\\)\\)\\s\\{\\sfunction\\s*\\9\\(~msi',
    'id' => 'arrayOffsets',
  ),
  93 => 
  array (
    'precheck' => 
    array (
      0 => '~explode\\(chr\\(~msi',
      1 => '~substr\\(~msi',
      2 => '~if\\s?\\(!function_exists\\(~msi',
      3 => '~if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)~msi',
    ),
    'full' => '~(\\$\\w+)\\s?=\\s?(?|\'([^\']+)\'|"([^"]+)");\\s?(\\$\\w+)\\s?=\\s?explode\\(chr\\(+(\\d+\\s?[-+]\\s?\\d+)\\)+,\\s?[\'"]((?:\\d+,?)+)[\'"]\\);\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)\\s?{\\s?function\\s?\\9\\((\\$\\w+),\\s?(\\$\\w+)\\)\\s?{\\s?(\\$\\w+)\\s?=\\s?NULL;\\s?for\\s?\\((\\$\\w+)\\s?=\\s0;\\s?\\13\\s?<\\s?\\(sizeof\\(\\10\\)\\s?/\\s?(\\d+)\\);\\s?\\13\\+\\+\\)\\s?{\\s?\\12\\s?\\.=\\s?substr\\(\\11,\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\],\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\s?\\+\\s?(\\d+)\\]\\);\\s?}\\s?return\\s?\\12;\\s?}\\s;\\s?}\\s?(\\$\\w+)\\s?=\\s?[\'"](.*?eval\\(str_replace\\(chr\\(\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\),\\s?chr\\(\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\),\\s?\\9\\(\\3,\\1\\)\\)\\);.*?)[\'"];\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?\\22\\(\\6,\\s?\\18,\\s?NULL\\);\\s?\\22\\s?=\\s?\\18;\\s?\\22\\s?=\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\s?\\-\\s?\\d+;~msi',
    'fast' => '~(\\$\\w+)\\s?=\\s?(?:\'([^\']+)\'|"[^"]+");\\s?(\\$\\w+)\\s?=\\s?explode\\(chr\\(+(\\d+\\s?[-+]\\s?\\d+)\\)+,\\s?[\'"]((?:\\d+,?)+)[\'"]\\);\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?if\\s?\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\)\\s?{\\s?function\\s?\\9\\((\\$\\w+),\\s?(\\$\\w+)\\)\\s?{\\s?(\\$\\w+)\\s?=\\s?NULL;\\s?for\\s?\\((\\$\\w+)\\s?=\\s0;\\s?\\13\\s?<\\s?\\(sizeof\\(\\10\\)\\s?/\\s?(\\d+)\\);\\s?\\13\\+\\+\\)\\s?{\\s?\\12\\s?\\.=\\s?substr\\(\\11,\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\],\\s?\\10\\[\\(\\13\\s?\\*\\s?(\\d+)\\)\\s?\\+\\s?(\\d+)\\]\\);\\s?}\\s?return\\s?\\12;\\s?}\\s;\\s?}\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?substr\\(\\1,\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\),\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\)\\);\\s?\\20\\(\\6,\\s?\\18,\\s?NULL\\);\\s?\\20\\s?=\\s?\\18;\\s?\\20\\s?=\\s?\\(+(\\d+\\s?[-+]\\s?\\d+)\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\s?\\-\\s?\\d+;~msi',
    'id' => 'arrayOffsetsEval',
  ),
  94 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*array\\((\'\\d+\',?)+\\);)+\\$\\w{1,40}=\\"([^\\"]+)\\";if\\s*\\(!function_exists\\(\\"\\w{1,50}\\"\\)\\)\\s*\\{\\s*function\\s*[^\\}]+\\}\\s*return\\s*\\$\\w+;\\}[^}]+}~msi',
    'fast' => '~(\\$\\w{1,50}=\\s*array\\((\'\\d+\',?)+\\);)+\\$\\w{1,40}=\\"[^\\"]+\\";if\\s*\\(!function_exists\\(\\"\\w{1,50}\\"\\)\\)\\{\\s*function ~msi',
    'id' => 'obfB64',
  ),
  95 => 
  array (
    'full' => '~if\\(\\!function_exists\\(\'findsysfolder\'\\)\\){function findsysfolder\\(\\$fld\\).+\\$REXISTHEDOG4FBI=\'([^\']+)\';\\$\\w+=\'[^\']+\';\\s*eval\\(\\w+\\(\'([^\']+)\',\\$REXISTHEDOG4FBI\\)\\);~msi',
    'fast' => '~if\\(!function_exists\\(\'findsysfolder\'\\)\\){function findsysfolder\\(\\$fld\\)\\{\\$fld1=dirname\\(\\$fld\\);\\$fld=\\$fld1\\.\'/scopbin\';clearstatcache\\(\\);if\\(!is_dir\\(\\$fld\\)\\)return findsysfolder\\(\\$fld1\\);else return \\$fld;\\}\\}require_once\\(findsysfolder\\(__FILE__\\)\\.\'/911006\\.php\'\\);~msi',
    'id' => 'sourceCop',
  ),
  96 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\s*\\(\\s*(\\$\\w{1,40})\\s*,\\s*(\\$\\w{1,40})\\s*\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=\\s*str_rot13\\s*\\(\\s*gzinflate\\s*\\(\\s*str_rot13\\s*\\(\\s*base64_decode\\s*\\(\\s*[\'"][^\'"]*[\'"]\\s*\\)\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(if\\s*\\(\\s*\\$\\w+\\s*==[\'"][^\'"]*[\'"]\\s*\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=(\\$\\w+[\\{\\[]\\d+[\\}\\]]\\.?)+;return\\s*(\\$\\w+)\\(\\3\\);\\s*\\}\\s*else\\s*)+\\s*if\\s*\\(\\s*\\$\\w+\\s*==[\'"][^\'"]*[\'"]\\s*\\)\\s*\\{\\s*return\\s*eval\\(\\3\\);\\s*\\}\\s*\\};\\s*(\\$\\w{1,40})\\s*=\\s*[\'"][^\'"]*[\'"];(\\s*\\9\\([\'"][^\'"]*[\'"],)+\\s*[\'"][^\'"]*[\'"]\\s*\\)+;~msi',
    'id' => 'webshellObf',
  ),
  97 => 
  array (
    'full' => '~(\\$\\w{1,40})=\'([^\'\\\\]|.*?)\';\\s*((\\$\\w{1,40})=(\\1\\[\\d+].?)+;\\s*)+(\\$\\w{1,40})=\'\';\\s*(\\$\\w{1,40})\\(\\6,\\$\\w{1,40}\\.\\"([^\\"]+)\\"\\.\\$\\w{1,40}\\.\\4\\);~msi',
    'fast' => '~(\\$\\w{1,40})=\'([^\\\\\']|.*?)\';\\s*((\\$\\w{1,40})=(\\1\\[\\d+].?)+;\\s*)+(\\$\\w{1,40})=\'\';~msi',
    'id' => 'substCreateFunc',
  ),
  98 => 
  array (
    'full' => '~@error_reporting\\(0\\);\\s*@ini_set\\(\'error_log\',NULL\\);\\s*@ini_set\\(\'log_errors\',0\\);\\s*@ini_set\\(\'display_errors\',\\s*0\\);\\s*@(\\$\\w+)="[create_function"\\.]+;\\s*(\\$\\w+)=\\1\\("([^"]+)","[eval\\."]+\\(\'\\?>\'\\.[base64_decode"\\.]+\\(\\3\\)\\);"\\);\\s*\\2\\("([^"]+)"\\);exit;~msi',
    'id' => 'Obf_20200507_2',
  ),
  99 => 
  array (
    'full' => '~\\$\\w+=([create_function"\'.]+);\\s?\\$\\w+=\\$\\w+\\([\'"]\\\\?\\$\\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\\.?)+)\\.([\'"](\\([\'"]\\?>[\'"]\\.)\\w+[\'"]\\.[^)\\\\]+)\\\\?\\$\\w+\\)+;[\'"]\\);\\s?\\$\\w+\\([\'"]([\\w\\+=\\\\\'"%/]+)[\'"]\\);~msi',
    'id' => 'createFunc',
  ),
  100 => 
  array (
    'full' => '~(?(DEFINE)(?\'foreach\'(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*))(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*"";(?P>foreach)if\\(isset\\(\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\]\\)+\\{\\s*\\$\\w+\\s*=\\s*\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\];(?:\\s*\\$\\w+\\s*=\\s*"";\\s*)+(?P>foreach)+\\$\\w+\\s*=\\s*\\$\\w+\\([create_function\'\\.]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\)\\);\\s*\\$\\w+\\(\\);\\s*(?:exit\\(\\);)?\\s*}~msi',
    'fast' => '~()(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*"";(?:(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*)if\\(isset\\(\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\]\\)+\\{\\s*\\$\\w+\\s*=\\s*\\$_REQUEST\\s*(?:/\\*\\w+\\*/)?\\["\\$\\w+"\\];(?:\\s*\\$\\w+\\s*=\\s*"";\\s*)+(?:(?:/\\*\\w+\\*/)?\\s*foreach\\(\\[[\\d,]+\\]\\s*as\\s*\\$\\w+\\)\\s*\\{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\];\\s*\\}\\s*(?:/\\*\\w+\\*/)?\\s*)+\\$\\w+\\s*=\\s*\\$\\w+\\([create_function\'\\.]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\)\\);\\s*\\$\\w+\\(\\);~msi',
    'id' => 'forEach',
  ),
  101 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*base64_decode\\s*\\([\'"][^\'"]+[\'"]\\);\\s*if\\s*\\(!function_exists\\s*\\("rotencode"\\)\\).{0,1000}eval\\s*\\(\\$\\w+\\s*\\(base64_decode\\s*\\([\'"][^"\']+[\'"]\\)+;~msi',
    'id' => 'PHPMyLicense',
  ),
  102 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*if\\(!function_exists\\(\\"([^\\"]*)\\"\\)\\)\\{function\\s*\\2\\((\\$\\w{1,40}),(\\$\\w{1,40})=\\d+\\)\\{(\\$\\w{1,40})=implode\\(\\"[^\\"]*\\",\\3\\);(\\$\\w{1,40})=array\\((\\d+),(\\d+),(\\d+)\\);if\\(\\4==0\\)\\s*(\\$\\w{1,40})=substr\\(\\5,\\6\\[\\d+\\],\\6\\[\\d+\\]\\);elseif\\(\\4==1\\)\\s*\\10=substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\],\\6\\[\\d+\\]\\);else\\s*\\10=trim\\(substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\)\\);return\\s*\\(\\10\\);\\}\\}\\s*eval\\(base64_decode\\(\\2\\(\\1\\)\\)\\);\\s*eval\\(\\w{1,40}\\(\\2\\(\\1\\s*,\\s*2\\)\\s*,\\s*\\2\\(\\1\\s*,\\s*1\\)\\)\\);\\s*__halt_compiler\\(\\);\\s*[\\w\\+\\=/]+~msi',
    'fast' => '~(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*if\\(!function_exists\\(\\"([^\\"]*)\\"\\)\\)\\{function\\s*\\2\\((\\$\\w{1,40}),(\\$\\w{1,40})=\\d+\\)\\{(\\$\\w{1,40})=implode\\(\\"[^\\"]*\\",\\3\\);(\\$\\w{1,40})=array\\((\\d+),(\\d+),(\\d+)\\);if\\(\\4==0\\)\\s*(\\$\\w{1,40})=substr\\(\\5,\\6\\[\\d+\\],\\6\\[\\d+\\]\\);elseif\\(\\4==1\\)\\s*\\10=substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\],\\6\\[\\d+\\]\\);else\\s*\\10=trim\\(substr\\(\\5,\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\+\\6\\[\\d+\\]\\)\\);return\\s*\\(\\10\\);\\}\\}\\s*eval\\(base64_decode\\(\\2\\(\\1\\)\\)\\);\\s*eval\\(\\w{1,40}\\(\\2\\(\\1\\s*,\\s*2\\)\\s*,\\s*\\2\\(\\1\\s*,\\s*1\\)\\)\\);\\s*__halt_compiler\\(\\);~msi',
    'id' => 'zeura',
  ),
  103 => 
  array (
    'full' => '~<\\?php(?:\\s*/\\*.*?\\*/)?\\s*(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*function\\s(\\w{1,50})\\((\\$\\w{1,50}),(\\$\\w{1,50})\\){(\\$\\w{1,50})=array\\(\\d+,\\d+,\\d+,(\\d+)\\);if\\(\\4==\\d+\\){(\\$\\w{1,50})=substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\],\\5\\[2\\]\\);}elseif\\(\\4==\\d+\\){\\7=substr\\(\\3,\\5\\[0\\],\\5\\[1\\]\\);}elseif\\(\\4==\\d+\\){\\7=trim\\(substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\]\\+\\5\\[2\\]\\)\\);}return\\7;}eval\\(base64_decode\\(\\2\\(\\1\\[0\\],\\d+\\)\\)\\);eval\\(\\w{1,50}\\(\\2\\(\\1\\[0\\],\\d+\\),\\2\\(\\1\\[0\\],\\d+\\),\\1\\)\\);__halt_compiler\\(\\);[\\w+=/]+~msi',
    'fast' => '~<\\?php(?:\\s*/\\*.*?\\*/)?\\s*(\\$\\w{1,40})\\s*=\\s*file\\(__FILE__\\);\\s*function\\s(\\w{1,50})\\((\\$\\w{1,50}),(\\$\\w{1,50})\\){(\\$\\w{1,50})=array\\(\\d+,\\d+,\\d+,(\\d+)\\);if\\(\\4==\\d+\\){(\\$\\w{1,50})=substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\],\\5\\[2\\]\\);}elseif\\(\\4==\\d+\\){\\7=substr\\(\\3,\\5\\[0\\],\\5\\[1\\]\\);}elseif\\(\\4==\\d+\\){\\7=trim\\(substr\\(\\3,\\5\\[0\\]\\+\\5\\[1\\]\\+\\5\\[2\\]\\)\\);}return\\7;}eval\\(base64_decode\\(\\2\\(\\1\\[0\\],\\d+\\)\\)\\);eval\\(\\w{1,50}\\(\\2\\(\\1\\[0\\],\\d+\\),\\2\\(\\1\\[0\\],\\d+\\),\\1\\)\\);__halt_compiler\\(\\);~msi',
    'id' => 'zeuraFourArgs',
  ),
  104 => 
  array (
    'full' => '~(<\\?php\\s*/\\* This file is protected by copyright law and provided under.*?\\*/(?:\\s*/\\*.*?\\*/\\s*)+\\$_[0O]+="(\\w+)";.*?\\$_[0O]+=__FILE__;.*?\\$\\w+=str_replace\\("\\\\n","",\\$\\w+\\);\\$\\w+=str_replace\\("\\\\r","",\\$\\w+\\);.*?function\\s\\w+\\(\\$\\w+,\\$\\w+\\){\\$\\w+=md5\\(\\$\\w+\\)\\.md5\\(\\$\\w+\\.\\$\\w+\\);.*?\\$\\w+=strlen\\(\\$\\w+\\);for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\$\\w+\\);\\$\\w+\\+\\+\\){\\$\\w+\\.=\\s?chr\\(ord\\(\\$\\w+\\[\\$\\w+\\]\\)\\^ord\\(\\$\\w+\\[\\$\\w+%\\$\\w+\\]\\)\\);}return\\s\\$\\w+;}eval\\(\\w+\\(\\w+\\("([^"]+)"\\),\\$\\w+\\)\\);eval\\(\\w+\\(\\$\\w+\\)\\);exit\\(\\);\\?)>[^"\']+~msi',
    'id' => 'evalFileContentBySize',
  ),
  105 => 
  array (
    'full' => '~<\\?php\\s*(eval(?:\\(\\w+)+\\((substr\\(file_get_contents\\(__FILE__\\),\\s?(\\d+)\\))\\)+;)\\s*__halt_compiler\\(\\);\\s*[\\w+/]+~msi',
    'id' => 'evalFileContentOffset',
  ),
  106 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.?)+)\\);(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.?)+)\\);(\\$\\w+)\\s*=\\s*base64_decode\\(((?:(?|[\'"][\\w=]+[\'"]|chr\\(\\d+\\))\\.)[^;]+)\\);(\\1\\((\\(-(\\d+)-\\(-\\9\\)\\))\\);@set_time_limit\\((\\(-(\\d+)-\\(-\\11\\)\\))\\);)eval\\(base64_decode\\(((?:(?|[\'"]\\d+[\'"]|chr\\(\\d+\\))\\.?)+)\\)\\.gzinflate\\(str_rot13\\(\\3\\(\\5\\){4};~msi',
    'fast' => '~@set_time_limit\\((\\(-(\\d+)-\\(-\\2\\)\\))\\);eval\\(base64_decode\\(((?:(?:[\'"]\\d+[\'"]|chr\\(\\d+\\))\\.?)+)\\)\\.gzinflate\\(str_rot13\\(\\$\\w+\\(\\$\\w+\\){4};~msi',
    'id' => 'evalConcatedVars',
  ),
  107 => 
  array (
    'full' => '~(?:\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)*(?:\\$\\w+="[\\w\\\\]+";)*(\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";(\\$\\w+="[\\w\\\\]+";)?){5,}.+\\$\\{"[\\\\x47c2153fGLOBALS]+"\\}\\["[\\w\\\\]+"\\].+?(?:};?(?!\\[))+(?:exit;}+if\\(@?file_exists\\("[^"]+"\\)+{include\\("[^"]+"\\);\\}|==\\(string\\)\\$\\{\\$\\w+\\}\\)\\s*\\{\\$\\w+="[^"]+";\\$\\w+="[^"]+";\\$\\{\\$\\w+\\}\\.=\\$\\{\\$\\w+\\};break;\\}+eval\\("[^"]+"\\.gzinflate\\(base64_decode\\(\\$\\{\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\}\\)+;|\\["[^"]+"\\]\\}\\);|\\)\\)\\{[^;]+;ob_clean\\(\\);[^\\.]+\\.urlencode\\(\\$\\{\\$\\w+\\}\\)+;\\}+|else\\{wp_redirect\\(get_bloginfo\\("[^"]+"\\)\\."[^"]+"\\);\\}exit;\\}+)?~msi',
    'id' => 'Obf_20200618_1',
  ),
  108 => 
  array (
    'full' => '~(\\$\\w+\\s?=\\s?(\\w+)\\(\'\\d+\'\\);\\s*)+\\$\\w+\\s?=\\s?new\\s?\\$\\w+\\(\\2\\(\'(\\d+)\'\\)+;\\s?error_reporting\\(0\\);\\s?eval\\(\\$\\w+\\(\\$\\w+->\\$\\w+\\("([^"]+)"\\)+;.+?function \\2.+?return\\s\\$\\w+;\\s}~msi',
    'id' => 'aanKFM',
  ),
  109 => 
  array (
    'full' => '~(?:\\$\\w{1,500}\\s*=\\s*[\'"][^\'"]+[\'"];)+(?:\\$\\w{1,500}\\s*=\\s*\\$\\w{1,500}\\s?\\.\\s?[\'"]{2}\\s?\\.\\s?\\$\\w{1,500};)+(?:\\$\\w{1,500}\\s?=\\s?(?:str_rot13|base64_decode|gzinflate)\\(\\$\\w{1,500}\\);)+\\s*eval\\(\\$\\w{1,500}\\);~msi',
    'id' => 'longVarConcatStrRot13B64Gz',
  ),
  110 => 
  array (
    'full' => '~error_reporting\\(\\d\\);@?set_time_limit\\(\\d\\);(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]{0,100})[\'"];(\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]{0,500}[\'"];)eval\\(gzinflate\\(base64_decode\\(\\3\\)\\)\\);rebirth\\(\\);eval\\(gzinflate\\(base64_decode\\(hate\\(\\1,\\5\\){4};~msi',
    'fast' => '~error_reporting\\(\\d\\);@?set_time_limit\\(\\d\\);(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]{0,100})[\'"];(\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]{0,500}[\'"];)eval\\(gzinflate\\(base64_decode\\(\\$\\w{1,50}\\)\\)\\);rebirth\\(\\);eval\\(gzinflate\\(base64_decode\\(hate\\(\\$\\w{1,50},\\$\\w{1,50}\\){4};~msi',
    'id' => 'evalLoveHateFuncs',
  ),
  111 => 
  array (
    'full' => '~function\\s?(\\w+)\\(\\){\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\2\\s?=\\s?str_rot13\\(\\2\\);\\s?(\\w+)\\(\\2\\);\\s?}\\s?function\\s?\\4\\((\\$\\w+)\\){\\s?(?:global\\s?\\$\\w+;\\s?)?\\5\\s?=\\s?pack\\([\'"]H\\*[\'"],\\5\\);\\s?(\\$\\w+)\\s?=\\s?[\'"]{2};\\s?eval\\(((?:\\6|\\5)\\.?)+\\);\\s?}\\s?\\1\\(\\);~msi',
    'id' => 'evalPackStrrot',
  ),
  112 => 
  array (
    'full' => '~error_reporting\\(\\d\\);(?:\\$\\w+=[\'"]\\w+[\'"];)?ini_set\\([\'"]\\w+[\'"],\\d\\);(?:(\\$\\w+=\\[(?:"[^"]+"=>"[^"]+",?\\s*)+\\];)|eval\\(base64_decode\\([\'"]([\\w\\+=]+)[\'"]\\)\\);)\\$\\w+=str_split\\([\'"]([}\\w|,[=\'\\.;\\]&]+)[\'"]\\);\\$\\w+=[\'"]{2};foreach\\(\\$\\w+\\s{0,50}as\\s{0,50}\\$\\w+\\){foreach\\((\\$\\w+)\\s{0,50}as\\s{0,50}\\$\\w+\\s{0,50}=>\\s{0,50}\\$\\w+\\){(?:\\$\\w+=[\'"]\\w+[\'"];\\$\\w+=[\'"]\\w+[\'"];)?if\\(\\$\\w+\\s{0,50}==\\s{0,50}\\(string\\)\\$\\w+\\){(?:\\$\\w+=[\'"]\\w+[\'"];\\$\\w+=[\'"]\\w+[\'"];)?\\$\\w+\\s{0,50}\\.=\\s{0,50}\\$\\w+;break;}}}(?:eval\\([\'"]\\?>[\'"]\\.gzinflate\\(base64_decode\\(\\$\\w+\\)\\)\\);)?~msi',
    'id' => 'evalArrayVar',
  ),
  113 => 
  array (
    'full' => '~(?>(?>\\$\\w+)\\s*\\.?=\\s*"[^;]+;?";\\s*)+\\beval\\((?>\\$\\w+\\s*\\.?\\s*)+\\)~msi',
    'id' => 'evalVarConcat',
  ),
  114 => 
  array (
    'full' => '~(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+(?:\\${\\${"[^"]+"}\\["[^"]+"\\]}="[^"]+";)+(eval\\(htmlspecialchars_decode\\(urldecode\\(base64_decode\\(\\${\\${"[^"]+"}\\["[^"]+"\\]}\\)\\)\\)\\);)~msi',
    'id' => 'evalVarSpecific',
  ),
  115 => 
  array (
    'full' => '~(?:(?:\\$\\w+=(?:chr\\(\\d+\\)[;.])+)+\\$\\w+="[^"]+";(\\$\\w+)=(?:\\$\\w+[.;])+\\s*)?(\\$\\w+)=\'([^\']+)\';((?:\\s*\\2=str_replace\\(\'[^\']+\',\\s*\'\\w\',\\s*\\2\\);\\s*)+)(?(1)\\s*\\1\\s*=\\s*str_replace\\(\'[^+]\',\\s*\'[^\']+\',\\s*\\1\\);\\s*(\\$\\w+)\\s*=\\s*[^;]+;";\\s*@?\\1\\(\\s*str_replace\\((?:\\s*array\\(\'[^\']+\',\\s*\'[^\']+\'\\),){2}\\s*\\5\\)\\s*\\);|\\s*\\2=base64_decode\\(\\2\\);\\s*eval\\(\\2\\);)~msi',
    'id' => 'evalVarReplace',
  ),
  116 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s*=\\s*base64_decode\\((?:[\'"][^\'"]+[\'"]\\.?)+\\);)+\\s*(?:\\$\\w{1,50}\\s*=\\s*[\'"][^\'"]+[\'"];)+\\s*(eval\\(htmlspecialchars_decode\\((?:\\$\\w{1,50}\\(?)+\\)+;)~msi',
    'id' => 'evalVarsB64Concated',
  ),
  117 => 
  array (
    'full' => '~((\\$[^\\s=.;]+)\\s*=\\s*\\(?[\'"]([^\'"]+)[\'"]\\)?\\s*;?\\s*)+\\s*.{0,10}?(?:error_reporting\\(\\d\\);|@set_time_limit\\(\\d\\);|@|ini_set\\([\'"]\\w{1,99}[\'"],\\s?\\d\\);\\s?){0,5}(?:eval\\s*\\(|assert\\s*\\(|echo)\\s*([\'"?>.\\s]+)?\\(?(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|convert_uudecode\\s*\\()+(\\({0,1}[\\s"\']?(\\$[^\\s=\'")]+)?(?:str_replace\\((?:.+?,){3}\\2?)?[\\s"\']?\\){0,1})(?:[\'"]?\\)+;?)+~msi',
    'id' => 'evalVar',
  ),
  118 => 
  array (
    'full' => '~((?:(?:\\$\\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\\((?:"\\?>"\\.)?(?:\\$\\w+\\()+[\'"]([^\'"]+)[\'"]\\)+;)~msi',
    'id' => 'evalVarSlashed',
  ),
  119 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\((\\$\\w{1,40})\\)\\{(\\$\\w{1,40})=\'base64_decode\';(\\$\\w{1,40})=\'gzinflate\';return\\s*\\4\\(\\3\\(\\2\\)\\);\\}\\$\\w{1,40}=\'[^\']*\';\\$\\w{1,40}=\'[^\']*\';eval\\(\\1\\(\'([^\']*)\'\\)\\);~msi',
    'id' => 'evalFunc',
  ),
  120 => 
  array (
    'full' => '~function\\s*(\\w{1,40})\\s*\\((\\$\\w{1,40})\\)\\s*\\{\\s*(\\$\\w{1,40})\\s*=\\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\\s*(\\$\\w{1,40})\\s*=\\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\\s*return\\s*\\4\\s*\\(\\3\\s*\\(\\2\\)\\);\\s*\\}\\s*\\$\\w{1,40}\\s*=\\s*\\"[^\\"]*\\";\\s*\\$\\w{1,40}\\s*=\\s*\\"[^\\"]*\\";\\s*eval\\s*\\(\\1\\s*\\(\\"([^\\"]*)\\"\\)\\);~msi',
    'id' => 'evalFunc',
  ),
  121 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]@?(([\\w."]+\\()+[\'"]([\\w\\/+]+)[\'"])\\)+;[\'"]\\s?;\\s?(\\$\\w+)\\s?=\\s?([\\w@."]+)\\s?;\\s?@?(\\$\\w+)\\s?=\\s\\5\\([\'"]+,\\s?"\\1;"\\s?\\);\\7\\([\'"]{2}\\);~msi',
    'id' => 'evalConcatFunc',
  ),
  122 => 
  array (
    'full' => '~function\\sT_\\((\\$\\w+)\\)\\s{\\s(\\$\\w+)\\s=\\s256;\\s(\\$w2)\\s=\\s8;\\s(\\$\\w+)\\s=\\sarray\\(\\);\\s(\\$\\w+)\\s=\\s0;\\s(\\$\\w+)\\s=\\s0;\\sfor\\s\\((\\$\\w+)\\s=\\s0;\\s\\7\\s<\\sstrlen\\(\\1\\);\\s\\7\\+\\+\\)\\s{\\s\\5\\s=\\s\\(\\5\\s<<\\s8\\)\\s\\+\\sord\\(\\1\\[\\7\\]\\);\\s\\6\\s\\+=\\s8;\\sif\\s\\(\\6\\s>=\\s\\3\\)\\s{\\s\\6\\s-=\\s\\3;\\s(\\$\\w+)\\[\\]\\s=\\s\\5\\s>>\\s\\6;\\s\\5\\s&=\\s\\(1\\s<<\\s\\6\\)\\s-\\s1;\\s\\2\\+\\+;\\sif\\s\\(\\2\\s>>\\s\\3\\)\\s{\\s\\3\\+\\+;\\s}\\s}\\s}\\s(\\$\\w+)\\s=\\srange\\("\\\\x0",\\s"\\\\377"\\);\\s(\\$\\w+)\\s=\\s\'\';\\sforeach\\s\\(\\4\\sas\\s\\7\\s=>\\s(\\$\\w+)\\)\\s{\\sif\\s\\(!isset\\(\\9\\[\\11\\]\\)\\)\\s{\\s(\\$\\w+)\\s=\\s(\\$\\w+)\\s\\.\\s\\13\\[0\\];\\s}\\selse\\s{\\s\\12\\s=\\s\\9\\[\\11\\];\\s}\\s\\10\\s\\.=\\s\\12;\\sif\\s\\(\\7\\)\\s{\\s\\9\\[\\]\\s=\\s\\13\\s\\.\\s\\12\\[0\\];\\s}\\s\\13\\s=\\s\\12;\\s}\\sreturn\\s\\10;\\s}\\s(\\$_\\w+)="[\\w\\\\]+";eval\\(T_\\(\\14\\("(.*)"\\)\\)\\);~mis',
    'fast' => '~function\\sT_\\((\\$\\w+)\\)\\s{\\s(\\$\\w+)\\s=\\s256;\\s(\\$w2)\\s=\\s8;\\s(\\$\\w+)\\s=\\sarray\\(\\);\\s(\\$\\w+)\\s=\\s0;\\s(\\$\\w+)\\s=\\s0;\\sfor\\s\\((\\$\\w+)\\s=\\s0;\\s\\7\\s<\\sstrlen\\(\\1\\);\\s\\7\\+\\+\\)\\s{\\s\\5\\s=\\s\\(\\5\\s<<\\s8\\)\\s\\+\\sord\\(\\1\\[\\7\\]\\);\\s\\6\\s\\+=\\s8;\\sif\\s\\(\\6\\s>=\\s\\3\\)\\s{\\s\\6\\s-=\\s\\3;\\s(\\$\\w+)\\[\\]\\s=\\s\\5\\s>>\\s\\6;\\s\\5\\s&=\\s\\(1\\s<<\\s\\6\\)\\s-\\s1;\\s\\2\\+\\+;\\sif\\s\\(\\2\\s>>\\s\\3\\)\\s{\\s\\3\\+\\+;\\s}\\s}\\s}\\s(\\$\\w+)\\s=\\srange\\("\\\\x0",\\s"\\\\377"\\);\\s(\\$\\w+)\\s=\\s\'\';\\sforeach\\s\\(\\4\\sas\\s\\7\\s=>\\s(\\$\\w+)\\)\\s{\\sif\\s\\(!isset\\(\\9\\[\\11\\]\\)\\)\\s{\\s(\\$\\w+)\\s=\\s(\\$\\w+)\\s\\.\\s\\13\\[0\\];\\s}\\selse\\s{\\s\\12\\s=\\s\\9\\[\\11\\];\\s}\\s\\10\\s\\.=\\s\\12;\\sif\\s\\(\\7\\)\\s{\\s\\9\\[\\]\\s=\\s\\13\\s\\.\\s\\12\\[0\\];\\s}\\s\\13\\s=\\s\\12;\\s}\\sreturn\\s\\10;\\s}\\s(\\$_\\w+)="[\\w\\\\]+";eval\\(T_\\(\\14\\("(.*)"\\)\\)\\);~mis',
    'id' => 'evalFuncFunc',
  ),
  123 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w+)\\s?=\\s?bin2hex\\(\\5\\);\\s?(\\$\\w+)\\s?=\\s?hex2bin\\(\\7\\);\\s*(?:eval\\()+[\'"]\\?>[\'"]\\.\\1\\(\\3\\(\\8\\)+;~msi',
    'id' => 'evalBinHexVar',
  ),
  124 => 
  array (
    'full' => '~((?:(?:\\${"(?:\\w{0,10}?\\\\x\\w{1,10}){1,100}"}\\["\\w{0,10}?(?:\\\\x\\w{1,10}){1,100}"\\]|\\$\\w+)\\s*=\\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\\${)?\\$\\w{1,50}}?\\s*=\\s*array\\(array\\(([\'"][^\\)]+[\'"])\\)\\);(.*?create_function\\(.*?array_walk\\((?:\\${\\${"(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\\\x\\w{1,10}){1,10}"\\]}|(?:\\${)?\\$\\w+}?),\\s*(?:\\${\\${"\\w?(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\w?\\\\x\\w{1,10}){1,20}"\\]}|\\$\\w+)\\);)~msi',
    'fast' => '~create_function\\([\'"][^"\']+[\'"],\\s*(?:[\'"][^"\']+[\'"]\\.?)+.*?\\);\\s*\\$[^=]+=\\s*array_walk\\((?:\\${\\${"(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\\\x\\w{1,10}){1,10}"\\]}|(?:\\${)?\\$\\w+}?),\\s*(?:\\${\\${"\\w?(?:\\\\x\\w{1,10}){1,10}"}\\["(?:\\w?\\\\x\\w{1,10}){1,20}"\\]}|\\$\\w+)\\);~msi',
    'id' => 'evalArrayWalkFunc',
  ),
  125 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*eval\\([\'"]\\?>[\'"]\\s?\\.\\s?base64_decode\\(strtr\\(substr\\(\\1\\s?,(\\d+)\\*(\\d+)\\)\\s?,\\s?substr\\(\\1\\s?,(\\d+)\\s?,\\s?(\\d+)\\)\\s?,\\s*substr\\(\\s?\\1\\s?,\\s?(\\d+)\\s?,\\s?(\\d+)(?:\\s?\\))+;~msi',
    'id' => 'evalSubstrVal',
  ),
  126 => 
  array (
    'full' => '~(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];\\s?\\1\\s?=\\s?base64_decode\\(\\1\\);\\s?eval\\(gzinflate\\(str_rot13\\(\\1\\)+;~msi',
    'id' => 'evalGzStrRotB64',
  ),
  127 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*([\'"][^\'"]+[\'"]);\\s*eval\\(urldecode\\(hex2bin\\([\'"]([^\'"]+)[\'"]\\)\\)\\);\\s*eval\\(hex2bin\\([\'"]([^\'"]+)[\'"]\\)\\s*\\.\\s*((?:\\$\\w{1,50}\\()+\\1)\\)+;~msi',
    'id' => 'twoEvalVarsReplace',
  ),
  128 => 
  array (
    'full' => '~global\\s?(\\$\\w{1,50});\\s?if\\(!\\1\\)\\s?{\\s?function\\sob_start_flush\\((\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:\\d{1,5}[,\\s]*)+)\\);\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:\\d{1,5}[,\\s]*)+)\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?foreach\\(\\5\\sas\\s(\\$\\w{1,50})\\)\\s?{\\s?\\7\\s?\\.=\\s?chr\\(\\3\\[\\8\\]\\+(\\d{1,5})\\);\\s?}.*?\\7\\.substr\\(.*?[\'"]ob_start_flush[\'"]\\);\\s?}\\s?\\?>~msi',
    'id' => 'obStartFlushVar',
  ),
  129 => 
  array (
    'full' => '~((?:\\$GLOBALS\\[[\'"][^\'"]+[\'"]\\]\\s?=\\s?base64_decode\\([\'"][^\'"]*[\'"]\\);){10,})(?:.*?\\$GLOBALS\\[[\'"][^\'"]+[\'"]\\])+[);]*~msi',
    'id' => 'b64GlobalVarsReplace',
  ),
  130 => 
  array (
    'full' => '~\\${"\\\\x[^"]+"}\\["(\\\\x[^"]+)"\\]\\s?=\\s?"(\\\\x[^"]+)";\\s?\\${\\${"\\\\x[^"]+"}\\["(\\\\x[^"]+)"\\]}\\s?=\\s?"(\\w?\\\\x[^"]+)";\\s?eval\\(htmlspecialchars_decode\\(gzinflate\\(base64_decode\\("(\\\\x[^"]+)"\\)+;~msi',
    'id' => 'evalGlobalVarFuncWrapped',
  ),
  131 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[chr\'.\\s]+;\\s?((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\s?\\(\\d+[-+*//\\s]+\\d+\\)[\\s.]*)+;\\s*)+)(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50}\\(\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)+;)\\s?(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\s?\\([\'"]{2}\\s?,\\s?\\3\\);\\s?\\5\\s?\\(\\);~msi',
    'id' => 'createFuncChrVarsMany',
  ),
  132 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];)?\\s?(\\$\\w{1,50})\\s?=\\s?[chr\'.\\s]+;\\s?((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\s?\\(\\d+[-+*//\\s]+\\d+\\)[\\s.]*)+;\\s?)+)\\s?(eval\\s{0,10}\\((?:\\s{0,10}\\$?\\w{1,50}\\s{0,10}\\()+[\'"][^\'"]+[\'"]\\)+;)~msi',
    'id' => 'evalChrVarsMany',
  ),
  133 => 
  array (
    'full' => '~(preg_replace\\(["\'](?:/\\.\\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\\s*,\\s*)[^\\),]+(?:[\\)\\\\0-5]+;[\'"])?(,\\s*["\'][^"\']*["\'])\\)+;~msi',
    'id' => 'eval',
  ),
  134 => 
  array (
    'full' => '~(\\$\\w{1,40})\\s*=\\s*[\'"]([^\'"]*)[\'"]\\s*;\\s*(\\$\\w{1,40}\\s*=\\s*(strtolower|strtoupper)\\s*\\((\\s*\\1[\\[\\{]\\s*\\d+\\s*[\\]\\}]\\s*\\.?\\s*)+\\);\\s*)+\\s*if\\s*\\(\\s*isset\\s*\\(\\s*\\$\\{\\s*\\$\\w{1,40}\\s*\\}\\s*\\[\\s*[\'"][^\'"]*[\'"]\\s*\\]\\s*\\)\\s*\\)\\s*\\{\\s*eval\\s*\\(\\s*\\$\\w{1,40}\\s*\\(\\s*\\$\\s*\\{\\s*\\$\\w{1,40}\\s*\\}\\s*\\[\\s*[\'"][^\'"]*[\'"]\\s*\\]\\s*\\)\\s*\\)\\s*;\\s*\\}\\s*~msi',
    'id' => 'evalInject',
  ),
  135 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*(([base64_decode\'\\.\\s]+)|([eval\'\\.\\s]+)|([create_function\'\\.\\s]+)|([stripslashes\'\\.\\s]+)|([gzinflate\'\\.\\s]+)|([strrev\'\\.\\s]+)|([str_rot13\'\\.\\s]+)|([gzuncompress\'\\.\\s]+)|([urldecode\'\\.\\s]+)([rawurldecode\'\\.\\s]+));\\s*)+\\$\\w+\\s*=\\s*\\$\\w+\\(\'\',(\\s*\\$\\w+\\s*\\(\\s*)+\'[^\']+\'\\)+;\\s*\\$\\w+\\(\\);~msi',
    'fast' => '~\\$\\w+\\s*=\\s*\\$\\w+\\(\'\',(\\s*\\$\\w+\\s*\\(\\s*)+\'[^\']+\'\\)+;\\s*\\$\\w+\\(\\);~msi',
    'id' => 'createFuncConcat',
  ),
  136 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*base64_decode\\("([^"]+)"\\);(\\1\\s*=\\s*ereg_replace\\("([^"]+)","([^"]+)",\\1\\);)+\\1=base64_decode\\(\\1\\);eval\\(\\1\\);~msi',
    'id' => 'evalEregReplace',
  ),
  137 => 
  array (
    'full' => '~(?>((\\$\\w{1,100})\\s{0,100}=\\s{0,100}(([base64_decode"\'\\.\\s]+)|([eval"\'\\.\\s]+)|([create_function"\'\\.\\s]+)|([stripslashes"\'\\.\\s]+)|([gzinflate"\'\\.\\s]+)|([strrev"\'\\.\\s]+)|([str_rot13"\'\\.\\s]+)|([gzuncompress"\'\\.\\s]+)|([urldecode"\'\\.\\s]+)([rawurldecode"\'\\.\\s]+));\\s*)+)\\s*(error_reporting[^;]+;\\s?ini_set[^;]+;\\s?)?\\s*@?eval\\(\\$[^)]+\\)+;~msi',
    'id' => 'evalWrapVar',
  ),
  138 => 
  array (
    'full' => '~(?:\\$\\{"[^"]+"\\}\\["[^"]+"\\]="[^"]+";)+(?:\\$\\{\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\}="[^"]+";)+@?eval\\s*\\(\\s*([\'"?>.]+)?@?\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|eval\\s*\\()+\\(?\\$\\{\\$\\{"[^\\)]+\\)+;~msi',
    'id' => 'escapes',
  ),
  139 => 
  array (
    'full' => '~(\\$\\w+)\\s*=(?:\\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\\s*\\(\\d+\\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\\s*?\\.?)+;\\s*(\\$\\w+)\\s*=(?:\\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\\s*\\(\\d+\\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\\s*?\\.?)+;\\s*@?\\1\\s*\\(@?\\2\\s*\\([\'"]([^\'"]+)[\'"]\\)+;~msi',
    'id' => 'assert',
  ),
  140 => 
  array (
    'full' => '~eval\\s*\\(str_rot13\\s*\\([\'"]+\\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\\)+;~msi',
    'id' => 'evalCodeFunc',
  ),
  141 => 
  array (
    'full' => '~\\$\\{"GLOBALS"\\}\\[[\'"](\\w+)[\'"]\\]=["\'](\\w+)[\'"];\\$\\{"GLOBALS"\\}\\[[\'"](\\w+)[\'"]\\]=["\']\\2[\'"];\\${\\$\\{"GLOBALS"\\}\\[[\'"]\\3[\'"]\\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\\$\\{\\$\\{"GLOBALS"\\}\\[[\'"]\\1[\'"]\\]\\}\\)+;~msi',
    'id' => 'evalVarVar',
  ),
  142 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){4}\\s*\\}\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){3}function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){5}return\\s*\\1\\(\\$\\w+,\\s*false\\);\\s*\\}\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\s*\\{(?:[^}]+\\}\\s*){5}return\\s*\\1\\(\\$\\w+,\\s*true\\);\\s*\\}\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*eval\\(\\4\\(base64_decode\\(\\5\\),\\s*"([^"]+)"\\)\\);~msi',
    'id' => 'xxteaDecrypt',
  ),
  143 => 
  array (
    'full' => '~(\\$\\w+)=[\'"][^"\']+[\'"];(\\$\\w+)=strrev\\(\'edoced_46esab\'\\);eval\\(\\2\\([\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'edoced_46esab',
  ),
  144 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?strrev\\([\'"][base64_dco\'"\\.]+[\'"]\\);\\s*(\\$\\w+)\\s?=\\s?strrev\\([\'"][gzinflate\'"\\.]+[\'"]\\);\\s*@?eval\\(\\2\\(\\1\\([\'"]([\\w\\/\\+=]+)[\'"]\\)\\)\\);~msi',
    'id' => 'edoced_46esab_etalfnizg',
  ),
  145 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"((?:[^"]|(?<=\\\\)")*)";(\\$\\w+)\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;(\\$\\w+)\\s*=\\s*[^;]+;(\\$\\w+)\\s*=\\s*"[^"]+";\\$\\w+\\s*=\\s*\\5\\."[^"]+"\\.\\6;\\3\\((\\1\\[\\d+\\]\\.?)+,\\s*\\$\\w+\\s*,"\\d+"\\);~smi',
    'fast' => '~(\\$\\w+)\\s*=\\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\\$\\w+)\\s*=\\s*(\\1\\[\\d+\\]\\.?)+;(\\$\\w+)\\s*=\\s*[^;]+;(\\$\\w+)\\s*=\\s*"[^"]+";\\$\\w+\\s*=\\s*\\5\\."[^"]+"\\.\\6;\\3\\((\\1\\[\\d+\\]\\.?)+,\\s*\\$\\w+\\s*,"\\d+"\\);~smi',
    'id' => 'eval2',
  ),
  146 => 
  array (
    'fast' => '~(?:\\${"\\\\x[\\\\\\w]+"}\\["\\\\x[\\\\\\w]+"\\]\\s?=\\s?"[\\w\\\\]+";){1,10}\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?=\\s?"\\w{1,100}";\\${\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?}="(\\\\x[^"]+)";eval\\(((?:str_rot13\\(|gzinflate\\(|base64_decode\\(){1,10})\\(\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\){1,5};~msi',
    'full' => '~(?:\\${"\\\\x[\\\\\\w]+"}\\["\\\\x[\\\\\\w]+"\\]\\s?=\\s?"[\\w\\\\]+";){1,10}\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?=\\s?"\\w{1,100}";\\${\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\s?}="(\\\\x[^"]+)";eval\\(((?|str_rot13\\(|gzinflate\\(|base64_decode\\(){1,10})\\(\\${\\${"\\\\x[\\\\\\w]+"}\\["[\\\\\\w]+"\\]}\\){1,5};~msi',
    'id' => 'evalEscapedCharsContent',
  ),
  147 => 
  array (
    'full' => '~eval\\(strrev\\(\\s?\'([^\']+)\'\\s?\\)\\);~msi',
    'id' => 'evalStrrevCode',
  ),
  148 => 
  array (
    'full' => '~eval\\(convert_uudecode\\(\\s?\'((?:.*?\\\\\')*[^\']+)\'\\)\\);~msi',
    'id' => 'evalConvertUudecodeWithSlashedQuote',
  ),
  149 => 
  array (
    'full' => '~@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*\\((\'\',)?\\s*([\'"][?>\\s]+[\'".\\s]+)?\\s*\\(?\\s*@?\\s*(?:base64_decode\\s*\\(|pack\\s*\\(["\']H\\*[\'"],|convert_uudecode\\s*\\(|htmlspecialchars_decode\\s*\\(|gzdecode\\s*\\(|stripslashes\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|unserialize\\s*\\(|eval\\s*\\(|hex2bin\\()+.*?[^\'");]+((\\s*\\.?[\'"]([^\'";]+[\'"]*\\s*)+|,\\s*true)?\\s*[\'"\\)]+)+\\s*;?(\\s*\\2\\(\\);)?~msi',
    'id' => 'eval',
  ),
  150 => 
  array (
    'full' => '~eval\\s*/\\*[\\w\\s\\.:,]+\\*/\\s*\\([^\\)]+\\)+;~msi',
    'fast' => '~eval\\s*/\\*[\\w\\s\\.:,]+\\*/\\s*\\(~msi',
    'id' => 'eval',
  ),
  151 => 
  array (
    'full' => '~((\\$\\w+)="";\\$\\w+\\s*\\.=\\s*"[^;]+;\\s*)+(?:(?:\\$\\w+)?="";)?eval\\((\\s*\\$\\w+\\s*\\.)+\\s*"[^"]+(?:"\\);)+~msi',
    'id' => 'evalConcatVars',
  ),
  152 => 
  array (
    'full' => '~(\\$ssl\\w{1,20})\\s{0,10}=\\s{0,10}["\'][\\w*/._]{1,500}["\'];\\s{1,10}\\$\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\]\\s{1,10}\\.\\s{1,10}\\1\\[\\d{1,4}\\][^;]{1,300};\\s{1,10}\\$ssl\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\][^;]{1,400};\\s{1,10}\\$ssl\\w{1,20}\\s{0,10}=\\s{0,10}\\1\\[\\d{1,4}\\][^;]{1,400};\\s{1,10}(\\$\\w{1,20})\\s{0,10}=\\s{0,10}["\']([\\w*/._\\\\]{1,500})["\'];\\s{1,10}(\\$\\w{1,20})\\s{0,10}=\\s{0,10}["\']([\\w*/._\\\\]{1,500})["\'];\\s{1,10}@?(eval\\([^;]{1,100};)~msi',
    'id' => 'varsEvalFuncs',
  ),
  153 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*("[\\w=+/\\\\ ".\\n]+");\\s*)+)(\\$\\w+\\s*=\\s*((?:\\$\\w+\\()+\\$\\w+\\)+);\\s*)?((?:eval\\((?(3)\\$\\w+|(?:\\$\\w+\\(+)+\\$\\w+)\\)+;\\s*)+)~msi',
    'id' => 'evalVarsFuncs',
  ),
  154 => 
  array (
    'full' => '~((?>\\$\\w+\\s?\\.?=\\s?(?:[base_decode\\."\'\\d\\s/\\*\\+\\-]+|str_rot13)(?:\\(?[\'"][^\'"]+[\'"]\\)?)?;\\s*)+)\\s*(\\s*@?eval\\((?:[\'"\\)]\\?>[\'"\\)]\\s*\\.\\s*)*(?:(?:\\w+\\()*\\$\\w+\\(?)+(?:.*?)?\\)+;)+~msi',
    'id' => 'evalFuncVars',
  ),
  155 => 
  array (
    'full' => '~eval\\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\\)]+\\)+;~msi',
    'fast' => '~eval\\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
    'id' => 'evalHex',
  ),
  156 => 
  array (
    'full' => '~eval\\s*\\("\\\\x?\\d+[^\\)]+\\)+;(?:[\'"]\\)+;)?~msi',
    'fast' => '~eval\\s*\\("\\\\x?\\d+~msi',
    'id' => 'evalHex',
  ),
  157 => 
  array (
    'full' => '~(\\$\\w+)\\s=\\s(["\']?[\\w\\/\\+]+["\']?);\\s(\\$\\w+)\\s=\\s((?:str_rot13\\(|rawurldecode\\(|convert_uudecode\\(|gzinflate\\(|str_rot13\\(|base64_decode\\(|rawurldecode\\(|)+\\1\\)\\)+);\\secho\\s(eval\\(\\3\\);)~msi',
    'id' => 'echoEval',
  ),
  158 => 
  array (
    'full' => '~if\\(!function_exists\\([\'"](\\w+)[\'"]\\)\\){function\\s?\\1\\((\\$\\w+)\\){(\\$\\w+)=array\\((?:\'(\\d+)\',)?\'([^\']+)\',\'([^\']+)\',\\2\\);for\\((\\$\\w+)=0;\\7<[34];\\7\\+\\+\\){for\\((\\$\\w+)=0;\\8<strlen\\(\\3\\[\\7\\]\\);\\8\\+\\+\\)\\s?\\3\\[\\7\\]\\[\\8\\]\\s?=\\s?chr\\(ord\\(\\3\\[\\7\\]\\[\\8\\]\\)-(?:\\(\\7\\?\\3\\[\\8\\s?xor\\s?\\8\\]:1\\)|1)\\);if\\(\\7==[21]\\)\\s?\\3\\[[32]\\]=\\3\\[[01]\\]\\(\\3\\[[21]\\]\\(\\3\\[[32]\\]\\)\\);}\\s?return\\s?\\3\\[[32]\\];}(\\$\\w+)=["\']([\\w\\+\\/=]+)["\'];(\\$\\w+)=[\'"]\\1[\'"];(\\$\\w+)=\\11\\([\'"]([^\'"]+)[\'"]\\);\\$\\w+=@?\\12\\(\'\',\\11\\(\\9\\)\\);\\$\\w+\\(\\);}~msi',
    'id' => 'evalCreateFunc',
  ),
  159 => 
  array (
    'full' => '~(\\$\\w{1,1000})=[\'"]([\'"\\w/\\+=]+)[\'"];(\\$\\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\\(\\$\\w{1,3000}\\);){1,100}eval\\((\\$\\w{1,3000})\\);~msi',
    'id' => 'evalAssignedVars',
  ),
  160 => 
  array (
    'full' => '~(?:\\$_{1,50}\\s*=\\s*[^;]{2,200}\\s*;\\s*)+(?:\\$_{1,50}\\s*=\\s*\\$_{1,50}\\([^\\)]+\\);\\s*|(?:if\\(!function_exists\\(\'[^\']+\'\\)\\){function\\s\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\){return\\s?eval\\("return function\\(\\$\\w{1,50}\\){{\\$\\w{1,50}}};"\\);}}\\s*)?)+(?:\\$_{1,50}\\s*=\\s*\'[^\']+\';\\s*)?(?:\\s*(\\$_{1,50}\\s*=\\s*)?\\$_+\\([^)]*\\)+;\\s*)+(?:echo\\s*\\$_{1,50};)?~msi',
    'id' => 'seolyzer',
  ),
  161 => 
  array (
    'full' => '~(\\$\\w+)="((?:[^"]|(?<=\\\\)")*)";(\\s*\\$GLOBALS\\[\'\\w+\'\\]\\s*=\\s*(?:\\${)?(\\1\\[\\d+\\]}?\\.?)+;\\s*)+(.{0,400}\\s*\\1\\[\\d+\\]\\.?)+;\\s*}~msi',
    'fast' => '~(\\$\\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\\s*\\$GLOBALS\\[\'\\w+\'\\]\\s*=\\s*(?:\\${)?(\\1\\[\\d+\\]}?\\.?)+;\\s*)+(.{0,400}\\s*\\1\\[\\d+\\]\\.?)+;\\s*}~msi',
    'id' => 'subst2',
  ),
  162 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s*=\\s*"[^"]{1,1000}";\\s*)+(\\$\\w{1,50}\\s*=\\s*\\$?\\w{1,50}\\("\\w{1,50}"\\s*,\\s*""\\s*,\\s*"\\w{1,50}"\\);\\s*)+\\$\\w{1,50}\\s*=\\s*\\$\\w{1,50}\\("",\\s*\\$\\w{1,50}\\(\\$\\w{1,50}\\("\\w{1,50}",\\s*"",(\\s*\\$\\w{1,50}\\.?)+\\)+;\\$\\w{1,50}\\(\\);~msi',
    'id' => 'strreplace',
  ),
  163 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\\s?\\$\\w{1,50}\\s?=\\s?str_replace\\([\'"]\\w{1,50}[\'"],\\s?[\'"][\'"],\\s?["\']\\w{1,100}[\'"]\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:\'[^\']{1,500}\'|"[^\\s]{1,500}?");\\s){1,15}.*?\\$\\w{1,50}\\s?=\\s?str_replace\\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\\s?\'\',\\s?(?:\\$\\w{1,50}\\s?\\.?\\s?){1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',\\s?\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'strreplace',
  ),
  164 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\$\\w{1,50}\\)\\s?{if\\(file_exists[^}]+}(\\$\\w{1,50})\\s?=\\s?str_replace\\(array\\(base64_decode\\(\'([^\']+)\'\\),base64_decode\\(\'([^\']+)\'\\)\\),array\\(base64_decode\\(\'([^\']+)\'\\),base64_decode\\(\'([^\']+)\'\\)\\),\\2\\);(\\$\\w{1,50})\\s?=\\s?strrev[^;]+;(\\$\\w{1,50})\\s?=\\s?\\8\\(\\3\\);(\\$\\w{1,50})\\s?=\\s?strrev[^;]+;return@?\\10\\(\\9\\);}if.*?exit;}\\s?((\\$\\w{1,50})\\s?=\\s?base64_decode\\(\'([^\']+)\'\\);preg_match\\(base64_decode\\(\'[^\']+\'\\),\\12,(\\$\\w{1,50})\\);(\\$\\w{1,50})\\s?=\\s?\\14\\[1\\];(\\$\\w{1,50})\\s?=\\s?\\1\\(\\15,\\$\\w{1,50}\\);if\\(isset\\(\\16\\)\\){eval\\(\\16\\);})~msi',
    'id' => 'pregB64FuncImgStr',
  ),
  165 => 
  array (
    'full' => '~@?echo\\s*([\'"?>.\\s]+)?@?\\s*(base64_decode\\s*\\(|stripslashes\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|eval\\s*\\()+[\\s\\/\'"].*?[^\'")]+((\\s*\\.?[\'"]([^\'";\\$]+\\s*)+)?\\s*[\'"\\);]+)+~msi',
    'id' => 'echo',
  ),
  166 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=strtoupper\\s*\\((\\1\\[\\d+\\]\\s*\\.?\\s*)+\\)\\s*;\\s*if\\(\\s*isset\\s*\\(\\${\\s*\\3\\s*}\\[\\d*\\s*\'\\w+\'\\s*\\]\\s*\\)\\s*\\)\\s*{eval\\(\\${\\3\\s*}\\[\'\\w+\']\\s*\\)\\s*;}~smi',
    'fast' => '~(\\$\\w+)="([^"]+)";\\s*(\\$\\w+)=strtoupper\\s*\\((\\1\\[\\d+\\]\\s*\\.?\\s*)+\\)\\s*;\\s*if\\(\\s*isset\\s*\\(\\${\\s*\\3\\s*}\\[\\d*\\s*\'\\w+\'\\s*\\]\\s*\\)\\s*\\)\\s*{eval\\(\\${\\3\\s*}\\[\'\\w+\']\\s*\\)\\s*;}~smi',
    'id' => 'strtoupper',
  ),
  167 => 
  array (
    'full' => '~(\\$\\w+)="[^"]+";\\s*(\\$\\w+)=str_ireplace\\("[^"]+","",\\1\\);(\\$\\w+)\\s*=\\s*"[^"]+";\\s*function\\s*(\\w+)\\((\\$\\w+,?)+\\){\\s*(\\$\\w+)=\\s*create_function\\(\'\',\\$\\w+\\);\\s*array_map\\(\\6,array\\(\'\'\\)+;\\s*}\\s*set_error_handler\\(\'\\4\'\\);(\\$\\w+)=\\2\\(\\3\\);user_error\\(\\7,E_USER_ERROR\\);\\s*if\\s*.+?}~msi',
    'id' => 'errorHandler',
  ),
  168 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(str_ireplace\\("[^"]+","","[^"]+"\\)\\);(\\$\\w+)="([^"]+)";eval\\(\\1\\(\\2\\)+;}~msi',
    'id' => 'evalIReplace',
  ),
  169 => 
  array (
    'full' => '~error_reporting\\((?:0|E_ALL\\^E_NOTICE)\\);ini_set\\("display_errors",\\s*[01]\\);if\\(!defined\\(\'(\\w+)\'\\)\\){define\\(\'\\1\',__FILE__\\);if\\(!function_exists\\("([^"]+)"\\)\\){function [^(]+\\([^\\)]+\\).+?eval\\(""\\);.+?;}?eval\\(\\$[^\\)]+\\)\\);[^\\)]+\\)+.*?;return\\s*\\$[^;]+;\\s*\\?>([^;]+);~msi',
    'id' => 'PHPJiaMi',
  ),
  170 => 
  array (
    'full' => '~\\$\\w+=0;(\\$GLOBALS\\[\'\\w+\'\\])\\s*=\\s*\'([^\']+)\';\\s*(\\$\\w+)=pack\\(\'H\\*\',substr\\(\\1,\\s*([-\\d]+)\\)\\);if\\s*\\(!function_exists\\(\'(\\w+)\'\\)\\){function\\s*\\5\\(\\$\\w+,\\s*\\$\\w+\\){\\$\\w+=\\1;\\s*\\$d=pack\\(\'H\\*\',substr\\(\\1,\\s*\\4\\)\\);\\s*return\\s*\\$\\w+\\(substr\\(\\$\\w+,\\s*\\$\\w+,\\s*\\$\\w+\\)\\);}};eval\\(\\3\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'substr',
  ),
  171 => 
  array (
    'full' => '~(?:\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]=\'_F\';)?\\$(?:_F|\\{\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]\\})=_{1,2}(?:FILE|hex)_{1,2};(?:\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]=\'_X\';)?\\$(?:_X|\\{\\$\\{\'GLOBALS\'\\}\\[\'\\w+\'\\]\\})=["\']([^\'"]+)[\'"];\\s*(?:\\$[_\\w]+\\.=[\'"][\\w\\+\\/=]+[\'"];){0,30}\\$_\\w+=base64_decode\\(\\$_X\\);\\$_X=strtr\\(\\$_X,\'([^\']+)\',\'([^\']+)\'\\);\\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\\(\'\\~?__FILE__\\~?\',"\'".\\$_F."\'",\\$_X\\);eval\\(\\$_R\\);\\$_R=0;\\$_X=0;~msi',
    'fast' => '~\\$_\\w+=base64_decode\\(\\$_X\\);\\$_X=strtr\\(\\$_X,\'([^\']+)\',\'([^\']+)\'\\);\\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\\(\'\\~?__FILE__\\~?\',"\'".\\$_F."\'",\\$_X\\);eval\\(\\$_R\\);\\$_R=0;\\$_X=0;~msi',
    'id' => 'LockIt2',
  ),
  172 => 
  array (
    'full' => '~(?:@error_reporting\\(\\d+\\);\\s{0,10}@set_time_limit\\(\\d+\\);)?\\s{0,10}(\\$\\w+)=([\\s\'\\w\\/+=]+);\\s{0,10}(\\$\\w+)=(__FILE__);\\s*\\1=gzinflate\\(str_rot13\\(base64_decode\\(\\$tr\\)\\)\\);\\1=strtr\\(\\1,\'([^\']+)\'\\s*,\'([^\']+)\'\\);(\\$_R)=@?ereg_replace\\(\'\\~?\\4\\~?\',"\'".\\3."\'",\\1\\);eval\\(\\7\\);\\7=0;\\1=0;~msi',
    'fast' => '~(\\$\\w+)=([\\s\'\\w\\/+=]+);\\s*(\\$\\w+)=(__FILE__);\\s*\\1=\\w+\\(\\w+\\(\\w+\\(\\$tr\\)\\)\\);\\1=\\w+\\(\\1,\'([^\']+)\'\\s*,\'([^\']+)\'\\);(\\$_R)=@?\\w+\\(\'\\~?\\4\\~?\',"\'".\\3."\'",\\1\\);\\w+\\(\\7\\);\\7=0;\\1=0;~msi',
    'id' => 'anaski',
  ),
  173 => 
  array (
    'full' => '~\\$\\w+=\'=+\\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\\s*(?:http://www\\.ud64\\.com/)?\\s*=+\';\\s*(\\$ud64_c[o0]m="[\\\\0-9a-z\\."]+;)+\\$\\w+=(\\$ud64_c[o0]m\\()+"([^"]+)"\\)+;@eval\\(\\$ud64_c[o0]m\\(\'[^\']+\'\\)+;~msi',
    'id' => 'ud64',
  ),
  174 => 
  array (
    'full' => '~(\\$[\\w_]+=("[\\\\\\\\\\w]+"\\.?)+;)+\\$\\w+=(?:\\$\\w+\\()+"([\\w\\/\\+=]+)"\\)+;@eval\\(\\$\\w+\\(\'.*?\'\\)+;~msi',
    'id' => 'ud64',
  ),
  175 => 
  array (
    'full' => '~\\$\\w+=__FILE__;\\$\\w+=fopen\\(\\$\\w+,\'rb\'\\);fread\\(\\$\\w+,(\\d+)\\);\\$\\w+=explode\\("\\\\t",base64_decode\\(fread\\(\\$\\w+,(\\d+)\\)+;\\$\\w+=\\$\\w+\\[[\\d+]\\];[\\$l1=\\d{}\\.;\\(\\)\\[\\]]+eval\\(\\$\\w+\\(\'[^\']+\'\\)+;\\s*return\\s*;\\?>[\\w=\\+]+~msi',
    'id' => 'qibosoft',
  ),
  176 => 
  array (
    'full' => '~(\\$\\w+)=base64_decode\\("([^"]+)"\\);\\s*eval\\("return\\s*eval\\(\\\\"\\1\\\\"\\);"\\)~msi',
    'id' => 'evalReturn',
  ),
  177 => 
  array (
    'full' => '~(?:\\$[0O]+\\[[\'"](\\w+)[\'"]\\]\\.?="[\\\\\\w]+";)+(?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\.?=\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\([\'"][\\d\\(]+[\'"](,__FILE__)?\\);)+@eval\\((?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\()+"([^"]+)"\\)+;~mis',
    'fast' => '~(?:\\$[0O]+\\[[\'"](\\w+)[\'"]\\]\\.?="[\\\\\\w]+";)+(?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\.?=\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\([\'"][\\d\\(]+[\'"](,__FILE__)?\\);)+@eval\\((?:\\$[0O]+\\[[\'"]\\w+[\'"]\\]\\()+"([^"]+)"\\)+;~mis',
    'id' => 'evalChars',
  ),
  178 => 
  array (
    'full' => '~<\\?php\\s+((\\$GLOBALS\\[\\s*[\'"]\\w+[\'"]\\s*\\])\\s*=\\s*base64_decode\\("([^"]*)"\\);)+\\s*\\?><\\?php\\s.+\\2.+exit;\\s}\\sfunction\\s\\w+\\(\\)\\s{\\sreturn\\sarray\\(\\s\'favicon\'\\s=>\\s\'[^\']+\',\\s+\'sprites\'\\s=>\\s\'[^\']+\',\\s\\);\\s}~msi',
    'id' => 'globalsBase64',
  ),
  179 => 
  array (
    'full' => '~(\\$\\w+=strrev\\("[^"]+"\\);)+eval\\((\\$\\w+\\()+"[^"]+"\\)+;~mis',
    'fast' => '~(\\$\\w+=strrev\\("[^"]+"\\);)+eval\\((\\$\\w+\\()+"[^"]+"\\)+;~mis',
    'id' => 'strrevVarEval',
  ),
  180 => 
  array (
    'full' => '~\\$\\w+=basename/\\*\\w+\\*/\\(/\\*\\w+\\*/trim/\\*\\w+\\*/\\(.+?(\\$\\w+)=.+\\1.+?;~msi',
    'id' => 'comments',
  ),
  181 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\s*\\(+|gzinflate\\s*\\(+|strrev\\s*\\(+|str_rot13\\s*\\(+|gzuncompress\\s*\\(+|convert_uudecode\\s*\\(+|urldecode\\s*\\(+|rawurldecode\\s*\\(+|htmlspecialchars_decode\\s*\\(+)+"([^"]+)"\\)+;\\s*@?eval\\(([\'"?>.\\s]+)?\\1\\);~',
    'fast' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\s*\\(+|gzinflate\\s*\\(+|strrev\\s*\\(+|str_rot13\\s*\\(+|gzuncompress\\s*\\(+|convert_uudecode\\s*\\(+|urldecode\\s*\\(+|rawurldecode\\s*\\(+|htmlspecialchars_decode\\s*\\(+)+"([^"]+)"\\)+;\\s*@?eval\\(([\'"?>.\\s]+)?\\1\\);~',
    'id' => 'varFuncsEval',
  ),
  182 => 
  array (
    'full' => '~<\\?php\\s*defined\\(\'[^\']+\'\\)\\s*\\|\\|\\s*define\\(\'[^\']+\',__FILE__\\);(global\\s*\\$[^;]+;)+\\s*(if\\(!function_exists\\(\'([^\']+)\'\\)\\){\\s*function\\s*[^\\)]+\\(\\$[^,]+,\\$[^=]+=\'\'\\){\\s*if\\(empty\\(\\$[^\\)]+\\)\\)\\s*return\\s*\'\';\\s*\\$[^=]+=base64_decode\\(\\$[^\\)]+\\);\\s*if\\(\\$[^=]+==\'\'\\)\\s*return\\s*\\~\\$[^;]+;\\s*if\\(\\$[^=]+==\'-1\'\\)\\s*@[^\\(]+\\(\\);\\s*\\$[^=]+=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\(\\$[^\\)]+\\);\\s*\\$[^=]+=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\(\\$[^,]+,\\$[^,]+,\\$[^\\)]+\\);\\s*return\\s*\\$[^^]+\\^\\$[^;]+;\\s*}}\\s*)+(\\$[^\\[]+\\["[^"]+"]=[^\\(]+\\(\'[^\']+\',\'[^\']*\'\\);\\s*)+(\\$[^\\[]+\\[\'[^\']+\'\\]=\\$GLOBALS\\[\'[^\']+\'\\]\\[\'[^\']+\'\\]\\([^\\)]*\\)+;\\s*)+return\\(eval\\(\\$[^\\[]+\\[\'[^\']+\'\\]\\)+;\\s*\\?>\\s*#!/usr/bin/php\\s*-q\\s*(\\s*[^\\s]+)+~msi',
    'fast' => '~<\\?php\\s*defined\\(\'[^\']{10,30}\'\\)\\s*\\|\\|\\s*define\\(\'[^\']{10,30}\',__FILE__\\);(global\\s*\\$[^;]{10,30};)+\\s*if\\(!function_exists\\(\'([^\']+)\'\\)\\){\\s*function\\s*[^\\)]+\\(\\$[^,]{10,30},\\$[^=]{10,30}=\'\'\\){\\s*if\\(empty\\(\\$[^\\)]+\\)\\)\\s*return\\s*\'\';\\s*\\$[^=]{10,30}=base64_decode~msi',
    'id' => 'OELove',
  ),
  183 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=(\\s*(\\d+)\\+)*\\d+;\\s*)?(\\$\\w+="[^"]+";\\s*)+\\s*(?:\\$\\w+\\s*=(?:\\s*(?:\\d+)\\+)*\\s*\\d+;\\s*)?(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\']+\',\\s*\\$\\w+,\\s*\'[^\']+\'\\);.+?\\4\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*\\4;\\s*(\\$\\w+="[^"]+";\\s*)+.+?\\$\\w+\\(\\$\\w+,\\$\\w+\\("",\\s*\\$\\w+\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+,\\s*"(\\d+)"\\)+,\\$\\w+\\);.+function \\w+\\((\\$\\w+),\\s*\\$\\w+,\\s(\\$\\w+)\\)\\s{\\8\\s=\\s\\8\\s\\.\\s\\8;.+return \\7;\\s*}~msi',
    'fast' => '~(\\$\\w+)\\s*=\\s*\\w+\\(\'[^\']+\',\\s*\\$\\w+,\\s*\'[^\']+\'\\);.+?\\1\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*\\1;\\s*(\\$\\w+="[^"]+";\\s*)+~msi',
    'id' => 'Obf_20200402_1',
  ),
  184 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*"[^"]+";\\s*)?(?:((?:\\$\\w+\\s*=\\s*\'[^\']+\';\\s*)+)(\\$\\w+=(?:\\$\\w+\\.?)+);)?function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+),\\s*(\\$\\w+)\\)\\s*{\\s*return\\s*([\'\\. ]*(\\4|\\5|\\6)[\'\\. ]*)+;\\s*}\\s*(?:\\$\\w+\\s*=\\s*"[^"]+";)?(\\s*\\$\\w+\\s*=\\s*\\3\\((((\'\')|(\\$\\w+)|(\\$\\w+[\\[\\{]\\d+[\\]\\}](\\.\'\')?)|(\\$\\w+[\\[\\{]\\d+[\\]\\}]\\.\\$\\w+[\\[\\{]\\d+[\\]\\}]))\\s*,?\\s*)+\\);\\s*)+\\s*\\$\\w+\\s*=\\s*\\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\\)+;~msi',
    'fast' => '~function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+),\\s*(\\$\\w+)\\)\\s*{\\s*return\\s*([\'\\. ]*(\\2|\\3|\\4)[\'\\. ]*)+;\\s*}\\s*(?:\\$\\w+\\s*=\\s*"[^"]+";)?(\\s*\\$\\w+\\s*=\\s*\\1\\((((\'\')|(\\$\\w+)|(\\$\\w+[\\[\\{]\\d+[\\]\\}](\\.\'\')?)|(\\$\\w+[\\[\\{]\\d+[\\]\\}]\\.\\$\\w+[\\[\\{]\\d+[\\]\\}]))\\s*,?\\s*)+\\);\\s*)+\\s*\\$\\w+\\s*=\\s*\\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\\)+;~msi',
    'id' => 'Obf_20200402_2',
  ),
  185 => 
  array (
    'full' => '~(?:function\\s*\\w{1,50}\\(\\$\\w{1,50},\\s*\\$\\w{1,50}\\)\\s*\\{(?:\\s*\\$\\w{1,50}\\s*=\\s*(?:md5\\(\\$\\w{1,50}\\)|\\d+|base64_decode\\(\\$\\w{1,50}\\)|strlen\\(\\$\\w{1,50}\\)|\'\');\\s*)+\\s*for\\s*\\(\\$\\w{1,50}\\s*=\\s\\d+;\\s*\\$\\w{1,50}\\s*<\\s*\\$len;\\s*\\$\\w{1,50}\\+\\+\\)\\s*\\{\\s*if\\s*\\(\\$\\w{1,50}\\s*==\\s*\\$\\w{1,50}\\)\\s*\\{\\s*\\$\\w{1,50}\\s*=\\s*\\d+;\\s*}\\s*\\$\\w{1,50}\\s*\\.=\\s*substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\);\\s*\\$\\w{1,50}\\+\\+;\\s*\\}(?:\\s*\\$\\w{1,50}\\s*=\\s*\'\';)?\\s*for\\s*\\(\\$\\w{1,50}\\s*=\\s*\\d+;\\s*\\$\\w{1,50}\\s*<\\s*\\$\\w{1,50};\\s*\\$\\w{1,50}\\+\\+\\)\\s*{\\s*if\\s*\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*<\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\)\\s*\\{\\s*\\$\\w{1,50}\\s*\\.=\\s*chr\\(\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*\\+\\s*\\d+\\)\\s*-\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\);\\s*}\\s*else\\s*{\\s*\\$\\w{1,50}\\s*\\.=\\s*chr\\(ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\s*-\\s*ord\\(substr\\(\\$\\w{1,50},\\s*\\$\\w{1,50},\\s*\\d+\\)\\)\\);\\s*}\\s*}\\s*return\\s*\\$\\w{1,50};\\s*\\}\\s*|\\$\\w{1,50}\\s*=\\s*"([^"]+)";\\s*){2}\\s*\\$\\w{1,50}\\s*=\\s*"([^"]+)";\\s*\\$\\w{1,50}\\s*=\\s*\\w{1,50}\\(\\$\\w{1,50},\\s*\\$\\w{1,50}\\);\\s*eval\\(\\$\\w{1,50}\\);~msi',
    'id' => 'Obf_20200414_1',
  ),
  186 => 
  array (
    'full' => '~(?:\\$\\w+\\s{0,10}=\\s{0,10}\'\\w+\';)?\\s{0,10}(\\$\\w+)\\s*=\\s*urldecode\\(\'[%0-9a-f]+\'\\);(\\s*(\\$\\w+)\\s*=(\\s*\\1\\{\\d+\\}\\.?)+;)+\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\.\\3\\("[^"]+"\\);\\s*eval\\(\\5\\);~msi',
    'fast' => '~(\\$\\w+)\\s*=\\s*urldecode\\(\'[%0-9a-f]+\'\\);(\\s*(\\$\\w+)\\s*=(\\s*\\1\\{\\d+\\}\\.?)+;)+\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\.\\3\\("[^"]+"\\);\\s*eval\\(\\5\\);~msi',
    'id' => 'Obf_20200421_1',
  ),
  187 => 
  array (
    'full' => '~(\\$\\w+)=\'([^\']+)\';(\\$\\w+)=str_rot13\\(gzinflate\\(str_rot13\\(base64_decode\\(\\1\\)\\)\\)\\);eval\\(\\3\\);~msi',
    'id' => 'SmartToolsShop',
  ),
  188 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*\\("\\?>"\\.gzuncompress\\(base64_decode\\("[^"]+"\\)\\)\\);\\s*@?eval\\(\\1\\);~msi',
    'id' => 'Obf_20200504_1',
  ),
  189 => 
  array (
    'full' => '~(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);\\s*eval\\(\\1\\);~mis',
    'fast' => '~(\\$\\w+)=base64_decode\\(\'[^\']+\'\\);\\s*eval\\(\\1\\);~mis',
    'id' => 'Obf_20200507_1',
  ),
  190 => 
  array (
    'full' => '~(?:error_reporting\\(0\\);\\s*ini_set\\("max_execution_time",0\\);\\s*(?:/\\*.*?\\*/)?\\s*)?(\\$\\w+)=\\s*\\[(("."=>".",?\\s*)+)];\\s*(\\$\\w+)=str_split\\("([^"]+)"\\);\\s*(?:\\$\\w+="";)?\\s*foreach\\(\\4\\s*as\\s*(\\$\\w+)\\)\\s*{\\s*foreach\\(\\s*\\1\\s*as\\s*(\\$\\w+)=>(\\$\\w+)\\)\\s*{\\s*if\\(\\6==\\(string\\)\\8\\)\\s*\\{\\s*\\$\\w+\\.=\\7;\\s*break;\\s*}\\s*}\\s*}~msi',
    'fast' => '~(\\$\\w+)=\\s*\\[(("."=>".",?\\s*)+)];\\s*(\\$\\w+)=str_split\\("([^"]+)"\\);\\s*(?:\\$\\w+="";)?\\s*foreach\\(\\4\\s*as\\s*(\\$\\w+)\\)\\s*{\\s*foreach\\(\\s*\\1\\s*as\\s*(\\$\\w+)=>(\\$\\w+)\\)\\s*{\\s*if\\(\\6==\\(string\\)\\8\\)\\s*\\{\\s*\\$\\w+\\.=\\7;\\s*break;\\s*}\\s*}\\s*}~msi',
    'id' => 'Obf_20200507_4',
  ),
  191 => 
  array (
    'full' => '~assert\\("[eval"\\.]+\\([base64_decode\\."]+\\(\'([^\']+)\'\\)\\)"\\);~msi',
    'id' => 'Obf_20200507_5',
  ),
  192 => 
  array (
    'full' => '~parse_str\\s*\\(\\s*((?:[\'"][^\'"]+["\']\\s*\\.?\\s*)+)\\s*,\\s*(\\$\\w+)\\s*\\)\\s*;\\s*@?\\s*(\\2\\s*\\[\\s*\\d+\\s*\\]\\s*\\(\\s*)+(?:\'[^\']+\'|\\2\\[\\d+\\])\\s*\\)?,\\s*array\\s*\\(\\s*\\)\\s*,\\s*array\\s*\\(\\s*["\'][^\'"]+[\'"]\\s*\\.\\s*(\\2\\[\\s*\\d+\\s*\\]\\s*\\(\\s*)+[\'"]([^\'"]+)[\'"]\\s*[\\)\\s]+\\.[\'"]//[\'"][\\s\\)]+;~msi',
    'id' => 'Obf_20200513_1',
  ),
  193 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\("[base64_decode"\\.]+\\);eval\\(\\1\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'Obf_20200526_1',
  ),
  194 => 
  array (
    'full' => '~error_reporting\\(0\\);define\\(\'\\w+\',\\s*__FILE__\\);define\\(\'\\w+\',\\s*fopen\\(__FILE__,\\s*\'r\'\\)\\);fseek\\(\\w+,\\s*__COMPILER_HALT_OFFSET__\\);((\\$\\w+="\\\\x[0-9a-f]+";)+(\\$\\w+="[^"]+";)+eval\\("\\?>"\\.(\\$\\w+\\()+"([^"]+)"\\)+;)+(?:/\\*\\w+\\*/)?__halt_compiler\\(\\);[\\w#|>^%\\[\\.\\]\\\\/=]+~msi',
    'id' => 'Obf_20200527_1',
  ),
  195 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\("[base64_decode]+"\\)\\.str_replace\\(\'(\\w+)\',\'\',\'\\w+\'\\);\\s*eval\\(\\1\\(\\$\\w+\\)\\);~msi',
    'id' => 'Obf_20200602_1',
  ),
  196 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*base64_decode\\(\\1\\);\\s*eval\\(\\3\\);~msi',
    'id' => 'Obf_20200720_1',
  ),
  197 => 
  array (
    'full' => '~[\'".]+(\\$\\w+\\s*=\\s*[\'"]\\w+[\'"];)+(\\$\\w+=\\$\\w+[\'.]+\\$\\w+;)+(\\$\\w+=(str_rot13|base64_decode|gzinflate)\\(\\$\\w+\\);)+eval\\(\\$\\w+\\);~msi',
    'id' => 'flamux',
  ),
  198 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\{\\s*return\\s*"([^"]+)";\\s*\\}\\s*eval\\("([^"]+)"\\.\\1\\(\\)\\."([^"]+)"\\);~msi',
    'id' => 'bypass',
  ),
  199 => 
  array (
    'full' => '~(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+(echo)\\s*"(?:[<\\w\\\\>\\/\\s={:}#]+);(?:[\\\\\\w\\-:]+;)+(?:[\\\\\\w}:{\\s#]+;)+(?:[\\\\\\w}:{#\\-\\s]+;)+[\\\\\\w}<\\/]+";\\$\\w+=["\\\\\\w]+;(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+\\$\\w+=["\\\\\\w]+;\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";error_reporting\\(\\d\\);\\$\\w+=["\\\\\\w]+;\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";\\$\\w+=["\\\\\\w]+;set_time_limit\\(\\d\\);\\$\\w+=["\\\\\\w]+;(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";)+if\\(empty\\([\\$_\\w\\["\\\\\\]]+\\)\\){\\${\\${"[^"]+"}\\["[^"]+"\\]}=[\\w()]+;}else{\\${\\${"[^"]+"}\\["[^"]+"\\]}=[\\$_\\w\\["\\\\\\]]+;}chdir\\(\\${\\$\\w+}\\);\\${\\${"[^"]+"}\\["[^"]+"\\]}=htmlentities.*?\\1"[^"]+"\\.\\${\\${"[^"]+"}\\["[^"]+"\\]}[."<\\w>\\\\=&]+\\${\\$\\w+}[.">\\w\\\\\\/<]+;(?:\\1["\\\\\\w\\s=.\\${}\\[\\]&\':\\/<>]+;)+}else{(?:\\$\\w+=["\\\\\\w]+;){2}\\${\\${"[^"]+"}\\["[^"]+"\\]}=scandir\\(\\${\\$\\w+}\\);(?:\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";){2}\\${\\${"[^"]+"}\\["[^"]+"\\]}=count\\(\\${\\${"[^"]+"}\\["[^"]+"\\]}\\)\\-\\d;\\1"[^"]+"\\.\\${\\${"[^"]+"}\\["[^"]+"\\]}[."<\\w>\\\\=&]+\\/\\w+>";\\${"[^"]+"}\\["[^"]+"\\]="[^"]+";\\1["<\\\\\\w>.\\s=]+\\${\\${"[^"]+"}\\["[^"]+"\\]}[."\\\\\\w\\s=<\\/]+;(?:\\1["\\\\\\w\\s=.\\${}\\[\\]&\':\\/<>]+;){3}}}\\1["\\\\\\w:\\s.\\$\\[\\]>()_\'<\\/%]+;~msi',
    'id' => 'darkShell',
  ),
  200 => 
  array (
    'full' => '~((\\$\\w+)=\'(\\d+)\';)?(\\$\\w+)=\'([\\w\\(;\\$\\)=\\s\\[\\/\\]."*,{}]+)\';(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?)+;(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?)+;(\\$\\w+)=(?:\\4\\[[-+\\(\\d*\\/\\)]+\\]\\.?(?(2)\\2\\.|)?)+;(\\$\\w+)=\\s*"([\'\\w\\/+=]+)";(?:\\$\\w+=\'\';)?(\\$\\w+)\\.=\\7;\\11\\.=\\9;\\11\\.=\\8;@(\\$\\w+)=\\6\\(\\(\'+\\),\\s+\\(\\11\\)\\);@\\12\\(\\);~msi',
    'id' => 'wso',
  ),
  201 => 
  array (
    'fast' => '~(?:(?:@?\\s{0,10}error_reporting|@?\\s{0,10}set_time_limit)\\s*\\(\\s*\\d+\\s*\\);\\s*(?:header\\s*\\(\\s*"[^"]+"\\s*\\)\\s*;\\s*)?){1,2}function\\s*\\w+\\s*\\(\\s*(\\$\\w{1,50})\\s*\\)\\s*{\\s*(\\$\\w{1,50})\\s*=\\s*strlen\\s*\\(\\s*trim\\s*\\(\\s*\\1\\s*\\)\\s*\\)\\s*;\\s*(\\$\\w{1,50})\\s*=\\s*\'\'\\s*;\\s*(?:for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\$\\w+\\s*<\\s*\\2\\s*;\\s*\\$\\w+\\s*\\+=\\s*2\\s*\\)|\\$\\w+\\s*=\\s*0;\\s*while\\s*\\(+\\$\\w+\\s*<\\s*\\2\\)+)\\s*{\\s*\\3\\s*\\.=\\s*pack\\s*\\(\\s*"C"\\s*,\\s*hexdec\\s*\\(\\s*substr\\s*\\(\\s*\\1\\s*,\\s*\\$\\w+\\s*,\\s*2\\)\\)\\);\\s*(?:\\$\\w+\\s*\\+=\\s*2;)?\\s*}\\s*return\\s*\\3\\s*;\\s*}\\s*(?:header\\("\\w+-(?:\\w+:)?\\s\\w+\\/\\w+;\\s*charset=(\\w+)"\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*(?:(?:\\w+\\s*\\(\\s*"\\w+"\\s*\\)|\\$\\w{1,50}|\\w+\\s*\\(\\s*((?:\\s*\'\\w*\'\\s*\\.\\s*\\(\\d+[\\-\\+\\*\\/]\\d+\\)\\.?)+))\\s*\\.?\\s*)+(?:\\.?\'\'\\s*\\))*\\s*\\.\\s*\'([\\w\\/\\+=\\\\]+\'\\)\\)\\);)\'\\s*;\\s*(?:(\\$\\w{1,50})\\s*=\\w+\\((?:\\s*\'\\w*\'\\.\\s*\\(\\d+[\\+\\-\\*\\/]\\d+\\)\\.?)+\'\\w*\'\\);\\s*)*\\s*(?:(\\$\\w+)\\s*=\\s*(?:\\s*create_function|@?\\$\\w+)\\(\'\',\\s*\\6\\);\\s*(?:\\9|\\10)\\(\\);|\\$\\w+\\s*=\\s*@?eval\\s*\\(\\s*\\6\\s*\\)\\s*;)~msi',
    'full' => '~(?:(?:@?\\s{0,10}error_reporting|@?\\s{0,10}set_time_limit)\\s*\\(\\s*\\d+\\s*\\);\\s*(?:header\\s*\\(\\s*"[^"]+"\\s*\\)\\s*;\\s*)?){1,2}function\\s*\\w+\\s*\\(\\s*(\\$\\w{1,50})\\s*\\)\\s*{\\s*(\\$\\w{1,50})\\s*=\\s*strlen\\s*\\(\\s*trim\\s*\\(\\s*\\1\\s*\\)\\s*\\)\\s*;\\s*(\\$\\w{1,50})\\s*=\\s*\'\'\\s*;\\s*(?|for\\s*\\(\\s*(\\$\\w{1,50})\\s*=\\s*0\\s*;\\s*\\4\\s*<\\s*\\2\\s*;\\s*\\4\\s*\\+=\\s*2\\s*\\)|(\\$\\w+)\\s*=\\s*0;\\s*while\\s*\\(+\\4\\s*<\\s*\\2\\)+)\\s*{\\s*\\3\\s*\\.=\\s*pack\\s*\\(\\s*"C"\\s*,\\s*hexdec\\s*\\(\\s*substr\\s*\\(\\s*\\1\\s*,\\s*\\4\\s*,\\s*2\\)\\)\\);\\s*(?:\\4\\s*\\+=\\s*2;)?\\s*}\\s*return\\s*\\3\\s*;\\s*}\\s*(?:header\\("\\w+-(?:\\w+:)?\\s\\w+\\/\\w+;\\s*charset=(\\w+)"\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*(?:(?|\\w+\\s*\\(\\s*"(\\w+)"\\s*\\)|\\$\\w{1,50}|\\w+\\s*\\(\\s*((?:\\s*\'\\w*\'\\s*\\.\\s*\\(\\d+[\\-\\+\\*\\/]\\d+\\)\\.?)+))\\s*\\.?\\s*)+(?:\\.?\'\'\\s*\\))*\\s*\\.\\s*\'([\\w\\/\\+=\\\\]+\'\\)\\)\\);)\'\\s*;\\s*(?:(\\$\\w{1,50})\\s*=\\w+\\((?:\\s*\'\\w*\'\\.\\s*\\(\\d+[\\+\\-\\*\\/]\\d+\\)\\.?)+\'\\w*\'\\);\\s*)*\\s*(?:(\\$\\w+)\\s*=\\s*(?:\\s*create_function|@?\\$\\w+)\\(\'\',\\s*\\6\\);\\s*(?:\\9|\\10)\\(\\);|\\$\\w+\\s*=\\s*@?eval\\s*\\(\\s*\\6\\s*\\)\\s*;)~msi',
    'id' => 'anonymousFox',
  ),
  202 => 
  array (
    'full' => '~(\\$my_sucuri_encoding)\\s{0,10}=\\s{0,10}[\'"]([^\'"]+)[\'"];\\s{0,10}(\\$tempb64)\\s{0,10}=\\s{0,10}base64_decode\\(\\s{0,10}\\1\\);\\s{0,10}eval\\(\\s{0,10}\\3\\s{0,10}\\);~msi',
    'id' => 'wsoEval',
  ),
  203 => 
  array (
    'full' => '~(?:(?:(\\$\\w+)\\s*\\.?=\\s*["\'][assert]+["\'];)+\\s*(if\\s*\\(\\!\\@\\$\\w+\\)\\s*\\{\\$\\w+=1;)?\\s*@?\\1)(\\((?:\\w+\\()+\'[^;]+;\'\\)+;(?(2)}))~msi',
    'id' => 'assertStr',
  ),
  204 => 
  array (
    'full' => '~(function\\s\\w+\\(\\$\\w+,\\$\\w+,\\$\\w+\\){return\\sstr_replace\\(\\$\\w+,\\$\\w+,\\$\\w+\\);}\\s?){3}(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\2\\s=\\s(\\w+)\\(\'(\\w+)\',\'\',\\2\\);\\s(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\6\\s=\\s\\4\\(\'(\\w+)\',\'\',\\6\\);\\s(\\$\\w+)\\s=\\s\'(\\w+)\';\\s\\9\\s=\\s\\4\\(\'(\\w+)\',\'\',\\9\\);\\s(\\$\\w+)\\s=\\s\'(\\$\\w+)\';\\s(\\$\\w+)\\s=\\s\\6\\(\\12,\\9\\.\'\\(\'\\.\\2\\.\'\\(\'\\.\\12\\.\'\\)\\);\'\\);\\s\\14\\(\'(\\w+)\'\\);~msi',
    'id' => 'funcVar',
  ),
  205 => 
  array (
    'full' => '~(\\$\\w+)=[\'"]([\\w</,\\s()\\$\\+}\\\\\'"?\\[\\]{;%=^&-]+)[\'"];(\\$\\w+=(?:\\s?\\1\\[\\d+\\](?:\\s?\\.?))+;)+((?:\\$\\w+\\(\\d+\\);)?(\\$\\w+=(\\$\\w+)\\(["\']{2},(\\$\\w+\\(\\$\\w+\\(["\'][=\\w\\+\\/]+[\'"]\\)\\))\\);\\$\\w+\\(\\);|.*?if\\s?\\(isset\\(\\${(?:\\$\\w+\\[\\d+\\]\\.?)+}.*?function\\s\\w+.*?include\\s\\${(?:\\$\\w+\\[\\d+\\]\\.?)+}\\[(?:\\$\\w+\\[\\d+\\]\\.?)+\\];\\s?}))~msi',
    'id' => 'dictionaryVars',
  ),
  206 => 
  array (
    'full' => '~(?:(?<concatVar>\\$\\w+)\\s?=\\s?""\\s?;((?:\\s?(?P=concatVar)\\s?\\.=\\s?"[\\w]+"\\s?;\\s?)+))?(\\$\\w+)\\s?=\\s?(?:(?P=concatVar)|"(?<strVal>[\\w]+)")\\s?;\\s?if\\s?\\(\\s?!function_exists\\s?\\(\\s?"(\\w+)"\\)\\){\\s?function\\s\\5\\(\\s?(\\$\\w+)\\){\\s?(?:\\$\\w+\\s?=\\s?""\\s?;)?\\s?(\\$\\w+)\\s?=\\s?strlen\\s?\\(\\s?\\6\\s?\\)\\s?\\/\\s?2\\s?;\\s?for\\s?\\(\\s?(\\$\\w+)\\s?=0\\s?;\\s?\\8\\s?<\\s?\\7\\s?;\\s?\\8\\+\\+\\s?\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?chr\\s?\\(\\s?base_convert\\s?\\(\\s?substr\\s?\\(\\s?\\6\\s?,\\s?\\8\\s?\\*\\s?2\\s?,\\s?2\\s?\\)\\s?,\\s?16\\s?,\\s?10\\s?\\)\\s?\\)\\s?;\\s?}\\s?return\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?create_function\\s?\\(\\s?null\\s?,\\s?\\5\\(\\s?\\3\\)\\)\\s?;\\s?\\3\\(\\)\\s?;~msi',
    'id' => 'concatVarFunc',
  ),
  207 => 
  array (
    'full' => '~function\\s?(\\w+)\\(\\){(((\\$\\w+)\\.?="\\w+";)+)return\\seval\\(\\4\\(\\w+\\(\\)\\)\\);}function\\s(\\w+)\\((\\$\\w+)\\){((?:(\\$\\w+)\\.?="\\w+";)+)return\\s\\8\\(\\6\\);}function\\s?(\\w+)\\(\\){((\\$\\w+)\\.?="([\\w\\/+=]+)";)return\\s(\\w+)\\(\\11\\);}function\\s\\13\\((\\$\\w+)\\){(\\$\\w+)=(\\w+)\\((\\w+)\\((\\w+)\\(\\14\\)\\)\\);return\\s\\15;}function\\s\\17\\(\\14\\){(((\\$\\w+)\\.?="\\w+";)+)return\\s\\21\\(\\14\\);}\\1\\(\\);function\\s\\16\\(\\14\\){(((\\$\\w+)\\.?="\\w+";)+)return\\s\\24\\(\\14\\);}~msi',
    'id' => 'concatVarFuncFunc',
  ),
  208 => 
  array (
    'full' => '~(?:(?:\\s?\\$\\w+\\s?=\\s?strrev\\([\'"][^\'"]+[\'"]\\);\\s?)|(?:\\s?\\$\\w+\\s?=\\s?strrev\\([\'"][^\'"]+[\'"]\\);\\s?)|(?:\\s?eval\\((?:\\$\\w+)?\\([\'"][^\'"]+[\'"]\\)\\);\\s?)|(?:\\s?eval\\(\\$\\w+\\(\\$\\w+\\([\'"][^\'"]+[\'"]\\)\\)\\);\\s?)){3,4}~msi',
    'id' => 'evalVarDoubled',
  ),
  209 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?(\\w+)\\("([\\w+\\/=]+)"\\);\\s?echo\\s?\\1;~msi',
    'id' => 'varFuncsEcho',
  ),
  210 => 
  array (
    'full' => '~(\\$\\w+)="";\\s*(?:do\\s?{[^}]+}\\s?while\\s?\\(\\d+>\\d+\\);\\s*\\1=\\1\\."[^"]+";)?.*?\\s?.*?(\\$\\w+)=(\'[^\']+\'\\s?\\.\\s?(?:\'[^\']+\'\\s?\\.?\\s?)+);\\s?.*?(?:\\s(\\$\\w+)=((?:\\4\\[?{?\\d+\\]?}?\\.?)+);\\s?|\\$\\w{1,50}->\\w{1,50}\\(\\);)?\\s*(?:function\\s\\w+\\(\\){(?:.*?);\\s}\\s?\\1=\\w+\\(\\1,"\\w+"\\);\\s?|\\$\\w+=array\\((?:\'\\w+\',?)+\\);\\s?|\\1=\\w+\\(\\1,\\sjoin\\(\'\',\\s\\$\\w+\\)\\s?\\);\\s?|\\s?\\$\\w+\\+=\\d+;\\s?|\\1=\\w+\\(\\1,\\w+\\(\\)\\);\\s?|function\\s\\w+\\(\\){\\s?|do{\\s?if\\s?\\(\\d+<\\d+\\)\\s?{\\s?)*.*?(?:\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]{2},\\s?\\$\\w+\\(\\$\\w+(?:\\(\\1\\),\\s?(?:\\$\\w+\\[\'\\w+\'\\]\\)\\s?)?|\\)\\s?)\\);\\s?\\$\\w+\\(\\);)(?:\\s?function\\s\\w+\\((?:\\$\\w+,\\s?\\$\\w+)?\\)(?:.*?);\\s}|\\s?class\\s\\w+\\s?{(?:.*?);(?:\\s}){1,2})+~msi',
    'fast' => '~function\\s+\\w+\\(\\)\\{\\s*global\\s*(\\$\\w+);\\s*return\\s*(\\1[\\[{]\\d+[\\]}]\\.?){15};\\s*}~msi',
    'id' => 'varFuncsMany',
  ),
  211 => 
  array (
    'fast' => '~((\\$(?:GLOBALS|{"[\\\\\\w]+"})\\[[\'"]\\w+["\']\\])\\s?=\\s?[\'"]+([\\\\\\w]+)["\'];)\\s?(?:(\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+;\\s?)+(?:(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s[\\$_\\w]+;\\s)+(?:@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?,\\s?\\w+\\s?\\);\\s?)+@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\d+\\);\\s{0,50}(?:if\\s?\\(!(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\)\\)\\s{\\s{0,50}(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+,\\s(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)*\\d*\\);\\s{0,50}}?\\s{0,50})*(?:\\$\\w+\\s?=\\s?\\w+;\\s?)*(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+;\\s?global\\s?\\$\\w+;\\s?function\\s\\w+\\(\\$\\w+,\\s\\$\\w+\\)\\s{\\s?\\$\\w+\\s?=\\s?["\']{2};\\s?for\\s?\\(\\$\\w+\\s?=\\d+;\\s?\\$\\w+\\s?<\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\)\\s?;\\s?\\)\\s?{\\s?for\\s?\\(\\s?\\$\\w+=\\d+;\\s?\\$\\w+\\s?<\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\)\\s?&&\\s?\\$\\w+\\s?<(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\);\\s?\\$\\w+\\+{2},\\s?\\$\\w+\\+{2}\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\[\\$\\w+\\]\\)\\s?\\^\\s?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\[\\$\\w+\\]\\)\\);\\s?}\\s?}\\s?return\\s\\$\\w+;\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\s?\\$\\w+\\)\\s?{\\s?global\\s?\\$\\w+;\\s?return\\s(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+,\\s?\\$\\w+\\),\\s?\\$\\w+\\)\\s?;\\s?}\\s?foreach\\s?\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\sas\\s\\$\\w+=>\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?if\\s?\\(!\\$\\w+\\)\\s?{\\s?foreach\\s?\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\sas\\s\\$\\w+\\s?=>\\s?\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\((?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(@?(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\),\\s?\\$\\w+\\)\\);\\s?if\\s?\\(isset\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\]\\)\\s?&&\\s?\\$\\w+==\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\]\\)\\s?{\\s?if\\s?\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\s?==\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\)\\s?{\\s?\\$\\w+\\s?=\\s?array\\(\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?=>\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\),\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\s?=>\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+,\\s?\\);\\s?echo\\s?@(?:\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\(\\$\\w+\\);\\s?}\\s?elseif\\s?\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\s?==\\s?(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\)\\s?{\\s?eval\\(\\$\\w+\\[(?:\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)\\]\\);\\s?}\\s?(?:exit\\(\\);)?\\s?}\\s?}?~msi',
    'full' => '~((\\$(?:GLOBALS|{"[\\\\\\w]+"})\\[[\'"]\\w+["\']\\])\\s?=\\s?[\'"]+([\\\\\\w]+)["\'];)\\s?(?:(\\$GLOBALS\\[?(\\s?(?:\\2|\\$GLOBALS\\[\'\\w+\'\\])\\[\\d+\\]\\.?)+\\])\\s?=\\s?\\g<5>+;\\s?)+(?:\\g<4>\\s?=\\s[\\$_\\w]+;\\s)+(?:@\\g<4>\\(\\g<5>+\\s?,\\s?\\w+\\s?\\);\\s?)+@\\g<4>\\(\\d+\\);\\s{0,50}(?:if\\s?\\(!\\g<4>\\s?\\(\\g<5>+\\)\\)\\s{\\s{0,50}\\g<4>\\(\\g<5>+,\\s\\g<5>*\\d*\\);\\s{0,50}}?\\s{0,50})*(?:\\$\\w+\\s?=\\s?\\w+;\\s?)*\\g<4>\\s?=\\s\\g<5>+;\\s?global\\s?\\$\\w+;\\s?function\\s\\w+\\(\\$\\w+,\\s\\$\\w+\\)\\s{\\s?\\$\\w+\\s?=\\s?["\']{2};\\s?for\\s?\\(\\$\\w+\\s?=\\d+;\\s?\\$\\w+\\s?<\\s?\\g<4>\\(\\$\\w+\\)\\s?;\\s?\\)\\s?{\\s?for\\s?\\(\\s?\\$\\w+=\\d+;\\s?\\$\\w+\\s?<\\s?\\g<4>\\(\\$\\w+\\)\\s?&&\\s?\\$\\w+\\s?<\\g<4>\\(\\$\\w+\\);\\s?\\$\\w+\\+{2},\\s?\\$\\w+\\+{2}\\)\\s?{\\s?\\$\\w+\\s?\\.=\\s?\\g<4>\\(\\g<4>\\(\\$\\w+\\[\\$\\w+\\]\\)\\s?\\^\\s?\\g<4>\\(\\$\\w+\\[\\$\\w+\\]\\)\\);\\s?}\\s?}\\s?return\\s\\$\\w+;\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\s?\\$\\w+\\)\\s?{\\s?global\\s?\\$\\w+;\\s?return\\s\\g<4>\\(\\g<4>\\(\\$\\w+,\\s?\\$\\w+\\),\\s?\\$\\w+\\)\\s?;\\s?}\\s?foreach\\s?\\(\\g<4>\\sas\\s\\$\\w+=>\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?if\\s?\\(!\\$\\w+\\)\\s?{\\s?foreach\\s?\\(\\g<4>\\sas\\s\\$\\w+\\s?=>\\s?\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?\\$\\w+\\s?=\\s?\\$\\w+;\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?@\\g<4>\\(\\g<4>\\(@?\\g<4>\\(\\$\\w+\\),\\s?\\$\\w+\\)\\);\\s?if\\s?\\(isset\\(\\$\\w+\\[\\g<5>+\\]\\)\\s?&&\\s?\\$\\w+==\\$\\w+\\[\\g<5>+\\]\\)\\s?{\\s?if\\s?\\(\\$\\w+\\[\\g<5>\\]\\s?==\\s?\\g<5>\\)\\s?{\\s?\\$\\w+\\s?=\\s?array\\(\\s?\\g<5>+\\s?=>\\s?@\\g<4>\\(\\),\\s?\\g<5>+\\s?=>\\s?\\g<5>+,\\s?\\);\\s?echo\\s?@\\g<4>\\(\\$\\w+\\);\\s?}\\s?elseif\\s?\\(\\$\\w+\\[\\g<5>\\]\\s?==\\s?\\g<5>\\)\\s?{\\s?eval\\(\\$\\w+\\[\\g<5>\\]\\);\\s?}\\s?(?:exit\\(\\);)?\\s?}\\s?}?~msi',
    'id' => 'globalArrayEval',
  ),
  212 => 
  array (
    'full' => '~<\\?php\\s{0,30}(\\$\\w+)\\s{0,30}=\\s{0,30}"(.+?)";\\s{0,30}((?:\\$\\w+\\s{0,30}=\\s{0,30}(?:\\1\\[\'\\w\\s{0,30}\'\\s{0,30}\\+\\s{0,30}\\d+\\s{0,30}\\+\\s{0,30}\'\\s{0,30}\\w\'\\]\\s{0,30}\\.?\\s{0,30})+;\\s{0,30})+)(\\$\\w+)\\s{0,30}=\\s{0,30}"(\\d+)";\\s{0,30}(?:\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,30}"\\)\\s{0,30},\\s{0,30}"[\\w\\+]+"\\)\\s{0,30};\\s{0,30})+(?:\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\)\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}?\\$\\w+\\)\\s{0,30}\\)\\s{0,30};\\s{0,30})+\\$\\w+\\((?:\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,20}\\w\\s{0,20}"\\)\\s{0,30}\\.?\\s{0,30})+"\\(\\\\"\\w+\\\\"\\s{0,30},\\s{0,30}"\\s{0,30}\\.\\s{0,30}\\$\\w+\\(\\s{0,30}\\$\\w+\\(\\s{0,30}"\\d+"\\s{0,30},\\s{0,30}\\$\\w+\\(\\s{0,30}"\\s{0,20}"\\)\\s{0,30},\\s{0,30}"[\\d\\w=]+"\\)\\s{0,30}\\)\\s{0,30}\\.\\s{0,30}"\\s{0,30}\\)\\s{0,30};"\\)\\s{0,30};\\s{0,30}\\$\\w+\\s{0,30}=\\s{0,30}\\$\\w+\\(\\w+\\)\\s{0,30};\\s{0,30}\\$\\w+\\(\\s{0,30}(?:\\$\\w+\\(\\s{0,30}"\\s{0,30}[?>]\\s{0,30}"\\)\\s{0,30}\\.\\s{0,30})+(\\$\\w+)\\(\\s{0,30}(\\$\\w+)\\(\\s{0,30}(\\$\\w+),\\s{0,30}(\\$\\w+)\\(\\s{0,30}"\\s{0,30}"\\)\\s{0,30},\\s{0,30}(\\$\\w+)\\(\\s{0,30}"([()\\w@|*#\\[\\]&\\/\\+=]+)"\\s{0,30},\\s{0,30}(\\$\\w+),\\s{0,30}(\\$\\w+)\\)\\s{0,30}\\)\\)\\s{0,30}\\)\\s{0,30};\\s{0,30}\\$\\w+\\s?=\\s?\\d+\\s?;\\s{0,30}\\?>~msi',
    'id' => 'tinkleShell',
  ),
  213 => 
  array (
    'full' => '~(?:\\$\\w+="\\w+";)+(\\$\\w+)="([\\w_)(;\\/\\.*]+)";\\$\\w+="\\w+";function\\s(\\w+)\\((?:\\$\\w+,?){3}\\){return\\s?""(?:\\.\\$\\w+\\.""){3};}(?:\\$\\w+=(?:(?:"\\w+")|(?:\\3\\((?:\\1\\[\\d+\\],?\\.?)+\\))|(?:(?:\\3\\()+(?:\\$\\w+\\,?(?:\\)\\,)?)+)(?:(?:(?:\\3\\()+)*(?:(?:\\$\\w+,?)+)*(?:\\),)*(?:\\)*))+);)+\\$\\w+=\\3\\((?:\\1\\[\\d+\\]\\.?)+(?:,"")+\\);(?:\\$\\w+=\\3\\(\\3\\(\\$\\w+,\\$\\w+,\\$\\w+\\),\\3\\((?:\\$\\w+,?)+\\),\\3\\(\\$\\w+,\\3\\(\\$\\w+,\\$\\w+,""\\),\\$\\w+\\)\\)\\."\'(?<str>[\\w\\/\\+]+)\'")\\.\\3\\((?:\\1\\[\\d+\\],?\\.?)+\\);\\$\\w+\\(\\$\\w+,array\\("","}"\\.\\$\\w+\\."\\/+"\\)\\);~msi',
    'id' => 'wsoFunc',
  ),
  214 => 
  array (
    'full' => '~\\$\\w+\\[\'\\w+\'\\]\\s?=\\s?"[\\w;\\/\\.*)(]+";\\s?\\$\\w+\\[\'\\w+\'\\]\\s?=\\s?(?:\\$\\w+\\[\'\\w+\'\\]\\[\\d+\\]\\.?)+;\\s?\\$\\w+\\s?=\\s?(?:"[\\w()]*"\\.chr\\([\\d-]+\\)\\.?)+"\\(";\\s?\\$\\w+\\s?=\\s?"[)\\\\\\w;]+";\\s?\\$\\w+\\s?=\\s?\\$\\w+\\."\'(?<str>[\\w\\/\\+]+)\'"\\.\\$\\w+;\\s?\\$\\w+\\[\'\\w+\'\\]\\((?:\\$\\w+\\[\'\\w+\'\\]\\[\\d+\\]\\.?)+,\\s?\\$\\w+\\s?,"\\d+"\\);~msi',
    'id' => 'wsoFunc',
  ),
  215 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+)\\)\\s{0,50}{\\s{0,50}\\2\\s?=\\s?gzinflate\\(base64_decode\\(\\2\\)\\);\\s{0,50}for\\s?\\(\\s?(\\$\\w+)\\s?=\\s?\\d+\\s?;\\s?\\3\\s?<\\s?strlen\\(\\2\\);\\s?\\3\\+\\+\\)\\s{0,50}{\\s{0,50}\\2\\[\\3\\]\\s?=\\s?chr\\(ord\\(\\2\\[\\3\\]\\)\\s?-\\s?(\\d+)\\);\\s{0,50}}\\s{0,50}return\\s?\\2;\\s{0,50}}\\s{0,50}(?:\\$\\w+\\s?=\\s?[\'"]\\w+[\'"];\\s?){0,}eval\\(\\1\\([\'"]([^\'"]+)[\'"]\\)\\);~msi',
    'id' => 'evalWanFunc',
  ),
  216 => 
  array (
    'full' => '~((?>\\$(?:GLOBALS\\[\')?\\w+(?:\'\\])?)(?>\\s{0,100}=\\s{0,100}array\\(\\s{0,100})(?>(?:\\s{0,100}\'[^\']+\'\\s{0,100}=>\\s{0,100}\'?[^\']+\'?,\\s{0,100})+)\\s{0,100}\\);\\s{0,100}(?>((?:\\$\\w+=(?:[\'"][^\'"]*[\'"]\\.?)+;)+)?)(?:if\\(!\\$?\\w+\\((?:\'\\w*\'\\.?|\\$\\w+)+\\)\\){function\\s{0,100}\\w+\\(\\$\\w+\\){.*?else{function\\s{0,100}\\w+\\(\\$\\w+\\){.*?return\\s{0,100}\\$\\w+\\(\\$\\w+\\);\\s?}}){2})\\$\\w+=(?:\'\\w*\'\\.?)+;\\s?(\\$\\w+)\\s{0,100}=\\s{0,100}@?\\$\\w+\\(\'\\$\\w+\',(?:\\$\\w+\\.\'\\(.\\.\\$\\w+\\.(?:\'[\\w(\\$);]*\'\\.?)+\\)|(?:\'[^\']+\'\\.?)+\\));.*?\\3\\([\'"]([^"\']+)[\'"]\\);~msi',
    'id' => 'gulf',
  ),
  217 => 
  array (
    'full' => '~(\\$\\w+)=(\\w+);\\$\\w+="(.+?)";(?:\\$\\w+=\\$\\w+;)?(\\$\\w+)=strlen\\(\\$\\w+\\);(\\$\\w+)=[\'"]{2};for\\((\\$\\w+)=\\d+;\\6<\\4;\\6\\+\\+\\)\\s?\\5\\s?\\.=\\s?chr\\(ord\\(\\$\\w+\\[\\6\\]\\)\\s?\\^\\s?\\1\\);eval\\("\\?>"\\.\\5\\."<\\?"\\);~msi',
    'id' => 'evalConcatAsciiChars',
  ),
  218 => 
  array (
    'full' => '~(?:\\$\\w+="[\\w=]+";\\s?)+(\\$\\w+)\\s?=\\s?str_replace\\((?:"\\w*",?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\1\\((?:"\\w*",?\\s?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\1\\((?:"\\w*",?)+\\);\\s?(\\$\\w+)\\s?=\\s?\\3\\("",\\s?(\\2\\(\\2\\((\\1\\("([#;*,\\.]+)",\\s?"",\\s?((?:\\$\\w+\\.?)+)\\))\\)\\))\\);\\s?\\4\\(\\);~msi',
    'id' => 'evalPost',
  ),
  219 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?"e\\/\\*\\.\\/";\\spreg_replace\\(strrev\\(\\$\\w+\\),"([\\\\\\w]+)\'([\\w\\/\\+=]+)\'([\\\\\\w]+)","\\."\\);~msi',
    'id' => 'evalPregStr',
  ),
  220 => 
  array (
    'full' => '~\\$GLOBALS\\[\'\\w+\'\\]=array\\(\'preg_re\'\\s?\\.\'place\'\\);\\s?function\\s\\w+\\(\\$\\w+\\)\\s?{\\$\\w+=array\\("\\/\\.\\*\\/e","([\\\\\\w]+)\'([\\w\\/\\+]+)\'([\\\\\\w]+)","{2}\\);\\s?return\\s\\$\\w+\\[\\$\\w+\\];}\\s?\\$GLOBALS\\[\'\\w+\'\\]\\[\\d+\\]\\(\\w+\\(\\d+\\),\\w+\\(\\d+\\),\\w+\\(\\d+\\)\\);~msi',
    'id' => 'evalPregStr',
  ),
  221 => 
  array (
    'full' => '~class\\s?\\w+{\\s?function\\s?__destruct\\(\\){\\s?\\$this->\\w+\\(\'([\\w&]+)\'\\^"([\\\\\\w]+)",array\\(\\(\'([#\\w]+)\'\\^"([\\\\\\w]+)"\\)\\."\\(base64_decode\\(\'([\\w\\+\\/=]+)\'\\)\\);"\\)\\);\\s?}\\s?function\\s?\\w+\\(\\$\\w+,\\$\\w+\\){\\s?@array_map\\(\\$\\w+,\\$\\w+\\);\\s?}\\s?}\\s?\\$\\w+\\s?=\\s?new\\s?\\w+\\(\\);~msi',
    'id' => 'classDestructFunc',
  ),
  222 => 
  array (
    'full' => '~\\$\\w+="([\\\\\\w]+)";\\s?\\$\\w+=\\$\\w+\\(\'([\\w\\+\\/=]+)\'\\);\\s?\\$\\w+\\s?=\\s?"([\\\\\\w]+)";\\s?\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]{2}.\\s?eval\\(\\$\\w+\\)\\);\\s?\\$\\w+\\([\'"]{2}\\);~msi',
    'id' => 'createFuncEval',
  ),
  223 => 
  array (
    'full' => '~((\\$\\w+)=((?:base64_decode\\(|urldecode\\()?[\'"][^\'"]+[\'"](?:\\)?));\\s*(?:\\$\\w+=\'\\d+\';\\s*)*\\s*((?:\\$\\w+=(?:\\2[[{]\\d+[}\\]]\\.?)+\\s?;\\s?)+)+)(?:header[^\\)]+\\);)?(?:\\$\\w+=)?(?:if\\(\\!function_exists\\([^}]+}};)?(?:\\$\\w{1,50}\\s?=\\s?)?.*?\\$\\w{1,50}\\s?=\\s?\\$\\{"[GLOBALSx0-9a-f\\\\]+"}(\\["[^"]+"\\])(?:(?:.*?\\5.+\\(\\);))+?(?:}}\\w+\\(\\$\\w+(?:,\\$\\w+)?\\);)?~msi',
    'id' => 'dictionaryCreateFuncs',
  ),
  224 => 
  array (
    'full' => '~((?:\\$\\w+=\'\\d+\';\\s{0,10})*\\s{0,10}(?:\\$\\w+="(?:\\\\x[0-9a-f]+)+"\\s?;\\s?)+)(?:header[^\\)]+\\);)?(?:\\$\\w+=)?(?:if\\(\\!function_exists\\([^}]+}};)?(?:\\$\\w{1,50}\\s?=\\s?)?.*?\\$\\w{1,50}\\s?=\\s?\\$\\{"[GLOBALSx0-9a-f\\\\]+"}(\\["[^"]+"\\])(?:(?:.*?\\2.+\\(\\);))+?(?:}}\\w+\\(\\$\\w+,\\$\\w+\\);)?~msi',
    'id' => 'nonDictionaryCreateFuncs',
  ),
  225 => 
  array (
    'full' => '~error_reporting\\(\\d\\);header\\([^\\)]+\\);\\$\\w+\\s*=\\s*\\d+;(\\$\\w+)="([^"]+)";(\\1=str_replace\\("([^"]+)","",\\1\\);(\\$\\w+)=base64_decode\\(\\1\\));((?:.{1,150}?\\5\\{\\d+\\})+\\)\\s*or\\s*die\\(\'[^\']+\'\\);fwrite\\(\\$\\w+,\\s*\\$\\w+\\);fclose\\(\\$\\w+\\);\\})~msi',
    'id' => 'dictionaryStrReplace',
  ),
  226 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?"([\\w\\s=]+)";\\s?(\\$\\w+)\\s?=\\s?array\\(((?:\\d+,?\\s?)+)\\);\\s?(\\$\\w+)\\s?=\\s?array\\(((?:"[\\w\\d\\s\\/\\.]+",?\\s?)+)\\);\\s?(\\$\\w+)\\s?=\\s?\'\';\\s?(?:\\$\\w+\\s=(?:\\s?\\5\\[\\d+\\]\\s?\\.?)+;\\s?)+(\\$\\w+)\\s?=\\s?\\$\\w+\\("\\\\r\\\\n",\\s?\\1\\);\\s?for\\((\\$\\w+)=0;\\9\\s?<\\s?sizeof\\(\\8\\);\\9\\+\\+\\){\\s?\\7\\s\\.=\\s?\\$\\w+\\(\\8\\[\\9\\]\\);\\s?}\\s?\\1\\s?=\\s?\\7;\\s?(\\$\\w+)\\s?=\\s?\\3;\\s?(\\$\\w+)\\s?=\\s?"";\\s?for\\((\\$\\w+)=0;\\s?\\12<sizeof\\(\\10\\);\\s?\\12\\+=2\\){\\s?if\\(\\12\\s?%\\s?4\\){\\s?\\11\\.=\\s?substr\\(\\1,\\10\\[\\12\\],\\10\\[\\12\\+1\\]\\);\\s?}else{\\s?\\11\\.=strrev\\(substr\\(\\1,\\10\\[\\12\\],\\10\\[\\12\\+1\\]\\)\\);\\s?}\\s?};\\s?\\1\\s?=\\s?\\$\\w+\\(\\11\\);\\s(\\$\\w+)\\s?=\\s?array\\(\\);\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?;?)+;\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s?(\\$\\w+)\\s?=\\s?\'\';\\s?for\\((\\$\\w+)=0;\\s?\\17<strlen\\(\\1\\);\\s?\\17\\+=32\\){\\s?\\13\\[\\]\\s?=\\s?substr\\(\\1,\\s?\\17,\\s?32\\);\\s?}\\s?(?:\\$\\w+\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+\\$\\w+\\s?=\\s?\'\';\\s?\\$\\w+\\s?=\\s?\\(\\$\\w+\\(\\$\\w+\\(\\$\\w+\\)\\)\\)\\s?%\\s?sizeof\\(\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?\\$\\w+\\[\\$\\w+\\];\\s?(\\$\\w+)\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;(\\s?\\18\\s?=\\s?\\$_POST\\[\\18\\];\\s?(\\14\\s?=\\s?\\15\\(\\$_COOKIE\\[\\14\\]\\);)\\s?\\$\\w+\\s?=\\s?\\5\\[\\d+\\]\\s?\\.\\s?\\5\\[\\d+\\];\\s?(eval\\(\\$\\w+\\(\\18\\)\\);)\\s?if\\(!\\16\\){\\s?((?:\\$\\w+\\s?=\\s?(?:\\5\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+)(\\$\\w+\\(\\$\\w+\\);\\s?echo\\(\\$\\w+\\);)\\s?})~msi',
    'fast' => '~(\\s?(\\$\\w+)\\s?=\\s?\\$_POST\\[\\2\\];\\s?((\\$\\w+)\\s?=\\s?\\$\\w+\\(\\$_COOKIE\\[\\4\\]\\);)\\s?(\\$\\w+)\\s?=\\s?(\\$\\w+)\\[\\d+\\]\\s?\\.\\s?\\6\\[\\d+\\];\\s?(eval\\(\\$\\w+\\(\\2\\)\\);)\\s?if\\(!\\5\\){\\s?((?:\\$\\w+\\s?=\\s?(?:\\6\\[\\d+\\]\\s?\\.?\\s?)+;\\s)+)(\\$\\w+\\(\\$\\w+\\);\\s?echo\\(\\$\\w+\\);)\\s?})~msi',
    'id' => 'evalPostDictionary',
  ),
  227 => 
  array (
    'full' => '~(\\$\\w)\\s?=\\s?str_rot13\\("([^"]+)"\\);preg_replace\\("//e","\\1",""\\);~msi',
    'id' => 'strrotPregReplaceEval',
  ),
  228 => 
  array (
    'fast' => '~(\\$\\w+)\\s*=\\s*(?:\\$\\w+\\.)?(?:[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\\s*(?:if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)?\\s*(\\$\\w+)\\s*=\\s*(?:\'([^\']+)\'|"([^"]+)");\\s*(?:@chmod\\(\\1,\\s*\\d+\\);\\s*|if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)@file_put_contents\\(\\1,\\s*(?:base64_decode\\()+\\$\\w+\\)+;\\s*(?:@?chmod\\(\\1,\\s*\\d+\\);)?\\s*}\\s*(?:(\\$\\w+)\\s*=\\s*\\$\\w+\\."[^"]+";\\s*(\\$\\w+)\\s*=\\s*@?file_get_contents\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*preg_match\\("[^"]+",\\$\\w+\\)\\?true:false;\\s*if\\s*\\(!\\$\\w+\\){\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*preg_match_all\\("/"\\.base64_decode\\(\\$\\w+\\)\\."/i",\\$\\w+,\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\s*\\.\\s*substr\\(chunk_split\\(bin2hex\\(\\$\\w+\\),\\s*2,\\s*"\\\\x"\\),\\s*0,\\s*-2\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\$\\w+\\[\\d\\]\\[\\d\\],\\$\\w+\\[\\d\\]\\[\\d\\]\\.PHP_EOL.PHP_EOL.")?\\s*@?include\\s*(?:\\\\"\\$\\w+\\\\";",\\$\\w+\\);\\s*@?file_put_contents\\(\\$\\w+,\\$\\w+\\);\\s*\\}|\\1;)~msi',
    'full' => '~(\\$\\w+)\\s*=\\s*(?:\\$\\w+\\.)?(?|[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\\s*(?:if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)?\\s*(\\$\\w+)\\s*=\\s*(?|\'([^\']+)\'|"([^"]+)");\\s*(?|@chmod\\(\\1,\\s*\\d+\\);\\s*|if\\s*\\(\\!file_exists\\(\\1\\)+\\{\\s*)@file_put_contents\\(\\1,\\s*(?:base64_decode\\()+\\3\\)+;\\s*(?:@?chmod\\(\\1,\\s*\\d+\\);)?\\s*}\\s*(?:(\\$\\w+)\\s*=\\s*\\$\\w+\\."[^"]+";\\s*(\\$\\w+)\\s*=\\s*@?file_get_contents\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*\\$\\w+\\s*=\\s*preg_match\\("[^"]+",\\6\\)\\?true:false;\\s*if\\s*\\(!\\$\\w+\\){\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*preg_match_all\\("/"\\.base64_decode\\(\\$\\w+\\)\\."/i",\\$\\w+,\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*"[^"]+"\\s*\\.\\s*substr\\(chunk_split\\(bin2hex\\(\\$\\w+\\),\\s*2,\\s*"\\\\x"\\),\\s*0,\\s*-2\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\$\\w+\\[\\d\\]\\[\\d\\],\\$\\w+\\[\\d\\]\\[\\d\\]\\.PHP_EOL.PHP_EOL.")?\\s*@?include\\s*(?|\\\\"\\7\\\\";",\\$\\w+\\);\\s*@?file_put_contents\\(\\5,\\8\\);\\s*\\}|\\1;)~msi',
    'id' => 'dropInclude',
  ),
  229 => 
  array (
    'fast' => '~()(?:(?:/\\*[^/]*/?\\*/)*)@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*(?:(?:/\\*[^/]*/?\\*/)*)\\((?:(?:/\\*[^/]*/?\\*/)*)(\'\',)?\\s*([\'"?>.\\s]+)?\\s*\\(?\\s*@?\\s*((?:(?:/\\*[^/]*/?\\*/)*)base64_decode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\((?:(?:/\\*[^/]*/?\\*/)*)|(?:(?:/\\*[^/]*/?\\*/)*)pack(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(\'H\\*\',|(?:(?:/\\*[^/]*/?\\*/)*)convert_uudecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)htmlspecialchars_decode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)stripslashes(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)gzinflate(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)strrev(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)str_rot13(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)gzuncompress(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)urldecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)rawurldecode(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\(|(?:(?:/\\*[^/]*/?\\*/)*)eval(?:(?:/\\*[^/]*/?\\*/)*)\\s*\\()+.*?[^\'")]+(?:(?:/\\*[^/]*/?\\*/)*)(((?:(?:/\\*[^/]*/?\\*/)*)\\s*(?:(?:/\\*[^/]*/?\\*/)*)\\.?(?:(?:/\\*[^/]*/?\\*/)*)[\'"]((?:(?:/\\*[^/]*/?\\*/)*)[^\'";]+(?:(?:/\\*[^/]*/?\\*/)*)[\'"](?:(?:/\\*[^/]*/?\\*/)*)*\\s*)+(?:(?:/\\*[^/]*/?\\*/)*))?(?:(?:/\\*[^/]*/?\\*/)*)\\s*[\'"\\);]+(?:(?:/\\*[^/]*/?\\*/)*))+(?:(?:/\\*[^/]*/?\\*/)*)(\\s*\\2\\(\\);(?:(?:/\\*[^/]*/?\\*/)*))?~msi',
    'full' => '~(?(DEFINE)(?\'c\'(?:/\\*[^/]*/?\\*/)*))(?&c)@?(eval|echo|(\\$\\w+)\\s*=\\s*create_function)(?:\\/\\*+\\/)?\\s*(?&c)\\((?&c)(\'\',)?\\s*([\'"?>.\\s]+)?\\s*\\(?\\s*@?\\s*((?&c)base64_decode(?&c)\\s*\\((?&c)|(?&c)pack(?&c)\\s*\\(\'H\\*\',|(?&c)convert_uudecode(?&c)\\s*\\(|(?&c)htmlspecialchars_decode(?&c)\\s*\\(|(?&c)stripslashes(?&c)\\s*\\(|(?&c)gzinflate(?&c)\\s*\\(|(?&c)strrev(?&c)\\s*\\(|(?&c)str_rot13(?&c)\\s*\\(|(?&c)gzuncompress(?&c)\\s*\\(|(?&c)urldecode(?&c)\\s*\\(|(?&c)rawurldecode(?&c)\\s*\\(|(?&c)eval(?&c)\\s*\\()+.*?[^\'")]+(?&c)(((?&c)\\s*(?&c)\\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\\s*)+(?&c))?(?&c)\\s*[\'"\\);]+(?&c))+(?&c)(\\s*\\2\\(\\);(?&c))?~msi',
    'id' => 'evalComments',
  ),
  230 => 
  array (
    'full' => '~\\@?error_reporting\\(0\\);\\@?set_time_limit\\(0\\);(?:\\s*rename\\([^;]+;)?\\s*(\\$\\w+)="([^"]+)";\\s*\\1=\\@?urldecode\\(\\1\\);\\1=\\@?strrev\\(\\1\\);\\@?eval\\(\\1\\);~msi',
    'id' => 'strrevUrldecodeEval',
  ),
  231 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*"\\w+";\\s*\\@?error_reporting\\(E_ERROR\\);\\s*\\@?ini_set\\(\'display_errors\',\'Off\'\\);\\s*\\@?ini_set\\(\'max_execution_time\',\\d+\\);\\s*header\\("[^"]+"\\);\\s*)?(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*pack\\("H\\*",str_rot13\\(\\2\\)+;\\s*(?:eval\\(\\4\\);|(\\$\\w+)=\\$\\w+\\(\'\',\\4\\);\\s*\\5\\(\\);)~msi',
    'id' => 'evalPackStrrot',
  ),
  232 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\)\\{\\$\\w+\\s*=\\s*\'\';\\s*for[^{]+\\{([^}]+\\}){2}\\s*\\$\\w{1,40}\\s*=\\s*((\'[^\']+\'\\s*\\.?\\s*)+);\\s*\\$\\w+\\s*=\\s*Array\\(((\'\\w\'=>\'\\w\',?\\s*)+)\\);\\s*eval(?:/\\*[^/]\\*/)*\\(\\1\\(\\$\\w+,\\s*\\$\\w+\\)+;~msi',
    'id' => 'urlDecodeTable',
  ),
  233 => 
  array (
    'full' => '~((?:\\$\\w+=[\'"][^\'"]+[\'"];\\s?)+)((?:\\$\\w+=(?:\\$\\w+\\.?)+;)+)\\s{0,50}(eval\\((?:\\$\\w+\\()+\'[^\']+\'\\)+;)~msi',
    'id' => 'evalVarChar',
  ),
  234 => 
  array (
    'fast' => '~(\\$\\w+\\s*=\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|pack\\(\'H\\*\',\\s*)+(?:"([^"]+)"|\'([^\']+)\')\\);)\\s*eval\\("?(\\$\\w+)"?\\);~msi',
    'full' => '~(\\$\\w+\\s*=\\s*(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\(|pack\\(\'H\\*\',\\s*)+(?|"([^"]+)"|\'([^\']+)\')\\);)\\s*eval\\("?(\\$\\w+)"?\\);~msi',
    'id' => 'evalVarFunc',
  ),
  235 => 
  array (
    'full' => '~(?:/\\*[^=\\$\\{\\}/]{10,499}[^\\*\\$\\(;\\}\\{=]{1,99}\\*/\\s*)?(\\$[^\\w=(,${)}]{0,50})=\'(\\w{0,50})\';((?:\\$[^\\w=(,${)}]{0,50}=(?:\\1{\\d+}\\.?){0,50};){1,20})(\\$[^=]{0,50}=\\$[^\\w=(,${)}]{1,50}\\(\\$[^\\w=(,${)}]{1,50}\\(\'\\\\{2}\',\'/\',__FILE__\\)\\);(?:\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}]{0,50}\\);){2}\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}]{0,50}\\(\'\',\\$[^\\w=(,${)}]{0,50}\\)\\.\\$[^\\(]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\\d+,\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\'@ev\'\\)\\);\\$[^\\w=(,${)}]{0,50}=\\$[^\\(]{0,50}\\(\\$[^\\w=(,${)}]{0,50}\\);\\$[^\\w=(,${)}]{0,50}=\\$[^\\w=(,${)}=]{0,50}=\\$[^\\w=(,${)}]{0,50}=NULL;@eval\\(\\$[^\\w=(,${)}]{0,50}\\(\\$[^\\w=(,${)}(]{0,50}\\(\\$[^\\w=(,${)}]{0,50},\'\',\\$[^\\w=(,${)}]{0,50}\\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\\){4};)unset\\((?:\\$[^,]{0,50},?){0,20};return;\\?>.+~msi',
    'id' => 'evalFileContent',
  ),
  236 => 
  array (
    'full' => '~echo\\s{0,50}"(\\\\\\${\\\\x\\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi',
    'id' => 'echoEscapedStr',
  ),
  237 => 
  array (
    'full' => '~file_put_contents\\((?:\\$\\w+\\[[\'"]\\w+[\'"]\\]\\.)?[\'"][/\\w]+\\.php[\'"],\\s*(base64_decode\\([\'"]([\\w=/]+)[\'"]\\))\\)~msi',
    'id' => 'filePutDecodedContents',
  ),
  238 => 
  array (
    'full' => '~eval\\(implode\\(array_map\\([\'"](\\w+)[\'"],str_split\\([\'"]([^\'"]+)[\'"]\\)\\)\\)\\);~msi',
    'id' => 'evalImplodedArrStr',
  ),
  239 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?\'(.*?NULL\\);)\';\\s*(\\$\\w+)\\s?=\\s?[\'"]([\\w\\\\]+)[\'"];\\s?\\3\\([\'"]/\\(\\.\\*\\)/e[\'"],\\s?[\'"]([\\w\\\\]+)[\'"],\\s?NULL\\);~msi',
    'id' => 'pregReplaceCodeContent',
  ),
  240 => 
  array (
    'full' => '~((?:\\$\\w+\\s*\\.?=\\s*"[^"]*";\\s*)+)(\\$\\w+)\\s*=\\s*str_replace\\(\\s*"([^"]+)",\\s*"",\\s*\\$\\w+\\s*\\);\\s*(\\$\\w+)\\s*=\\s*str_replace\\(\\s*"([^"]+)",\\s*"",\\s*"([^"]+)"\\s*\\);\\s*(\\$\\w+)\\s*=\\s*\\4\\(\\s*\\2\\s*\\);\\s*\\7\\s*=\\s*"[^"]+\\7";\\s*eval\\(\\s*\\7\\s*\\);~msi',
    'id' => 'concatVarsReplaceEval',
  ),
  241 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?file_get_contents\\(__FILE__\\);\\s?\\1\\s?=\\s?base64_decode\\(substr\\(\\1,\\s?([+-]\\d+)\\)\\);\\s*\\1\\s?=\\s?gzuncompress\\(\\1\\);\\s*eval\\(\\1\\);\\s*die\\(\\);\\?>\\s*([^"\']+)~msi',
    'fast' => '~\\$\\w{1,50}\\s?=\\s?file_get_contents\\(__FILE__\\);\\s?\\$\\w{1,50}\\s?=\\s?base64_decode\\(substr\\(\\$\\w{1,50},\\s?([+-]\\d+)\\)\\);\\s*\\$\\w{1,50}\\s?=\\s?gzuncompress\\(\\$\\w{1,50}\\);\\s*eval\\(\\$\\w{1,50}\\);\\s*die\\(\\);\\?>\\s*([^"\']+)~msi',
    'id' => 'decodeFileContent',
  ),
  242 => 
  array (
    'full' => '~((\\$\\w+\\s*=\\s*\\(?(base64_decode\\s*\\(|gzinflate\\s*\\(|strrev\\s*\\(|str_rot13\\s*\\(|gzuncompress\\s*\\(|urldecode\\s*\\(|rawurldecode\\s*\\(|htmlspecialchars_decode\\s*\\()*((?:"([^"]+)";\\s*)|(?:\\$\\w+)\\)*;\\s*))+)(eval\\("?(\\$\\w+)"?\\);)~msi',
    'id' => 'evalVarFunc2',
  ),
  243 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*"([^"]+)";)\\s*((\\$\\w+)\\s*=\\s*array\\(((\\s*\\d+,?)+)\\);)\\s*((\\$\\w+)\\s*=\\s*array\\(((\\s*"[^"]+",?)+)\\);)\\s*(\\$\\w+)\\s*=\\s*\'\';(\\s*\\$\\w+\\s*=\\s*(?:\\9\\[\\d+\\]\\s*\\.?\\s*)+;)+(.+?(\\s*\\$\\w+\\s*=\\s*\\w+\\((?:\\9\\[\\d+\\]\\s*\\.?\\s*)+)\\);\\s*eval\\(\\$\\w+\\);\\s*\\})~msi',
    'fast' => '~((\\s*(\\$\\w+)\\s*=\\s*\\w+\\((\\$\\w+)\\[\\d+\\]\\s*\\.\\s*(?:\\4\\[\\d+\\]\\s*\\.?\\s*)+)\\);\\s*eval\\(\\3\\);\\s*\\})~msi',
    'id' => 'evalArrays',
  ),
  244 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?preg_replace\\([\'"]/([^\'"/]+)/\\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\\);~msi',
    'id' => 'pregReplaceVar',
  ),
  245 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+),\\s?(\\$\\w+)\\){\\s?(\\$\\w+)=[\'"]{2};\\s?for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\2\\);\\)\\s?for\\(\\$\\w+=0;\\$\\w+<strlen\\(\\3\\);\\$\\w+\\+\\+,\\s?\\$\\w+\\+\\+\\)\\s?\\4\\s?\\.=\\s?\\2{\\$\\w+}\\s?\\^\\s?\\3{\\$\\w+};\\s?return\\s?\\4;\\s?};eval\\(\\1\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\),[\'"]([^\'"]+)[\'"]\\)\\);~msi',
    'id' => 'evalFuncTwoArgs',
  ),
  246 => 
  array (
    'full' => '~function\\s(\\w+)\\(\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?[\'"]{2};\\s?unset\\(\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w+\\s?=\\s?preg_replace\\("/([^"]+)/",\\s?[\'"]{2},\\s?\\$\\w+\\);\\s?\\$\\w+\\s?=\\s?(?:(?:[\'"]\\w+[\'"]|\\$\\w+)\\.?)+;\\s?\\$\\w+\\s?=\\s?\\$\\w+\\([\'"]\\$\\w+[\'"],\\s?\\$\\w+\\);\\s?@?\\$\\w+\\(\\$\\w+\\);\\s?}\\s?function\\s?(\\w+)\\(\\$\\w+\\)\\s?{\\s?\\$\\w+\\s?=\\s?[\'"](.*?)[\'"];\\s?\\$\\w+\\s?=\\s?preg_replace\\("/([^\'"]+)/",\\s?[\'"]{2},\\s?\\$\\w+\\);\\s?return\\s?\\$\\w+\\(\\$\\w+\\);\\s?}\\s?\\1\\(\\4\\(\\s?join\\([\'"]([^\'"]+)[\'"],\\s?array\\(((?:[\'"][^\'"]+[\'"][,\\s]*)+)\\)+;~msi',
    'id' => 'evalPregReplaceFuncs',
  ),
  247 => 
  array (
    'full' => '~error_reporting\\(0\\);((?:\\$\\w+=\'[^;]+;)+)error_reporting\\(0\\);((?:\\$\\w+=\\$\\w+\\(\\$\\w+\\(\'([^\']+)\'\\)\\);)+\\$\\w+=(?:\\$\\w+\\()+\'([^\']+)\'\\)+\\.(?:\\$\\w+\\()+\'([^\']+)\'\\)+;\\$\\w+=(?:\\$\\w+\\()+\'([^\']+)\'\\)+;\\$\\w+=(?:\\$\\w+\\()+"\\\\n",\\s*\'\',\\s*\'([^\']+)\'\\)+;(?:[^}]+\\})+}\\s*echo\\s*(?:\\$\\w+\\()+\'([^\']+)\'\\)+);exit;~msi',
    'id' => 'urlMd5Passwd',
  ),
  248 => 
  array (
    'full' => '~((?:\\$\\w+\\s?=\\s?\'(?:[^\']+)\';\\s?)+)((?:\\$\\w+\\s?=\\s?(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+;)+\\$\\w+\\s?=\\s?\\$\\w+\\s?\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+\\);\\s*\\$\\w+\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?[.,]?\\s?)+\\);)~msi',
    'fast' => '~((?:\\$\\w+\\s?=\\s?(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+;)+\\$\\w+\\s?=\\s?\\$\\w+\\s?\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?\\.?\\s?)+\\);\\s*\\$\\w+\\(\\$\\w+,(?:\\$\\w+(?:\\[[\'"]?\\d+[\'"]?\\])?\\s?[.,]?\\s?)+\\);)~msi',
    'id' => 'ManyDictionaryVars',
  ),
  249 => 
  array (
    'full' => '~(?:\\$\\w+\\s?=\\s{0,10}(?:[\'"][\\\\\\w]+[\'"]\\(\\d+\\s?[-+]\\s?\\d+\\)\\s?\\.?\\s?|[\'\\. strev]+)+;)*\\s?(?:\\s{0,10}\\$\\w+\\s?=\\s?\\$\\w+\\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\\);\\s{0,10})*function\\s(\\w+)\\((?:\\$\\w+\\s*,?\\s*){1,4}\\)\\s?{\\s?(?:\\$\\w+\\s?=\\s?(?:[\'"][\\\\\\w]+[\'"]\\(\\d+\\s?[-+]\\s?\\d+\\)\\s?\\.?\\s?)+;)*\\s?(?:\\$\\w+\\s?=\\s?\\$\\w+\\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\\);\\s?)*\\s*\\$\\w+\\s?=\\s?\\$\\w+\\(array\\(((?:\\s?"[^"]+",?)+)\\),\\s?[\'"]{2},\\s?\\$\\w+\\);\\s*return\\s?(?:\\$\\w+\\(){2}\\$\\w+\\)\\);\\s*}\\s*(\\$\\w+\\s?=\\s?[\'"]\\w*[\'"];)?\\s?ob_start\\(\\);\\s?\\?>(.*?)<\\?php\\s*\\$\\w+\\s?=\\s?ob_get_clean\\(\\);\\s?eval\\(\\1\\((?:\\$\\w+\\s*,?\\s*){1,4}\\)\\);\\s?\\?>~msi',
    'id' => 'evalBuffer',
  ),
  250 => 
  array (
    'full' => '~((?:\\$\\w+\\s?=\\s?[\'"]\\w*[\'"];\\s?){0,50}(\\$\\w+)\\s?=\\s?[\'"]([^\'"]+)[\'"];(?:\\$\\w+\\s?\\.?=\\s?(?:\\$\\w+{\\d+}\\.?)+;)+)\\s?(eval\\((\\$\\w+)\\([\'"]([^\'"]+)[\'"]\\)\\);)~msi',
    'id' => 'evalDictionaryVars',
  ),
  251 => 
  array (
    'full' => '~\\$\\w+\\s?=\\s?[\'"]([^\'"]+)[\'"];(?:\\$\\w+\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);)+\\$\\w+\\s?=\\s?\\$\\w+\\(\\$\\w+\\(\\$\\w+\\)\\);\\$\\w+\\s?=\\s?\\$\\w+\\(\\$\\w+\\);(\\$\\w+)\\s?=\\s?[\'"]{2};for\\(\\$\\w+\\s?=\\s?0\\s?;\\s?\\$\\w+\\s?<\\s?\\$\\w+\\s?;\\s?\\$\\w+\\+\\+\\){\\2\\s?\\.=\\s?\\$\\w+\\(\\(\\$\\w+\\(\\$\\w+\\[\\$\\w+\\]\\)\\^(\\d+)\\)\\);}eval\\(\\2\\);return;~msi',
    'id' => 'evalFuncXored',
  ),
  252 => 
  array (
    'full' => '~[\'"]-;-[\'"];(.*?\\(\'\\\\\\\\\',\'/\',__FILE__\\)\\);.*?,[\'"];[\'"]\\),[\'"]"[\'"]\\);.*?)[\'"]-;-[\'"];((\\$\\w+)=[\'"]([^\'"]+)[\'"];.*?\\$\\w+\\s?\\.\\s?\\3,\\s?[\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\)\\)\\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi',
    'id' => 'evalFuncExplodedContent',
  ),
  253 => 
  array (
    'full' => '~(\\$\\w{0,100}\\s?=\\s?(?:chr\\(\\w{1,10}\\)\\s?\\.?\\s?){1,100};\\s?(?:\\$\\w{0,100}\\s?=\\s?(?:\\s?(?:[\'"][\\\\\\w]{1,10}[\'"]|[\\d\\.]{1,5}\\s[*\\+\\-\\.]\\s\\d{1,5})\\s?\\.?)+?;\\s?){1,10}(?:\\$\\w{0,100}\\s?=\\s?(?:chr\\(\\w{1,10}\\)\\s?\\.?){1,100};)?\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\((?:[\'"][^\'"]{1,500}[\'"]\\s?\\.?\\s?)+\\),\\s?(?:[\'"][^\'"]{1,500}[\'"]\\s?\\.?\\s?)+,\\s?substr\\(hash\\([\'"]SHA256[\'"],(?:\\s?[\'"]\\d{1,15}[\'"]\\s?\\.?){2},\\s?true\\),\\s?(\\d{1,10}),\\s?(\\d{1,10})\\),\\s?OPENSSL_RAW_DATA,\\s?\\$\\w{1,50}\\);.*?)(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"],\\s*[\'"]{2},\\s*[\'"]([^\'"]+)[\'"]\\);\\s?return\\s?@eval\\(((?:\\$\\w{1,50}\\s?\\()+\\$\\w{1,50}(?:\\)\\s?)+);\\s?exit;~msi',
    'id' => 'evalEncryptedVars',
  ),
  254 => 
  array (
    'full' => '~function\\s(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)[^)]+\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*\\2;\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*strlen\\(\\$\\w+\\);\\)\\s*{\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*strlen\\(\\3\\)\\s*&&\\s*\\$\\w+\\s*<\\s*strlen\\(\\$\\w+\\);\\s*\\$\\w+\\+\\+,\\s*\\$\\w+\\+\\+\\)\\s*{\\s*\\$\\w+\\s*\\.=\\s*\\$\\w+\\[\\$\\w+\\]\\s*\\^\\s*\\3\\[\\$\\w+\\];\\s*}\\s*}\\s*return \\$\\w+;\\s*}\\s*\\$\\w+\\s*=\\s*["\'][^"\']+[\'"];\\s*\\$\\w+\\s*=\\s*[\'"]([^\'"]+)["\'];\\s*(?:\\$\\w+\\s*=\\s*["\']+;\\s*)+(?:foreach[^{]+{[^}]+}\\s*)+(\\$\\w+)\\s*=\\s*\\$\\w+\\([create_funion\'. "]+\\);\\s*(\\$\\w+)\\s*=\\s*\\5\\(["\'][^"\']*[\'"],\\s*\\$\\w+\\(\\1\\(\\$\\w+\\(\\$\\w+\\),\\s*["\']([^\'"]+)["\']\\)+;\\s*\\6\\(\\);~msi',
    'id' => 'xoredKey',
  ),
  255 => 
  array (
    'full' => '~(\\$\\w+)=str_rot13\\(\'[^\']+\'\\);(\\$\\w+)=str_rot13\\(strrev\\(\'[^\']+\'\\)\\);(\\s*eval\\(\\1\\(\\2\\(\'([^\']+)\'\\)+;)+~msi',
    'id' => 'evalGzB64',
  ),
  256 => 
  array (
    'full' => '~(function\\s*(_\\d+)\\((\\$\\w+)\\)\\s*{(\\$\\w+)=Array\\(\'[^)]+\'\\);return\\s*base64_decode\\(\\4\\[\\3\\]\\);\\})(.+?\\2\\(\\d+\\))+[^;]+;exit;~msi',
    'id' => 'evalArrayB64',
  ),
  257 => 
  array (
    'full' => '~http_response_code\\(\\d{1,3}\\);function\\s?(\\w{1,100})\\(\\$\\w{1,50}\\){if\\s?\\(empty\\(\\$\\w{1,50}\\)\\)\\s?return;\\$\\w{1,50}\\s?=\\s?"[^"]{1,500}";(?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]{0,2}){1,4};){1,2}\\$\\w{1,50}\\s?=\\s?0;\\$\\w{1,50}\\s?=\\s?"";\\$\\w{1,50}\\s?=\\s?preg_replace\\("[^"]{1,50}",\\s?"",\\s?\\$\\w{1,50}\\);do{.*?while\\s?\\(\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\);return\\s?\\$\\w{1,50};}eval\\(\\1\\(hex2bin\\("(\\w{1,30000})"\\)\\)\\);~msi',
    'id' => 'evalFuncBinary',
  ),
  258 => 
  array (
    'full' => '~(\\$\\w{1,50}\\s?=\\s?\'\\w{1,500}\';){1,5}\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?){1,10};\\$\\w{1,50}=\\$\\w{1,50}\\([\'"]H\\*[\'"],[\'"](\\w{1,200})[\'"]\\);\\s?\\$\\w{1,50}\\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\\);~msi',
    'id' => 'evalPackFuncs',
  ),
  259 => 
  array (
    'full' => '~parse_str\\s*\\(((?:\\s?[\'"][^\\,]+[\'"]\\s?\\.?\\s?){1,500}),\\s?(\\$\\w{1,50})\\s?\\)\\s?;\\s?@?\\s?((?:eval\\s?\\()?\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?\\(\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?(?:,\\s?array\\s?\\(\\s?\\)\\s?,\\s?array\\s?\\(\\s?[\'"]([^\']{1,10})[\'"]\\s?\\.(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d+\\s?\\]\\s?\\(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d\\s?\\]\\s?\\(\\s?\\$\\w{1,50}\\s?\\[\\s?\\d{1,2}\\s?\\]\\s?\\(\\s?)|\\(\\s?\\2\\s?\\[\\s?\\d{1,5}\\s?\\]\\s?\\())\\s?([\'"][^\']+[\'"]\\s?)(\\)\\s*)?\\)\\s*\\)\\s*\\.\\s?[\'"]([^\'"]{1,10})[\'"]\\s?\\)\\s?\\)\\s?;~msi',
    'id' => 'parseStrFunc',
  ),
  260 => 
  array (
    'full' => '~eval\\("\\\\(\\$\\w+)=(gz[^\\)]+\\)\\);)"\\);eval\\("\\?>"\\.\\1\\);~msi',
    'id' => 'evalGzinflate',
  ),
  261 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?\\("([^"]{1,500})"\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"|\\$\\w{1,50}|[\'"]{2});\\s?)+for\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}<strlen\\(\\$\\w{1,50}\\);\\s?\\)\\s?{\\s?for\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\(\\$\\w{1,50}<strlen\\(\\2\\)\\s?&&\\s?\\$\\w{1,50}<strlen\\(\\$\\w{1,50}\\)\\);\\s?\\$\\w{1,50}\\+\\+,\\$\\w{1,50}\\+\\+\\){\\s?(?:\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?){1,2}\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}{\\$\\w{1,50}}\\s?\\^\\s?\\$\\w{1,50}{\\$\\w{1,50}};\\s?\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?}\\s?}\\s?return\\s?\\$\\w{1,50};\\s?}\\s?(\\$\\w{1,50})\\s?=\\s?preg_replace\\("([^"]+)",\\s?"",\\s?"([^"]+)"\\);\\s?(?:\\s?\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"|\\w{1,50}\\(\\$\\w{1,50}\\("[^"]+"\\)\\)|\\$\\w{1,50}\\(\\)\\.\\s?\\w{1,50}\\(\\$\\w{1,50}\\("[^"]+"\\)\\)|"[^"]+"\\s*\\.\\s*\\w+\\(\\$\\w+\\("[^"]+"\\)\\));\\s?){1,50}(\\$\\w{1,50}\\(\\$\\w{1,50},(?:\\$\\w{1,50}\\.?)+\\);)\\s?(?:\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?|include\\s?\\$\\w{1,50};\\s){1,50}~msi',
    'id' => 'funcVars',
  ),
  262 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";(?:\\$\\w+\\s*=\\s*(?:\\1\\[\\d+\\][\\.;])+)+@?(?:\\$\\w+[\\(,])+((?:\\1\\[\\d+\\][\\.;\\)])+)\\)\\),\\$\\w+\\[\\d+\\],\\$\\w+\\[\\d+\\]\\);~msi',
    'id' => 'dictVars',
  ),
  263 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'\'|\\.|chr\\(\\d+\\)|\'\\w+\')+\\s?;\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',array\\(((?:"[^"]+",?)+)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?(?:\'\'|\\.|chr\\(\\d+\\)|\'\\w+\')+\\s?;)+\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\'\',\\$\\w{1,50}\\(((?:\'[^\']+\'\\s?\\.?)+)\\)\\);\\$\\w{1,50}\\(\\);\\$\\w{1,50}\\(\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\);~msi',
    'id' => 'decodedDoubleStrSet',
  ),
  264 => 
  array (
    'full' => '~(\\$\\w{1,100})=[\'"]([^"\']+)[\'"];(\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\([\'"]([^"\']+)[\'"]\\);\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\(\'\\1\',\\$\\w{1,100}\\);\\$\\w{1,100}\\(\\1\\);)~msi',
    'fast' => '~(\\$\\w{1,100})=[\'"]([^"\']+)[\'"];(\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\([\'"]([^"\']+)[\'"]\\);\\$\\w{1,100}=(?:(?:strrev\\("[^"]+"\\)|"[^"]+")\\.?)+;(\\$\\w{1,100})\\s?=\\s?\\$\\w{1,100}\\(\'\\$\\w{1,100}\',\\$\\w{1,100}\\);\\$\\w{1,100}\\(\\$\\w{1,100}\\);)~msi',
    'id' => 'createFuncStrrev',
  ),
  265 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*create_function\\(\'\\$\\w+\',strrev\\(\'[^\']+\'\\)\\);\\s*\\1\\(strrev\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'strrevBase64',
  ),
  266 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";if\\(!function_exists\\("([^"]+)"\\)\\){function\\s*\\3\\(\\$\\w+\\)\\{\\$\\w+=(\\d+);foreach\\(array\\(((?:"[0-9a-f]+",?)+)\\)as\\$\\w+=>\\$\\w+\\)[^}]+\\}\\}\\3\\(\\1\\."([^"]+)"\\);~msi',
    'id' => 'customDecode',
  ),
  267 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*[abcdehnoprstux\\._64\'"]+;\\s*)+)(\\$\\w+="?\\w+["\\(\\)]*;\\s*)+\\$\\w+="[^"]+";\\s*\\$\\w+=(\\$\\w+\\("([^"]+)"\\);)[^/]+/pre>\';~msi',
    'id' => 'expDoorCode',
  ),
  268 => 
  array (
    'full' => '~include\\((base64_decode\\(\'([^\']+)\'\\))\\);~msi',
    'id' => 'includeB64',
  ),
  269 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(\'nib2xeh\'\\);(\\$\\w+)=array\\(((?:\'[^\']+\',?)+)\\);(\\$\\w+)\\s*=\\s*\'\';for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*\\d+;\\s*\\$\\w+\\+\\+\\)\\s*\\{\\4\\s*\\.=\\s*str_replace\\(array\\(((?:\'([^\']*)\',?)+)\\),\\s*array\\(((?:\'[^\']*\',?)+)\\),\\s*\\2\\[\\$\\w+\\]\\);\\}(?:(?:\\$\\w+=)+(?:true;|hex2bin))?(?:eval\\(\\1\\(\\4\\)\\);)*~msi',
    'id' => 'nib2xeh',
  ),
  270 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*\\$\\w+\\s*=\\s*"[0-9a-f]{32}";\\s*((\\$\\w+)\\s*=\\s*((?:\\w+\\()+)\'([^\']+)\'\\)+;\\$\\w+\\s*=\\s*"";for\\s*\\(\\$\\w+\\s*=\\s*0;\\s*\\$\\w+\\s*<\\s*120;\\s*\\$\\w+\\+\\+\\)[^}]+}\\$\\w+\\s*=\\s*strlen\\(\\2\\);\\$\\w+\\s*=\\s*strlen\\(sha1\\(hash\\(str_rot13\\("fun256"\\),\\s*md5\\(\\$\\w+\\)+;for[^}]+}[^}]+}eval\\(\\$\\w+\\);)~msi',
    'id' => 'fun256',
  ),
  271 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*((?:\\$?\\w+\\()+)\'([^\']+)\'\\)+;\\s*if\\s*\\(\\s*\'\\w{40,40}\'\\s*==\\s*sha1\\(\\s*\\1\\s*\\)\\s*\\)\\s*{\\s*\\1\\s*=\\s*gzinflate\\s*\\(\\s*gzinflate\\s*\\((?:\\s*base64_decode|\\$\\w+)\\(\\s*\\1\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\w{1,10}\\s*=\\s*""\\s*;for\\s*\\([^)]+\\)\\s*{[^}]+}\\s*(?:\\s*\\$[^;]+;\\s*)+for\\s*\\([^)]+\\)\\s*{\\s*\\$[^;]+;\\s*if\\s*\\([^)]+\\)\\s*{[^}]+}(?:\\s*\\$[^;]+;\\s*)+}\\s*eval\\s*\\(\\s*\\$\\w+\\s*\\)\\s*;[^}]*}\\s*else\\s*{[^}]+}~msi',
    'id' => 'fun256',
  ),
  272 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?\'([^\']+)\';\\s?(\\$\\w+\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?(?:(?:\\$\\w+\\s?=\\s?(?:\\$\\w+\\()+(?:(?:\\1\\[\\d+\\])\\.?|"[^"]+"\\.?)+)\\)+;\\s?)+)(\\$\\w+\\s?=\\s?\\$\\w+\\(\'H\\*\',\\s?\\$\\w+\\(\'/\\[([^]]+)\\]\\+/\\w\',\'\',\\s?(\\$\\w+)\\(\\1\\)\\)\\);\\s?eval\\(\\$\\w+\\);)~msi',
    'id' => 'evalPackPreg',
  ),
  273 => 
  array (
    'full' => '~((?:\\$_\\w{1,50}\\s?=\\s?"[^"]{1,100}";)+)@eval\\("\\?>"\\.(\\$_\\w{1,50}\\((/\\*.*?\\*\\/)\\$\\w{1,50}\\("[^"]+"\\)\\))\\);~msi',
    'id' => 'evalVarWithComment',
  ),
  274 => 
  array (
    'fast' => '~()(\\$\\w+)=create_function\\((((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+),(((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+)\\);\\4\\(base64_decode\\((((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+)\\)\\);~msi',
    'full' => '~(?(DEFINE)(?\'s\'((?:chr\\([0-9a-fx]+([/\\-+\\*][0-9a-fx]+)?\\)|str_rot13\\(\'[^\']+\'\\)|base64_decode\\(\'[^\']+\'\\)|\'[^\']*\')[\\.]?)+))(\\$\\w+)=create_function\\(((?P>s)),((?P>s))\\);\\4\\(base64_decode\\(((?P>s))\\)\\);~msi',
    'id' => 'createFuncObf',
  ),
  275 => 
  array (
    'full' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~mis',
    'fast' => '~(\\$[\\w_]{1,50})\\s*=\\s*\\[\\s*base64_decode\\s*\\(\\s*[\'"]([\\w=]+)[\'"]\\s*\\)\\s*,\\s*([^;]{2,200})\\]\\s*;\\s*(if\\s*[^}]+}\\s*else\\s*{[^}]+}\\s*function\\s\\w+[^}]+})~mis',
    'id' => 'base64Array',
  ),
  276 => 
  array (
    'full' => '~((?:\\$[\\w]{1,34}\\s*=\\s*[\'"](?:[\\\\\\w]{1,32}\\\\[\\\\\\w]{1,32})[\'"]\\s*;\\s*){1,2}\\s*(?:\\$[\\w]{1,34}\\s*=\\s*[\'"][^\'"]+[\'"];){1,3})\\s*@?eval\\s*\\(\\s*([^;]{0,100})\\);~msi',
    'id' => 'simpleVarsAndEval',
  ),
  277 => 
  array (
    'full' => '~(if\\(defined\\(\'PHP_MAJOR_VERSION\'\\)[^{]{1,30}{\\s*if[^}]+}\\s*}\\s*.*?if\\s*\\(\\s*!\\s*function_exists\\s*\\(\\s*\'nel\'\\s*\\)\\s*\\)\\s*{\\s*)(function\\s*nel\\s*\\(\\s*\\$i\\s*\\)\\s*{\\s*\\$[\\w]+\\s*=\\s*array\\(([^)]+)\\);[^}]+})(.*}\\s*exit\\s*;\\s*}\\s*})~mis',
    'id' => 'replaceFuncWithBase64DecodeArray',
  ),
  278 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?(?:\'[^\']+\'\\.?)+;\\$\\w{1,50}\\s?=\\s?create_function\\(\'\\$\\w{1,50}\',\\$\\w{1,50}\\);((?:\\$\\w{1,50}\\s?=\\s?(?:\'[^\']+\'\\.?)+;)+)\\$\\w{1,50}\\(((?:\\$\\w{1,50}\\()+"[^"]+"\\)+;)~msi',
    'id' => 'createFuncVars',
  ),
  279 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?json_decode\\((base64_decode\\([\'"][^\'"]+[\'"]\\))\\);~msi',
    'id' => 'jsonDecodedVar',
  ),
  280 => 
  array (
    'full' => '~if\\s?\\(file_put_contents\\(\\$\\w{1,50}\\.[\'"][^\'"]+[\'"],(base64_Decode\\([\'"][^\'"]+[\'"]\\))\\)\\)echo\\s?[\'"][^\'"]+[\'"];~msi',
    'id' => 'filePutPureEncodedContents',
  ),
  281 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\((\\$\\w{1,50})\\){for\\s?\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\3\\s?<=\\s?strlen\\(\\2\\)-1;\\s?\\3\\+\\+\\s?\\){(\\$\\w{1,50})\\s?\\.=\\s?\\2{strlen\\(\\2\\)-\\3-1};}return\\(\\4\\);}((?:eval\\(\\1\\(\'[^\']+\'\\)\\);)+)~msi',
    'id' => 'evalFuncReverse',
  ),
  282 => 
  array (
    'full' => '~function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{return\\s?base64_decode\\(\\$\\w{1,50}\\);}(?:.*?\\1\\("[^"]+"\\))+~msi',
    'fast' => '~function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{return\\s?base64_decode\\(\\$\\w{1,50}\\);}(?:.*?\\w{1,50}\\("[^"]+"\\))+~msi',
    'id' => 'base64decodeFuncs',
  ),
  283 => 
  array (
    'full' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?eval\\s?\\(\\3\\s?\\("((?:\\\\x\\w{1,50})+)"\\s?\\([\'"]{1,2}([^"\']+)[\'"]{1,2}\\)\\)\\);\\s?create_function\\(\'\',\\s?\'}\'\\.\\4\\.\'//\'\\);~msi',
    'fast' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\[\\d+\\]\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?eval\\s?\\(\\$\\w{1,50}\\s?\\("((?:\\\\x\\w{1,5})+)"\\s?\\([\'"]{1,2}([^"\']+)[\'"]{1,2}\\)\\)\\);\\s?create_function\\(\'\',\\s?\'}\'\\.\\$\\w{1,50}\\.\'//\'\\);~msi',
    'id' => 'evalCreateFuncWithDictionaryVar',
  ),
  284 => 
  array (
    'full' => '~error_reporting\\(\\s?0\\s?\\);\\s?(\\$\\w+)\\s?=\\s?"([^"]+)";(?:\\$\\w+\\s?=\\s?(?:\\$\\w+\\[\\d+\\]\\.?)+;)+function\\s\\w+\\((?:\\$\\w+,?){5}\\){\\s*return\\s?(?:\\$\\w+\\.?){5};}(?:\\$\\w+\\s?=\\s?(?:[\'"][^\'"]*[\'"]\\.?)+;)+\\$\\w+\\s?=\\s?\\w+\\((?:\\$\\w+,?){5}\\);(?:\\$\\w+\\s?=\\s?(?:[\'"][^\'"]*[\'"]\\.?)+;)+function\\s(\\w+)\\((?:\\$\\w+,?){3}\\){\\s*return\\s?(?:\\$\\w+\\.?){3};}\\$\\w+\\s?=\\s?((?:\\3\\((?:(?:\\$\\w+|\\.?[\'"][^"\']*[\'"]\\.?)+,?){3}\\)\\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\\.\\$\\w+);\\$\\w+\\(\'\',\\s?\'}\'\\.\\$\\w+\\.\'//\'\\);~msi',
    'id' => 'evalCreateFuncWithVars',
  ),
  285 => 
  array (
    'fast' => '~()error_reporting\\([^)]+\\);define\\(\'([^\']+)\',\\s*\'[^\']+\'\\);\\$(?:_GET|GLOBALS)\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*)\',([0-9a-fx]+),\\s*([0-9\\-]+)\\)\\)\\);(?:.{1,250}(?:(?:\\$(?:_GET|GLOBALS)\\{\\2\\}[\\{\\[][a-fx\\d]+[\\}\\]])|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\\s*(\\$\\w+\\((?:\\$\\w+\\.?)+\\);|eval\\(\\$\\w+\\);\\s*\\}\\s*function\\s*\\w+[^1]+!1\\);\\s*return\\s*curl_exec\\(\\$\\w+\\);)?[^;]+;)~msi',
    'full' => '~(?(DEFINE)(?\'v\'(?:\\$(?:_GET|GLOBALS)\\{\\2\\}[\\{\\[][a-fx\\d]+[\\}\\]])))error_reporting\\([^)]+\\);define\\(\'([^\']+)\',\\s*\'[^\']+\'\\);\\$(?:_GET|GLOBALS)\\[\\2\\]\\s*=\\s*explode\\(\'([^\']+)\',\\s*gzinflate\\(substr\\(\'(.*)\',([0-9a-fx]+),\\s*([0-9\\-]+)\\)\\)\\);(?:.{1,250}(?:(?&v)|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\\s*(\\$\\w+\\((?:\\$\\w+\\.?)+\\);|eval\\(\\$\\w+\\);\\s*\\}\\s*function\\s*\\w+[^1]+!1\\);\\s*return\\s*curl_exec\\(\\$\\w+\\);)?[^;]+;)~msi',
    'id' => 'explodeSubstrGzinflate',
  ),
  286 => 
  array (
    'full' => '~error_reporting\\([^)]+\\);header\\([^)]+\\);ini_set\\([^)]+\\);ini_set\\([^)]+\\);define\\(\'PASSWD\',\'[^)]+\\);define\\(\'VERSION\',\'Bypass[^)]+\\);define\\(\'THISFILE\'[^;]+;define\\(\'THISDIR\',[^;]+;define\\(\'ROOTDIR\',[^;]+;(((?:\\$\\w+=\'[^\']+\';)+)((?:\\$\\w+=str_replace\\(\'[^\']+\',\'\',\'[^\']+\'\\);)+)(\\$\\w+)=\\$\\w+\\(\\$\\w+\\(\'[^\']+\'\\),\\$\\w+\\(\'[^\']+\'\\)\\);\\4\\(((?:\\$\\w+\\.?)+)\\);)~msi',
    'id' => 'base64Vars',
  ),
  287 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\$\\w+,\\$\\w+\\)\\s*\\{\\$\\w+=array\\(\\);for\\(\\$\\w+=0;\\$\\w+<256;\\$\\w+\\+\\+\\)(?:[^}]+}){2}return\\s*\\$res;\\s*}\\s*function\\s*(\\w+)\\(\\)\\s*{(?:[^}]+}){12}(?:\\$\\w+=(?:chr\\([0-9b]+\\)\\.?)+;)+\\2\\(\\);@?eval\\(\\$\\w+\\(\\1\\(\\$\\{\'[^\']+\'\\.(?:\\(\'.\'\\^\'.\'\\)\\.?)+}\\[\\(\'.\'\\^\'.\'\\)\\.\\(\'.\'\\^\'.\'\\)\\],\\$\\w+\\("([^"]+)"\\)\\)\\)\\);exit;~msi',
    'id' => 'chr0b',
  ),
  288 => 
  array (
    'full' => '~@?error_reporting\\(0\\);\\s*@?ini_set\\(\'error_log\',NULL\\);\\s*@?ini_set\\(\'log_errors\',0\\);\\s*(\\$\\w+)=strrev\\([base64_decode\'\\.]+\\);(\\$\\w+)=gzinflate\\(\\1\\(\'([^\']+)\'\\)\\);\\s*create_function\\("","}\\2//"\\);~msi',
    'id' => 'createFuncPlugin',
  ),
  289 => 
  array (
    'full' => '~((?:(\\$\\w+)\\s*=\\s*(?:str_replace\\((?:"[^"]+"|\'[^\']+\'),\\s*(?:""|\'\'),\\s*(?:"[^"]+"|\'[^\']+\')\\);\\s*|\'([^\']+)\';))+)\\s*(eval\\s*\\((?:\\$\\w+\\()+(?:\'([^\']+)\'|\\$\\w+)\\)+;)~msi',
    'id' => 'strreplaceEval',
  ),
  290 => 
  array (
    'full' => '~(\\$\\w+)\\s*\\s*=\\s*"[a-f0-9]{32,40}";\\s*(\\$\\w+)\\s*=\\s*"[create_fution".]+;\\s*(\\$\\w+)=@?\\2\\(\'(\\$\\w+),(\\$\\w+)\',\'[eval\'\\.]+\\("\\\\\\1=\\\\"\\5\\\\";\\?>"[gzinflate\\.\']+\\(\\s*[base64_decode\'\\.]+\\(\\4\\)+;\'\\);\\s*@?\\$\\w+\\("([^"]+)",\\1\\);~msi',
    'id' => 'hackM19',
  ),
  291 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*strrev\\("[create_funtio"\\.\\s]+\\);\\s*(\\$\\w+)\\s*=\\s*\\1\\(\'(\\$\\w+)\',\\s*strrev\\(\';\\)+\\w+\\$\\([bas64_dcode\'\\.\\s]+\\([bzdecompres\'\\.\\s]+">\\?"\\([eval\\.\'\\s]+\\)\\);\\s*\\2\\("([^"]+)"\\);~msi',
    'id' => 'ev404',
  ),
  292 => 
  array (
    'full' => '~class\\s+(_\\w+)\\s*{\\s*private\\s+static\\s*\\$\\w{1,5}\\s*;\\s*public\\s*static\\s*function\\s*(\\w+)[^}]{1,1000}\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,10}\\s*\\(\\s*\\)\\s*{self::\\$\\w{1,5}\\s*=\\s*array\\s*\\(\\s*([^)]+)\\s*\\);\\s*}\\s*}\\s*class\\s+(_\\w+)\\s*{\\s*private\\s+static\\s*\\$\\w{1,5}\\s*;\\s*public\\s*static\\s*function\\s*(\\w+)[^}]{1,1000}\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,10}\\s*\\(\\s*\\)\\s*{self::\\$\\w{1,5}\\s*=\\s*array\\s*\\(\\s*([^)]+)\\s*\\);\\s*}\\s*}\\s*(.{1,5000}exit\\s*;\\s*})~mis',
    'id' => 'twoHashFunc',
  ),
  293 => 
  array (
    'full' => '~(\\s*function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\$\\w+\\s*=\\s*[gzinflatebs64_dco\'\\.]+;\\s*)+\\3\\s*=\\s*(?:\\$\\w+\\()+\\3\\)+;\\s*return\\s*\\3;}(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*(\\$\\w+)\\s*=\\s*\'\\2\';\\s*\\3\\s*=\\s*\\6\\(\'[^)]+\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'\',\\6\\(\\4\\)+;\\7\\(\\);)\\s*\\w+\\(\\d+(,\'[^\']+\',\'[^\']+\')?\\);~msi',
    'id' => 'setVars',
  ),
  294 => 
  array (
    'full' => '~(?:\\$\\w+=\'[gzuncompresbae64_dtfi\\.\']+;\\s*)+\\$\\w+=\\$\\w+\\(\'(\\$\\w+)\',\'[eval\'\\.]+\\(\\1\\);\'\\);\\s*(\\$\\w+)=\'([^\']+)\';\\s*\\$\\w+\\("\\?>"\\.(\\$\\w+\\()+\\2\\)+;~msi',
    'id' => 'createFuncGzB64',
  ),
  295 => 
  array (
    'full' => '~(\\$\\w{1,50})=(?:[\'"][create_funcion]+[\'"]\\.?)+;\\$\\w{1,50}=\\1\\([\'"](\\$\\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\\.?)+[\'"][decode(]+\\2\\)+;[\'"]\\);\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\);~msi',
    'id' => 'createFuncGzB64',
  ),
  296 => 
  array (
    'full' => '~(\\$\\w+)=strrev\\(\'[base64_dco]+\'\\);\\s?(\\$\\w+)=gzinflate\\(\\1\\(\'([^\']+)\'\\)\\);\\s?create_function\\("","}\\2//"\\);~msi',
    'id' => 'createFuncGzInflateB64',
  ),
  297 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(\\(?\\s*gzinflate\\s*\\(\\s*base64_decode\\s*)\\(\\s*\'([^\']+)\'\\s*\\)\\s*\\)\\s*\\)?\\s*;\\s*\\$\\w+\\s*=\\s*@?create_function\\(\'([^\']*)\',\\s*(?:\\1|\'@?eval\\(\\4\\)[^\']+\')\\)\\s*;\\s*@?\\$\\w+(?:\\(\\)|\\(\\1\\));~msi',
    'id' => 'createFuncGzInflateB64',
  ),
  298 => 
  array (
    'full' => '~(\\$\\w+)="((?:\\\\\\w+)+)";((\\$\\w+)=\\1\\("[^"]+"\\);)@(eval\\(\\1\\("[^"]+"\\)\\);)(\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)((\\$\\w+)=(\\$\\w+)\\(\\1\\("([^"]+)"\\),-1\\);)((?:\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)+)@(eval\\(\\$\\w+\\(\\1\\("[^"]+"\\)\\)\\));~msi',
    'id' => 'wsoShellDictVars',
  ),
  299 => 
  array (
    'full' => '~error_reporting\\(\\d+\\);(\\$\\w+)="([^"]+)";(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);foreach\\(\\3\\sas\\s\\$\\w+=>\\$\\w+\\){\\$\\w+=preg_split\\("//",\\$\\w+,-1,[^)]+\\);\\3\\[\\$\\w+\\]=implode\\("",array_reverse\\(\\$\\w+\\)\\);}(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);foreach\\(\\6\\sas\\s\\$\\w+=>\\$\\w+\\){\\${\\$\\w+}=\\3\\[\\$\\w+\\];}function\\s(\\w+)\\(\\$\\w+,\\$\\w+\\){\\$\\w+=\\${"[^"]+"}\\["([^"]+)"\\]\\("//",\\$\\w+,-1,[^)]+\\);foreach\\(\\$\\w+\\sas\\s\\$\\w+=>\\$\\w+\\){\\$\\w+\\[\\$\\w+\\]=\\${"[^"]+"}\\["([^"]+)"\\]\\(\\${"[^"]+"}\\["([^"]+)"\\]\\(\\$\\w+\\)\\+\\$\\w+\\);}\\$\\w=\\${"[^"]+"}\\["([^"]+)"\\]\\("",\\$\\w+\\);return\\s\\$\\w+;}(\\$\\w+)=\\9\\(\\14,-2\\);@ini_set\\(\'[^\']+\',\'[^\']+\'\\);((?:\\$\\w+=(?:\\$\\w+\\[\\d+\\]\\.?)+;)(\\$\\w+)=(?:\\$\\w+\\[\\d+\\]\\.?)+;)function\\s(\\w+)\\(\\$\\w+\\){\\$\\w+=\\9\\(\\$\\w+,1\\);\\$\\w+=strtr\\(\\$\\w+,"([^"]+)","([^"]+)"\\);return\\s\\$\\w+;}((?:\\$\\w+\\.?=(?:\\$\\w+\\[\\d+\\]\\.?)+;)+)(\\$\\w+)=\\${"[^"]+"}\\["[^"]+"\\]\\(\'(?:\\$\\w+,?)+\',(\\$\\w+)\\(\\17\\("([^"]+)"\\)\\)\\);@\\${"[^"]+"}\\["[^"]+"\\]\\((?:@\\$\\w+,?)+\\);~msi',
    'id' => 'funcDictVars',
  ),
  300 => 
  array (
    'full' => '~((\\$\\w{1,10})\\s*=\\s*\\(\\s*[\'"]([^\'"]{40,50000})[\'"]\\s*\\)\\s*;\\s*(\\$\\w{1,10})\\s*=\\s*base64_decode\\s*\\(\\s*\\2\\s*\\)\\s*;)\\s*(\\$\\w{1,10}\\s*=\\s*fopen\\s*[^;]+;\\s*echo\\s*fwrite[^;]+;\\s*fclose[^;]+;)~msi',
    'id' => 'funcFile2',
  ),
  301 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\2=((?:\\w+\\()+)\\2(\\)+);\\s*for\\(\\$\\w=0;\\$\\w+<strlen\\(\\2\\);\\$\\w+\\+\\+\\)\\s*\\{\\s*\\2\\[\\$\\w+\\]\\s*=\\s*chr\\(ord\\(\\2\\[\\$\\w+\\]\\)-(\\d+)\\);\\s*\\}\\s*return\\s*\\2;\\s*\\}eval\\(\\1\\(("[^"]+")\\)\\);~msi',
    'id' => 'sec7or',
  ),
  302 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*class\\s*(\\w+)\\{\\s*private\\s*\\$\\w+=\\s*array\\(\\s*((?:"[^"]+"=>"[^"]+",?\\s*)+)\\)\\s*;\\s*public\\s*function\\s*(\\w+)\\s*\\(\\s*\\$\\w+,\\s*\\$\\w+\\s*\\)\\s*{[^}]+}\\s*public\\s*function\\s*(\\w+)\\s*\\(\\$\\w+,\\$\\w+\\)\\s*{[^}]+}\\s*private\\s*function\\s*\\w+\\((?:\\$\\w+,?){7}\\)\\s*{[^}]+}return\\s*array\\((?:\\$\\w+,?){3}\\);}}\\s*(\\$\\w+)=new\\s*\\1;\\s*(\\$\\w+)=\\5->\\3\\(\'tmhapbzcerff\',array\\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\\)\\);\\5->\\4\\(\\6,\'\'\\);\\s*die\\(\\);~msi',
    'id' => 'classWithArrays',
  ),
  303 => 
  array (
    'full' => '~error_reporting\\(0\\);(\\s*(\\$\\w+)="[asert\\."]+;\\s*\\$(\\w+)=\\2\\(strrev\\("([^"]+)"\\)\\);\\s*\\$\\{\'\\3\'\\};)~msi',
    'id' => 'assertStrrev',
  ),
  304 => 
  array (
    'full' => '~error_reporting\\(0\\);\\$\\w+\\="[^"]+";\\$\\w+\\=explode\\("[^"]+","[^"]+"\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\w+\\=preg_split\\("//",\\$\\w+,\\-1,PREG_SPLIT_NO_EMPTY\\);\\$\\w+\\[\\$\\w+\\]\\=implode\\("",array_reverse\\(\\$\\w+\\)\\);\\}\\$\\w+\\=explode\\("[^"]+","[^"]+"\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\{\\$\\w+\\}\\=\\$\\w+\\[\\$\\w+\\];\\}function \\w+\\(\\$\\w+,\\$\\w+\\)\\{\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\("//",\\$\\w+,\\-1,PREG_SPLIT_NO_EMPTY\\);foreach\\(\\$\\w+ as \\$\\w+\\=\\>\\$\\w+\\)\\{\\$\\w+\\[\\$\\w+\\]\\=\\$\\{"[^"]+"\\}\\["[^"]+"\\]\\(\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(\\$\\w+\\)\\+\\$\\w+\\);\\}\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\("",\\$\\w+\\);return \\$\\w+;\\}\\$\\w+\\=\\w+\\(\\$\\w+,\\-2\\);@ini_set\\(\'memory_limit\',\'1024M\'\\);(?:\\$\\w+\\=(?:\\$\\w+\\{\\d+\\}\\.?)+;)+function \\w+\\(\\$\\w+\\)\\{\\$\\w+\\=\\w+\\(\\$\\w+,(\\d+)\\);\\$\\w+\\=strtr\\(\\$\\w+,"([^"]+)","([^"]+)"\\);return \\$\\w+;\\}(?:\\$\\w+\\.?=(?:\\$\\w+\\{\\d+\\}\\.?)+;)+\\$\\w+\\=\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(\'\\$\\w+,\\$\\w+,\\$\\w+,\\$\\w+\',\\$\\w+\\(\\w+\\("([^"]+)"\\)\\)\\);@\\$\\{"[^"]+"\\}\\["\\w+"\\]\\(@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+,@\\$\\w+\\);~msi',
    'id' => 'b64strtr',
  ),
  305 => 
  array (
    'full' => '~error_reporting\\(\\d\\);function\\s(\\w{1,50})\\(\\$\\w{1,50},\\$\\w{1,50}\\){if\\(file_exists\\("[^"]+"\\)\\){touch\\(__FILE__,filemtime\\("[^"]+"\\)\\);}\\$\\w{1,50}=str_replace\\(array\\(\'([^\']+)\',\'([^\']+)\'\\),array\\(\'([^\']+)\',\'([^\']+)\'\\),\\$\\w{1,50}\\);\\$\\w{1,50}=strrev\\(\'[base64]+\'\\)\\."_"\\.strrev\\(\'[decode]+\'\\);\\$\\w{1,50}=\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\$\\w{1,50}=strrev\\(\'[gzinflate]+\'\\);return@\\$\\w{1,50}\\(\\$\\w{1,50}\\);}\\s?\\$\\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\\(\'#\\6\\(\\.\\*\\)">#\',\\$\\w{1,50},\\$\\w{1,50}\\);\\$\\w{1,50}=\\$\\w{1,50}\\[1\\];\\$\\w{1,50}=\\1\\(\\$\\w{1,50},\\$\\w{1,50}\\);if\\(isset\\(\\$\\w{1,50}\\)\\){eval\\(\\$\\w{1,50}\\);}~msi',
    'id' => 'gzB64strReplaceDataImage',
  ),
  306 => 
  array (
    'full' => '~(\\$\\w{1,50})=array\\((?:base64_decode\\([\'"][^\'"]+[\'"]\\),?){2}base64_Decode\\(strrev\\(str_rot13\\(explode\\(base64_decode\\([\'"][^\'"]+[\'"]\\),file_get_contents\\(__FILE__\\)\\)\\[1\\]\\){4};preg_replace\\(\\1\\[0\\],serialize\\(eval\\(\\1\\[2\\]\\)\\),\\1\\[1\\]\\);exit\\(\\);\\s?\\?>\\s*([^\\s]{1,})~msi',
    'id' => 'serializeFileContent',
  ),
  307 => 
  array (
    'full' => '~(function\\s\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{\\s?global\\s(?:\\$\\w{1,50},?\\s*)+;\\s*\\$\\w{1,50}\\(\\$\\w{1,50},\\s?\\$\\w{1,50},\\s?\\$\\w{1,50}\\(\\)\\s?\\+\\s?\\w{1,50}\\(\\$\\w{1,50}\\),\\s?(?:\\$\\w{1,50}\\s?,?\\.?\\s*)+\\);\\s*}\\s*global\\s?(?:\\$\\w{1,50},?\\s*)+;\\s*(?:\\$\\w{1,50}\\s?=\\s?\'[^\']+\';\\s*)+function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s{\\s*global\\s?(?:\\$\\w{1,50},?\\s*)+;.*?return\\s\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\s}\\s*(?:\\$\\w{1,50}\\s?=\\s?\'[^\']*\';\\s*)+(?:function\\s\\w{1,50}\\(.*?(?:\\$\\w{1,50}\\s?=\\s?\'[^\']*\';\\s*)+)+(?:\\$\\w{1,50}\\s\\.?=\\s\\$\\w{1,50};\\s*)+.*?extract\\(\\w{1,50}\\(get_defined_vars\\(\\)\\)\\);)\\s*(\\$\\w{1,50}\\(\\d\\);\\s*\\$\\w{1,50}\\(\\$\\w{1,50},\\s?0\\);\\s*\\$\\w{1,50}\\s=\\s\\$\\w{1,50}\\(\\$_REQUEST,\\s?\\$_COOKIE,\\s?\\$_SERVER\\);.*?\\$\\w{1,50}\\(\\$\\w{1,50}\\);\\s*echo\\s?\\$\\w{1,50};)~msi',
    'id' => 'globalVarsManyReplace',
  ),
  308 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?~msi',
      1 => '~\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
      2 => '~(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)~msi',
      3 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)~msi',
      4 => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
    ),
    'full' => '~\\$\\w{1,50}\\s{0,100}=\\s{0,100}"([^"]{1,50000})";\\s?(\\$\\w{1,50}\\s?=\\s?(?:["][^"]{1,5}["]\\.?)+;\\s?\\s?(?:\\s?\\$\\w{1,50}\\s?\\.?=(?:\\s?(?:\\s?"[^"]+"|\\$\\w{1,50})\\s?\\.?)+;\\s?)+)\\$\\w{1,50}\\s?\\(\\s?\\$\\w{1,50},((?:\\$\\w{1,50}\\()+\\$\\w{1,50}\\)+),"[^"]{1,100}"\\);~msi',
    'id' => 'concatVarsPregReplace',
  ),
  309 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"\\.?)+;)+\\s?echo\\sjson_encode\\(array\\([\'"][^"\']+[\'"]=>@\\$\\w{1,50}\\(__FILE__,(\\$\\w{1,50}\\([\'"][^"\']+[\'"]\\)\\))>0,[\'"][^"\']+[\'"]=>__FILE__\\)\\);exit;~msi',
    'id' => 'filePutContentsB64Decoded',
  ),
  310 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$_POST\\[[\'"][^\'"]+[\'"]\\]\\.[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?fopen\\([\'"][^\'"]+[\'"]\\.\\$\\w{1,50},\\s?[\'"]w[\'"]\\);\\s?fwrite\\(\\$\\w{1,50},\\1\\);~msi',
    'id' => 'fwriteB64DecodedStr',
  ),
  311 => 
  array (
    'full' => '~file_put_contents\\(\\$_SERVER\\[\'[^\']+\'\\]\\.\'[^\']+\',base64_decode\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'filePutContentsB64Content',
  ),
  312 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s?=\\s?((?:chr\\(\\d{1,5}\\)\\.?)+);)(\\$\\w{1,50})\\s?=\\s?(?:\\2\\[\\d{1,5}\\]\\.?)+;(\\$\\w{1,50})\\s?=\\s?(?:\\2\\[\\d{1,5}\\]\\.?)+;\\4\\(\\5\\(null,\\s?((?:\\2\\[\\d{1,5}\\]\\.?)+)\\)\\);~msi',
    'id' => 'chrDictCreateFunc',
  ),
  313 => 
  array (
    'full' => '~(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50}\\,?)+\\){return\\sstr_replace\\((?:\\$\\w{1,50}\\,?)+\\);}\\s?){3}(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\([\'"]([^\'"]+)[\'"],\'\',\\1\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\([\'"][^\'"]+[\'"],\'\',\\$\\w{1,50}\\);\\s?){2}\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\.\'\\(\'\\.\\1\\.\'\\(\'\\.\\$\\w{1,50}\\.\'\\)\\);\'\\);\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\);~msi',
    'id' => 'strReplaceFuncsEvalVar',
  ),
  314 => 
  array (
    'full' => '~\\$\\w{1,50}\\s?=\\s?"\\\\x[^"]+";\\${\\$\\w{1,50}}\\s?=\\s?base64_decode\\("(.*?\\\\x[^"]+")\\);\\s?eval\\(".*?\\\\x[^\\$]+\\$\\w{1,50}\\\\"\\);"\\);~msi',
    'id' => 'B64SlashedStr',
  ),
  315 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?array\\((?:[\'"][base64_dco]+[\'"],?\\s?)+\\);\\s?array_splice\\(\\1,\\s?4,\\s?0,\\s?8\\*8\\);\\s?(\\$\\w{1,50})\\s?=\\s?implode\\(\'\',\\s?array_reverse\\(\\1\\)\\);\\s?(\\$\\w{1,50})\\s?=\\s?\\2\\([\'"]([^\'"]+)[\'"]\\);\\s?eval\\(\\3\\);~msi',
    'id' => 'B64ArrayStrEval',
  ),
  316 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?@\\$\\w{1,50}\\((?:\\1\\[\\d+\\]\\.?)+,(?:\\1\\[\\d+\\]\\.?)+"\\("\\.(?:\\1\\[\\d+\\]\\.?)+\'\\([\'"]([^\'"]+)[\'"]\\)\\);\',"\\."\\);~msi',
    'id' => 'DictVarsPregReplaceB64',
  ),
  317 => 
  array (
    'full' => '~(if\\s*\\(\\!function_exists\\s*\\("([^"]+)"\\)\\)\\s*\\{\\s*function\\s*\\2\\s*\\((\\$\\w+)\\)\\s*\\{\\s*(\\$\\w+)\\s*=\\s*"";\\s*(\\$\\w+)\\s*=\\s*0;\\s*\\$\\w+\\s*=\\s*strlen\\s*\\(\\3\\);\\s*while\\s*\\(\\$\\w+\\s*<\\s*\\$\\w+\\)\\s*\\{\\s*if\\s*\\(\\3\\[\\5\\]\\s*==\\s*\'\\s\'\\)\\s*\\{\\s*\\4\\s*\\.=\\s*"\\s";\\s*\\}\\s*else\\sif\\s*\\(\\3\\[\\5\\]\\s*==\\s*\'!\'\\)\\s*\\{\\s*\\4\\s*\\.=\\s*chr\\s*\\(\\s*\\(ord\\s*\\(\\3\\[\\5\\+\\d\\]\\)-ord\\s*\\(\'A\'\\)\\)\\*16\\+\\s*\\(ord\\s*\\(\\3\\[\\5\\+\\d\\]\\)-ord\\s*\\(\'a\'\\)\\)\\);\\s*\\5\\s*\\+=\\s*2;\\s*\\}\\s*else\\s*\\{\\s*\\4\\s*\\.=\\s*chr\\s*\\(ord\\s*\\(\\3\\[\\5\\]\\)\\+1\\);\\s*\\}\\s*\\5\\+\\+;\\s*\\}\\s*return\\s*\\4;\\s*\\}\\s*\\}\\s*)eval\\s*\\(\\2\\s*\\(\'([^\']+)\'\\)\\);~msi',
    'id' => 'decodeAChar',
  ),
  318 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";(\\$\\w+)="[str_eplac"\\.]+";((?:\\$\\w+\\s*=\\s*\\3\\("([^"]+)","","[^"]+"\\);)+)(\\$\\w+)\\s*=\\s*\\$\\w+\\(\'\',\\s*((?:\\$\\w+\\()+\\1\\)\\))\\);\\6\\(\\);~msi',
    'id' => 'strReplaceCreateFunc',
  ),
  319 => 
  array (
    'fast' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\2\\)+;\\s*\\$\\w+\\s*=\\s*\'\';(?:\\s*for\\s*\\()?\\s*(\\$\\w+)\\s*=\\s*0;\\s*(?:while\\s*\\(\\(\\()?(?:if\\s*\\()?\\$\\w+\\s*<\\s*\\$\\w+(?:\\)+)?(?:;\\s*\\3\\s*\\+=\\s*[0x]*2\\))?\\s*\\{\\s*(\\$\\w+)\\s*\\.=\\s*pack\\([\'"]C[\'"],\\s*hexdec\\(substr\\(\\2,\\s*\\3,\\s*[0x]*2\\)\\)\\);(?:\\s*\\3\\s*\\+=\\s*2;)?\\s*\\}\\s*(?:else\\s*\\{\\s*\\}\\s*)?return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\([\'"]([0-9a-f]+)[\'"]\\)\\s*\\.\\s*(?:\'([^\']+\'\\)+;)|\\"([^\\"]+\\"\\)+;))(?:\\s*\'\\);)?~msi',
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\2\\)+;\\s*\\$\\w+\\s*=\\s*\'\';(?:\\s*for\\s*\\()?\\s*(\\$\\w+)\\s*=\\s*0;\\s*(?:while\\s*\\(\\(\\()?(?:if\\s*\\()?\\$\\w+\\s*<\\s*\\$\\w+(?:\\)+)?(?:;\\s*\\3\\s*\\+=\\s*[0x]*2\\))?\\s*\\{\\s*(\\$\\w+)\\s*\\.=\\s*pack\\([\'"]C[\'"],\\s*hexdec\\(substr\\(\\2,\\s*\\3,\\s*[0x]*2\\)\\)\\);(?:\\s*\\3\\s*\\+=\\s*2;)?\\s*\\}\\s*(?:else\\s*\\{\\s*\\}\\s*)?return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\([\'"]([0-9a-f]+)[\'"]\\)\\s*\\.\\s*(?|\'([^\']+\'\\)+;)|\\"([^\\"]+\\"\\)+;))(?:\\s*\'\\);)?~msi',
    'id' => 'evalbin2hex',
  ),
  320 => 
  array (
    'full' => '~function\\s\\w{1,50}\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\)\\s?{\\s?return;\\s?}\\s?function\\s\\w{1,50}\\((?:\\$\\w{1,50}\\s?=\\s?"",?\\s?){2}\\)\\s?{.*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+function\\s\\w{1,50}\\(\\).*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+function\\s\\w{1,50}\\(\\).*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+(?:header\\(\\w{1,50}\\([\'"][^\'"]+[\'"]\\)\\);\\s?)+define.*?PDO\\(.*?\\$\\w{1,50}\\s?=\\s?0;\\s?function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s?{\\s?global.*?function\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?"";\\s?for\\s?\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\s?-\\s?1;\\s?\\$\\w{1,50}\\s?\\+=2\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?chr\\(hexdec\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\s?\\.\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\s?\\+\\s?1\\]\\)\\s?\\^0x66\\);\\s?}\\s?return\\s\\$\\w{1,50};\\}(?:.*?(?:function\\s\\w{1,50}\\((?:\\$\\w{1,50},?\\s?)+\\)\\s?{\\s?return\\s\\$\\w{1,50};\\s?}\\s?)+)+~msi',
    'id' => 'manyFuncsWithCode',
  ),
  321 => 
  array (
    'full' => '~(\\$[0o]+)="([\\\\x0-9a-f]+)";(\\$[0o]+)=@?\\1\\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\\);@?\\3\\("([^"]+)"\\);~msi',
    'id' => 'gzB64Func',
  ),
  322 => 
  array (
    'full' => '~(?:(?:session_start|error_reporting|set_time_limit)\\(\\d*\\);\\s?)+(?:@?ini_set\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);\\s?)+((\\$\\w{1,50})\\s?=\\s?(?:[\'"][base64_dco]+[\'"]\\.?)+;\\s(\\$\\w{1,50})\\s?=\\s?\\2\\(((?:[\'"][^\'"]+[\'"]\\.?)+)\\);)\\s?(\\$\\w{1,50})\\s?=\\s?array\\(((?:(?:\\s?\\3\\((?:[\'"][^\'"]+[\'"]\\.?)+\\)(?:\\.?)?|\\3|\\2|(?:chr\\(\\d+\\)\\.?))+,\\s?)+\\${(?:chr\\(\\d+\\)\\.?)+}\\[(?:chr\\(\\d+\\)\\.?)+\\])\\);\\s?(?:.*?\\5\\[\\d+\\])+~msi',
    'id' => 'dictArrayFuncVars',
  ),
  323 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\(\\){\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\);(\\$\\w{1,50})\\s?=\\s?@\\$\\w{1,50}\\(\'\',\\s?pack\\(\'H\\*\',\\s?\\$\\w{1,50}\\)\\);\\s?\\4\\(\\);\\s?}\\1\\(\\);~msi',
    'id' => 'createFuncPackStrRot13',
  ),
  324 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s?(?:\\s?function\\s(\\w{1,50})\\((?:\\$\\w{1,50}\\,?\\s?){3}\\)\\s?{\\s?return\\s?[\'"]{2}\\s?\\.\\s?(?:\\$\\w{1,50}\\s?\\.\\s?[\'"]{2}\\s?\\.?\\s?)+;\\s*}|\\s?(?:\\w{1,50}:)?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";){2}\\s?(?:\\s?(?:\\w{1,50}:)?\\$\\w{1,50}\\s?=\\s?\\1\\((?:\\2\\[0\\d{1,5}\\][,.\\s\'"]*)+\\);\\s?)+\\s?(?:print_r\\(\\2\\[0\\d{1,5}\\]\\);\\s?echo\\s?"[^"]+";)?\\s*(\\$\\w{1,50})=\\1\\((?:\\1\\((?:(?:\\$\\w{1,50}|""),?)+\\),?\\.?)+\\)\\."\'([^\'"]+)\'"\\.\\1\\((?:\\2\\[0\\d{1,5}\\],?)+\\."",\\2\\[0\\d{1,5}\\]\\);\\s?print_r\\(\\$\\w{1,50}\\);\\s?(?:\\$\\w{1,50}=\\1\\((?:\\2\\[0\\d{1,5}\\][.,]?)+\\);\\s?)+\\$\\w{1,50}=\\1\\(\\1\\((?:\\$\\w{1,50},?)+\\),\\$\\w{1,50},\\1\\((?:\\$\\w{1,50},?)+\\)\\);\\s?\\$\\w{1,50}\\(create_function,array\\("","}"\\.\\4\\."//"\\)\\);~msi',
    'id' => 'dictVarsCreateFunc',
  ),
  325 => 
  array (
    'full' => '~(?:function\\s(\\w{1,50})\\((?:\\$\\w{1,50}\\,?\\s?){3}\\)\\s?{\\s?return\\s?[\'"]{2}\\s?\\.\\s?(?:\\$\\w{1,50}\\s?\\.\\s?[\'"]{2}\\s?\\.?\\s?)+;\\s*}\\s?|(?:\\w{1,50}:)?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s?){2}(?:\\s?\\$\\w{1,50}\\s?=\\s?\\1\\((?:(?:(?:\\2\\[\\d+\\])?[,.\\s\'"]*)+|(?:\\s?\\1\\((?:\\$\\w{1,50}[,.\\s\'"]*)+\\),?)+)\\);)+\\s?(\\$\\w{1,50})\\s?=\\s?\\1\\((?:\\s?\\1\\((?:\\$\\w{1,50}[,.\\s\'"]*)+\\),?)+\\)\\s?\\.\\s?"\'([^"]+)\'"\\s?\\.\\s?\\1\\((?:(?:\\2\\[\\d+\\])?[,.\\s\'"]*)+\\);\\s?\\$\\w{1,50}\\(\\$\\w{1,50},\\s?array\\(\'\',\\s?"}"\\s?\\.\\s?\\4\\s?\\.\\s?"//"\\)\\);~msi',
    'id' => 'dictVarsCreateFunc',
  ),
  326 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50})\\)\\s?{.*?\\$\\w+\\s?=\\s?"[^"]+";\\$\\w{1,50}\\s?=\\s?str_split\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?array_flip\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?0;\\$\\w{1,50}\\s?=\\s?"";\\$\\w{1,50}\\s?=\\s?preg_replace\\("[^"]+",\\s?"",\\s?\\$\\w{1,50}\\);do\\s?{(?:\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\[\\$\\w{1,50}\\+\\+\\]\\];){4}\\$\\w{1,50}\\s?=\\s?\\(\\$\\w{1,50}\\s?<<\\s?2\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?4\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?15\\)\\s?<<\\s?4\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?2\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?3\\)\\s?<<\\s?6\\)\\s?\\|\\s?\\$\\w{1,50};\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}}\\s?while\\s?\\(\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\);return\\s?\\$\\w{1,50};}\\s?.*?function\\s(\\w{1,50})\\(\\){\\$\\w{1,50}\\s?=\\s?@file_get_contents\\(\\w{1,50}\\(\\)\\);.*?(\\$\\w{1,50})\\s?=\\s?"([^"]{1,20000})";.*?\\4\\s?=\\s?@unserialize\\(\\1\\(\\4\\)\\);.*?(function\\s(\\w{1,50})\\(\\$\\w{1,50}=NULL\\){foreach\\s?\\(\\3\\(\\)\\s?as.*?eval\\(\\$\\w{1,50}\\);}}}).*?(\\7\\(\\);)~msi',
    'id' => 'decodedFileGetContentsWithFunc',
  ),
  327 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?\\.?=\\s?"\\\\[^"]+";)+)((?:\\$\\w{1,50}=\\$\\w{1,50}\\(\\$\\w{1,50}\\);){3})(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];(\\$\\w{1,50})=[\'"]([^\'"]+)[\'"];if\\(function_exists\\(\\$\\w{1,50}\\)\\){\\$\\w{1,50}=@\\$\\w{1,50}\\(\'\\3,\\$\\w{1,50}\',(\\$\\w{1,50}\\(\\$\\w{1,50}\\()\\5\\)\\)\\);if\\(\\$\\w{1,50}\\)\\3=@\\$\\w{1,50}\\(\\3,\\$\\w{1,50}\\);\\s?}else{.*?};if\\(function_exists\\(\\$\\w{1,50}\\)\\)\\s?{\\$\\w{1,50}=@\\$\\w{1,50}\\("",\\7\\3\\)\\)\\);if\\(\\$\\w{1,50}\\)@\\$\\w{1,50}\\(\\);}else{.*?};~msi',
    'id' => 'createFuncVarsCode',
  ),
  328 => 
  array (
    'full' => '~(\\$\\w+)=\'[preg_lac.\']+\';\\1\\(\'[#\\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\\);~msi',
    'id' => 'pregConcat',
  ),
  329 => 
  array (
    'fast' => '~()(?:\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*"[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+";\\s*)+\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*\\(\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*\\(\\s*\'([^\']+)\'\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}="[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+";\\s*\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\s*=\\s*@?\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\'[^\']+\',\\s*"[^"]+"\\s*(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\s*"[^"]+"\\)\\s*;@?\\${"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\(\\$\\{"[^"]+"(?:\\s*/\\*[^\\*]+\\*/\\s*)?\\^(?:\\s*/\\*[^\\*]+\\*/\\s*)?"[^"]+"\\}\\);~msi',
    'full' => '~(?(DEFINE)(?\'c\'\\s*/\\*[^\\*]+\\*/\\s*))(?:\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*"[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+";\\s*)+\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*\\(\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*\\(\\s*\'([^\']+)\'\\)\\s*\\)\\s*\\)\\s*;\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}="[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+";\\s*\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\s*=\\s*@?\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\'[^\']+\',\\s*"[^"]+"\\s*(?&c)?\\^(?&c)?\\s*"[^"]+"\\)\\s*;@?\\${"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\(\\$\\{"[^"]+"(?&c)?\\^(?&c)?"[^"]+"\\}\\);~msi',
    'id' => 'xoredStrings',
  ),
  330 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\'([^\']+)\';\\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi',
    'id' => 'commentWithAlgo',
  ),
  331 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*set_time_limit\\(0\\);\\s*ini_set\\(\'memory_limit\',\\s*\'-1\'\\);\\s*if\\(isset\\(\\$_POST\\[\'pass\']\\)\\)\\s*{\\s*function\\s*[^}]+}\\s*file_put_contents\\((\\$\\w+)\\."[^"]+",\\s*gzdeflate\\(file_get_contents\\(\\1\\),\\s*\\d\\)\\);\\s*unlink\\(\\1\\);\\s*copy\\(\'\\.htaccess\',\'[^\']+\'\\);\\s*(\\$\\w+)\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(?:\\$\\w+\\s*=\\s*str_replace\\(\'[^\']+\',\\s*[^;]+;\\s*)+\\$\\w+\\s*=\\s*\\$\\w+;\\s*(\\$\\w+)\\s*=\\s*"<\\?php[^;]+;\\s*\\?>";\\s*(\\$\\w+)\\s*=\\s*fopen\\(\'[^\']+\',\'w\'\\);\\s*fwrite\\(\\4,\\s*\\3\\);\\s*fclose\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*fopen\\(\'[^\']+\',\\s*\'w\'\\);\\s*fwrite\\(\\6,\\s*\\5\\);\\s*fclose\\(\\6\\);\\s*echo\\s*"[^"]+";\\s*}\\s*function\\s*(\\w+)[^}]+}[^}]+[\\s}]+[^!]+!+\';[^!]+!+\';\\s*}\\s*exit\\(\\);\\s*}\\s*function\\s*\\w+\\(\\){~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  332 => 
  array (
    'full' => '~function\\s?\\w{1,50}\\(\\$\\w{1,50}\\)\\s*{(\\$\\w{1,50}=true;)?((?:\\$\\w{1,50}\\s?=\\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\\w{1,50}\\([\'"][^\'"]+[\'"]\\);~msi',
    'id' => 'base64decodedFuncContents',
  ),
  333 => 
  array (
    'fast' => '~((?:if\\(!function_exists\\(base64_[end]+code\\)\\)\\{function\\s*(\\w+)[^{]+({([^}]+})+)\\}\\s*else\\s*\\{function\\s*\\2\\((\\$\\w+)\\)\\s*\\{\\s*global\\s*base64_[end]+code;return\\s*base64_[end]+code\\(\\5\\);\\}\\})+).*?((?:function\\s*(\\w+)\\(\\$\\w+\\)\\{return\\s*\\w+\\(\\$\\w+\\);\\s*\\}\\s*)+).*?(eval\\(gzinflate\\(\\7\\(\'([^\']+)\'\\)\\)\\);)~msi',
    'full' => '~((?:if\\(!function_exists\\(base64_[end]+code\\)\\)\\{function\\s*(\\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\\}\\s*else\\s*\\{function\\s*\\2\\((\\$\\w+)\\)\\s*\\{\\s*global\\s*base64_[end]+code;return\\s*base64_[end]+code\\(\\5\\);\\}\\})+).*?((?:function\\s*(\\w+)\\(\\$\\w+\\)\\{return\\s*\\w+\\(\\$\\w+\\);\\s*\\}\\s*)+).*?(eval\\(gzinflate\\(\\7\\(\'([^\']+)\'\\)\\)\\);)~msi',
    'id' => 'definedB64',
  ),
  334 => 
  array (
    'fast' => '~()(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*(?:if\\s*\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\s*\\{\\s*echo\\s*(?:"[^"]+"|\\$_GET\\["[^"]+"\\]);\\s*die;\\s*\\}\\s*)*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\s*=\\s*\'\'\\)\\s*\\{\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+");\\s*)+[^\\^]+\\^\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\[(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\];\\s*\\}\\s*\\}\\s*return\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+");\\s*\\}\\s*(?:/\\*[^\\*]+\\*/\\s*)?(?:\\$\\w+\\s*=\\s*"[^"]+";)?\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"[^"]+";\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"[^"]+";)?\\s*(?:\\$\\w+ = "D";)?\\s*((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+"))\\s*=\\s*"([^"]+)";(?:\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)+(?:foreach\\s*\\((?:array\\(|\\[)([\\d\\s,]+)[\\)\\]]\\s*as\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\)\\s*\\{\\s*(?:(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*"\\w+";\\s*)*\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*\\.=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\[(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\];\\s*\\}\\s*(?:\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)?)+(?:/\\*[^\\*]+\\*/\\s*)?\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\([creat_fuion"\'\\s\\.]+\\);\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*=\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\("[^"]*",\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\s*\\(\\s*\\2\\((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\((?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\),\\s*"([^"]+)"\\)\\)\\);\\s*(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")\\(\\);~msi',
    'full' => '~(?(DEFINE)(?\'v\'(?:(?:\\$\\{)*"GLOBALS"\\}\\["\\w+"\\]\\}?|\\$\\w+|"\\w+")))(?:(?&v)\\s*=\\s*"\\w+";\\s*)*(?:if\\s*\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\s*\\{\\s*echo\\s*(?:"[^"]+"|\\$_GET\\["[^"]+"\\]);\\s*die;\\s*\\}\\s*)*(?:(?&v)\\s*=\\s*"\\w+";\\s*)*function\\s*(\\w+)\\(\\$\\w+,\\s*\\$\\w+\\s*=\\s*\'\'\\)\\s*\\{\\s*(?:(?&v)\\s*=\\s*(?&v);\\s*)+[^\\^]+\\^\\s*(?&v)\\[(?&v)\\];\\s*\\}\\s*\\}\\s*return\\s*(?&v);\\s*\\}\\s*(?:/\\*[^\\*]+\\*/\\s*)?(?:\\$\\w+\\s*=\\s*"[^"]+";)?\\s*(?&v)\\s*=\\s*"[^"]+";\\s*(?:(?&v)\\s*=\\s*"[^"]+";)?\\s*(?:\\$\\w+ = "D";)?\\s*((?&v))\\s*=\\s*"([^"]+)";(?:\\s*(?&v)\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)+(?:foreach\\s*\\((?:array\\(|\\[)([\\d\\s,]+)[\\)\\]]\\s*as\\s*(?&v)\\)\\s*\\{\\s*(?:(?&v)\\s*=\\s*"\\w+";\\s*)*\\s*(?&v)\\s*\\.=\\s*(?&v)\\[(?&v)\\];\\s*\\}\\s*(?:\\s*(?&v)\\s*=\\s*[\'"][^\'"]*[\'"];\\s*)?)+(?:/\\*[^\\*]+\\*/\\s*)?\\s*(?&v)\\s*=\\s*(?&v)\\([creat_fuion"\'\\s\\.]+\\);\\s*(?&v)\\s*=\\s*(?&v)\\("[^"]*",\\s*(?&v)\\s*\\(\\s*\\2\\((?&v)\\((?&v)\\),\\s*"([^"]+)"\\)\\)\\);\\s*(?&v)\\(\\);~msi',
    'id' => 'B64Xored',
  ),
  335 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?<<<FILE\\s*([\\w\\s+/=]+)FILE;\\s*(\\$\\w{1,50}\\s?=\\s?(base64_decode\\(\\1\\));)~msi',
    'id' => 'B64AssignedVarContent',
  ),
  336 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?\'([^\']+)\';((?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\[[()\\d/+*-]+\\]\\.?)+;)+)\\$\\w{1,50}\\s?=\\s?"[^"]+";(?:\\$\\w{1,50}\\s?\\.?=\\s?\\$\\w{1,50};)+@?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\(\'\'\\),\\s?\\((\\$\\w{1,50})\\)\\);@?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'dictVarsWithMath',
  ),
  337 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s*class\\s?(\\w+){\\s*var\\s?\\$\\w{1,50};\\s*function\\s__construct\\(\\)\\s?{\\s?\\$this->\\w{1,50}\\(\\d+\\);\\s*}\\s*function\\s?(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?\\$_SERVER\\[\'HTTP_USER_AGENT\'\\];\\s?if\\s?\\(\\s?preg_match\\(\'/\\s?Apple\\(\\.\\*\\)\\s?\\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\\s\\w{1,50}\\([^)]+\\){.*?(?:unpack|pack|\\$this->|fmod|chr))+.*?return\\s\\$\\w{1,50};[\\s}]+(\\$\\w{1,50})\\s?=\\s?hex2bin\\(\\1\\);\\s?\\$\\w{1,50}\\s?=\\s?new\\s?\\3\\(\\d+\\);\\s?(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}->\\4\\(\\5\\);\\s?eval\\(\\6\\);~msi',
    'id' => 'classDecryptedWithKey',
  ),
  338 => 
  array (
    'full' => '~((\\$\\w+)\\s*=\\s*str_rot13\\(base64_decode\\(\'([^\']+)\'\\)\\);\\s*(\\$\\w+)\\s*=\\s*str_rot13\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\)\\);\\s*\\$\\w+\\s*=\\s*[\'"][^\'"]+[\'"];)(?:\\s*\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);)?\\s*preg_match\\(\\$\\w+\\(\\$\\w+\\([\'"][^\'"]+[\'"]\\)\\),\\s*file_get_contents\\(__FILE__\\),\\s*\\$\\w+\\);\\s*(eval\\(\\$\\w+\\(\\$\\w+\\([\'"]([^\'"]+)[\'"]\\)\\)\\);)\\s*eval\\(\\$\\w+\\(\\$\\w+\\([\'"]([^\'"]+)[\'"]\\)\\)\\);\\s*unset\\((?:\\$\\w{1,50},?\\s*)+\\);\\s*__halt_compiler\\(\\);\\s*\\?>\\s*(?:\\[PHPkoru_Info\\]\\s*[^\\]]+\\]\\s*)?\\[PHPkoru_Code\\]\\s*([^\\[]+)\\[/PHPkoru_Code\\]~msi',
    'id' => 'PHPkoru',
  ),
  339 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*\\$this->(\\w+)\\("([^"]+)"\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'\',\\s*\\$this->\\4\\(\\1\\)\\);\\s*\\6\\(\\);~msi',
    'id' => 'JoomlaInject',
  ),
  340 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*[\'"]([^"\']+)[\'"];\\s*)(?>\\$\\w{1,50}\\s*=\\s*fopen\\([^)]+\\);\\s*\\$\\w{1,50}\\s*=\\s*fwrite\\s?\\(\\$\\w{1,50}\\s*|fwrite\\(fopen\\([^)]+\\)),\\s*(base64_decode\\(\\2\\))\\);~msi',
    'id' => 'fwriteB64Content',
  ),
  341 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*(\\$\\w{1,50})\\s*=\\s*base64_decode\\(\\1\\);\\s*(\\$\\w{1,50})\\s*=\\s*base64_decode\\("([^"]+)"\\);\\s*(\\$\\w{1,50}\\s*=(\\s*\\3\\s*\\.\\s*\\4);)~msi',
    'id' => 'B64concatedVars',
  ),
  342 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"(\\\\[\\w\\\\]+)";\\s*(\\$\\w{1,50})\\s*=\\s*@\\1\\([\'"](\\$\\w{1,50})[\'"]\\s*,\\s*"(\\\\[\\w\\\\]+)"\\);\\s*@\\3\\(([\'"][^\'"]+[\'"])\\);~msi',
    'id' => 'slashedCreateFunc',
  ),
  343 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";((?:\\$\\w{1,50}\\s*=\\s*(?:\\$\\w{1,50}\\[\\d+\\]\\.?)+;)+@?(?:\\$\\w{1,50}(?:\\[\\d+\\]\\.?)?[,()]*)+;)~msi',
    'id' => 'varDictCreateFunc',
  ),
  344 => 
  array (
    'full' => '~@call_user_func\\(create_function\\([\'"]\\s*[\'"],gzinflate\\(base64_decode\\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\\)\\)\\),[^)]+\\);~msi',
    'id' => 'callFuncGzB64',
  ),
  345 => 
  array (
    'full' => '~@?(\\$\\w{1,50})\\s*=\\s*"([^"]+)";@?(\\$\\w{1,50})\\s*=\\s*array\\((\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+)\\);@?(\\$\\w{1,50})\\s*=\\s*"([^"]+)";@?(\\$\\w{1,50})\\s*=\\s*[\'"]{2};for\\s*\\(\\$\\w{1,50}\\s?=\\s?0;\\s?\\$\\w{1,50}\\s?<\\s?6;\\s?\\$\\w{1,50}\\+\\+\\)\\s*{@?\\$\\w{1,50}\\s?=\\s?@?\\3\\[@?\\$\\w{1,50}\\]\\s*;@?\\12\\.=\\s?@?\\1\\[@?\\$\\w{1,50}\\]\\s?;\\s*}@?\\12\\(((?:"\\\\x[^"]+"\\.?)+)\\);~msi',
    'id' => 'assertDictVarEval',
  ),
  346 => 
  array (
    'full' => '~function\\s+(\\w{1,50})\\((\\$\\w{1,50})\\)\\s*{\\s*\\$\\w{1,50}\\s?=\\s?"[^"]+";\\s?(?:(?:\\$\\w{1,50}\\s?=\\s?)+"";)+.*?<<\\s?2.*?<<\\s?6.*?!=\\s?64.*return\\s?\\$\\w{1,50};}\\s?function\\s+(\\w{1,50})\\(\\$\\w{1,50}\\){\\s*return\\s\\1\\(\\$\\w{1,50}\\);}\\s*eval\\(\\3\\(gzinflate\\(\\3\\("([^"]+)"\\),0\\)+~msi',
    'id' => 'B64FuncEvalGz',
  ),
  347 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s*=\\s*"([^"]+)";\\s*(\\$\\w{1,50})\\s?=\\s?(?:[\\d\\-+*])+;\\s*\\$\\w{1,50}\\s?=\\s?[\'"]base[\'"]\\s?\\.\\s?\\3\\.\\s?[\'"]_decode[\'"];\\s*\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\);(\\$\\w{1,50})\\s?=\\s?@?gzinflate\\(\\$\\w{1,50}\\);@?eval\\(("\\?>"\\.?)?\\4\\);~msi',
    'id' => 'B64Gz',
  ),
  348 => 
  array (
    'fast' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\2=gzinflate\\(base64_decode\\(\\2\\)\\);|\\$\\w+\\s*=\\s*base64_decode\\(\\2\\);\\s*\\2\\s*=\\s*gzinflate\\(\\$\\w+\\);|(\\$\\w+)\\s*=\\s*\'\';)\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\$\\w+\\s*<\\s*strlen\\s*\\(\\2\\);\\$\\w+(?:\\+\\+|\\s*\\+=\\s*1)\\)\\s*\\{?\\s*(?:\\2|\\3)(?:\\[\\$\\w+\\]|\\s*\\.)\\s*=\\s*chr\\(ord\\((?:\\2|\\3)\\[\\$\\w+\\]\\)\\s*(-?\\s*\\d+)\\);\\s*\\}?\\s*return\\s*(?:\\2|\\3);\\s*\\}\\s*(?:define\\("[^"]+",\\s*"\\w{32}"\\);)?(?:eval\\(|(\\$\\w+)\\s*=\\s*)\\1\\s*((?:\\(\\w+)*)\\((?:"([^"]+)"|\'([^\']+)\')\\)+;(?:\\s*call_user_func\\(create_function\\(\'\',\\s*\\5\\)+;)?~msi',
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:\\2=gzinflate\\(base64_decode\\(\\2\\)\\);|\\$\\w+\\s*=\\s*base64_decode\\(\\2\\);\\s*\\2\\s*=\\s*gzinflate\\(\\$\\w+\\);|(\\$\\w+)\\s*=\\s*\'\';)\\s*for\\s*\\(\\$\\w+\\s*=\\s*0;\\$\\w+\\s*<\\s*strlen\\s*\\(\\2\\);\\$\\w+(?:\\+\\+|\\s*\\+=\\s*1)\\)\\s*\\{?\\s*(?:\\2|\\3)(?:\\[\\$\\w+\\]|\\s*\\.)\\s*=\\s*chr\\(ord\\((?:\\2|\\3)\\[\\$\\w+\\]\\)\\s*(-?\\s*\\d+)\\);\\s*\\}?\\s*return\\s*(?:\\2|\\3);\\s*\\}\\s*(?:define\\("[^"]+",\\s*"\\w{32}"\\);)?(?:eval\\(|(\\$\\w+)\\s*=\\s*)\\1\\s*((?:\\(\\w+)*)\\((?|"([^"]+)"|\'([^\']+)\')\\)+;(?:\\s*call_user_func\\(create_function\\(\'\',\\s*\\5\\)+;)?~msi',
    'id' => 'deltaOrd',
  ),
  349 => 
  array (
    'fast' => '~()(?:(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";)+function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?=gzinflate\\(base64_decode\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\)\\);\\$\\w+="[^"]+";for\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?=0;(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?<strlen\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\);(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\+\\+\\)\\s*\\{\\$\\w+="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?="[^"]+";(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\[\\$\\{\\$\\w+\\}\\]=chr()\\(ord\\((?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\[(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?\\]\\)([\\-\\+]\\d+)\\);\\}return\\$\\{\\$\\w+\\};\\}()()eval\\(\\2\\("([^"]+)"\\)\\);~msi',
    'full' => '~(?(DEFINE)(?\'g\'(?:\\$\\{)?\\$\\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\\}\\["[^"]+"\\](?:\\})?))(?:(?&g)="[^"]+";)+function\\s*(\\w+)\\(\\$\\w+\\)\\s*\\{(?&g)="[^"]+";(?&g)=gzinflate\\(base64_decode\\((?&g)\\)\\);\\$\\w+="[^"]+";for\\((?&g)=0;(?&g)<strlen\\((?&g)\\);(?&g)\\+\\+\\)\\s*\\{\\$\\w+="[^"]+";(?&g)="[^"]+";(?&g)\\[\\$\\{\\$\\w+\\}\\]=chr()\\(ord\\((?&g)\\[(?&g)\\]\\)([\\-\\+]\\d+)\\);\\}return\\$\\{\\$\\w+\\};\\}()()eval\\(\\2\\("([^"]+)"\\)\\);~msi',
    'id' => 'deltaOrd',
  ),
  350 => 
  array (
    'fast' => '~<\\?php\\s(?:eval\\(")?ob_start\\(\\);(?:"\\))?\\s\\?>(.*?)<\\?php\\s(eval\\(")?if\\(!function_exists\\("([^"]+)"\\)\\)\\{function\\s\\3\\(\\)\\{(\\$[^=]+)=str_replace\\(array\\(([^)]+)\\),array\\(([^)]+)\\),ob_get_clean\\(\\)\\);for\\((\\$[^=]+)=1,(\\$[^=]+)=ord\\(\\4\\[0\\]\\);\\7<strlen\\(\\4\\);\\7\\+\\+\\)\\4\\[\\7\\]=chr\\(ord\\(\\4\\[\\7\\]\\)-\\8-\\7\\);\\4\\[0\\]=\'\\s\';return\\s\\4;\\}\\}(?:"\\))?\\s\\?>(.*?)<\\?php\\s(\\$[^=]+)=\\3\\(\\);\\s*eval\\(\\10\\s*\\)\\s*(\\?>\\s*)+~msi',
    'full' => '~(?:<\\?php\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*\\?>\\s*)?<\\?php\\s(?:eval\\(")?ob_start\\(\\);(?:"\\))?\\s\\?>(.*?)<\\?php\\s(eval\\(")?if\\(!function_exists\\("([^"]+)"\\)\\)\\{function\\s\\3\\(\\)\\{(\\$[^=]+)=str_replace\\(array\\(([^)]+)\\),array\\(([^)]+)\\),ob_get_clean\\(\\)\\);for\\((\\$[^=]+)=1,(\\$[^=]+)=ord\\(\\4\\[0\\]\\);\\7<strlen\\(\\4\\);\\7\\+\\+\\)\\4\\[\\7\\]=chr\\(ord\\(\\4\\[\\7\\]\\)-\\8-\\7\\);\\4\\[0\\]=\'\\s\';return\\s\\4;\\}\\}(?:"\\))?\\s\\?>(.*?)<\\?php\\s(\\$[^=]+)=\\3\\(\\);\\s*eval\\(\\10\\s*\\)\\s*(\\?>\\s*)+~msi',
    'id' => 'outputBuffer',
  ),
  351 => 
  array (
    'fast' => '~\\s*(\\$\\w+)\\s*=\\s*[base64_decode"\\./\\-\\*]+;.*?\\1(?:.{0,300}?\\1\\((?:\\$\\w+|"[^"]+")\\))+[^\\}]+\\}~msi',
    'full' => '~(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\."/";)?\\$\\w+\\s*=\\s*"[^"]+";(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\."/";)?\\s*(\\$\\w+)\\s*=\\s*[base64_decode"\\./\\-\\*]+;.*?\\1(?:.{0,300}?\\1\\((?:\\$\\w+|"[^"]+")\\))+[^\\}]+\\}~msi',
    'id' => 'doorwayInstaller',
  ),
  352 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*str_replace\\((\\w),"","[^"]+"\\);\\s*\\3\\(\'[eval\'.]+\\(\'[base64_dcod\'.]+\\(\'[gzinflate.\']+\\(\'[base64_dcod\'.]+\\(\'[^\\)]+\\)[^;]+;~msi',
    'id' => 'strReplaceAssert',
  ),
  353 => 
  array (
    'full' => '~(?:(\\$\\{\'GLOBALS\'\\}\\[\'[^\']+\'\\])=\'\\w+\';\\s*)+.*\\1\\};\\}~msi',
    'id' => 'anaLTEAMShell',
  ),
  354 => 
  array (
    'fast' => '~(\\$\\w+)=\'[function_exis\'\\.]+;\\$\\w+=\'[charodet\'\\.]+;(\\$\\w+)=\'[eval\'\\.]+;(\\$\\w+)=\'[gzinflate\'\\.]+;(if\\(!\\1\\(\'[base64_dcon\'\\.]+\\)\\)({([^}]+})+)}else{function\\s*[^}]+\\}\\})+(\\$\\w+)=\'[create_funion\'\\.]+;(\\$\\w+)\\s*=\\s*\\7\\(\'([^\']+)\',\\2\\.\'\\(\'\\.\\3\\.\'\\(\'\\.\'[^(]+\\(\\9\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\8\\("([^"]+)"\\);~msi',
    'full' => '~(\\$\\w+)=\'[function_exis\'\\.]+;\\$\\w+=\'[charodet\'\\.]+;(\\$\\w+)=\'[eval\'\\.]+;(\\$\\w+)=\'[gzinflate\'\\.]+;(if\\(!\\1\\(\'[base64_dcon\'\\.]+\\)\\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\\s*[^}]+\\}\\})+(\\$\\w+)=\'[create_funion\'\\.]+;(\\$\\w+)\\s*=\\s*\\7\\(\'([^\']+)\',\\2\\.\'\\(\'\\.\\3\\.\'\\(\'\\.\'[^(]+\\(\\9\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\8\\("([^"]+)"\\);~msi',
    'id' => 'zeuraB64Gzinflate',
  ),
  355 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\{((?:(\\$\\w+)\\s*=\\s*str_replace\\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\\);\\s*)+)return\\s*(\\$\\w+\\(\'\',\\$\\w+\\(\\2\\)\\);)\\}(\\$\\w+)\\s*=\'([^\']+)\';(\\$\\w+)=\\1\\(\\6\\);\\8\\(\\);~msi',
    'id' => 'strReplaceFunc',
  ),
  356 => 
  array (
    'full' => '~(\\$\\w+)=array\\(array\\(((?:\'[^\']+\',?)+)\\)\\);\\s*(?:/\\*[^\\*]+\\*/)?(\\$\\w+)(?:/\\*[^\\*]+\\*/)?[^\\?]+\\?>\\s*\\.\\s*base64_decode\\s*\\(\\s*str_rot13\\s*\\(\\s*join\\s*\\(\\s*\'\'\\s*,\\s*\\3\\s*\\)\\s*\\)\\s*\\)\\s*\\.\\s*\'[^\']+\'\\s*\\);(?:/\\*[^\\*]+\\*/)?\\s*(\\$\\w+)=array_walk\\s*\\(\\1,\\$\\w+\\);~msi',
    'id' => 'arrayMapB64',
  ),
  357 => 
  array (
    'full' => '~preg_replace\\(\'/\\.\\+\\/e\',str_replace\\("([^"]+)","([^"])*","([^"]+)"\\),\'\\.\'\\);~msi',
    'id' => 'pregReplaceStrReplace',
  ),
  358 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*(base64_decode\\("([^"]+)"\\));\\s*(\\$\\w+)\\s*=\\s*(base64_decode\\("([^"]+)"\\));\\s*echo\\s*"[^"]+";\\s*if\\s*\\(\\$\\w+\\s*==\\s*"[^"]+"\\)\\s*\\$\\w+\\s*=\\s*"[^"]+"\\.\\4\\."[^"]+"\\.\\1;~msi',
    'id' => 'echoB64',
  ),
  359 => 
  array (
    'full' => '~(\\$\\w+\\s*=\\s*"[^"]+"\\^"[^"]+";)+\\$\\w+\\s*=\\s*\\(?(?:@?\\$\\w+\\()+\'([^\']+)\'\\)+;(\\$\\w+\\s*=\\s*"[^"]+"\\^"[^;]+";)+(\\$\\w+)\\s*=\\s*\\(?(?:@?\\$\\w+\\()+\'\\$\\w+\',"[^"]+"\\^"[^"]+"\\);@?\\4\\(\\$\\w+\\);~msi',
    'id' => 'createFuncXored',
  ),
  360 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?array\\(((?:\'[^\']\',?)+)\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?(?:\\1\\[\\d+\\]\\.?)+;\\s?)+(\\$\\w{1,50})\\s?=\\s?((?:\\$\\w{1,50}\\.?)+)\'(\\$\\w{1,50})\'\\.(?:\\1\\[\\d+\\]\\.?)+;\\5\\s?=\\s?"([^"]+)";\\s?@?eval\\(\\3\\);~msi',
    'id' => 'evalDictArrayConcat',
  ),
  361 => 
  array (
    'full' => '~(?:(?:\\$\\w+="[^"]+"|\\$\\w+="[a-f0-9\\\\x]+"\\^"[a-f0-9\\\\x]+"|\\$\\w+=(?:"[^"]+"\\.?)+);)+\\$\\w+=(?:\\$\\w+\\.?)+;\\s*(\\$\\w+)\\("/(\\w+)/e",(\\$\\w+),"\\2"\\);(?:\\s*\\1\\("/(\\w+)/e",(\\$\\w+),"\\4"\\);)?~msi',
    'id' => 'pregReplaceXored',
  ),
  362 => 
  array (
    'full' => '~\\$\\w{1,5}=\'([a-z0-9+/=]{1,100}\\s[a-z0-9+/=\\s]+)\';(\\$\\w)=["\']_COOK[\\\\x0-9]{1,10}";\\s*if\\(!empty\\(\\${\\2}\\[["\']key["\']\\]\\)\\){(?:\\$\\w=[^;]{1,30};\\s*){1,5}for\\([^)]{1,40}\\)(?:\\$\\w\\[?\\]?=[^;]{1,30};\\s*){1,5}for\\([^)]{1,40}\\){[^}]{1,150}}if[^;]{1,50};\\s*if\\(\\(\\$\\w=@?gzinflate\\(\\$\\w\\)\\)&&\\(md5\\(substr\\(\\$\\w,\\d,\\$\\w\\)\\)===\'([a-f0-9]{32})\'\\)\\){\\$\\w{1,5}=[^;]{1,100};if\\(PHP_VERSION<\'5\'\\){[^}]{1,1000}}@create_function\\(\'\',"[^"]{1,100}"\\.\\$\\w{1,5}\\.\'{\'\\);}}\\s*DIE\\(.{1,500}>"\\);~msi',
    'id' => 'base64EncryptedGz',
  ),
  363 => 
  array (
    'full' => '~error_reporting\\(0\\);function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*return\\s*strtr\\(\\2,\\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\',\\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\'\\s*\\);\\s*\\s*\\}eval\\(\\1\\(\'([^\']+)\'\\)\\);(\\$\\w+)\\s*=\\s*((?:\\$\\w+\\[\\d+\\]\\()+\'[^\']+\'\\)+;)\\$\\w+\\[\\d+\\]\\(\\6\\);~msi',
    'id' => 'Bloos3rpent',
  ),
  364 => 
  array (
    'full' => '~(@?eval\\(@?gzinflate\\(base64_decode\\(preg_replace\\(\'([^\']+)\',\\s*\'([^\']*)\',\\s*\'([^\']+)\'\\)+;)\\s*(preg_replace\\("/(\\w+)/e".\\s*\'\')@?eval\\(@?gzinflate\\(\\w+\\(base64_decode\\((preg_replace\\(\'([^\']+)\',\\s*\'([^\']*)\',\\s*)\'([^\']+)\'\\)+;(\'\',"\\6"\\);)~msi',
    'id' => 'doublePregReplace',
  ),
  365 => 
  array (
    'full' => '~(\\$\\w+)="([^"]+)";(\\$\\w+)=array\\(((?:\\d+,?)+)\\);(\\$\\w+)="([^"]+)";(\\$\\w+)="";for\\s*\\((\\$\\w+)=0;\\8<\\d+;\\8\\+\\+\\)\\{(\\$\\w+)=\\3\\[\\8\\]\\s*;\\s*\\7\\.=\\s*\\1\\[\\9\\]\\s*;\\s*\\}\\7\\("eval\\(base64_decode\\(gzinflate\\(base64_decode\\(\\5\\),0\\)\\)\\)"\\);~msi',
    'id' => 'zeura2',
  ),
  366 => 
  array (
    'full' => '~(\\$\\w+)="([\\\\a-fx0-9])+";(\\$\\w+)="([\\\\a-fx0-9])+";(\\$\\w+)=\\1\\("",\\3\\("([^"]+)"\\)\\);\\5\\(\\);~msi',
    'id' => 'createFuncEscaped',
  ),
  367 => 
  array (
    'full' => '~error_reporting\\s*\\(0\\);\\s*function\\s*([^\\(]+)\\(\\)\\s*\\{\\s*\\$[^= ]+\\s*=\\s*[0-9a-fx]+;\\s*\\$[^= ]+\\s*=\\s*func_get_args\\s*\\(\\);\\s*if\\s*\\(+\\$[^}]+}\\s*if\\s*\\(+[^{]+\\{\\s*return\\(+parse_str\\("[^=]+=([^"]+)",[^}]+\\}\\s*\\}\\s*function\\s*([^(]+)\\(\\)\\{\\s*\\$[^=]+=func_get_args\\(\\);\\s*\\$[^=]+=[0-9a-fx]+;(\\s*if\\s*\\([^}]+\\})+\\s*\\}\\s*function\\s*([^(]+)\\(\\$[^)]+\\)\\s*{[^}]+\\}\\s*return\\s*\\$[^;]+;\\s*\\}\\s*eval\\(\\5\\(\\1\\([0-9a-fx]+,[0-9a-fx]+\\)+;~msi',
    'id' => 'maskedDeltaOrd',
  ),
  368 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?"((?:[^-]-m\\s+){10}[^"]+)";\\s?\\$\\w{1,50}\\s?=\\s?\\w{1,50}\\(\\s?\\1\\s?\\(\\s?array\\("-m\\s",\\s?PHP_EOL\\),\\s?"",\\s?\\2\\)\\);\\s?function\\s?\\w{1,50}\\s?\\((\\$\\w{1,50})\\s?\\){\\s?.*?\\$\\w{1,50}\\(\\4\\);}\\s?\\$\\w{1,50}\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?(\\$\\w{1,50})\\s?=\\s?"([^"]+)";\\s?(\\$\\w{1,50})\\s?=\\s?array\\(\\);\\s?for\\s?\\((\\$\\w+)\\s?=0;\\s?\\8\\s?<\\s?256;\\s?\\+\\+\\8\\)\\s?{\\s?\\7\\s?\\[\\8\\]\\s?=\\s?\\8;\\s?}\\s?\\$\\w{1,50}\\s?=\\s?0;\\s?for\\s?\\(\\8\\s?=0;\\s?\\8\\s?<\\s?256;\\s?\\+\\+\\8\\)\\s?{.*?ord\\(\\$\\w{1,50}\\s?\\[\\$\\w{1,50}\\s?%\\s?(\\d+)\\]\\)\\)\\s?%\\s?256;.*?for\\s?\\(.*?<(\\d+);\\s?\\+\\+\\$\\w{1,50}\\).*?}\\s?\\$\\w{1,50}\\s?=\\s?\\4;\\s?\\$\\w{1,50}\\s?=\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+;\\s?\\$\\w{1,50}\\("/\\w+/e",\\s?(?:chr\\(-?\\d{1,5}[+\\-*^/]-?\\d{1,5}\\)\\s?\\.?)+,"\\w+"\\);~msi',
    'id' => 'decodeStrMultiForDict',
  ),
  369 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?\'[^\']+\';\\s?)+(?:\\$\\w{1,50}\\s?=\\s?str_replace\\([\'"][^\'"]+[\'"],\\s?["\']{2},\\s?[\'"][^\'"]+[\'"]\\);\\s?){2}(\\$\\w{1,50})\\s?=\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\),\\s?\\$\\w{1,50}\\([\'"]([^\'"]+)[\'"]\\)\\);\\s?\\1\\(((?:\\$\\w{1,50}\\s?\\.?)+)\\);~msi',
    'id' => 'B64ConcatedStrVars',
  ),
  370 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$\\w{1,50}\\s?=\\s?fputs\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?~msi',
    ),
    'full' => '~\\$\\w{1,50}\\s?=\\s?(\\w{1,50})\\s?\\(array\\((?:\\d+,?)+\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(array\\((?:\\d+,?)+\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?fopen\\(\\$\\w{1,50},\\s?\\1\\(array\\((?:\\d+,?)+\\)\\)\\);\\s?\\$\\w{1,50}\\s?=\\s?fputs\\(\\$\\w{1,50},\\s?\\$\\w{1,50}\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?function\\s?\\1\\(\\s?array\\s?(\\$\\w{1,50})\\)\\s?{\\s?if\\(\\2\\)\\s?{\\s?foreach\\s?\\(\\2\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?chr\\(\\$\\w{1,50}\\);\\s?}\\s?}\\s?return\\s?\\$\\w{1,50};\\s?}~msi',
    'id' => 'chrFuncVars',
  ),
  371 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?=\\s?(?:"[^"]+"\\.?)+;)+)\\$\\w{1,50}\\((?:"[^"]+"\\.?)+,((?:\\$\\w{1,50}\\()+(?:"[^"]+"\\.?)+\\)\\))\\s?,\\s?(?:"[^"]+"\\.?)+\\);~msi',
    'id' => 'concatVarsFuncs',
  ),
  372 => 
  array (
    'precheck' => 
    array (
      0 => '~\\$GLOBALS\\[\'(\\w+)\'\\];~msi',
      1 => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;~msi',
      2 => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;\\s*\\$\\1=\\$GLOBALS;~msi',
      3 => '~exit\\(\\);\\}~msi',
    ),
    'full' => '~\\$GLOBALS\\[\'(\\w+)\'\\];\\s*global\\s*\\$\\1;\\s*\\$\\1=\\$GLOBALS;(\\$\\1\\[\'(\\w+)\']="([^"]+)";)\\s*(?:@?\\$\\1\\[(\\$\\1\\[\'\\3\'\\]\\[\\d+\\]\\.?)+\\]\\s*=(?:\\s*(?:\\$\\1\\[\'\\3\'\\]\\[\\d+\\]\\.?)+|\\$_POST|\\$_COOKIE);\\s*)+(?:.{1,120}\\$\\1\\[\'\\3\'\\])+[^}]+\\}exit\\(\\);\\}~msi',
    'id' => 'globalDictVar',
  ),
  373 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*\'(\\w+)\'\\^[^;\']+;\\s*(\\$\\w+)\\s*=\\s*\\w+\\&\'[^\';]+\';\\s*.*?\\2\\&\\s*[^;]+;\\s*\\$\\w+\\s*=\\s*\\$\\w+\\&\\$\\w+;\\s*\\$\\w+\\s*=\\s*[^;]+;\\s*(?:\\$\\w+\\s*=\\s*\\$\\w+\\&\\$\\w+;\\s*)+if\\s*\\(\\!(?:\\$\\w+\\s*\\()+[^;]+;\\s*\'[^\']+\';~msi',
    'id' => 'garbageVars',
  ),
  374 => 
  array (
    'full' => '~\\$\\w+\\s*=(?:\\s*chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+;\\s*\\$\\w+\\s*=\\s*(?:<<<\'(\\w+)\'\\s*(.*?)\\1|"([^"]+)");\\s*\\$\\w+\\s*=\\s*(\\w+)\\((?:\\s*\\$\\w+\\s*\\(\\s*array\\("([^"]+)"\\),"",\\$\\w+\\)|\\s*\\$\\w+\\s*\\(\\$\\w+\\))\\);\\s*function\\s*\\4\\s*\\(\\$\\w+\\)\\s*\\{\\s*(?:\\$\\w+=(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?)+;\\s*)+\\$\\w+=\\&\\$\\w+;\\s*\\$\\w+\\.=\\$\\w+;return\\s*\\$\\w+\\(\\$\\w+\\);\\}\\s*\\$\\w+\\s*=(?:\\s*chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?)+;\\s*\\$\\w+\\s*=\\s*"([^"]+)";\\s*(?:\\s*\\$\\w+\\s*=\\s*array\\(\\);)?(?:(?:\\s*for\\s*\\(\\$\\w+=0;\\s*\\$\\w+<\\d+;\\s*\\+\\+\\$\\w+\\)\\s*\\{\\s*[^}]+\\}(?:\\s*\\$\\w+\\s*=\\s*(?:0;|\\$\\w+;))+)+|for\\(\\$\\w+\\s*=\\s*0;\\$\\w+<\\d+;\\+\\+\\$\\w+\\)\\{\\s*\\$\\w+\\{\\s*\\$\\w+\\}=\\$\\w+\\{\\s*\\$\\w+\\}\\^\\$\\w+\\{\\s*\\$\\w+%\\d+\\};\\}\\s*\\$\\w+\\s*=\\s*\\$\\w+;)\\s*\\$\\w+\\s*=\\s*(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+;\\s*\\$\\w+\\("/(\\w+)/e",\\s*(?:chr\\(-?\\d+\\^-?\\d+\\)\\s*\\.?\\s*)+,"\\7"\\);~msi',
    'id' => 'chrMinXor',
  ),
  375 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^;]+;)";\\s*@assert\\(\\1\\);~msi',
    'id' => 'assertUrlDecode',
  ),
  376 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*array\\(\'([^\\)]+)\'\\);\\$\\w+\\s*=\\s*array\\(\'[base64_dco\'\\.,]+\\)\\s*;\\s*\\$\\w+\\s*=\\s*array\\([gzuncompres\'\\.,]+\\)\\s*;\\s*(?:\\$\\w+\\s*=\\s*\\$\\w+\\[\\d\\]\\.\\$\\w+\\[\\d\\];\\s*)+eval\\((?:\\$\\w+\\()+implode\\(\'\',\\s*\\1\\)+;~msi',
    'id' => 'implodeB64Gz',
  ),
  377 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*"\\w";\\s*)+)((?:\\$\\w+\\s*=(?:\\s*\\$\\w+\\s*\\.?)+;\\s*)+)(eval\\((?:\\$\\w+\\()+"[^"]+"\\)+;)~msi',
    'id' => 'X12',
  ),
  378 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*function\\((\\$\\w+)\\)\\s*\\{\\s*return\\s*strtr\\(\\2,\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*\\};\\$\\w\\s+=\\s*\\$\\w+\\("([^"]+)"\\);\\$\\w+\\s*=\\s*\\$\\w+\\(\\);\\$\\w+\\s*=\\s*\\$\\w+\\[\\1\\("([^"]+)"\\)\\];foreach\\s*\\(\\$\\w+\\s*as\\s*\\$\\w+\\s*=>\\s*\\$\\w+\\)\\s*\\{[^}]+\\}(?:if\\s*\\([^}]+})+\\}(\\$\\w+)\\s*=\\s*\\$\\w+\\("",\\s*(?:\\$\\w+\\()+"([^"]+)"\\)+;\\7\\(\\);~msi',
    'id' => 'WpNightmare',
  ),
  379 => 
  array (
    'full' => '~preg_replace\\(\'/(\\w+)/e\',strrev\\(\'\\)\\)\\\\\'([^\']+)\'\\([base64_dco(val]+\'\\),\'\\1\'\\);~msi',
    'id' => 'pregB64Strrev',
  ),
  380 => 
  array (
    'full' => '~global\\s(\\$[^;]+);if\\(!defined\\([\'"][^\'"]+[\'"]\\)\\){define\\([\'"][^\'"]+[\'"],__FILE__\\);function\\s?([^(]+)\\((\\$[^,]+),(\\$[^=]+)=[\'"]{2}\\){global\\s?\\1;\\3=base64_decode\\(\\3\\);if\\(empty\\(\\3\\)\\)\\s?return\\s?[\'"]{2};if\\(\\4==[\'"]{2}\\){return\\s?\\~\\3;}else{(\\$[^=]+)=\\1\\[\'([^\']+)\'\\]\\(\\3\\);\\4=\\1\\[\'([^\']+)\'\\]\\(\\4,\\5,\\4\\);return\\s?\\3\\^\\4;}}}((?:(?:\\1\\[\'[^\']+\'\\]=\\2\\(\'[^\']+\',\'[^\']*\')\\);)+)(?:\\1\\[\'[^\']+\'\\]=isset[^;]+;)+(eval\\(\\1\\[\'([^\']+)\'\\]\\(\'([^\']+)\'\\)\\);)return;\\?>~msi',
    'id' => 'utfCharVarsFuncEval',
  ),
  381 => 
  array (
    'precheck' => 
    array (
      0 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
      1 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;~msi',
      2 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\(~msi',
      3 => '~(?:\\$\\w{1,50}\\s?=\\s?(?|[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+~msi',
      4 => '~(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\)~msi',
      5 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\$\\w{1,50},\\s?[\'"][^\'"]+[\'"]\\);~msi',
      6 => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);~msi',
    ),
    'fast' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);(?:\\$\\w{1,50}\\s?=\\s?(?:[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\([\'"]{2},\\s?\\3\\(\\$\\w{1,50}\\(\\5\\(\\6\\(\\7,\\s?[\'"](\\d+)[\'"]\\)\\)\\)\\)\\),\\$\\w{1,50}\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\s?function\\s\\2\\(.*return\\s\\$\\w{1,50};}(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+(\\$\\w{1,50})\\s?=\\s?(?:\\d+[\\+]*)+;.*?\\$\\w{1,50}\\s?=\\s?(\\w+)\\([\'"][^\'"]+[\'"],\\s?\\1,\\s?[\'"][^\'"]+[\'"]\\);(?:\\$\\w{1,50}\\s?=\\s?(?|[\'"][^\'"]+[\'"]|\\$\\w{1,50}\\([\'"][^\'"]+[\'"]\\)|\\$\\w{1,50});\\s?)+(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\'\\$\\w{1,50}\',\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\((\\$\\w{1,50}),\\s?[\'"](\\d+)[\'"]\\)\\)\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\$\\w{1,50}\\(\\$\\w{1,50},\\$\\w{1,50}\\([\'"]{2},\\s?\\3\\(\\$\\w{1,50}\\(\\5\\(\\6\\(\\7,\\s?[\'"](\\d+)[\'"]\\)\\)\\)\\)\\),\\$\\w{1,50}\\);(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+\\s?function\\s\\2\\(.*return\\s\\$\\w{1,50};}(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)+~msi',
    'id' => 'manyVarFuncCreateFuncWrap',
  ),
  382 => 
  array (
    'full' => '~class\\s*(_\\w{1,20})\\s*{\\s*private\\sstatic\\s*\\$_\\w{1,10};\\s*static\\s*function\\s*(\\w{1,3})\\s*\\(\\$_\\w{1,20}\\)\\s*{\\s*if\\s*\\([^)]{1,20}\\)\\s*:\\s*self::\\w{1,2}\\(\\);\\s*endif;\\s*return\\s*self::\\$_\\w{1,10}\\[\\$_\\w{1,10}\\];\\s*}\\s*private\\s*static\\s*function\\s*\\w{1,2}\\(\\)\\s*{\\s*self::\\$_\\w{1,10}=array\\(([^\\)]{1,500})\\);\\s*}\\s*}\\s*\\$GLOBALS\\[["\']([^\\]]{32,120})["\']\\]=array\\(([^)]{1,500})\\);((?:\\s*\\$GLOBALS\\["[_\\w\\d\\\\]{1,120}"\\]=base64_decode\\([^)]{1,140}\\)\\s*;\\s*)+)\\s*class\\s*(_\\w{1,10})\\s*{\\s*private\\s*static\\s*\\$_\\w{1,10};\\s*static\\s*function\\s*(\\w{1,10})\\([^)]{1,30}\\)\\s*{[^}]{1,900}\\s*}private\\s*static\\s*function\\s*\\w{1,10}\\(\\)\\s*{\\s*self::\\$_\\w{1,10}=array\\(([^)]{1,2300})\\);\\s*}\\s*}\\s*(.*;\\s*;)~msi',
    'id' => 'twoCalcClasses',
  ),
  383 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*array\\(((?:[\'"][\\w\\$\\)\\;\\(][\'"],?)+)\\);\\s*(\\$\\w+)\\s*=\\s*create_function\\(\'([\\$\\w\'\\.]+)\',((?:\\1\\[\\d+\\]\\.?)+)\\);\\s*\\3\\(\'([^\']+)\'\\);~msi',
    'id' => 'createFuncArray',
  ),
  384 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*function\\s*(\\w+)\\(\\)\\s*\\{\\s*return\\s*str_ireplace\\("([^"]+)",\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*\\}\\s*(\\$\\w+)=strtr\\("([^"]+)",\\s*"([^"]+)",\\s*"([^"]+)"\\);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\\);\\s*(\\$\\w+)\\s*=\\s*\\11\\(\'\',\\s*\\7\\(\\1\\)\\);\\s*\\12\\(\\);~msi',
    'id' => 'createFuncReplaceB64',
  ),
  385 => 
  array (
    'full' => '~((?:\\$\\w+\\s*=\\s*([lr]?trim)\\(\'[^\']+\',\'[^\']+\'\\);\\s*)+)(\\$\\w+)\\s*=\\s*((?:\\$\\w+\\s*\\.?\\s*)+);\\s*(\\$\\w+)\\s*=\\s*\\3\\(\'([^\']+)\'\\);\\s*eval\\((\\$\\w+=\\&?)?\\5\\);~msi',
    'id' => 'evalTrim',
  ),
  386 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\s{\\s*(\\$\\w+\\s*=\\s*\'[^\']{32}\';\\s*)(\\$\\w+)\\s*=\\s*\'([^\']+)\';\\s*(((\\$\\w+)\\s*=\\s*(?:\\3\\[\\d+\\]\\.?)+;\\s*)+)\\$\\w+\\(\\7,\\3\\[\\d+\\]\\."([^,]+)",\'\'\\);\\}\\s*@?\\1\\(\\);~msi',
    'id' => 'funcDictB64',
  ),
  387 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[base64dco_"\'.]+;\\s?(\\$\\w{1,50})\\s?=\\s?["\'gzinflate.]+;\\s?(\\$GLOBALS\\[\'[^\']+\'\\]\\s?=\\s?\\$\\w{1,50}\\s?=\\s?)unserialize\\(\\2\\(\\1\\(join\\(\'(\\w+)\',array\\(((?:\'[^\']*\',?\\s?)+)\\)+;~msi',
    'id' => 'unserializeB64GzJoinArr',
  ),
  388 => 
  array (
    'full' => '~(\\$\\w{1,50})=\\(?[\'"]([^\'"]+)[\'"]\\);\\s?((?:\\$\\w{1,50}=[\'"][^\'"]+[\'"];\\s?)*(?:\\$\\w{1,50}=(?:\\1{\\d{1,5}}\\.?)+;)+)\\$\\{"[^"]+"}\\["[^"]+"\\]\\(\\d\\);{1,2}(?:.*?echo\\s?.*?unset.*?exit\\(\\);)+[^;]+;\\${"[^"]+"}\\["[^"]+"]\\(\\);~msi',
    'id' => 'dictVarsContent',
  ),
  389 => 
  array (
    'full' => '~(\\${[\'"]GLOBALS[\'"]}\\[[\'"](\\w{1,50})[\'"]\\])=[\'"](\\w{1,50})[\'"];if\\(isset\\(\\$_GET\\[[\'"]\\w{1,50}[\'"]\\]\\)&&\\$_GET\\[[\'"]\\w{1,50}[\'"]\\]==[\'"]\\w{1,50}[\'"]\\){((\\${[\'"]GLOBALS[\'"]}\\[[\'"]\\w{1,50}[\'"]\\])=[\'"]\\w{1,50}[\'"];(\\${[\'"]GLOBALS[\'"]}\\[[\'"]\\w{1,50}[\'"]\\])=[\'"]\\w{1,50}[\'"];(?:\\$\\w{1,50}=[\'"]\\w{1,50}[\'"];)\\${\\1}=[\'".creat_funio]+;\\${\\5}=\\$\\3\\(\'(\\$\\w{1,50})\',[\'".eval]+\\(\\\\?\'\\?>\\\\?\'\\.[\'".base64_dco]+\\(\\7\\)\\);\'\\);\\${\\6}\\([\'"]([^\'"]+)[\'"]\\);)exit;}~msi',
    'id' => 'globalsCreateFuncEvalB64',
  ),
  390 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?["\']([^"\']+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?foreach\\s?\\(\\[[^]]+\\]\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\];\\s?}\\s?if\\s?\\(isset\\(\\$_REQUEST\\["{\\$\\w{1,50}}"\\]\\)\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?\\$_REQUEST\\["{\\$\\w{1,50}}"\\];\\s?(?:\\$\\w{1,50}\\s?=\\s?["\']{2};\\s?)+(?:foreach\\s?\\(\\[[^]]+\\]\\s?as\\s?\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\];\\s?}\\s?)+\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\((?:[^)]+)\\);\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s?\\$\\w{1,50}\\(\\$\\w{1,50}\\)\\);\\s?\\$\\w{1,50}\\(\\);\\s?exit;\\s?}~msi',
    'id' => 'dictForeachVars',
  ),
  391 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'".\\sgzinflate\\dxa-fhr\\(\\)\\\\]+;\\s?(\\$\\w{1,50})\\s?=[\'".\\sbase64_dcod\\dxa-fhr\\(\\)\\\\]+;\\s?(\\$\\w{1,50})\\s?=\\s?\\1\\(\\2\\((?:str_replace\\("[^"]+",\\s?"",\\s?)?[\'"]([^\'"]+)[\'"]\\)\\)\\)?;\\s?echo\\s?(?:"{\\${)?\\s?eval\\(\\3\\)\\s?(?:}}")?;~msi',
    'id' => 'echoEvalGzB64Var',
  ),
  392 => 
  array (
    'full' => '~eval\\(((?:str_rot13|strrev))\\(\\s*\'((?:.*?\\\\\')+[^\']+)\'\\s?\\)\\);~msi',
    'id' => 'evalFuncCode',
  ),
  393 => 
  array (
    'full' => '~eval\\(openssl_decrypt\\(\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\),\\s?[\'"]([^\'"]+)[\'"],\\s?base64_decode\\([\'"]([^\'"]+)[\'"]\\),\\s?OPENSSL_RAW_DATA,\\s?base64_decode\\([\'"]([^\'"]+)[\'"][^;]+;~msi',
    'id' => 'evalOpenSslDecrypt',
  ),
  394 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?urldecode\\(\'([^\']+)\'\\);function\\s\\w{1,50}(?:.*?(?:\\1{\\d+}\\.?)+)+;~msi',
    'id' => 'urldecodedDictVarReplace',
  ),
  395 => 
  array (
    'full' => '~global\\s*\\$(\\w+);((?:\\$\\1\\[\'[^\']+\'\\]=base64_decode\\(\'[^\']+\'\\);)+)[\\s\\?\\>\\<ph]{0,10}((?:.+?\\$GLOBALS\\[\'\\1\'\\]\\[\'[^\']+\'\\][^;]+;)+}?(?:(?:if\\s*\\([^}]+})+return\\s*[^}]+\\}+|(?:.{1,250}?base64_decode\\(\'[^\']+\'\\))+[^}]+\\}+)?)~msi',
    'id' => 'zymdecrypt',
  ),
  396 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\s*\\{\\s*(?:(\\$\\w+)=strrev\\(\\2\\);\\s*\\2=base64_decode\\(\\3\\);\\s*)+return\\s*\\((?:"\\?\\>"\\s*\\.\\s*)?\\2\\);\\s*\\}\\s*(eval\\(\\1\\("[^"]+"\\)\\);)~msi',
    'id' => 'funcRevB64',
  ),
  397 => 
  array (
    'full' => '~error_reporting\\(\\d\\);\\s?(\\$\\w{1,50})=create_function\\(null,gzinflate\\(convert_uudecode\\("([^"]+)"\\)\\)\\);\\1\\(\\);~msi',
    'id' => 'createFuncGzConvertUudecode',
  ),
  398 => 
  array (
    'full' => '~\\$GLOBALS\\["[^"]+"\\]=Array\\(\\);\\s?\\?><\\?php\\sif\\s?\\(\\!function_exists\\("(\\w{1,50})"\\)\\)\\s?{function\\s?\\1\\(\\$\\w{1,50}\\){\\$\\w{1,50}=Array\\(((?:[\'"][^"\']+[\'"]\\s?\\.?)+)\\);return\\sbase64_decode\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\);}}\\s?\\?><\\?php\\s?if\\(isset\\(\\$GLOBALS\\[\\1\\(0\\)\\]\\)\\)return;\\s?\\?><\\?php\\sfunction\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\$\\w{1,50}=Array\\(((?:(?:[\'"][^"\']*[\'"]\\s?\\.?)+,?)+)\\);return\\sbase64_decode\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\);}\\s?(?:.*?\\3\\(\\d{1,5}\\))+.*?\\?>~msi',
    'id' => 'globalsArrayFuncs',
  ),
  399 => 
  array (
    'full' => '~ini_set\\([\'"][^\'"]+[\'"],\\s?[\'"][^\'"]+[\'"]\\);(\\$\\w{1,50})\\s?=\\s?array\\(((?:[\'"][^\'"]+[\'"]\\s?=>(?:\\s?(\\w{1,50})\\(\\d{1,5}\\)\\.?|\\s?\\$\\w{1,50})+,?)+)\\);.*?function\\s\\3\\(\\$\\w{1,50}\\){return\\schr\\(\\$\\w{1,50}\\);}(?:.*?\\1\\[[\'"][^\'"]+[\'"]\\])+.*?return\\s\\$\\w{1,50};}\\s?\\w{1,50}\\(\\);~msi',
    'id' => 'varArrayChrFunc',
  ),
  400 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?function\\s(\\w{1,50})\\(\\$\\w{1,50}\\)\\s?{\\s?\\$\\w{1,50}\\s?=\\s?base64_decode\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?openssl_decrypt\\("\\$\\w{1,50}",\\s?[\'"]AES-256-CBC[\'"],\\s?[\'"]([^\'"]+)[\'"],\\s?0,\\s?[\'"]([^\'"]+)[\'"]\\);return\\s\\$\\w{1,50};\\s?}(\\$\\w{1,50})\\s?=\\s?([\'"][^\'"]+[\'"]);.*?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?eval\\(\\1\\(\\6\\)\\);~msi',
    'id' => 'evalOpensslDecryptStr',
  ),
  401 => 
  array (
    'full' => '~error_reporting\\(\\d{1,5}\\);\\s?function\\s(\\w{1,50})\\(\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?((?:(?:\\2\\[\\d{1,5}\\]|[\'"][(_\\\\\'"]+[\'"])\\s?\\.?\\s?)+);\\sreturn\\s\\$\\w{1,50};\\s?}\\s?eval\\(\\1\\(\\)\\s?\\.\\s?([\'"][^\'"]+[\'"]\\)+;)[\'"]\\);~msi',
    'id' => 'evalDictionaryFuncVar',
  ),
  402 => 
  array (
    'full' => '~(?>\\$\\w+\\s?=\\s?base64_decode\\((?>(?>chr\\(\\d+\\)|"[\\w=]"|\'[\\w=]\')[\\s.]*)+\\);\\s?)+(?>(?>update_option\\(|\\$\\w+=)\\$\\w+\\([^;]+;|(?>eval\\(\\$\\w{1,50}\\(\\$_POST\\[base64_decode\\((?>.*?base64_decode\\((?>(?>chr\\(\\d+\\)|"[\\w=]"|\'[\\w=]\')[\\s.]*)+\\)\\s?)+[^;}]+[;}\\s]*))+~msi',
    'id' => 'manyBase64DecodeChr',
  ),
  403 => 
  array (
    'full' => '~define\\((?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+,\\s?__FILE__\\);\\s?\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\s?=\\s?(?:base64_decode\\([\'"][^\'"]+[\'"]\\));\\s?(?:\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\s?\\.?=\\s?(?:\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\[[\\d\\-\\+\\s(\\)]+\\]\\s?\\.?\\s?)+;\\s?)+eval\\(\\${(?:base64_decode\\()+[\'"][^\'"]+[\'"]\\)+}\\([\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'manyB64CalcEval',
  ),
  404 => 
  array (
    'full' => '~(\\$[^ =]+)\\s{0,10}=\\s{0,10}\'([^\']+)\';\\s{0,10}([^(]+)\\(\\1\\);\\s*function\\s*\\3\\((\\$[^\\)]+)\\)\\{\\s*(\\$[^= ]+)\\s*=\\s*\'[base64_dco.\']+;\\s*(\\$[^= ]+)\\s*=\\s*array\\(((?:(?:\'[\\w+@\\)#%\\(\\$\\*;]\'|\\5\\(\'[^\']+\'\\)),?)+)\\);\\s*((?:(\\$[^= ]+)\\s*=\\s*(?:\\6\\[\\d+\\]\\.?)+;\\s*)+)(\\$[^= ]+)\\s*=\\s*([^;]+);return\\s*eval\\(\\10\\);\\s*\\}~msi',
    'id' => 'da7Q9RnPjm',
  ),
  405 => 
  array (
    'full' => '~(?:\\$\\w{1,50}\\s?=\\s?(?:[\'"][^\'"]+[\'"]|(?:str_replace|\\$\\w{1,50})\\([\'"][^\'"]+[\'"],\\s*[\'"][^\'"]*[\'"],\\s*[\'"][^\'"]+[\'"]\\));\\s*)+(\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s*((?:\\$\\w{1,50}\\()+)[\'"]([^\'"]+)[\'"],\\s?[\'"]{2},\\s?((?:\\$\\w{1,50}\\.?)+)\\)+;)~msi',
    'id' => 'strReplaceVarsCreateFunc',
  ),
  406 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\'[^\']+\';\\s*)+\\$\\w+=(?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?\\s*)+;\\s*(\\$\\w+)\\s*=\\s*\\$\\w+;\\s*(\\$\\w+)\\s*=\\s*\\$\\w+\\(\\1,(?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?\\s*)+\\);\\s*\\2\\s*\\((?:\\$\\w+(?:\\[\'?\\d+\'?\\])?\\s*\\.?,?\\s*)+\\);~msi',
    'id' => 'createFuncDict',
  ),
  407 => 
  array (
    'full' => '~(\\$\\w+)=\'create_function\';(\\$\\w+)=\'\\s*\';(\\$\\w+)=\\1\\(\\2,\'eval\\(array_pop\\(func_get_args\\(\\)+;\'\\);\\3\\((?:(\'[^\']+\',?)+)\\);~msi',
    'id' => 'createFuncArrayPop',
  ),
  408 => 
  array (
    'full' => '~error_reporting\\(\\d\\);\\s*(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s*(?:\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?)+(?:\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\(\\1\\);\\s?)+(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\(\\$\\w{1,50}\\s?=\\s?0\\s?;\\s?\\$\\w{1,50}\\s?\\<\\s?\\$\\w{1,50}\\s?;\\s?\\$\\w{1,50}\\+\\+\\s?\\){\\3\\s?\\.=\\s?(\\$\\w{1,50})\\({1,5}(\\$\\w{1,50})\\(\\$\\w{1,50}\\[\\$\\w{1,50}\\]\\)\\s?\\^\\s?(\\d{1,20})\\)+\\s?;\\s?}\\s?eval\\s?\\(\\3\\);\\s?return;~msi',
    'id' => 'chrOrdB64FuncVars',
  ),
  409 => 
  array (
    'full' => '~class\\s(\\w{1,50})\\s{0,10}{\\s{0,10}private\\sstatic\\s(\\$\\w{1,50});\\s{0,10}static\\sfunction\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?if\\s?\\(!self::(\\$\\w{1,50})\\):\\s?self::(\\w{1,50})\\(\\);\\s?endif;\\s?(\\$\\w{1,50})\\s?=\\s?strlen\\(\\5\\);\\s?(\\$\\w{1,50})\\s?=\\s?base64_decode\\(self::\\2\\[\\4\\]\\);\\s?for\\s?\\((\\$\\w{1,50})\\s?=\\s?0\\s?,\\s?(\\$\\w{1,50})\\s?=\\s?strlen\\(\\9\\);\\s?\\10\\s?!==\\s?\\11;\\s?\\+\\+\\10\\):\\s?\\9\\[\\10\\]\\s?=\\s?chr\\(ord\\(\\9\\[\\10\\]\\)\\s?\\^\\s?ord\\(\\5\\[\\10\\s?%\\s?\\8\\]\\)\\);\\s?endfor;\\s?return\\s\\9;\\s?\\}\\s?private\\sstatic\\sfunction\\s\\7\\(\\)\\s?{\\s?self::\\6\\s?=\\s?array\\(((?:[^=]+=>[^,]+)+)\\);\\s?}\\s?}((?:.*?\\1::\\3\\([^)]+\\))+[;}\\s]+)~msi',
    'id' => 'classArrayDictFunc',
  ),
  410 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?((?:\\2\\s?\\.=\\s?"[^"]+";\\s?)+)(\\$\\w{1,50})\\s?=\\s?"((?:[^";]+;?"?)+)"\\s?;\\s?(\\$\\w{1,50})\\s?=\\s?"((?:[^";]+;?"?)+)"\\s?;\\s?foreach\\(str_split\\(\\2\\)\\s?as\\s?(\\$\\w{1,50})\\)\\s?{\\s?\\1\\s?\\.=\\s?\\(strpos\\(\\6,\\s?\\8\\)\\s?===\\s?false\\)\\s?\\?\\s?\\8\\s?:\\s?\\4\\[strpos\\(\\6,\\s?\\8\\)\\];\\s?}\\s?\\1\\s?=\\s?"\\?>\\1"\\s?;\\s?eval\\(\\s?\\1\\s?\\);~msi',
    'id' => 'concatVarsIterDict',
  ),
  411 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\5\\s?<\\s?strlen\\(\\s?\\2\\s?\\)\\s?;\\s?\\)\\s?for\\((\\$\\w{1,50})\\s?=\\s?0\\s?;\\s?\\6\\s?<\\s?strlen\\(\\s?\\3\\s?\\);\\s?\\6\\+\\+,\\s?\\5\\+\\+\\s?\\)\\s?\\4\\s?\\.=\\s?\\2{\\5}\\s?\\^\\s?\\3{\\6}\\s?;\\s?return\\s\\4;\\s?}\\s?;\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)*eval\\(\\1\\(base64_decode\\([\'"]([^\'"]+)[\'"]\\)\\s?,\\s?[\'"]([^\'"]+)[\'"]\\)\\);\\s?(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)*~msi',
    'id' => 'funcB64TwoArgs',
  ),
  412 => 
  array (
    'full' => '~(?:\\$\\w+=base64_decode\\(\'[^\']+\'\\);)+(?:(\\$\\w+)=str_replace\\(base64_decode\\(\'[^\']+\'\\),\'\',(?:base64_decode\\(\'[^\']+\'\\)|(?:\\$\\w+\\.?)+)\\);)+(\\$\\w+)=\\$\\w+\\(\'\',\\1\\);\\2\\(\\);~msi',
    'id' => 'strReplaceB64',
  ),
  413 => 
  array (
    'full' => '~(\\$\\w+)=str_replace\\(\'([^\']+)\',\'\',\'([^\']+)\'\\);(\\$\\w+)=create_function\\(\'\',\\1\\);\\4\\(\\);~msi',
    'id' => 'createFuncStrReplace',
  ),
  414 => 
  array (
    'full' => '~(\\$\\w+)\\s?=\\s?base64_decode\\(\'([^\']+)\'\\);\\s?(\\$\\w+)\\s?=\\s?\'[\\w\\.]+\';\\s?(\\$\\w+)\\s?=\\s?\\(file_exists\\(\\3\\)\\)\\s?\\?\\s?fopen\\(\\3,\\s?"a\\+"\\)\\s?:\\s?fopen\\(\\3,\\s?"w\\+"\\);\\s?fwrite\\(\\4,\\s?\\1\\);\\s?fclose\\(\\4\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  415 => 
  array (
    'full' => '~((\\$\\w{1,50})\\s*=\\s*"(\\\\[\\w\\\\]+)?";\\s*)+(?:error_reporting\\(0\\);\\s*)?(\\$\\w{1,50})\\s*=\\s*\\$\\w+\\(([\'"][^\'"]+[\'"])\\);\\s*\\4\\s*=\\s*\\2\\(\\4\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+\\(\'[^\']+\',\\4\\);~msi',
    'id' => 'createFuncGzuncompressB64',
  ),
  416 => 
  array (
    'full' => '~(?:\\$\\{"[\\\\x0-9a-fGLOBALS]+"}\\["[^"]+"\\]="[^"]+";)+echo\\s*"[^"]+";if\\(isset\\(\\$_POST\\["[^"]+"\\]\\)\\)\\{date_default_timezone_set\\("[^"]+"\\);(?:(?:(?:\\$\\{)+"[\\\\x0-9a-fGLOBALS]+"}\\["[^"]+"\\]\\}?|\\$\\w+|\\$\\{\\$\\w+\\})=[^;]+;)+move_uploaded_file\\([^\\)]+\\);}if\\(isset\\(\\$_GET\\["[^"]+"\\]\\)\\)\\{echo\\s*"[^;]+";exit\\(0\\);\\}~msi',
    'id' => 'globalsSlashed',
  ),
  417 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s{0,10}((?:\\$\\w{1,50}\\s?=\\s?base64_decode\\([\'"][^\'"]+[\'"]\\);\\s?)+)\\s?\\1\\s?=\\s?(\\$\\w{1,50})\\((\\$\\w{1,50})\\(\\1\\)\\);\\s?(\\$\\w{1,50})\\s?=\\s?(\\$\\w{1,50})\\(\\1\\);\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]{2};\\s?for\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\9\\s?<\\s?\\6;\\s?\\9\\+\\+\\s?\\)\\s?{\\8\\s?\\.=\\s?(\\$\\w{1,50})\\(\\((\\$\\w{1,50})\\(\\1\\[\\9\\]\\)\\s?\\^\\s?(\\d{1,10})\\)\\);}\\s?eval\\(\\8\\);\\s?return;~msi',
    'id' => 'b64VarsFuncEval',
  ),
  418 => 
  array (
    'full' => '~(?:\\@null;\\s*echo\\@null;\\s*)?((?:\\$\\w+=\'\\w+\';\\s*)+)((?:\\$\\w+=(?:\\$\\w+\\.?)+;\\s*)+)(eval\\((?:\\$\\w+\\()+(?:\'[^\']+\'|"[^"]+")\\)+;)(?:\\s*\\@null;)?(exit;)?~msi',
    'id' => 'nullEcho',
  ),
  419 => 
  array (
    'precheck' => 
    array (
      0 => '~exit\\(\\);~msi',
      1 => '~\\@header\\(\\$\\w{1,40}\\);~msi',
      2 => '~(\\$\\w{1,40})\\s?=\\s?\\(\\"(.+)\\"\\);~msi',
    ),
    'full' => '~(\\$\\w{1,40})\\s?=\\s?\\(\\"(.+)\\"\\);.*\\@header\\(\\$\\w{1,40}\\);.*exit\\(\\);~msi',
    'id' => 'arrayReplacing',
  ),
  420 => 
  array (
    'full' => '~((?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]\\w+[\'"];)+\\s*\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?)+;\\s*)+)eval\\((?:\\$\\w{1,50}\\(?)+[\'"][^\'"]+[\'"]\\)+;~msi',
    'id' => 'varConcatedReplaceEval',
  ),
  421 => 
  array (
    'full' => '~(\\$\\w{1,50}+)\\s?=\\s?[\'"]{2};(?:(?:\\$\\w{1,50}\\s?=\\s?[\'"][^\'"]+[\'"];)+\\$\\w{1,50}\\s?\\.=\\s?\\$\\w{1,50};\\s?)+((?:(?:\\$\\w{1,50}\\s?=\\s?[\'"]\\w+[\'"];\\s?)+\\s*\\$\\w{1,50}\\s?=\\s?(?:\\$\\w{1,50}\\.?)+;\\s*)+)\\s?function\\s(\\w{1,50})\\((\\$\\w{1,50}+),\\s?(\\$\\w{1,50}+)\\)\\s?{\\s?return\\sstr_replace\\(\\5,\\s?[\'"]([^\'"]+)[\'"],\\s?\\4\\);\\s?}\\s*eval\\(((?:\\$\\w{1,50}\\()+)\\3\\(\\1,\\s?[\'"]([^\'"]+)[\'"]\\)+;~msi',
    'id' => 'varsConcatedFuncStrReplaceEval',
  ),
  422 => 
  array (
    'full' => '~error_reporting\\(E_ALL\\)\\;\\s?\\$\\w{1,50}\\s?=\\s?[\'"](.*)[\'"]\\;\\s?file_put_contents\\(\\$_SERVER\\[[\'"]DOCUMENT_ROOT[\'"]\\].+base64_decode.+~msi',
    'id' => 'b64putContents',
  ),
  423 => 
  array (
    'full' => '~(?:\\$\\w+=base64_decode\\(\'[^\']+\'\\);)+\\s*(?:\\$\\w+=\\$_SERVER\\[base64_decode\\(\'[^\']+\'\\)\\];)+\\$\\w+="[^"]+";(?:\\$\\w+\\.?=(?:base64_decode\\(\'[^\']+\'\\)\\.?)+;)+mail\\(base64_decode\\(\'[^\']+\'\\),\\$\\w+,\\$\\w+,\\$\\w+\\);\\s*eval(?:\\(\\$\\w+)+\\(+\\$\\w+\\)+;~msi',
    'id' => 'b64WSO',
  ),
  424 => 
  array (
    'full' => '~function\\s*(\\w+)\\(\\)\\s*\\{\\s*(\\$\\w+)\\s*=\\s*\'([^\')]+)\';\\s*(\\$\\w+)\\s*=((?:\\s*(?:\\2\\[\\d+\\]|\'[^\';]+\'+)\\s*\\.?)+);\\s*return\\s*\\4;\\s*\\}\\s*eval\\(\\1\\(\\)\\s*\\.\\s*\'([^\']+)\'\\)+;\\s*\'\\);~msi',
    'id' => 'evalFuncDict',
  ),
  425 => 
  array (
    'fast' => '~((\\$\\w+)=(?:urldecode\\(\'([^\']+)\'\\);|"([^"]+)";))((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)(?:eval\\(\\$\\w+\\(\'([^\']+)\'\\)\\);|\\$\\w+=\\$\\w+\\("",\\$\\w+\\("([^"]+)")(?:\\)\\);\\$\\w+\\(\\);)?~msi',
    'full' => '~((\\$\\w+)=(?|urldecode\\(\'([^\']+)\'\\);|"([^"]+)";))((?:\\$\\w+\\.?=(?:\\$\\w+[\\[\\{][0-9a-fx]+[\\]\\}]\\.?)+;)+)(?|eval\\(\\$\\w+\\(\'([^\']+)\'\\)\\);|\\$\\w+=\\$\\w+\\("",\\$\\w+\\("([^"]+)")(?:\\)\\);\\$\\w+\\(\\);)?~msi',
    'id' => 'urldecodeEval',
  ),
  426 => 
  array (
    'full' => '~((?:\\$\\w+=\'[^\']+\';)+)(\\$\\w+)="([^"]+)";\\s*(eval\\(\'\\?>\'\\.(?:\\$\\w+\\()+\\$\\w+,\\$\\w+\\*\\d+\\),\\$\\w+\\(\\$\\w+,\\$\\w+,\\$\\w+\\),\\s*\\$\\w+\\(\\$\\w+,\\d+,\\$\\w+\\)+);~msi',
    'id' => 'strtrEval',
  ),
  427 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"[^"]+";(?:\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+\\s*"\\);\\s*)+\\$\\w+\\s*=\\s*fopen\\([^\\)]+\\)\\s*or\\s*die\\([^\\)]+\\);\\s*\\$\\w+\\s*=\\s*\\$\\w+;\\s*fwrite\\(\\$\\w+,\\s*\\$\\w+\\);\\s*fclose\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^;]+;\\s*\\$\\w+\\s*=\\s*fopen\\(\\$\\w+,\\s*"w"\\)\\s*or\\s*die\\([^\\)]+\\);\\s*\\$\\w+\\s*=\\s*base64_decode\\("[^"]+\\s*"\\);\\s*fwrite\\(\\$\\w+,\\s*\\$\\w+\\);\\s*fclose\\(\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*"[^"]+";\\s*.*?\\1;\\s*(\\$\\w+)\\s*=\\s*"[^"]+";\\s*[^\\)]+\\);\\s*\\$\\w+\\s*=\\s*"https://api\\.telegram\\.org/bot\\2/sendmessage";\\s*.*?curl_close\\(\\$\\w+\\);~msi',
    'id' => 'manyBase64DecodeContent',
  ),
  428 => 
  array (
    'full' => '~(?:(?:if\\s?\\(file_exists\\("\\w+"\\)\\)\\s?{\\s?}\\s?else\\s?{\\s?)?\\$\\w+\\s?=\\s?fopen\\([\'"][^\'"]+\\.php[\'"],\\s?[\'"]w[\'"]\\);)?\\s?(\\$\\w+)\\s?=\\s?(?:base64_decode\\()?[\'"]([^\'"]+)[\'"]\\)?;\\s?(?:\\$\\w{1,50}\\s?=\\s?fopen\\([\'"][^\'"]+[\'"],\\s?[\'"]\\w[\'"]\\);\\s?)?(?:echo\\s?)?fwrite\\(\\$\\w{1,50}\\s?,\\s?(?:base64_decode\\()?\\$\\w{1,50}\\)?\\);\\s?fclose\\(\\$\\w{1,50}\\);\\s?}?~msi',
    'id' => 'funcFile',
  ),
  429 => 
  array (
    'full' => '~(?:\\$\\w+=\'[^\']+\';)*(\\$\\w+)=create_function\\("",base64_decode\\("([^\']+)"\\)\\);\\1\\(\\);~msi',
    'id' => 'createFuncB64',
  ),
  430 => 
  array (
    'full' => '~(\\$\\w+)=(\\d+);(\\$\\w+)=explode\\("([^"]+)","([^"]+)"\\);(\\$\\w+)="";foreach\\(\\3\\s*as\\s*(\\$\\w+)\\)\\s*if\\s*\\(\\7!=""\\)\\s*\\6\\.=chr\\(\\7\\^\\1\\);\\s*eval\\(\\6\\);~msi',
    'id' => 'chrXor',
  ),
  431 => 
  array (
    'full' => '~(\\$\\w+)\\s*=\\s*"([^"]+)";\\1\\s*=((?:\\s*\\w+\\()+\\1\\)+);(\\$\\w+)\\s*=\\s*"[^"]+";\\s*file_put_contents\\(\\4,\\s*\\1\\);include\\(\\4\\);unlink\\(\\4\\);~msi',
    'id' => 'includeFilePutContents',
  ),
  432 => 
  array (
    'full' => '~\\$\\w+\\s*=\\s*function\\(\\$\\w+\\s*,\\s*\\$\\w+\\)\\s*\\{\\$\\w+="[^"]+";return\\s*\\$\\w+;\\s*\\};\\s*(\\$\\w+)=(\'([^\']+)\');\\$\\w+\\s*=\\s*function\\s*\\(\\)\\{\\s*\\$\\w+="[^"]+";return\\s*\\$\\w+;\\};\\s*function\\s*\\w+\\(\\$\\w+\\s*\\)\\s*\\{\\$\\w+\\s*=\\s*"[^"]+";\\$\\w+=\\$\\w+\\[[\\d\\s\\+\\-\\/\\*\\(\\)]+\\][^;]+;\\s*(?:\\$\\w+\\.=[^;]+;)+return\\s*\\$\\w+\\(\\$\\w+\\);\\}\\s*function\\s*\\w+\\s*\\(\\$\\w+\\)\\s*\\{\\$\\w+\\s*=[^}]+\\}\\s*\\1=\\w+\\(\\1\\);\\1\\s*=\\s*\\w+\\(\\1\\);\\s*eval\\s*\\(\\$\\w+\\);~msi',
    'id' => 'edoced_46esab_etalfnizg',
  ),
  433 => 
  array (
    'full' => '~function\\s(\\w{1,20})\\((\\$\\w{1,100})\\)\\s?{\\s{0,2}\\2\\s?=\\s?gzinflate\\(@base64_decode\\(\\2\\)\\);\\s{0,2}for\\(\\$\\w{1,10}=0;\\$\\w{1,10}<strlen\\(\\2\\);\\$\\w{1,10}\\+\\+\\)\\s{0,2}{\\s?\\2\\[\\$\\w\\]\\s?=\\s?chr\\(ord\\(\\2\\[\\$\\w\\]\\)-1\\);}\\s{0,2}return \\2;\\s{0,2}}\\s{0,2}define\\(["\']\\w{1,100}[\'"],\\s?[\'"]\\w{1,100}[\'"]\\);eval\\(\\1\\([\'"]([\\d\\w+=\\/]*)["\']\\)\\);~mis',
    'id' => 'gzinflateBase64Decode',
  ),
  434 => 
  array (
    'full' => '~(?:if\\s*\\(\\!defined\\("[^"]+"\\)\\)\\s*define\\("[^"]+",\\s*"[^"]+"\\);\\s*\\$GLOBALS\\[[^\\]]+\\]=explode\\("[^"]+",\\s*"[^"]+"\\);\\s*)+if\\(\\!defined\\(pack\\(\\$GLOBALS\\[[^]]+\\]\\[\\d+\\],\\s*\\$GLOBALS\\[[^]]+\\]\\[\\d+\\]\\)+\\s*define\\(.*pack\\(\\$GLOBALS\\[[^]]+\\]\\[[a-fx\\d]+\\],\\s*\\$GLOBALS\\[[^]]+\\]\\[[a-fx\\d]+\\]\\)+[^;]+;\\s*~msi',
    'id' => 'byteCodeData',
  ),
  435 => 
  array (
    'full' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);\\$GLOBALS\\[\\w+\\]=explode\\("([^"])+",\\s*"[^"]+"\\);if\\(!defined\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)\\s*define\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\),\\s*(?:ord\\(\\d+\\)|pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\))\\);)+\\$GLOBALS\\[\\w+\\]=explode\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\),pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);if\\(!defined\\(\'([^\']+)\'\\)\\)define\\(\'\\2\',__FILE__\\);\\s*\\$GLOBALS\\["(\\w+)"\\]=array\\("([^\\)]+)"\\);eval\\(\\$\\{"[^"]+"\\}\\["\\3"\\]\\[\\d+\\]\\("([^"]+)"\\)\\);if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);\\$GLOBALS\\[\\w+\\]=explode\\("([^"])+",\\s*"[^"]+"\\);if\\(!\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)\\s*\\{exit\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);while\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\)\\)require\\s*\\(pack\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]],\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\)\\);\\}while\\(\\$GLOBALS\\[\\w+\\][\\{\\[][0-9a-fx]+[\\}\\]]\\(\\)<\\([\\w\\+\\-\\*\\/]+\\)\\)\\s*return;~msi',
    'id' => 'OESNS_cms',
  ),
  436 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?base64_decode\\(\\1\\);\\s?if\\s?\\(file_exists\\([\'"][^\'"]+[\'"]\\)\\)\\s?{header\\([\'"][^\'"]+[\'"]\\);\\s?}\\s?else\\s?{\\s?file_put_contents\\([\'"][^\'"]+[\'"],\\s?\\3\\);\\s?}~msi',
    'id' => 'filePutContentsB64Var',
  ),
  437 => 
  array (
    'fast' => '~(?:define\\([\'"][^\'"]+["\'],[\'"]{2}\\);\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\s?return\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(\\$\\w{1,50}\\);\\s?(\\w{1,100})\\(\\$\\w{1,50}\\);\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?[\'"]([^\'"]+)[\'"];\\sreturn\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?global\\s?\\$\\w{1,50};\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\5\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?\\@?eval\\((?:`[^`]+`\\s?\\.\\s?)?\\$\\w{1,50}\\s?\\.\\s?\\$\\w{1,50}\\([\'"]H\\*[\'"],\\s?\\$\\w{1,50}\\)\\.\\$\\w{1,50}\\);\\s?\\}\\s?\\2\\(\\)|function\\s*(\\w+)\\(\\)\\{\\s*\\$\\w+=call_user_func\\("[^"]+","[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*call_user_func\\("\\$\\w+","\\$\\w+"\\);\\s*return\\s*\\$\\w+;\\s*\\}\\s*(\\$\\w+)=\\w+\\(\\);\\s*class\\s*(\\w+)\\s*\\{\\s*public\\s*\\$(\\w+)\\s*=\\s*\'\';\\s*function\\s*__destruct\\(\\)\\{\\s*\\$\\w+=&(\\$\\w+)\\."";\\s*\\$\\w+="\\$this->\\w+";\\s*eval\\([^\\)]+\\);\\s*\\}\\s*\\}\\s*(\\$\\w+)=pack\\(\'H\\*\',\\$\\w+\\);\\s*(\\$\\w+)\\s*=\\s*new\\s*\\w+;\\s*\\$\\w+->\\w+\\s*=\\s*"\\$\\w+");~msi',
    'full' => '~(?|define\\([\'"][^\'"]+["\'],[\'"]{2}\\);\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?str_rot13\\(\\$\\w{1,50}\\);\\s?return\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\1\\(\\$\\w{1,50}\\);\\s?(\\w{1,100})\\(\\$\\w{1,50}\\);\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?[\'"]([^\'"]+)[\'"];\\sreturn\\s\\$\\w{1,50};\\s?\\}\\s?function\\s(\\w{1,100})\\(\\$\\w{1,50}\\)\\s?\\{\\s?global\\s?\\$\\w{1,50};\\s?\\$\\w{1,50}\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?\\$\\w{1,50}\\s?=\\s?\\5\\(\\$\\w{1,50}\\);\\s?\\$\\w{1,50}\\s?=\\s?[\'"]{2};\\s?\\@?eval\\((?:`[^`]+`\\s?\\.\\s?)?\\$\\w{1,50}\\s?\\.\\s?\\$\\w{1,50}\\([\'"]H\\*[\'"],\\s?\\$\\w{1,50}\\)\\.\\$\\w{1,50}\\);\\s?\\}\\s?\\2\\(\\)|function\\s*(\\w+)\\(\\)\\{\\s*\\$\\w+=call_user_func\\("[^"]+","[^"]+"\\);\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*\\$\\w+\\s*=\\s*call_user_func\\("\\$\\w+","\\2"\\);\\s*return\\s*\\$\\w+;\\s*\\}\\s*(\\$\\w+)=\\1\\(\\);\\s*class\\s*(\\w+)\\s*\\{\\s*public\\s*\\$(\\w+)\\s*=\\s*\'\';\\s*function\\s*__destruct\\(\\)\\{\\s*\\$\\w+=&(\\$\\w+)\\."";\\s*\\7="\\$this->\\6";\\s*eval\\([^\\)]+\\);\\s*\\}\\s*\\}\\s*(\\$\\w+)=pack\\(\'H\\*\',\\4\\);\\s*(\\$\\w+)\\s*=\\s*new\\s*\\5;\\s*\\9->\\6\\s*=\\s*"\\8");~msi',
    'id' => 'strRot13PackFuncs',
  ),
  438 => 
  array (
    'full' => '~if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);\\s?\\$GLOBALS\\[(\\w{1,50})\\]\\s?=\\s?explode\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?if\\(\\!defined\\(pack\\(\\$GLOBALS\\[\\w{1,50}\\]\\[\\w+\\],\\s?\\$GLOBALS\\[\\w{1,50}\\]{\\d+}\\)\\)\\)\\s?define\\(pack\\(\\$GLOBALS\\[\\w{1,50}\\]\\[\\w+\\],\\s?\\$GLOBALS\\[\\w{1,50}\\]{\\d+}\\),\\s?ord\\(\\d+\\)\\);\\s?if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"]\\s?,\\s?__FILE__\\);\\s?\\$GLOBALS\\[[\'"]([^\'"]+)[\'"]\\]\\s?=\\s?array\\(((?:"[^\'"]+"\\s?,?\\s?)+)\\);\\s?(eval\\(\\$GLOBALS\\["\\4"\\]\\[(\\d+)\\]\\("(.*)"\\)\\);)\\s?if\\(\\!defined\\([\'"][^\'"]+[\'"]\\)\\)\\s?define\\([\'"][^\'"]+[\'"]\\s?,\\s?[\'"][^\'"]+[\'"]\\);\\s?\\$GLOBALS\\[(\\w+)\\]\\s?=\\s?explode\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?(?:.*?\\$GLOBALS\\[\\9\\][[{]\\d+[]}])+\\)+;~msi',
    'id' => 'definedGlobalsEval',
  ),
  439 => 
  array (
    'full' => '~error_reporting\\(0\\);\\s*(\\$[^=]+)=\'([^\']+)\';((?:\\$[^=]+=(?:\\1\\[\\d+\\]\\.?)+;)+)\\$[^=]+=(?:\\$[^\\(]+\\()+\'\\\\\\\\\',\'/\',__FILE__\\)+;\\$[^=]+=\\$[^\\(]+\\(\\$[^)]+\\);\\$[^=]+=\\$[^;]+;\\$[^=]+=\\$[^\\(]+\\(\'\',\\$[^\\)]+\\)\\.\\$[^\\(]+\\(\\$[^,]+,0,\\$[^\\(]+\\([^,]+,\'@?ev\'\\)\\);(\\$[^=]+)=\\$[^\\(]+\\([^;]+;(?:\\$[^=]+=)+NULL;eval\\((\\$[^\\(]+)\\((\\$[^\\(]+)\\(\\4,\'\',(\\$[^\\(]+)\\(\'([^\']+)\',\'([^\']+)\',\'([^\']+)\'\\)\\)\\)\\);unset\\(\\$[^\\)]+\\);return;\\?>\\s*(.*)~msi',
    'id' => 'evalB64Strtr',
  ),
  440 => 
  array (
    'full' => '~function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*return\\s*base64_decode\\(\\2\\);\\s*\\}\\s*function\\s*(\\w+)\\((\\$\\w+),\\s*(\\$\\w+)\\)\\s*\\{\\s*\\4\\s*=\\s*\\1\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*strlen\\(\\4\\);\\s*(\\$\\w+)\\s*=\\s*strlen\\(\\$\\w+\\);\\s*if\\s*\\(\\6\\s*\\<=\\s*\\7\\)\\s*\\{\\s*return\\s*\\4\\s*\\^\\s*\\5;\\s*\\}\\s*for\\s*\\((\\$\\w+)\\s*=\\s*0;\\s*\\8\\s*\\<\\s*\\6;\\s*\\+\\+\\8\\)\\s*\\{\\s*\\4\\[\\8\\]\\s*=\\s*\\4\\[\\8\\]\\s*\\^\\s*\\5\\[\\8\\s*\\%\\s*\\7\\];\\s*\\}\\s*return\\s*\\4;\\s*\\}\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*\\3\\(\\9,\\11\\);\\s*eval\\s*\\(\\13\\);~msi',
    'id' => 'evalXorKey',
  ),
  441 => 
  array (
    'fast' => '~(?>((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*))(?>(\\$\\w{1,100})=\'([^\']+)\';\\s*)((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\s*\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*)\\s*eval\\s*\\(\\2\\);+\\s*((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*);~msi',
    'full' => '~(?>((?:\\$\\w+\\s*=\\s*function\\s*\\([^\\)]+\\)\\s*\\{[^}]+\\};\\s*|\\s{0,10}function\\s*\\w+\\s*\\([^\\)]*\\)\\s*\\{\\s*[^\\}]+\\})*))(?>(\\$\\w{1,100})=\'([^\']+)\';\\s*)(?1)\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*(?1)\\s*\\2\\s*=\\s*\\$?\\w+\\(\\2\\);\\s*(?1)\\s*eval\\s*\\(\\2\\);+\\s*(?1);~msi',
    'id' => 'evalB64Gzinflate',
  ),
  442 => 
  array (
    'fast' => '~(?:\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)?(?:(\\${"([\\w\\\\]+)"}\\["[\\w\\\\]+"])="[\\w\\\\]+";){2}(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]})=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]};(?:\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]}=\\w{1,5};)?\\(count\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)==\\d+&&in_array\\(gettype\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)\\.count\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\),\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\)\\)\\?\\(\\((\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\])=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\.\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\&\\&\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\)\\&\\&\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}=\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\],\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\(\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\[\\d+\\]\\)\\)\\)\\&\\&\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]}\\(\\)\\):\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"]};~msi',
    'full' => '~(?:\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]="[\\w\\\\]+";)?(?:(\\${"([\\w\\\\]+)"}\\["(?2)"])="(?2)";){2}(\\${(?1)})=(?3);(?:\\${\\${"[\\w\\\\]+"}\\["[\\w\\\\]+"\\]}=\\w{1,5};)?\\(count\\((?3)\\)==\\d+&&in_array\\(gettype\\((?3)\\)\\.count\\((?3)\\),(?3)\\)\\)\\?\\(\\(((?3)\\[\\d+\\])=(?4)\\.(?4)\\)\\&\\&\\((?4)=(?4)\\((?4)\\)\\)\\&\\&\\((?3)=(?4)\\((?4),(?4)\\((?4)\\)\\)\\)\\&\\&(?3)\\(\\)\\):(?3);~msi',
    'id' => 'onelineBackdoor',
  ),
  443 => 
  array (
    'fast' => '~(?:\\$\\w+\\s*=\\s*\'[urldeco]+\';)+\\s*(?:(\\$\\w+)=(?:\\$\\w+\\.?)+;)?(\\$\\w+)\\s*=\\s*\\1\\([\'"]([%0-9a-f]+)[\'"]\\);\\s*(((\\$\\w+)\\s*\\.?=(\\s*\\$\\w+\\{\\d+\\}\\.?)+;\\s*)+)\\s*eval\\(\\6\\("([^"]+)"\\)\\);~msi',
    'full' => '~(?:\\=@null;)?(?:\\$\\w+\\s*=\\s*\'[urldeco]+\';)+\\s*(?:(\\$\\w+)=(?:\\$\\w+\\.?)+;)?(\\$\\w+)\\s*=\\s*\\1\\([\'"]([%0-9a-f]+)[\'"]\\);\\s*(((\\$\\w+)\\s*\\.?=(\\s*\\$\\w+\\{\\d+\\}\\.?)+;\\s*)+)\\s*(eval\\(\\6\\("([^"]+)"\\)\\);)~msi',
    'id' => 'urlDecodeDict',
  ),
  444 => 
  array (
    'full' => '~class\\s*lutucope\\s*\\{\\s*(var\\s*\\$(\\w+)\\s*=\\s*"([^"]+)";\\s*)(var\\s*\\$(\\w+)\\s*=\\s*array\\(([^\\)]+)\\);\\s*)(public\\s*\\$(\\w+)\\s*=\\s*array\\("([^\\)]+)"\\);\\s*)public\\s*\\$(\\w+)\\s*=\\s*false;\\s*public\\s*\\$(\\w+)\\s*=\\s*false;\\s*public\\s*\\$(\\w+)\\s*=\\s*false;\\s*var\\s*\\$\\w+\\s*=\\s*null;\\s*var\\s*\\$\\w+\\s*=\\s*null;\\s*(var\\s*\\$(\\w+)\\s*=\\s*"([^"]+)";\\s*)(var\\s*\\$\\w+\\s*=\\s*"([^"]+)";).*?\\11\\s*=\\s*\\$\\w+;\\s*return\\s*true;.*?\\11\\)\\s*\\{\\s*@?eval\\(\\$\\w+\\-\\>\\11\\);.*?\\11\\s*\\)\\s*\\{\\s*@?eval\\(\\$\\w+\\-\\>\\11\\);\\s*\\}\\s*else\\s*\\{\\s*@eval\\(\\$\\w+\\-\\>\\10\\);\\s*\\}\\s*\\}~msi',
    'id' => 'wpMlwPluginGegelShell',
  ),
  445 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s?\\@include\\s?(?:\\1\\[\\d{1,5}\\]\\.?)+;~msi',
    'id' => 'dictVarRange',
  ),
  446 => 
  array (
    'fast' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);(\\$GLOBALS\\[\\w+\\])=explode\\(\'([^"])+\',\\s*\'[^\']+\'\\);)+if\\(!defined\\((pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\))\\)\\)(call_user_func\\(pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\),pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\),pack\\((\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]),\\s*\\$GLOBALS\\[\\w+\\]\\[[\\w]+\\]\\)\\);).*?call_user_func_array\\(\'explode\',.*?call_user_func_array\\("pack",.*?call_user_func_array\\("is_object",.*?array_merge\\(array\\(\\$\\w+\\),\\$GLOBALS\\[[^}]+}[^}]+}~msi',
    'full' => '~(?:if\\(!defined\\("\\w+"\\)\\)\\s*define\\("\\w+","\\w+"\\);(\\$GLOBALS\\[\\w+\\])=explode\\(\'([^"])+\',\\s*\'[^\']+\'\\);)+if\\(!defined\\((pack\\(((?1)\\[[\\w]+\\]),\\s*(?4)\\))\\)\\)(call_user_func\\((?3),(?3),(?3)\\);).*?call_user_func_array\\(\'explode\',.*?call_user_func_array\\("pack",.*?call_user_func_array\\("is_object",.*?array_merge\\(array\\(\\$\\w+\\),\\$GLOBALS\\[[^}]+}[^}]+}~msi',
    'id' => 'thinkPHP_cms',
  ),
  447 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?function\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][base64_decode]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\2\\)\\s?;\\s?}\\s?;.*?(\\$\\w{1,50})\\s?=\\s?function\\s?\\(\\s?\\$\\w{1,50}\\s?\\)\\s?{\\s?eval\\s?\\(\\$\\w{1,50}\\);[^}]+}\\s?;\\s?.*?function\\s(\\w{1,50})\\s?\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][gzinflate]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\5\\);\\s?}\\s?(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\$\\w{1,50}\\s?=\\s?\\1\\(\\6\\);\\s?\\6\\s?=\\s?\\4\\(\\6\\);\\s?\\3\\s?\\(\\6\\);+~msi',
    'id' => 'varFuncsCallEvalV1',
  ),
  448 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})\\s?=\\s?function\\s?\\((\\$\\w{1,50})\\s?\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][base64_decode]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\4\\)\\s?;\\s?}\\s?;.*?\\1\\s?=\\s?\\3\\(\\1\\);\\s?\\1\\s?=\\s?(\\w+)\\(\\1\\);\\s?(\\w+)\\s?\\(\\1\\);.*?function\\s\\6\\s?\\(\\$\\w{1,50}\\s?\\)\\s?{\\s?eval\\s?\\(\\$\\w{1,50}\\);\\s?return\\s?[^;]+;\\s?}\\s?function\\s?\\5\\((\\$\\w{1,50})\\)\\s?{\\$\\w{1,50}\\s?=\\s?[\'"][gzinflate]{6,}[\'"];.*?return\\s\\$\\w{1,50}\\(\\7\\);\\s?}\\s?;~msi',
    'id' => 'varFuncsCallEvalV2',
  ),
  449 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"(\\\\[x\\d][^"]+)";\\s?((?:\\$\\w{1,50}\\s?=(?:\\s?\\1\\[[\\d\\s/+\\-*()]+\\]\\s?\\.?)+;\\s?)+)(\\$\\w{1,50})\\s?=\\s?"(\\\\[x\\d][^"]+)";\\s?((?:(\\$\\w{1,50})\\s?\\.?=\\s?\\$\\w{1,50};\\s)+)\\@?\\(\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\([\'"]{2},\\s?\\7\\)\\);\\s?\\@?\\$\\w{1,50}\\(\\);~msi',
    'id' => 'dictStrippedVarsCreateFunc',
  ),
  450 => 
  array (
    'full' => '~\\$GLOBALS\\[\'[^\']+\'\\]=\'[^\']+\';((\\$\\w+)="([^"]+)";(\\$\\w+)=substr\\(\\2,\\s*\\2\\[(\\d+)\\],\\s*\\2\\[(\\d+)\\]\\);(\\$\\w+)=substr\\(\\2,\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\],\\2\\[(\\d+)\\]\\);\\s*(\\$\\w+)=substr\\(\\2,\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\]\\+\\2\\[(\\d+)\\]\\);)\\s*(define\\(\'([^\']+)\',\'[^\']+\'\\);\\$_SERVER\\[\\16\\]=\\4\\(\'([^\']+)\',\\7\\(substr\\(\\11\\(\'([^\']+)\'\\),(0x\\w+),\\s*(\\-\\d+)\\)+;).+?((.+?\\$_SERVER\\[\\16\\]\\[[0-9a-fx]+\\]).+?)+[^}]+\\}\\}\\}[^}]+\\}return\\s*\\$\\w+;\\}~msi',
    'id' => 'dictFuncsSubstr',
  ),
  451 => 
  array (
    'full' => '~error_reporting\\(0\\);@?set_time_limit\\(0\\);ini_set\\(\'memory_limit\',\\s*\'-?\\d+\'\\);(\\$\\w+)\\s*=\\s*\'[^\']+\';(\\$\\w+)\\s*=\\s*array\\(([^\\)])+\\);function\\s*(\\w+)\\((\\$\\w+)\\)\\{\\s*\\$\\w+\\s*=\\s*strlen\\(trim\\(\\5\\)\\);\\s*\\$\\w+\\s*=\\s*\'\';\\s*for\\s*\\([^{]+\\{\\s*\\$\\w+\\s*\\.=\\s*pack\\("C",\\s*hexdec\\(substr\\(\\5,\\s*\\$\\w+,\\s*2\\)\\)\\);\\s*\\}\\s*return\\s*\\$\\w+;\\}if\\s*\\((?:md5\\()+\\$_SERVER\\[\'[^\']+\'\\]\\)+\\s*\\!==\\s*\\1\\)\\s*\\{\\s*header\\(\'HTTP/1\\.1 404 Not Found\'\\);\\s*header\\("status: 404 Not Found"\\);\\s*exit\\(\\);\\}((\\$\\w+)\\s*=\\s*\'\\4\';(?:\\$\\w+\\s*=\\s*\\7\\(\'[^\']+\'\\);\\s*|\\$\\w+\\s*=\\s*"";)+if\\s*\\(!function_exists\\(\\$\\w+\\)\\)\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+,[^}]+\\}\\s*do\\s*\\{[^}]+\\}\\s*while\\s*[^}]+\\}\\}\\s*else\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+;\\s*return\\s*\\$\\w+\\(\\$\\w+\\);\\s*\\}\\}if\\s*\\(!function_exists\\(\\$\\w+\\)\\)\\s*\\{\\s*function\\s*\\w+\\(\\$\\w+\\)\\s*\\{\\s*global\\s*\\$\\w+,[^}]+\\}\\s*[^}]+\\}[^}]+\\}\\s*while\\s*\\([^}]+\\}\\}\\s*else\\s*\\{\\s*function\\s*\\w+\\([^}]+\\}\\}(\\$\\w+)\\s*=\\s*\\7\\(\'[^\']+\'\\);(\\$\\w+)\\s*=\\s*@?\\8\\(\'([^\']+)\',\\s*\\$\\w+\\.\'\\(\'\\.\\$\\w+\\.(?:\'[^\')]*\'\\.)+\'\\(\\10\\)\'\\.\'\\)\'\\.\'\\)\'\\.\';\'\\);\\9\\(\'([^\']+)\'\\);)~msi',
    'id' => 'gulf2',
  ),
  452 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s*(?:(\\$\\w+)=\\$\\{(?:\\1\\[\\d+\\]\\.?)+\\};)+(?:if\\(in_array\\(gettype\\(\\4\\)\\."\\d+",\\4\\)\\)\\{\\4\\[(\\d+)\\]=(?:\\4\\[\\d+\\]\\.?)+;\\4\\[(\\d+)\\]=\\4\\[\\5\\]\\(\\4\\[\\6\\]\\);@?\\4=\\4\\[\\6\\]\\(\\4\\[\\d+\\],\\4\\[\\5\\]\\(\\$\\{\\4\\[\\d+\\]\\}\\[\\d+\\]\\)\\);\\4\\(\\);\\}|@?\\(count\\(\\4\\)==\\d+&&in_array\\(gettype\\(\\4\\)\\.count\\(\\4\\),\\4\\)\\)\\?\\(\\(\\4\\[\\d+\\]=(?:\\4\\[\\d+\\]\\.?)+\\)&&\\(\\4\\[\\d+\\]=\\4\\[\\d+\\]\\(\\4\\[\\d+\\]\\)\\)&&\\(@?\\4=\\4\\[\\d+\\]\\(\\4\\[\\d+\\],\\4\\[\\d+\\]\\(\\$\\{\\4\\[\\d+\\]\\}\\[\\d+\\]\\)\\)\\)&&\\4\\(\\)\\):\\4;\\s*)\\s*(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);(\\$\\w+)\\s*=\\s*array\\((@?\\$\\{(?:\\7\\[\\d+\\]\\.?)+\\}\\[(?:\\7\\[\\d+\\]\\.?)+\\],\\s*(?:(?:\\7\\[\\d+\\]\\.?)+,?\\s*)+@?\\$\\{(?:\\7\\[\\d+\\]\\.?)+\\}\\[(?:\\7\\[\\d+\\]\\.?)+\\]),\\);\\s*(\\$\\w+\\s*=\\s*\\10\\[\\d+\\][^}]+\\})~msi',
    'id' => 'dictVarRange2',
  ),
  453 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?range\\(\\s?chr\\(\\s?(\\d+)\\)\\s?,\\s?chr\\(\\s?(\\d+)\\)\\s?\\);\\s*(\\$\\w+)=(?:\\1\\[\\d+\\]\\.?)+;\\s*(\\$\\w+)=@?\\4\\((?:\\1\\[\\d+\\]\\.?)+,(?:\\1\\[\\d+\\]\\.?)+\\);@?\\5\\("([^"]+)"\\);~msi',
    'id' => 'dictVarRange2',
  ),
  454 => 
  array (
    'fast' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$\\w+\\s*=\\s*"\\w+";\\s*error_reporting\\([^\\)]+\\);\\s*set_time_limit\\(\\d+\\);\\s*\\$\\w+\\s*=\\s*\\d+;\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";.*?\\3,\\s*base64_decode\\(\\1\\),\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^}]+}~msi',
    'full' => '~\\$\\w+\\s*=\\s*\\d+;\\s*\\$\\w+\\s*=\\s*"\\w+";\\s*error_reporting\\([^\\)]+\\);\\s*set_time_limit\\(\\d+\\);\\s*\\$\\w+\\s*=\\s*\\d+;\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";\\s*(\\$\\w+)\\s*=\\s*"([^"]+)";.*?\\3,\\s*base64_decode\\(\\1\\),\\s*\\$\\w+,\\s*\\$\\w+\\);\\s*\\$\\w+\\s*=\\s*[^}]+}~msi',
    'id' => 'fileInjector',
  ),
  455 => 
  array (
    'full' => '~((?:(?>(?:\\$\\s?\\{\\s?)?\\$\\w{1,50}\\s?\\}?\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)|(?>\\$\\s?{\\s?(?:\\$\\s?\\{)?\\s?"GLOBALS"\\s?}\\s?\\[[\'"][^\'"]+[\'"]\\]\\s?}?\\s?=\\s?[\'"][^\'"]+[\'"];\\s?)|(?>echo\\s?"[^"]*";\\s?))+(?:\\${\\${[\'"]GLOBALS[\'"]}\\[[\'"][^\'"]+[\'"]\\]}\\s?=\\s?(?:\\$\\w{1,50}\\s?\\.?\\s?|\\${\\${[\'"]GLOBALS[\'"]}\\[[\'"][^\'"]+[\'"]\\]}\\s?\\.?\\s?)+;\\s?)*)eval\\((?:(?:(?:\\$\\s?\\{\\s?\\$\\w+\\s?\\}\\s?\\()?\\$\\s?{\\s?\\$\\s?{\\s?[\'"]GLOBALS[\'"]\\s?}\\s?\\[\\s?[\'"][^\'"]+[\'"]\\s?\\]\\s?}\\s?\\()+(?:[\'"][^\'"]+[\'"]|\\(\\$\\s?\\{\\s?\\$\\s?\\{\\s?"GLOBALS"\\s?\\}\\s?\\["[^"]+"\\]\\s?\\})\\)+\\));~msi',
    'id' => 'globalsEvalFuncs',
  ),
  456 => 
  array (
    'fast' => '~(\\$[^\\s=\\[\\]]+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?([\\w\\W][^\\s(]+)\\(\\1\\);\\s?function\\s\\3\\((\\$[^\\s)]+)\\)\\s?{\\s?(\\$[^\\s)]+)\\s?=\\s?[\'"base64dco_.]+;\\s?(\\$[^\\s)]+)\\s?=\\s?array\\(((?:(?:[\'"][\\w\\+@()#_%\\$*;][\'"]\\s?,?|\\5\\([\'"][^\'"]+[\'"]\\),?)+))\\);\\s?((?:(?:\\$[^\\s)]+)\\s?=\\s?(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?)+)\\s?(\\$[^\\s)]+)\\s?=\\s?((?:\\$[^.]+\\.?)+)\'\\4\'\\.(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?return\\seval\\(\\9\\);\\s?(?:error_reporting\\(\\d\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?NULL\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?\\d\\);\\s?})?~msi',
    'full' => '~(\\$[^\\s=\\[\\]]+)\\s?=\\s?[\'"]([^\'"]+)[\'"];\\s?([\\w\\W][^\\s(]+)\\(\\1\\);\\s?function\\s\\3\\((\\$[^\\s)]+)\\)\\s?{\\s?(\\$[^\\s)]+)\\s?=\\s?[\'"base64dco_.]+;\\s?(\\$[^\\s)]+)\\s?=\\s?array\\(((?:(?|[\'"][\\w\\+@()#_%\\$*;][\'"]\\s?,?|\\5\\([\'"][^\'"]+[\'"]\\),?)+))\\);\\s?((?:(?:\\$[^\\s)]+)\\s?=\\s?(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?)+)\\s?(\\$[^\\s)]+)\\s?=\\s?((?:\\$[^.]+\\.?)+)\'\\4\'\\.(?:\\6\\[\\d{1,5}\\]\\.?)+;\\s?return\\seval\\(\\9\\);\\s?(?:error_reporting\\(\\d\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?NULL\\);\\s?ini_set\\([\'"][^\'"]+[\'"],\\s?\\d\\);\\s?})?~msi',
    'id' => 'arrayDictCharsConcatStr',
  ),
  457 => 
  array (
    'full' => '~(\\$\\w{1,50})\\s?=\\s?"(\\\\[\\\\\\w]+)";\\s?((?:\\$\\w{1,50}\\s?=\\s?substr\\(\\1,\\s?(?:\\1\\[\\d+\\]\\+?\\s?)+(?:,\\s?\\1\\[\\d+\\])?\\);)+)define\\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\\);(\\$\\w{1,50}\\[\\w{1,50}\\])\\s?=\\s?(\\$\\w{1,50})\\([\'"]([^"\']+)[\'"],\\s?(\\$\\w{1,50})\\(substr\\((\\$\\w{1,50})\\([\'"]([^\'"]+)[\'"]\\)\\s?,([\\d\\w]+)\\s?,\\s?(-?\\d{1,5})\\)+;\\s*((?:.*?\\4\\[[\\dx]+\\])+[^;}]+[;}]*)~msi',
    'id' => 'slashedDictFuncGetVar',
  ),
  458 => 
  array (
    'full' => '~((?:\\$\\w{1,50}\\s?=\\s?[\'"][^\\\\\'"]+[\'"];\\s?)+)(\\$\\w{1,50})\\s?=\\s?"([\\\\\\w]+)";\\s?\\2\\s?\\.?=\\s?"([\\\\\\w]+)";\\s?(\\$\\w{1,50})\\s?=\\s?((?:\\$\\w{1,50}\\.?)+);\\s?for\\((\\$\\w{1,50})=(\\d+);\\7<=(\\d+);\\7\\+\\+\\)\\s?\\5\\s?=\\s?\\2\\(\\5\\);\\s?eval\\(\\5\\);~msi',
    'id' => 'concatVarsInLoopEval',
  ),
  459 => 
  array (
    'full' => '~function\\s(\\w{1,50})\\((\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+[\'"]{2};\\s?foreach\\(\\2\\sas\\s(\\$\\w{1,50})\\)\\s?{\\s?\\5[\\s.=]+\\3\\[\\6\\];\\s?}\\s?return\\s\\5;\\s?}\\s?function\\s(\\w{1,50})\\((\\$\\w{1,50}),\\s?(\\$\\w{1,50})\\)\\s?{\\s?(\\$\\w{1,50})[\\s=]+array\\(((?:\\d+,?)+)\\);\\s?(\\$\\w{1,50})[\\s=]+\\1\\(\\10\\);\\s?(\\$\\w{1,50})[\\s=]+\\12\\(\\13\\);\\s?(\\$\\w{1,50})[\\s=]+array\\(((?:\\d+,?)+)\\);\\s?(\\$\\w{1,50})[\\s=]+\\1\\(\\14\\);\\s?(\\$\\w{1,50})[\\s=]+\\16\\(\\13\\);\\s?(\\$\\w{1,50})[\\s=]+\\16\\(\\9\\);\\s?if\\s?\\(\\17\\s<=\\s\\18\\)\\s?{\\s?return\\s\\13\\s\\^\\s\\9;\\s?}\\s?for\\s?\\((\\$\\w{1,50})\\s?=\\s?0;\\s?\\19\\s<\\s\\17;\\s?\\+\\+\\19\\)\\s?{\\s?\\13\\[\\19\\]\\s?=\\s?\\13\\[\\19\\]\\s?\\^\\s?\\9\\[\\19\\s%\\s?\\18\\];\\s?}\\s?return\\s\\13;\\s?}\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+[\'"]([^\'"]+)[\'"];\\s?(\\$\\w{1,50})[\\s=]+\\7\\(\\20,\\s?\\22\\);\\s?eval\\s?\\(\\24\\);~msi',
    'id' => 'twoFuncStrDecodeVars',
  ),
  460 => 
  array (
    'full' => '~(\\$\\w{1,50})[=\\s]+range\\([\'"]([^\'"]+)[\'"],\\s?[\'"]([^\'"]+)[\'"]\\);\\s?(\\$\\w{1,50})[=\\s]+\\$({(?:\\1\\[\\d+\\][\\s\\.]*)+});\\s?(if\\s?(?:.*?\\4\\[\\d+\\])+[^;]+;})class(\\w+){static\\s?function(\\w+)\\((\\$\\w{1,50}),(\\$\\w{1,50})\\s?=\\d+\\){\\$\\w{1,50}[\\s=]+range\\([\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\\);\\$\\w{1,50}[\\s=]+explode\\([\'"]([^\'"]+)[\'"],\\9\\);\\s?foreach\\(\\$\\w{1,50}\\sas\\s\\$\\w{1,50}=>\\$\\w{1,50}\\)\\$\\w{1,50}\\.=\\$\\w{1,50}\\[\\$\\w{1,50}-\\$\\w{1,50}\\];\\s?return\\s\\$\\w{1,50};}\\s?static\\s?function\\s?(\\w+)\\(.*?curl_exec\\(\\$\\w{1,50}\\);\\s?return\\s[^;]+;}\\s?static\\s?function\\s?(\\w+)\\(\\){\\$\\w{1,50}\\s?=\\s?new\\s?self\\(\\);((\\$\\w{1,50})\\s?=\\s?array\\(([^)]+)\\);foreach\\(\\17\\sas\\s\\$\\w{1,50}\\)(\\$\\w{1,50})\\[\\]\\s?=\\s?\\$\\w{1,50}->\\8\\(\\$\\w{1,50}\\);)((?:.*?\\19\\[\\d+\\])+)[^}]+}+\\7::\\15\\(\\);~msi',
    'id' => 'classArrayFuncReplaces',
  ),
  461 => 
  array (
    'full' => '~(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+\\$\\w+\\s*=\\s*"[^"]+";\\s*\\$\\w+\\s*=\\s*file_get_contents\\("php://input"\\);\\s*(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+if\\s*\\(substr\\([^\\)]+\\)\\s*==\\s*"[^"]+"\\)\\s*\\{\\s*(?:\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\s*=\\s*"[^"]+";\\s*)+\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\s*=\\s*gzinflate\\(substr\\([^\\)]+\\)+;\\s*@?\\(\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\s=\\s*\\$\\{\\$\\{"GLOBALS"\\}\\["[^"]+"\\]\\}\\);\\s*try\\s*\\{\\s*eval\\([^\\)]+\\);\\s*\\}\\s*catch[^}]+\\}\\s*\\}~msi',
    'id' => 'onelineBackdoor',
  ),
  462 => 
  array (
    'full' => '~(function ([a-z]{1,20})\\((\\$\\w{1,20})\\){\\s*(\\$\\w{1,20})\\s?=\\s?["\'](\\w{1,100})["\'];\\s*(\\$\\w{1,20})\\s?=\\s?["\']["\'];\\s*foreach\\(\\3\\s?as\\s?(\\$\\w{1,20})\\){\\s*\\6\\s?.=\\s?\\4\\[\\7\\];\\s*}\\s*return\\s\\6;\\s*})\\s*function \\w{1,20}\\(\\){\\s*if\\s?\\(isset\\(\\$_GET\\[\'\\w{1,100}\'\\]\\)\\){\\s*[^}]{1,200}}\\s*}\\s*add_action\\([^)]{1,100}\\);\\s*function \\w{1,20}\\([^)]{1,50}\\){(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,20}if\\s?\\([^)]{1,50}\\)\\s?{[^}]{1,200}}\\s*for\\s?\\([^)]{1,100}\\)\\s?{[^}]{1,100}}\\s*return \\$\\w{1,20};\\s*}\\s*function\\s\\w{1,20}\\(\\){\\s*\\$\\w{1,20}\\s?=\\s?["\']\\w{1,20}["\'];\\s*(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,10}if\\s\\(isset\\([^)]{1,30}\\)\\){(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$?\\w{1,20}\\([^)]{1,100}\\);\\s*){1,20}(?:\\s*\\$\\w{1,20}\\s?=\\s?\\$\\w{1,20}\\[\\d{1,20}\\];\\s*){1,10}if\\([^)]{1,30}\\){\\s*if\\([^)]{1,50}\\){\\s*[^;]{1,100};\\s*}else{\\s*[^;]{1,100};\\s*}\\s*if\\(\\$\\w{1,20}\\([^)]{1,30}\\)\\){\\s*[^;]{1,100};\\s*}\\s*[^;]{1,100};\\s*}\\s*(?:\\$[^;]{1,100};)\\s*(?:\\s*curl_setopt\\([^)]{1,150}\\);\\s*){1,10}\\s*(?:\\$[^;]{1,100};){1,10}\\s*curl_close\\(\\$\\w{1,20}\\);\\s*if\\s?\\([^)]{1,30}\\)\\s?{\\s*if\\([^)]{1,50}\\){\\s*if\\(\\$\\w{1,20}\\([^)]{1,50}\\)\\){[^}]{1,100}}\\s*\\$[^;]{1,100};\\s*}else{\\s*if\\(\\$\\w{1,20}\\(\\$\\w{1,20}\\)\\){\\s*\\$[^;]{1,100};\\s*}\\s*\\$[^;]{1,100};\\s*}\\s*if\\([^)]{1,50}\\){[^}]{1,100}}\\s*}\\s*}\\s*}\\s*add_action\\(\'init\',\\s?\'\\w{1,30}\'\\);~mis',
    'id' => 'oneFuncStrDecodeVars',
  ),
  463 => 
  array (
    'full' => '~(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)+(?:file_put_contents\\(\\$\\w+,\\s*file_get_contents\\(\\$\\w+\\)\\);\\s*)+\\$\\w+\\s*=\\s*filemtime\\(\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+"\\);\\s*(?:(?:touch\\(\\$\\w+,\\s*\\$\\w+\\);\\s*)+@?chmod\\(\\$\\w+,\\s*\\d+\\);\\s*)+\\$\\w+\\s*=\\s*base64_decode\\("[^"]+"\\);\\s*(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)+(?:file_put_contents\\(\\$\\w+,\\s*str_replace\\("function[^"]+",\\s*\\$\\w+\\s*\\.\\s*"function[^"]+",\\s*file_get_contents\\(\\$\\w+\\)+;\\s*(?:\\$\\w+\\s*=\\s*\\$_SERVER\\["DOCUMENT_ROOT"\\]\\s*\\.\\s*"[^"]+";\\s*)?)+(?:touch\\(\\$\\w+,\\s*\\$\\w+\\);\\s*)+\\$\\w+\\s*=\\s*__FILE__;\\s*\\$\\w+\\s*=\\s*realpath\\(dirname\\(\\$\\w+\\)+;\\s*(?:\\$\\w+\\s*=\\s*str_replace\\([^\\)]+\\);\\s*)+~mis',
    'id' => 'manyBase64DecodeContent',
  ),
  464 => 
  array (
    'full' => '~((<script[^>]*>)\\s*.{0,800}?)?(eval\\()?String\\.fromCharCode\\(([\\d,\\s]+)\\)(?(3)\\);+|)((?(2)\\s*.{0,800}?</script>|))~msi',
    'fast' => '~String\\.fromCharCode\\([\\d,\\s]+\\)~msi',
    'id' => 'JS_fromCharCode',
  ),
  465 => 
  array (
    'full' => '~(?:eval\\()?unescape\\(\'([^\']+)\'\\)\\);\\s{0,50}eval\\(unescape\\(\'([^\']+)\'\\)\\s{0,50}\\+\\s{0,50}\'([^\']+)\'\\s{0,50}\\+\\s{0,50}unescape\\(\'[^\']+\'\\)\\);~msi',
    'fast' => '~unescape\\(\'([^\']+)\'\\)\\);\\s{0,50}eval\\(unescape\\(\'([^\']+)\'\\)\\s{0,50}\\+\\s{0,50}\'([^\']+)\'\\s{0,50}\\+\\s{0,50}unescape\\(\'[^\']+\'\\)\\);~msi',
    'id' => 'JS_unescapeContentFuncWrapped',
  ),
  466 => 
  array (
    'full' => '~var\\s*(\\w+)=\\s*\\[((?:\'[^\']+\',?)+)\\];\\(function\\(\\w+,\\w+\\)\\{var\\s*\\w+=function\\(\\w+\\)\\{while\\(--\\w+\\)\\{\\w+\\[\'push\'\\]\\(\\w+\\[\'shift\'\\]\\(\\)\\);\\}\\};.*?\\(\\1,(0x\\w+)\\)\\);var\\s*(\\w+)=function\\s*\\((\\w+),(\\w+)\\)\\s*\\{\\5=\\5-0x\\d+;var\\s*\\w+=\\w+\\[\\5\\];if\\(\\4\\[\'\\w+\']===undefined\\)\\{\\(function\\(\\)\\{var\\s*(\\w+);try\\{var\\s*(\\w+)=Function\\(\'[^;]++;\'\\);\\7=\\8\\(\\);\\}catch\\(\\w+\\)\\{\\7=window;\\}var\\s*\\w+=\'[^\']+\';\\7\\[\'atob\'\\]\\|\\|\\(\\7\\[\'atob\'\\]=function\\(\\w+\\)\\{[^}]+\\}return\\s*\\w+;\\}\\);\\}\\(\\)\\);var\\s*\\w+=function\\(\\w+,\\w+\\)\\{var\\s*\\w+=.+?String\\[\'fromCharCode\'\\].+?return\\s*\\w+;\\};\\4\\[\'\\w+\'\\]=\\w+;\\4\\[\'\\w+\'\\]=\\{\\};\\4\\[\'\\w+\'\\]=!!\\[\\];\\}var\\s*\\w+=\\4\\[\'\\w+\'\\]\\[\\w+\\];.+?((.+?\\4\\(\'0x\\d+\',\'[^\']+\'\\)).+?)+[^\\s]+~msi',
    'fast' => '~var\\s*(\\w+)=\\s*\\[((?:\'[^\']+\',?)+)\\];\\(function\\(\\w+,\\w+\\)\\{var\\s*\\w+=function\\(\\w+\\)\\{while\\(--\\w+\\)\\{\\w+\\[\'push\'\\]\\(\\w+\\[\'shift\'\\]\\(\\)\\);\\}\\};.*?var\\s*(\\w+)=function\\s*\\((\\w+),(\\w+)\\)\\s*\\{\\4=\\4-0x\\d+;var\\s*\\w+=\\w+\\[\\4\\];if\\(\\3\\[\'\\w+\']===undefined\\)\\{\\(function\\(\\)\\{var\\s*(\\w+);try\\{var\\s*(\\w+)=Function\\(\'[^;]++;\'\\);\\6=\\7\\(\\);\\}catch\\(\\w+\\)\\{\\6=window;\\}var\\s*\\w+=\'[^\']+\';\\6\\[\'atob\'\\]\\|\\|\\(\\6\\[\'atob\'\\]=function\\(\\w+\\)\\{[^}]+\\}return\\s*\\w+;\\}\\);\\}\\(\\)\\);var\\s*\\w+=function\\(\\w+,\\w+\\)\\{var\\s*\\w+=.+?String\\[\'fromCharCode\'\\].+?return\\s*\\w+;\\};\\3\\[\'\\w+\'\\]=\\w+;\\3\\[\'\\w+\'\\]=\\{\\};\\3\\[\'\\w+\'\\]=!!\\[\\];\\}var\\s*\\w+=\\3\\[\'\\w+\'\\]\\[\\w+\\];.+?((.+?\\3\\(\'0x\\d+\',\'[^\']+\'\\)).+?)+[^\\s]+~msi',
    'id' => 'JS_ObfuscatorIO',
  ),
  467 => 
  array (
    'full' => '~<script\\s(?:language|type)=[\'"]?(?:text/)?javascript[\'"]?>\\s*(?:(?:<!--.*?-->)?\\s?<!--\\s*)?document\\.write\\((unescape|atob)?\\(?[\'"]([^\'"]+)[\'"]\\)\\)?;?(?:\\s*//-->)?(?:(\\w+)\\(\'([^\']+)\'\\))?\\s*</script>~msi',
    'id' => 'JS_documentWriteUnescapedStr',
  ),
  468 => 
  array (
    'full' => '~eval\\(function\\(p,a,c,k,e,(?:d|r)\\)\\{.*?}\\(\'(.*)\', *(\\d+), *(\\d+), *\'(.*?)\'\\.split\\(\'\\|\'\\),\\d,\\{\\}\\)\\);~msi',
    'id' => 'JS_deanPacker',
  ),
  469 => 
  array (
    'fast' => '~\\(function\\s*\\(\\$,\\s*document\\)\\s*({(.*?:var\\s*\\w+=document;break;}}}))\\)\\(\\(function\\s*\\((\\w),\\s*(\\w)\\)\\s*\\{\\s*function\\s*(\\w)\\((\\w+)\\)\\s*\\{\\s*return\\s*Number\\(\\6\\)\\.toString\\(36\\)\\.replace\\(/\\[0\\-9\\]/g,\\s*function\\s*\\((\\w)\\)\\s*\\{\\s*return\\s*String\\.fromCharCode\\(parseInt\\(\\7,\\s*10\\)\\s*\\+\\s*65\\);\\s*\\}\\s*\\);\\s*\\}\\s*var\\s*\\w+\\s*=\\s*\\{\\s*\\$:\\s*function\\s*\\(\\)\\s*\\{\\s*var\\s*\\w+\\s*=\\s*\\{\\};\\s*[^}]+\\}\\s*return\\s*\\w;\\s*\\}\\s*\\};\\s*\\3\\s*=\\s*\\3\\.split\\(\'\\+\'\\);\\s*for\\s*\\(var\\s*\\w\\s*=\\s*0;\\s*\\w\\s*<\\s*(\\d+);\\s*\\w\\+\\+\\)\\s*\\{\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*Object\\.defineProperty\\(\\w,\\s*\\5\\(\\w\\),\\s*\\{\\s*get:\\s*function\\s*\\(\\)\\s*\\{\\s*return\\s*\\w\\[\\w\\]\\[0\\]\\s*\\!==\\s*\';\'\\s*\\?\\s*\\4\\(\\w\\[\\w\\]\\)\\s*:\\s*parseFloat\\(\\w\\[\\w\\]\\.slice\\(1\\),\\s*10\\);\\s*\\}\\s*\\}\\);\\s*\\}\\(\\w\\)\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\(\'([^\']+)\',\\s*function\\s*\\(\\w\\)\\s*\\{\\s*for\\s*\\(var\\s*(\\w)\\s*=\\s*\'([^\']+)\',\\s*(\\w)\\s*=\\s*\\[([^\\]]+)\\],\\s*\\w\\s*=\\s*\'\'[^{]+\\{\\s*var\\s*(\\w)\\s*=\\s*\\10\\.indexOf\\(\\w\\[\\w\\]\\);\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*>\\s*\\-1\\s*&&\\s*0\\s*===\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*&&\\s*\\(\\w\\s*=\\s*0\\),\\s*\\14\\s*>\\s*-1\\s*&&\\s*\\(\\w\\s*\\+=\\s*String\\.fromCharCode\\(\\w\\s*\\*\\s*\\10\\.length\\s*\\+\\s*\\14\\),\\s*\\w\\s*=\\s*1\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\)\\),\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*var\\s*_\\s*=\\s*{};\\s*for\\s*\\(\\w\\s*in\\s*\\w\\)\\s*\\{\\s*try\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\]\\.bind\\(\\w\\);\\s*\\}\\s*catch\\s*\\(\\w\\)\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\];\\s*\\}\\s*\\}\\s*return\\s*_;\\s*\\}\\)\\(document\\)\\)~msi',
    'full' => '~\\(function\\s*\\(\\$,\\s*document\\)\\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\\)\\(\\(function\\s*\\((\\w),\\s*(\\w)\\)\\s*\\{\\s*function\\s*(\\w)\\((\\w+)\\)\\s*\\{\\s*return\\s*Number\\(\\6\\)\\.toString\\(36\\)\\.replace\\(/\\[0\\-9\\]/g,\\s*function\\s*\\((\\w)\\)\\s*\\{\\s*return\\s*String\\.fromCharCode\\(parseInt\\(\\7,\\s*10\\)\\s*\\+\\s*65\\);\\s*\\}\\s*\\);\\s*\\}\\s*var\\s*\\w+\\s*=\\s*\\{\\s*\\$:\\s*function\\s*\\(\\)\\s*\\{\\s*var\\s*\\w+\\s*=\\s*\\{\\};\\s*[^}]+\\}\\s*return\\s*\\w;\\s*\\}\\s*\\};\\s*\\3\\s*=\\s*\\3\\.split\\(\'\\+\'\\);\\s*for\\s*\\(var\\s*\\w\\s*=\\s*0;\\s*\\w\\s*<\\s*(\\d+);\\s*\\w\\+\\+\\)\\s*\\{\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*Object\\.defineProperty\\(\\w,\\s*\\5\\(\\w\\),\\s*\\{\\s*get:\\s*function\\s*\\(\\)\\s*\\{\\s*return\\s*\\w\\[\\w\\]\\[0\\]\\s*\\!==\\s*\';\'\\s*\\?\\s*\\4\\(\\w\\[\\w\\]\\)\\s*:\\s*parseFloat\\(\\w\\[\\w\\]\\.slice\\(1\\),\\s*10\\);\\s*\\}\\s*\\}\\);\\s*\\}\\(\\w\\)\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\(\'([^\']+)\',\\s*function\\s*\\(\\w\\)\\s*\\{\\s*for\\s*\\(var\\s*(\\w)\\s*=\\s*\'([^\']+)\',\\s*(\\w)\\s*=\\s*\\[([^\\]]+)\\],\\s*\\w\\s*=\\s*\'\'[^{]+\\{\\s*var\\s*(\\w)\\s*=\\s*\\10\\.indexOf\\(\\w\\[\\w\\]\\);\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*>\\s*\\-1\\s*&&\\s*0\\s*===\\s*\\12\\.indexOf\\(\\w\\[\\w\\]\\)\\s*&&\\s*\\(\\w\\s*=\\s*0\\),\\s*\\14\\s*>\\s*-1\\s*&&\\s*\\(\\w\\s*\\+=\\s*String\\.fromCharCode\\(\\w\\s*\\*\\s*\\10\\.length\\s*\\+\\s*\\14\\),\\s*\\w\\s*=\\s*1\\);\\s*\\}\\s*return\\s*\\w;\\s*\\}\\)\\),\\s*\\(function\\s*\\(\\w\\)\\s*\\{\\s*var\\s*_\\s*=\\s*{};\\s*for\\s*\\(\\w\\s*in\\s*\\w\\)\\s*\\{\\s*try\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\]\\.bind\\(\\w\\);\\s*\\}\\s*catch\\s*\\(\\w\\)\\s*\\{\\s*_\\[\\w\\]\\s*=\\s*\\w\\[\\w\\];\\s*\\}\\s*\\}\\s*return\\s*_;\\s*\\}\\)\\(document\\)\\)~msi',
    'id' => 'JS_objectDecode',
  ),
  470 => 
  array (
    'full' => '~<script\\s*src="data:text/javascript;base64,([^"]+)"></script>~msi',
    'id' => 'JS_B64Embedded',
  ),
  471 => 
  array (
    'fast' => '~(?:var\\s*(_0x\\w+)=(_0x\\w+);)?(?:function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),|function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}|\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),)(?:function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}|(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;))(?:function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?:(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}|\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),)?(?:function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}|(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;))~msi',
    'full' => '~(?(DEFINE)(?\'p1\'var\\s*(_0x\\w+)=(_0x\\w+);))(?(DEFINE)(?\'p2\'function\\s?(_0x\\w+)\\(_0x\\w+,\\s?_0x\\w+\\)\\{var\\s?_0x\\w+=(_0x\\w+)\\(\\);return\\s?_0x\\w+=function\\(_0x\\w+,\\s?_0x\\w+\\)\\{_0x\\w+=_0x\\w+-(?|(0x\\w+)|\\((-?0x\\w+[\\+\\-\\*\\/\\da-fx]+)\\));var\\s?_0x\\w+=_0x\\w+\\[_0x\\w+\\];return\\s?_0x\\w+;},_0x\\w+\\(_0x\\w+,\\s?_0x\\w+\\);\\}))(?(DEFINE)(?\'p3\'function\\s*_0x\\w+\\(\\)\\{var\\s?_0x\\w+=\\[([^\\]]+)\\];_0x\\w+=function\\(\\)\\{return\\s?_0x\\w+;\\};return\\s?_0x\\w+\\(\\);\\}))(?(DEFINE)(?\'p4\'\\(function\\((_0x\\w+),\\s?_0x\\w+\\)\\{var\\s?(_0x\\w+)=_0x\\w+,_0x\\w+=_0x\\w+\\(\\);while\\(!!\\[\\]\\)\\{try\\{var\\s?_0x\\w+=((?>\\-?parseInt\\(_0x\\w+\\(0x\\w+\\)\\)/(?:\\([^\\)]+\\)*|0x\\w+)\\)*[\\+\\*]?\\(?-?)+);if\\(_0x\\w+===_0x\\w+\\)break;else\\s?_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}catch\\(_0x\\w+\\)\\{_0x\\w+\\[\'push\'\\]\\(_0x\\w+\\[\'shift\'\\]\\(\\)\\);\\}+\\s*\\((_0x\\w+),(-?0x\\w+[^\\)]+)\\),))(?(DEFINE)(?\'p5\'(?:\\(function\\(\\)\\{var[^}]+\\}\\(\\)\\)+;|document\\[_0x\\w+\\(0x\\w+\\)\\]\\(unescape\\((?>\\(?_0x\\w+\\(0x\\w+\\)+\\+?)+;)))(?:(?P>p1))?(?:(?P>p2)(?P>p4)|(?P>p2)|(?P>p4))(?:(?P>p3)|(?P>p5))(?:(?P>p2)|(?P>p4))?(?:(?P>p3)|(?P>p5))~msi',
    'id' => 'JS_parseIntArray',
  ),
  472 => 
  array (
    'full' => '~eval\\(compile\\(zlib\\.decompress\\(base64\\.b64decode\\([\'"]([^\'"]+)[\'"]\\)\\),[\'"]<string>[\'"],[\'"]exec[\'"]\\)\\)~msi',
    'id' => 'PY_evalCompileStr',
  ),
);

    private $full_source;
    private $text;
    private $cur;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;
    private $active_fragment;
    private $excludes;
    private $debugger;
    private $isDebugMode = false;
    private $error = 0;

    private $error_info = '';

    /**
     * @param string $text
     * @param string $origin_text
     * @param DebugMode|null $debugger
     * @param int $max_level
     * @param int $max_time
     */
    public function __construct($text, $origin_text = '', $debugger = null, $max_level = 30, $max_time = 5)
    {
        if (!isset(self::$signatures)) {
            self::$signatures = json_decode(file_get_contents(__DIR__ . '/deobfuscator_patterns.json'), true);
        }

        $this->text         = $text;
        $this->full_source  = $text;

        if ($origin_text != '' && $this->defineSpecificObfuscator($text, $origin_text)) {
            $this->text         = $origin_text;
            $this->full_source  = $origin_text;
        }

        $this->max_level            = $max_level;
        $this->max_time             = $max_time;
        $this->fragments            = [];
        $this->grabed_signature_ids = [];
        $this->excludes             = [];
        $this->debugger             = !is_object($debugger) ? new Debugger() : $debugger;
        $this->isDebugMode          = defined('DEBUG_PERFORMANCE') && DEBUG_PERFORMANCE ? true : false;
    }

    public function setIsDebugMode(bool $isEnable)
    {
        $this->isDebugMode = $isEnable;
    }

    public function getError()
    {
        return $this->error;
    }

    public function getErrorInfo()
    {
        return $this->error_info;
    }

    private function getPreviouslyDeclaredVars($string, $level = 0)
    {
        $foundVar = false;
        $str = null;
        foreach ($this->fragments as $frag => $fragment) {
            if ($foundVar || strpos($frag, '$codelock_lock') !== false) {
                break;
            }

            $subject = '';
            $pos     = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' ');
            if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) {
                $subject = substr($fragment, $pos);
            } else {
                $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' ');
                if ($pos !== false) {
                    $subject = substr($frag, $pos);
                } else {
                    $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' ');
                    if ($pos !== false) {
                        $subject = substr($this->full_source, $pos);
                    } else {
                        continue;
                    }
                }
            }

            if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $matches, PREG_SET_ORDER) > 0) {
                foreach ($matches as $m) {
                    if ($m[1] !== $string) {
                        continue;
                    }
                    if (isset($m[12]) && $m[12] !== '') {
                        $str = substr(@$m[2], 1, -1);
                        $foundVar = true;
                    }
                    if (isset($m[5]) && $m[5] !== '') {
                        $str = $this->unwrapFuncs($m[2], $level + 1);
                        $foundVar = true;
                    }

                    $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]);
                    break;
                }
            }
        }
        return $str;
    }

    private function defineSpecificObfuscator($text, $origin_text)
    {
        if (
            strpos($origin_text, '#!/') === 0                                                                                                       //not a php file
            || strpos($origin_text, '0=__FILE__;')
                && (strpos($origin_text, ';return;?>')
                || strpos($origin_text, 'This file is protected by copyright law and provided under'))  //lockit1 || evalFileContentBySize
            || strpos($origin_text, 'The latest version of Encipher can be obtained from')
            && strpos($origin_text, '\'@ev\'));')           //EvalFileContent
            || strpos($origin_text, 'substr(file_get_contents(__FILE__),')
            && strpos($origin_text, '__halt_compiler();')   //EvalFileContentOffset
            || strpos($origin_text, 'gzuncompress(strrev($')
            && strpos($origin_text, '__halt_compiler();')                 //GzuncompressStrrev
            || strpos($text, 'base64_decode(@stream_get_contents(')
            && strpos($text, '@fopen(__FILE__,')            //wpKey (eval)
            || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64')                                   //
            || strpos($origin_text, '/* Do not change this code')
            && strpos($origin_text, '));__halt_compiler();')                          //B64Chunks
        ) {
            return true;
        }

        $text_wo_ws = str_replace(' ', '', $text);
        if (
            strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(')      && strpos($text_wo_ws, '));__halt_compiler();') //zeura hack
            || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);')   && strpos($text_wo_ws, '__halt_compiler();')    //obf_20200527_1
            || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[')                                     //TinkleShell
        ) {
            return true;
        }

        return false;
    }

    private function checkObfuscatorExcludes($str, $type = false, $matches = [])
    {
        switch ($type) {
            case '':
                if (strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
                    return '';
                }
                if (strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
                    return '';
                }
                if (strpos($str, '<div class="header">Отчет сканера ') !== false) {
                    return '';
                }
                if (strpos($str, '$default_action="FilesMan"') !== false) {
                    return '';
                }
                break;
            case 'echo':
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (!isset($matches[5]) || $matches[5] === '') {
                    return '';
                }
                if (preg_match('~attachment;\s*filename=\\\\"\w+\.vbs~', $str)) {
                    return '';
                }
                break;
            case 'eval':
                if (strpos($matches[0], 'file_get_contents') !== false) {
                    return '';
                }
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                    return '';
                }
                if (@$matches[6] === '\'";') {
                    return '';
                }
                break;
            case 'goto':
                if (!preg_match('~\$[^\[\(\)\]=\+\-\"\']{1,20}~msi', $matches[0])) {
                    return '';
                }

                $offset = 0;
                $count = 0;
                while (preg_match('~goto\s*[^;]+;\s*[^:{}]+:\s*[^;]+;~msi', $matches[0], $m, PREG_OFFSET_CAPTURE, $offset)) {
                    $count++;
                    break;
                }
                if ($count === 0) {
                    return '';
                }
                break;
        }
        return $type;
    }

    public function getObfuscateType($str)
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        $ret = '';
        if ($l_UnicodeContent !== false) {
            if (FUNC_ICONV) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if ($this->checkObfuscatorExcludes($str) === '') {
            return '';
        }
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        foreach (self::$signatures as $signature) {
            if (isset($this->excludes[$str]) && in_array($signature['id'], $this->excludes[$str])) {
                continue;
            }

            if (!$this->runPreCheck($signature, $str)) {
                // Skip signature if the pre-check fails.
                continue;
            }

            $fast_regexp = isset($signature['fast']) ? $signature['fast'] : $signature['full'];
            $sig_type = isset($signature['fast']) ? self::TYPE_PREG_FAST : self::TYPE_PREG_FULL;
            $matches = $this->handlePregMatch($sig_type, $signature['id'], $fast_regexp, $str);
            if ($matches) {
                $ret = $this->checkObfuscatorExcludes($str, $signature['id'], $matches);
                break;
            }
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $ret;
    }

    private function getObfuscateFragment($str, $type)
    {
        foreach (self::$signatures as $signature) {
            if ($signature['id'] !== $type) {
                continue;
            }
            $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $signature['id'], $signature['full'], $str);
            if ($matches) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    /**
     * Runs pre-check for signatures with pre-check data available.
     *
     * The idea is to run a check before trying to match the whole regular expression to avoid unnecessary PCRE errors.
     * This check will take smaller fragments of the whole regular expressions and tries to find those.
     * If none of them exist, then we won't try to match the whole pattern later.
     *
     * @param array $signature Signature data.
     * @param string $value Value to check against the pre-check expressions.
     *
     * @return bool True if the pre-check passes, false otherwise.
     */
    private function runPreCheck($signature, $value)
    {
        if (!isset($signature[self::TYPE_PREG_PRECHECK])) {
            return true;
        }

        $patterns = $signature[self::TYPE_PREG_PRECHECK];
        if (!is_array($patterns)) {
            $patterns = [$patterns];
        }

        foreach ($patterns as $pattern) {
            if (!$this->handlePregMatch(self::TYPE_PREG_PRECHECK, $signature['id'], $pattern, $value)) {
                return false;
            }
        }

        return true;
    }

    private function grabFragments()
    {
        if ($this->cur === null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset(self::$signatures);
        while ($sign = current(self::$signatures)) {
            if (!$this->runPreCheck($sign, $str)) {
                // Skip to the next signature if the pre-check fails.
                next(self::$signatures);
                continue;
            }

            $fast = isset($sign[self::TYPE_PREG_FAST]);
            $matches = false;
            if (
                !$fast
                ||
                ($fast && $this->handlePregMatch(self::TYPE_PREG_FAST, $sign['id'], $sign[self::TYPE_PREG_FAST], $str))
            ) {
                $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $sign['id'], $sign[self::TYPE_PREG_FULL], $str);
            }

            if ($matches) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next(self::$signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (!count($this->fragments)) {
            return;
        }
        $i = 0;
        foreach ($this->fragments as $frag => $value) {
            if ($frag !== $value) {
                continue;
            }
            $this->active_fragment = $frag;
            $type = $this->getObfuscateType($value);

            while ($type !== '' && $i < 100) {
                $match  = $this->getObfuscateFragment($value, $type);
                if (!is_array($match)) {
                    break;
                }
                $this->grabed_signature_ids[$type] = 1;
                $find   = $match[0] ?? '';
                $func   = 'deobfuscate' . ucfirst($type);
                $temp = $this->handleFunc(self::TYPE_FUNC, ucfirst($type), $func, $find, $match);

                /** @phpstan-ignore-next-line */
                if (isset($temp) && $temp !== '' && $temp !== $find) {
                    $value = str_replace($find, $temp, $value);
                } else {
                    $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type;
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    continue;
                }

                $this->fragments[$frag] = $value;
                $type = $this->getObfuscateType($value);
                $value_hash = hash('sha256', $value);
                if ($prev_step === $value_hash) {
                    break;
                }
                $prev_step = $value_hash;
                $i++;
            }
            $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]);
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        $deobfuscated   = '';
        $this->run_time = Helpers::currentTime();
        $this->cur      = $this->text;

        $this->grabFragments();
        $this->deobfuscateFragments();

        $deobfuscated = $this->cur;

        if (count($this->fragments) > 0) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = Helpers::postProcess($deobfuscated);

        if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step === hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $deobfuscated;
    }

    public static function getSignatures()
    {
        return self::$signatures;
    }

    public function getDebugger()
    {
        return $this->debugger;
    }

    /**
     * @param string $sigType
     * @param $sigId
     * @param string $regex
     * @param string $content
     * @return false|array
     */
    private function handlePregMatch(string $sigType, $sigId, string $regex, string $content)
    {
        $start_time = Helpers::currentTime();
        $isMatch = preg_match($regex, $content, $match);
        if ($this->error === 0) {
            $this->error = preg_last_error();
            $this->error_info = $this->error !== 0 ? $regex : '';
        }

        if ($this->isDebugMode) {
            $time_elapsed = Helpers::currentTime() - $start_time;
            $this->debugger->addDeobfuscatorData($sigType, $sigId, $time_elapsed);
        }

        return $isMatch ? $match : false;
    }

    /**
     * @param string $type
     * @param string $funcId
     * @param string $func
     * @param string $find
     * @param array $match
     * @return string
     */
    private function handleFunc(string $type, string $funcId, string $func, string $find, array $match)
    {
        try {
            $start_time = Helpers::currentTime();
            $result = @$this->$func($find, $match);

            if ($this->isDebugMode) {
                $time_elapsed = Helpers::currentTime() - $start_time;
                $this->debugger->addDeobfuscatorData($type, $funcId, $time_elapsed);
            }
        } catch (Exception $e) {
            $result = '';
        }

        return $result;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $res = '';
        $close_tag = false;

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }
        if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) {
            if ($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            }
            $end = -2;
            if ($string[-3] === '\'') {
                $end = -3;
            }
            return substr($string, 1, $end);
        }

        if ($string[0] === '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string  = $string[0];
            return $this->getPreviouslyDeclaredVars($string, $level);
        }

        $pos      = strpos($string, '(');
        $function = substr($string, 0, $pos);
        $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);

        if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) {
            $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function);
            $close_tag = true;
        }
        $function = str_replace(['@', ' '], '', $function);
        $safe = Helpers::convertToSafeFunc($function);

        if ($safe) {
            if ($function === 'pack') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 1);
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1]]);
            } elseif ($function === 'unserialize') {
                $res = @Helpers::unserialize($arg);
            } elseif ($function === 'str_replace') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 0);
                if (trim($args[1]) === 'null') {
                    $args[1] = null;
                }
                $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2];
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1], $args[2]]);
            } elseif ($function === 'chr') {
                $res = @Helpers::executeWrapper($function, [(int)$arg]);
            } else {
                $res = @Helpers::executeWrapper($function, [$arg]);
            }
        } else {
            $res = $arg;
        }
        if ($close_tag) {
            $res = '?> ' . $res;
            $close_tag = false;
        }
        return $res;
    }

    /*************************************************************************************************************/
    /*                                          PHP deobfuscators                                                */
    /*************************************************************************************************************/

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGoto($str)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $matches1)) {
                        foreach ($matches1[1] as $k => $v) {
                            if ($v !== $matches[1]) {
                                continue;
                            }
                            $code = $matches1[2][$k];
                            $code = strrev($code);
                            if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                                foreach ($m as $item) {
                                    $code = str_replace($item[1], $item[2], $code);
                                }
                                $temp = base64_decode($code);
                            }
                            break;
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach ($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        if (strpos($str, 'hex2bin(') !== false) {
            $matches[4] = (int)hex2bin($matches[4]);
            $matches[6] = (int)hex2bin($matches[6]);
            $matches[8] = (int)hex2bin($matches[8]);
        }
        $res = strrev(gzinflate(base64_decode(substr($matches[14], (int)$matches[4] + (int)$matches[6], (int)$matches[8]))));
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v), 1, 1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str, $matches)
    {
        $data = $matches[1];
        $key = $matches[2];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[17];
        if (isset($matches[1]) && !empty($matches[1])) {
            $vars = Helpers::collectVars($matches[1], '\'');
            $code = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
            $code = Helpers::collectStr($code, '\'');
            $code = substr($code, strpos($code, '\'') + 1);
        }
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function ($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?: base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateTwoHashFunc($str, $matches)
    {
        $funcs = [
            $matches[1] . '::' . $matches[2] => [
                'data' => Helpers::prepareArray($matches[3]),
                'func' => null,
            ],
            $matches[4] . '::' . $matches[5] => [
                'data' => Helpers::prepareArray($matches[6]),
                'func' => null,
            ],
        ];

        $code = Helpers::normalize($matches[7]);

        foreach ($funcs as $name => &$params) {
            $data = $params['data'];
            if (isset($data[0]) && intval($data[0])) {
                $params['func'] = function ($n, $k) use ($data) {
                    if (!isset($data[$n])) {
                        return false;
                    }
                    return $data[$n];
                };
            } else {
                $params['func'] = function ($n, $k) use ($data) {
                    $l = strlen($k);
                    if (!isset($data[$n])) {
                        return false;
                    }
                    $r = base64_decode($data[$n]);
                    for ($i = 0, $c = strlen($r); $i !== $c; ++$i) {
                        $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l]));
                    }
                    return '\'' . $r . '\'';
                };
            }
        }
        unset($params);

        $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) {
            $original       = $m[0];
            $class_name     = $m[1];
            $method_name    = $m[2];
            $vars           = str_replace(['"', "'"], '', $m[3]);

            list($var1, $var2) = explode(',', $vars);
            $func_name = $class_name . '::' . $method_name;
            if (!isset($funcs[$func_name]['func'])) {
                return $original;
            }
            return $funcs[$func_name]['func']($var1, $var2);
        }, $code);
        return MathCalc::calcRawString($new_code);
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*', $matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*', $matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $res = str_replace($var[0], '', $res);
            }
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $code = str_replace($var[0], '', $code);
            }
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach ($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) {
            if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) {
                return $m[0];
            }
            return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:(?:\$\w+)="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach ($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach ($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function ($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback(
            '~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::convertToSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @Helpers::executeWrapper($func, [$vars[$match[3]]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            },
            $res
        );

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace([$matches[5], $matches[1]], [');', 'eval('], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_Decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while (preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) {
                $match = $matches[1];
            }
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } elseif ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach ($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str, $matches)
    {
        return Helpers::someDecoder3($matches[1]);
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        foreach ($matches[1] as $k => &$m) {
            if ($m !== $var) {
                unset($matches[2][$k]);
            }
        }
        $res = base64_decode(Helpers::someDecoder4($matches[2], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if (strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateVarsEvalFuncs($str, $matches)
    {
        $result = $str;
        $dict_var_name = $matches[1];

        $vars = Helpers::collectConcatedVars($result);

        $calced_vars = Helpers::replaceVarsFromDictionary($dict_var_name, $vars[$dict_var_name], $result);
        $calced_vars = Helpers::collectConcatedVars($calced_vars);

        $unwrapFunctions = function ($vars, $str) {
            $str = Helpers::replaceVarsFromArray($vars, $str);
            $str = preg_replace('~\(([^\(\)]{1,500})\)~mis', '("\1")', $str);
            return $this->unwrapFuncs($str);
        };

        $result = $unwrapFunctions($calced_vars, $result);
        $result = $unwrapFunctions($calced_vars, $result);
        return $result;
    }

    private function deobfuscateLockIt3($str, $matches)
    {
        $totalLength = (int)$matches[1];
        $res = $this->unwrapFuncs($matches[2]);
        $encodedStr = $matches[3];

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);while\(\-\-\$\w{1,50}\)fgets\(\$\w{1,50},\d+\);fgets\(\$\w{1,50},\d+\);\$\w{1,50}\s?=\s?\(?((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},(\d+)\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);eval\(\$\w{1,50}\);~msi', $res, $m)) {
            $length = (int)$m[2];
            $res = substr($encodedStr, 0, $length);
            $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[3], $m[4]) . $m[5]);

            if (
                preg_match(
                    '~((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},\$\w{1,50}\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);~msi',
                    $res,
                    $m
                )
            ) {
                $res = substr($encodedStr, $length, $totalLength);
                $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[2], $m[3]) . $m[4]);
                return $res;
            }
        }

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);\$\w{1,50}=(?:intval\([\'"])?(\d+)\)?(?:[\'"]\))?;fseek\(\$\w{1,50},(?:intval\([\'"])?(\d+)(?:[\'"]\))?\);eval\(base64_decode\(strtr\(fread\(\$\w{1,50},(\d+)\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;return;~msi', $res, $m)) {
            $lengthSeek = (int)$m[1] - (int)$m[2];
            $length = (int)$m[3];
            $res = substr($encodedStr, 0, $length);
            $res = base64_decode(strtr($res, $m[4], $m[5]));

            if (preg_match('~\(base64_decode\(strtr\(gzuncompress\(base64_decode\(fread\(\$\w{1,50},\$\w{1,50}\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;~msi', $res, $m)) {
                $res = substr($encodedStr, $lengthSeek, $totalLength);
                $res = base64_decode(
                    strtr(
                        gzuncompress(base64_decode($res)),
                        $m[1],
                        $m[2]
                    )
                );
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = str_replace($matches[8], stripcslashes($matches[9]), $str);
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function ($matches2) use (&$funcs) {
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*', substr($substr_array, $offset));
        $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [$matches[6]]) : $matches[6];
        $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($matches) use ($eval, $substr_array, $func) {
            if ($matches[1] !== $func) {
                return $matches[0];
            }
            $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [substr($substr_array, $matches[2], $matches[3])]) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);
        $res = str_rot13(@gzuncompress($res) ?: $res);

        if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp)) {
            $tmp = explode(';', $tmp[2]);
            foreach ($tmp as $entry) {
                if ($entry === '') {
                    continue;
                }
                preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts);
                $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res);
            }
            if (isset($parts) && is_array($parts) && isset($parts[3])) {
                $func_decrypt = $parts[3];
            } else {
                $func_decrypt = null;
            }
            $hangs = 20;
            while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) {
                $end = strpos($res, '\'', $start + strlen($func_decrypt) + 2) + 1;
                $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1));
                $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($matches) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            return '$' . $matches[2];
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        list($find, $var, $alph) = $matches;
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches);
        foreach ($matches[2] as &$pat) {
            if ($pat[0] === '[') {
                $pat = substr($pat, 1, -1);
            }
        }
        unset($pat);
        $res = str_replace($matches[2], $matches[3], $res);
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $matches, PREG_SET_ORDER)) {
            preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $matches, PREG_SET_ORDER);
        }
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = substr($match[2], 1, -1);
        }

        $res = preg_replace_callback(
            '~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi',
            static function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] === 'str_replace') {
                    $str_replace = $matches[1];
                }
                return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
            },
            $res
        );

        if ($str_replace !== '') {
            $res = preg_replace_callback(
                '~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
                static function ($matches) use (&$vars, &$base64_decode, $str_replace) {
                    if ($matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $vars[$matches[1]] = str_replace($matches[3], "", $matches[4]);
                    if ($vars[$matches[1]] === 'base64_decode') {
                        $base64_decode = $matches[1];
                    }
                    return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                },
                $res
            );

            $res = preg_replace_callback(
                '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
                static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                    if ($matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $tmp = explode('.', $matches[4]);
                    foreach ($tmp as &$item) {
                        $item = $vars[$item];
                    }
                    unset($item);
                    $tmp = implode('', $tmp);
                    $layer = base64_decode(str_replace($matches[1], "", $tmp));

                    return $matches[0];
                },
                $res
            );
        }

        if ($base64_decode !== '') {
            $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi';
        } else {
            $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi';
        }
        preg_replace_callback(
            $regex,
            static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                if ($base64_decode !== '' && $matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                    return $matches[0];
                }
                $tmp = preg_split('~\s*\.\s*~msi', $matches[4]);

                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                unset($item);
                $tmp = implode('', $tmp);
                $layer = str_replace($matches[3], "", $tmp);
                if ($base64_decode !== '') {
                    $layer = base64_decode($layer);
                }
                return $matches[0];
            },
            $res
        );
        $res = str_replace($find, $layer, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find           = $matches[0];
        $res            = $str;
        $vars           = [];
        $base64_decode  = '';
        $layer          = '';
        $gzuncompress   = '';

        preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $var_name   = $match[1];
            $var_val    = trim($match[2]);
            if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) {
                $var_val = Helpers::normalize($var_val);
            }
            $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val);
            $vars[$var_name] = trim($var_val);
            if ($var_val === 'base64_decode') {
                $base64_decode = $var_name;
            }
        }

        $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($matches) use (&$vars, &$gzuncompress, $base64_decode) {
            if ($matches[1] !== $base64_decode) {
                return $matches[0];
            }
            if (!isset($vars[$matches[2]])) {
                return $matches[2];
            }
            $tmp = base64_decode($vars[$matches[2]]);
            if ($tmp === 'gzuncompress') {
                $gzuncompress = $matches[2];
            }
            $vars[$matches[2]] = $tmp;
            return " = '{$tmp}'";
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback(
                '~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer, $base64_decode) {
                    if ($matches[1] !== $gzuncompress && $matches[2] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[3]])) {
                        return $matches[3];
                    }
                    $tmp = gzuncompress(base64_decode($vars[$matches[3]]));
                    $layer = $matches[3];
                    $vars[$matches[3]] = $tmp;
                    return "'{$tmp}'";
                },
                $res
            );
            $res = $vars[$layer];
        } elseif (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback(
                '~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer, $base64_decode) {
                    if ($matches[1] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[2]])) {
                        return $matches[2];
                    }
                    $tmp = base64_decode($vars[$matches[2]]);
                    $layer = $matches[2];
                    $vars[$matches[2]] = $tmp;
                    return "'{$tmp}'";
                },
                $res
            );
            $res = $vars[$layer];
        }
        return str_replace($find, $res, $str);
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (
            Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval'
        ) {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::convertToSafeFunc($func)) {
                    $final_code = @Helpers::executeWrapper($func, [$final_code]);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateGotoShell($str, $matches)
    {
        $str = Helpers::normalize($str);

        $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str);

        $vars = Helpers::collectVars($str, '\'');
        $need_remove_vars = [];
        foreach ($vars as $name => $value) {
            $last_str = $str;
            $str = str_replace('${' . $name . '}', '$' . $value, $str);
            if ($last_str != $str) {
                $need_remove_vars[$name] = $value;
            }
        }

        foreach ($need_remove_vars as $name => $value) {
            if (substr_count($str, $name) != 1) {
                continue;
            }
            $str = str_replace($name . '=\'' . $value . '\';', '', $str);
        }
        return $str;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function ($matches) use (&$vars) {
            $tmp = str_replace('\' . \'', '', $matches[0]);
            $tmp = str_replace('\'.\'', '', $tmp);
            $value = str_replace('\' . \'', '', $matches[2]);
            $value = str_replace('\'.\'', '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach ($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . ' = \'' . $var . '\';', '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function ($matches) use (&$vars) {
            $tmp = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[0]);
            $value = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[2]);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $res = preg_replace_callback('~\("([^\)]+)\'\)~msi', function ($m) {
            return '(\'' . preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $m[1]) . '\'\)';
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $before = substr($res, 0, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach ($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = str_replace($matches[14], '', $res);
        }
        $res = $this->deobfuscateEval($res, []);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = $matches[14] . $res;
        }
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        return $before . $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function ($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach ($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) {
            $res = base64_decode(strtr(substr($match[1], 52 * 2), substr($match[1], 52, 52), substr($match[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) {
            $res = gzinflate(base64_decode($matchEval[2]));
            for ($i = 0, $iMax = strlen($res); $i < $iMax; $i++) {
                $res[$i] = chr(ord($res[$i]) - 1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        if (
            preg_match(
                '~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi',
                $matches[6],
                $match
            )
        ) {
            $res = stripcslashes($match[0]);
            $dictionaryValue = urldecode($matches[3]);
            $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str);
            $res = Helpers::replaceVarsFromArray($vars, $res);
            $res = Helpers::replaceCreateFunction($res);

            preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m);
            $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) {
                if ($calls[1] !== $m[1]) {
                    return $calls[0];
                }
                $temp1 = substr($calls[2], $m[3], $m[4]);
                $temp2 = substr($calls[2], $m[5]);
                $temp3 = substr($calls[2], $m[6], strlen($calls[2]) - $m[7]);
                return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
            }, $res);
            return $res;
        }

        if (preg_match('~((?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];\s*)+)error_reporting\(\d\);\s*(\$\w{1,50})\s*=\s*(\$\w{1,50})\([\'"]([^\'"]+)[\'"]\);\s*\2\s*=\s(\$\w{1,50})\(\2\);\s*\$\w{1,50}\s*=\s*\$\w{1,50}\([\'"]\$\w{1,50}[\'"]\s*,\2\);~msi', $res, $match)) {
            $vars = Helpers::collectVars($match[0]);

            $func1 = $vars[$match[3]] ?? null;
            $func2 = $vars[$match[5]] ?? null;
            if (Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
                $res = Helpers::executeWrapper($func2, [
                    Helpers::executeWrapper($func1, [$match[4]])
                ]);
            }

            if (substr_count($res, 'goto ') > 100) {
                $res = Helpers::unwrapGoto($res);
            }

            return $res;
        }

        $res = str_replace($find, ' ?>' . $res, $str);

        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while (preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        preg_match_all('~(\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res);
        }

        return $res;
    }

    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if ($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for ($i = 0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
                if ($i < 16) {
                    $temp[$matches[3][$i]] = $i;
                } else {
                    $res .= @chr(($temp[$matches[3][$i]] << 4) + ($temp[$matches[3][++$i]]));
                }
            }
        }
        if (!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res ^ "\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if (substr($res, 0, 12) == "\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else {
            return $str;
        }
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi', $str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = (int)$matches[8] + (int)$matches[9];
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateZeuraFourArgs($str, $matches)
    {
        $offset = $matches[6] * -1;
        $res    = gzinflate(base64_decode(substr(trim($str), $offset)));

        return $res;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded -= $temp;
            }
            $res .= chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . '].',
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . ']'
            ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);
        $vars = [];
        $func = [];
        foreach ($funcs[1] as $k => $var) {
            if ($var !== $matches[1]) {
                continue;
            }
            $vars[] = $funcs[2][$k];
            $func[] = $funcs[3][$k];
        }

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = (int)Helpers::calc($matches[5]);
        $matches[6] = (int)Helpers::calc($matches[6]);

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i = 0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i]) - 1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off = 0;
        $funcs = [];

        for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) {
            if ($i === 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[] = substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 === 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = count($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = count($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsetsEval($str, $matches)
    {
        $arg1 = explode(chr(Helpers::calculateMathStr($matches[4])), $matches[5]);
        $arg2 = $matches[2];
        $code = null;

        for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) {
            $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]);
        }

        $res = str_replace(
            chr(Helpers::calculateMathStr($matches[20])),
            chr(Helpers::calculateMathStr($matches[21])),
            $code
        );

        $arg1 = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[7]),
            Helpers::calculateMathStr($matches[8])
        );

        $func = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[23]),
            Helpers::calculateMathStr($matches[24])
        );

        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $str = str_replace('\\\'', '@@quote@@', $str);
        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]);
            if (isset($match[3])) {
                $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]);
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if ($match[2] !== '.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            } else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str, $matches)
    {
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find       = $matches[0];
        $res        = $str;
        $funclist   = [];
        $strlist    = [];

        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $res = Helpers::replaceMinMaxRound($res, 111);
        $res = Helpers::replaceBase64Decode($res, '"');
        $replace_from = [];
        $replace_to   = [];
        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                foreach ($funclist as $var => $funcs) {
                    foreach ($funcs as $k => $func) {
                        $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']';
                        $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']';
                        $replace_to[] = $func;
                        $replace_to[] = $func;
                    }
                }
                $replace_from[] = $found[0];
                $replace_to[] = '';
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }

        $array_temp = [];
        while (preg_match('~function\s*(\w{1,60})\(\$\w+\)\s*{\s*\$\w{1,60}\s*=\s*Array\((.{1,40000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) {
            $strlist = explode(',', $found[2]);
            $array_temp[$found[1]] = array_map('base64_decode', $strlist);
            $replace_from = [];
            $replace_to = [];
            foreach ($array_temp[$found[1]] as $k => $v) {
                $replace_from[] = $found[1] . '(' . $k . ')';
                $replace_to[] = '\'' . $v . '\'';
            }
            $replace_from[] = $found[0];
            $replace_to[] = '';
            $res = str_replace($replace_from, $replace_to, $res);
        }

        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);
        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $replace_from = [];
                $replace_to = [];
                foreach ($array_temp[$found[1]] as $k => $v) {
                    $replace_from[] = $found[1] . '(' . $k . ')';
                    $replace_to[] = '\'' . $v . '\'';
                }
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str, $matches)
    {
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str)));
        $result = $str;
        $offset = 0;
        $dictName = $matches[1];
        $dictVal = urldecode($matches[2]);
        $vars = [$dictName => $dictVal];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str);

        if (preg_match('~eval\(~msi', $matches[15])) {
            $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[15])));
        }

        if ($matches[7] !== '' && preg_match('~eval\(~msi', $matches[7])) {
            $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[7])));
            $vars = Helpers::collectVars($phpcode2, "'", $vars);
        }

        if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches)) {
            $needles = Helpers::getNeedles($phpcode);
            $needle        = $needles[0];
            $before_needle = $needles[1];
            $strToDecode = base64_decode($matches[1]);
            return '<?php ' . strtr($strToDecode, $needle, $before_needle);
        }

        $count = 0;
        preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER);
        if (count($offsetMatches) === 2) {
            foreach ($offsetMatches as $offsetMatch) {
                if (strpos($offsetMatch[1], '0x') !== false && isset($str[$offset + hexdec($offsetMatch[1])])) {
                    $count++;
                    $offset += hexdec($offsetMatch[1]);
                } elseif (isset($str[$offset + (int)$offsetMatch[1]])) {
                    $count++;
                    $offset += (int)$offsetMatch[1];
                }
            }
        }

        $finalOffset = 0;
        if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) {
            if (strpos($match[2], '0x') !== false) {
                $finalOffset = hexdec($match[2]);
            } else {
                $finalOffset = (int)$match[2];
            }
        }

        $result = substr($str, $offset);
        if ($finalOffset > 0) {
            $result = substr($result, 0, $finalOffset);
        }

        if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) {
            $result = strtr($result, $needleMatches[1], $needleMatches[2]);
        }

        $result = base64_decode($result);

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        $found = true;
        $hop = 50;
        while ($found && $hop > 0) {
            $found = false;

            if (preg_match('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            if (preg_match('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            $hop--;
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        return '<?php ' . $result;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] === '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end - 1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($matches) use ($subst_array) {
            if (isset($matches[5])) {
                return $subst_array[hexdec($matches[4])] . '(';
            }
            return "'" . $subst_array[hexdec($matches[4])] . "'";
        }, $res);
        $res = str_replace($find, $res, $str);

        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [$matches[1] . '[' . $i . '].', $matches[1] . '[' . $i . ']'],
                ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];


        preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[2]); $i <= $iMax; $i++) {
            if ($matches[1][$i] !== $var) {
                continue;
            }
            if (@function_exists($matches[2][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[2][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[2][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] === "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] === 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [
                    $matches[2] . '[' . $i . '].',
                    $matches[2] . '[' . $i . ']',
                    $matches[2] . '{' . $i . '}.',
                    $matches[2] . '{' . $i . '}'
                ],
                [
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            $res = str_replace(
                ['$' . $matches[$i][1] . '(' , '${"GLOBALS"}["' . $matches[$i][1] . '"]' . '('],
                $matches[$i][2] . '(',
                $res,
                $c
            );
            $res = str_replace(
                ['$' . $matches[$i][1], '${"GLOBALS"}["' . $matches[$i][1] . '"]'],
                "'" . $matches[$i][2] . "'",
                $res,
                $cc
            );

            if ($c > 0 || $cc > 0) {
                $res = str_replace([
                    "'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "=" . $matches[$i][2] . ';',
                    $matches[$i][0] . ';'
                ], '', $res);
            }
        }

        $res = Helpers::replaceCreateFunction($res);

        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($matches) {
            if ($calls[1] !== $matches[1]) {
                return $calls[0];
            }
            $temp1 = substr($calls[2], $matches[3], $matches[4]);
            $temp2 = substr($calls[2], $matches[5]);
            $temp3 = substr($calls[2], $matches[6], strlen($calls[2]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode3($str, $matches)
    {
        $dictionaryKey = $matches[4];
        $dictionaryVal = urldecode($matches[3]);

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);

        return $result;
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarSpecific($str, $matches)
    {
        $res = $str;

        if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) {
            $res = stripcslashes($res);

            preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi', $res, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res);
            }
        }

        $vars = Helpers::collectVars($res);

        if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) {
            $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]])));
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);

        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (strpos($evalVar, '${$') === 0) {
            return Helpers::postProcess($str);
        }
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }

        $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str);
        $val = '';
        $index = 0;
        if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $matches)) {
            $matches[1] = array_reverse($matches[1], true);
            $index = array_search($evalVar, $matches[1], true);
            if ($index !== false) {
                $val = @$matches[2][$index];
            }
        }

        $string = $str;
        if ($val !== '') {
            $string = str_replace($matches[0][$index], '', $string);
            $val = substr($val, 1, -1);
            $var_index = substr_count($string, $evalVar . ' = ');
            $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
            preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $matches, PREG_OFFSET_CAPTURE);
            $matches = array_reverse($matches[1]);
            foreach ($matches as $match) {
                if ($match[0] === $evalVar) {
                    $string = substr_replace($string, $text, $match[1], strlen($match[0]));
                    break;
                }
            }

            $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function ($m) use ($evalVar, $text) {
                if ($m[1] !== $evalVar) {
                    return $m[0];
                }
                return '(' . $text;
            }, $string);
        }

        $string = str_replace('assert(', 'eval(', $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $string = str_replace("eval(''.", 'eval(', $string);
        $res = str_replace($find, $string, $str);
        if (strpos($string, 'gzinflate(\'') !== false) {
            $res = $this->deobfuscateEval(stripcslashes($res), []);
        }
        return $res;
    }

    private function deobfuscateEvalGlobalVarFuncWrapped($str, $matches)
    {
        //Sample: evalGlobalVarFuncWrapped_1.php

        if (stripcslashes($matches[1]) !== stripcslashes($matches[3])) {
            return $str;
        }

        $varName = stripcslashes($matches[2]);
        $decodeData = htmlspecialchars_decode(gzinflate(base64_decode(stripcslashes($matches[5]))));

        $code = str_replace('$' . $varName, '"' . stripcslashes($matches[4]) . '"', $decodeData);
        $code = stripcslashes($this->unwrapFuncs($code));

        if (
            preg_match(
                '~@?eval\(fgets\(fopen\((urldecode\(base64_decode\([\'"][^"\']+[\'"]\)\))[^;]+;~msi',
                $code,
                $match
            )
        ) {
            $code = str_replace($match[1], '\'' . $this->unwrapFuncs($match[1]) . '\'', $code);
        }

        return $code;
    }

    private function deobfuscateEval($str, $matches)
    {
        if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) {
            $res = explode(').', $str);
            $res = implode(')); eval(', $res);
            return $res;
        }

        if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $matches)) {
            if (preg_match('~<\?php\s/{2}[\w\s]+\$\w{1,50}\s?=\s?@?\$_SERVER.*?(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m, PREG_OFFSET_CAPTURE)) {
                $initialOffset = $m[0][1];
                $offset = hexdec($m[2][0]);
                $end = substr($this->full_source, $initialOffset + $offset);
                $res = str_replace($matches[0], '\'' . $end . '\'', $str);
                return $res;
            }
        }

        $res = $str;
        $group = '';
        if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            if (strpos(stripcslashes($matches[1]), '(.*)') !== false || strpos(stripcslashes($matches[1]), '(.+)') !== false) {
                $group = substr(stripcslashes($matches[2]), 2, -1);
            }
            $res = str_replace([$matches[1], $matches[2]], ['eval(', ''], $res);
            if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) {
                $res = stripcslashes($res);
                $res = str_replace('\1', $group, $res);
            }
            return $res;
        }

        if (
            strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\'\$]+[\'\$].*?[\'\)]\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }

        $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3);

        $string = substr($res, 5, -2);
        $res = $this->unwrapFuncs($string);

        if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) {
            $code = base64_decode($match[1]);
            if (strpos($code, 'error_reporting(') !== false) {
                $res = '?> ' . $code;
            }
        }

        if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) {
            $res = Helpers::normalize($res);
        }

        if (preg_match('~(?|//[^\n]+\n|\#[^\n]+\n|/\*[^\*]*\*/)\?><\?php~msi', $res)) {
            $res = preg_replace_callback('~'
                . '(\'(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+\')'       //match all '' strings to exclude it from comments
                . '|("(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+")'        //match all "" strings to exclude it from comments
                . '|(//[^\n\r]*[\n\r])'                             //match // comments
                . '|(/\*(?:.*?)\*/)'                                //match /**/ comments
                . '|(#[^\n\r]*[\n\r])'                              //match # comments
                . '~msi', function ($m) {

                    if (isset($m[1]) && !empty($m[1])) {
                        return $m[1];
                    }
                    if (isset($m[2]) && !empty($m[2])) {
                        return $m[2];
                    }
                    if ((isset($m[3]) && !empty($m[3])) || (isset($m[4]) && !empty($m[4])) || (isset($m[5]) && !empty($m[5]))) {
                        return '';
                    }
                }, $res);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*[base64_dco\\\\x1253f"\. ]+;\s*(\$\w+)\s*=\s*\3\s*\(\2\);\s*(\$\w+)\s*=\s*[gzinflate\\\\x6715"\.]+;\s*return\s*\5\(\4\);\s*\}~msi', $res, $matches)) {
            $res = preg_replace_callback('~\b(\w+)\s*\(\s*\'([^\']+)\'\s*\)~msi', function ($m) use ($matches) {
                if ($m[1] !== $matches[1]) {
                    return $m[0];
                }

                return '\'' . gzinflate(base64_decode($m[2])) . '\'';
            }, $res);
        }

        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, -2);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (
            preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res) ||
            strpos($matches[5], 'file_get_contents') !== false
        ) {
            return $res;
        }
        $string = substr($string, 5);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $eval = Helpers::getEvalCode($phpcode);
        $b64_count = substr_count($eval, $matches[1]);
        $b64 = Helpers::getTextInsideQuotes($eval);
        for ($i = 0; $i < $b64_count; $i++) {
            $b64 = base64_decode($b64);
        }
        $phpcode = $b64;
        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            $array = end($matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array)))));
            $old = '';
            $hangs = 0;
            while (
                ($old != $phpcode) && (strpos($phpcode, 'eval($') !== false)
                   && (strpos($phpcode, '__FILE__') === false) && $hangs < 30
            ) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) === 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) === 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = (int)$matches[1] - 21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            static function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {
            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        return stripcslashes($matches[0]);
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[11];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[5];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[9]] = $matches[10];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s*=\s*(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        if (preg_match('~function\s*(\w+)\s*\((\$\w+)\)\s*\{\s*return\s*(\w+)\s*\(\2,(\d+)\);\s*\}~msi', $result, $match)) {
            $result = preg_replace_callback('~' . $match[1] . '\s*\(\'([^\']+)\'\)~msi', function ($m) {
                return '\'' . Helpers::decodeUCSDelta($m[1]) . '\'';
            }, $result);
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $string = $matches[7];
        $string = MathCalc::calcRawString($string);
        $string = preg_replace('~[^0-9a-f]~msi', '', $string);
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8];
        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace(array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        return 'eval' . $matches[3];
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        return Helpers::decrypt_T_func(base64_decode($matches[15]));
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $dictionary = str_replace("\'", "'", $dictionary);
        $dictionary = str_replace('\"', '"', $dictionary);
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        $content = Helpers::replaceVarsFromDictionary($matches[1], $dictionary, $content);

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $content = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) {
            return '$' . $m[1];
        }, $content);

        $content = str_replace("''}", "\''}", $content);

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2]);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::convertToSafeFunc($func_name)) {
                $str = @Helpers::executeWrapper($func_name, [$str]);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[3]]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result          = $matches[0];
        $strName         = $matches[1];
        $dictionaryName  = $matches[2];
        $dictionaryValue = Helpers::collectStr("$matches[3]", "'");

        $funcs = [];
        $vars  = [];

        $result = preg_replace_callback(
            '~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi',
            function ($m) use (&$vars, $dictionaryValue) {
                $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0]));
                return '';
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = implode("", [$match[2], $match[3], $match[4]]);
                $replace    = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace      = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace      = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $dictionaryName, $dictionaryValue) {
                $str      = "";
                $isConcat = false;

                if (
                    preg_match(
                        '~return\s[\'"]([\w+\/+=]+)[\'"];~msi',
                        $match[0],
                        $returnCode
                    )
                ) {
                    $str = $returnCode[1];
                } else {
                    if (
                        preg_match(
                            '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                            $match[0],
                            $concatCode
                        )
                    ) {
                        $str      = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (
                            preg_match(
                                '~global\s(\$' . substr(
                                    $dictionaryName,
                                    1
                                ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                                $match[0],
                                $returnCode
                            )
                        ) {
                            $str      = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str      = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str']    = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr(
                $dictionaryName,
                1
            ) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::convertToSafeFunc($match[2])) {
                    $res = @Helpers::executeWrapper($match[2], [$str[$dictionaryName], $match[4]]);
                }

                if (Helpers::convertToSafeFunc($match[1]) && function_exists($match[1])) {
                    $args   = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $res = @Helpers::executeWrapper($match[1], $args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace(
            'mainVar',
            $strName,
            '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi'
        );

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code   = $result;
        $result = base64_decode($strToDecode);

        if (
            preg_match(
                '~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
                $code,
                $codeMatch
            )
        ) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf(
                "function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1),
                $codeMatch[5],
                $initialCode,
                $codeMatch[2],
                $result,
                substr($codeMatch[4], 1),
                $codeMatch[2],
                $codeMatch[9]
            );
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace(
                [$varMatch[0][$index], $varMatch[1][$index]],
                ["", $varMatch[2][$index]],
                $result
            );
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::convertToSafeFunc($func)) {
                $value = @Helpers::executeWrapper($func, [$arg1, $arg2 === 'trim' ? "" : $arg2, $argStr]);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[11], $vars[$matches[12]] ?? "", $decodeKey]);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$vars[$matches[8]] ?? '', "", $result]);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$result]);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateFuncFile2($str, $matches)
    {
        $var_fragment   = $matches[1];
        $decoded_code   = base64_decode($matches[3]);
        $var_name       = $matches[4];
        $new_fragment   = "$var_name = '$decoded_code';";
        return str_replace($var_fragment, $new_fragment, $str);
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace('\'.\'', '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[2]]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        if (!(isset($matches[4]) && $matches[4] !== '')) {
            $arr = [
                0 => $matches[5],
                1 => $matches[6],
                2 => $matches[13],
            ];

            $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
            if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                $arr[2] = $matches[10];
                $result = Helpers::decodeEvalCreateFunc_2($arr);
                return $result;
            }
        }

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;
        $matches[1] = MathCalc::calcRawString($matches[1]);
        $matches[1] = str_replace([' ', "'.", '.\'', '".', '."'], '', $matches[1]);
        $vars = [];
        Helpers::collectFuncVars($matches[1], $vars, false);
        foreach ($vars as &$var) {
            $vars2 = [];
            Helpers::collectFuncVars($var, $vars2, false);
        }
        if (isset($vars2) && is_array($vars2)) {
            $vars = array_merge($vars, $vars2);
        }
        Helpers::collectVars($matches[1], ['"', '\''], $vars);
        foreach ($vars as &$var) {
            $var = '\'' . $var . '\'';
        }
        unset($var);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if (strpos($result, 'eval') !== false) {
            $result = $this->unwrapFuncs($result);
        }
        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $dict = $matches[3];
        if (stripos($dict, 'base64_decode') !== false) {
            $dict = Helpers::replaceBase64Decode($dict);
        }
        if (stripos($dict, 'urldecode') !== false) {
            $dict = urldecode(substr($dict, 11, -2));
        }
        $dict = trim($dict, '\'"');

        $vars = Helpers::getVarsFromDictionary($dict, $matches[4]);
        $result = str_replace($matches[4], '', $str);

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateNonDictionaryCreateFuncs($str, $matches)
    {
        $result = str_replace($matches[1], '', $str);

        $vars = Helpers::collectVars(stripcslashes($matches[1]));

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        if (isset($matches[8]) && $matches[8] !== '') {
            return base64_decode($matches[4]);
        }
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", '\'.\''], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i = 0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1]);
        preg_match_all('~(\$\w+)=((?:\$\w+\.?)+);~msi', $matches[2], $varMatches, PREG_SET_ORDER);
        $finalVars = [];
        foreach ($varMatches as $varMatch) {
            $finalVars[$varMatch[1]] = Helpers::concatStr(
                Helpers::replaceVarsFromArray($vars, $varMatch[2], false, true)
            );
        }
        $res = Helpers::replaceVarsFromArray($finalVars, $matches[3], true);

        return $res;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1], $var, false, true);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1], '"', $vars, true);
        $matches[3] = $matches[3] === '' ? $matches[5] : 'eval(' . $matches[4] . ');';

        $res = Helpers::replaceVarsFromArray($vars, $matches[3], false, true);
        $parts = array_filter(array_map('trim', explode(';', $res)));
        $hangs = 10;
        foreach ($parts as &$part) {
            while (strpos($part, 'eval') === 0 && $hangs--) {
                $part = preg_replace_callback(
                    '~\$\w+\b(?!\s*=)~msi',
                    function ($m) use ($vars) {
                        return isset($vars[$m[0]]) ? '\'' . $vars[$m[0]] . '\'' : $m[0];
                    },
                    $part
                );
                if (substr_count($part, 'eval(') > 1) {
                    $tmp = array_filter(array_map('trim', explode(';', $part)));
                    foreach ($tmp as &$item) {
                        $item = preg_replace_callback(
                            '~\$\w+\b(?!\s*=)~msi',
                            function ($m) use ($vars) {
                                return isset($vars[$m[0]]) ? $vars[$m[0]] : $m[0];
                            },
                            $item
                        );
                        $item = $this->deobfuscateEval($item, []);
                        Helpers::collectConcatedVars($item, '"', $vars, true);
                    }
                    unset($item);
                    $part = implode($tmp);
                } else {
                    $part = $this->deobfuscateEval($part, []);
                }
            }
        }
        if (count($parts) > 1) {
            $parts[0] = Helpers::replaceVarsFromArray($vars, $parts[0]);
        }
        unset($part);
        $res = implode($parts);
        $res = preg_replace_callback('~hex2bin\s*\("([a-f0-9]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (
            preg_match(
                '~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
                $res,
                $match
            )
        ) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (
                preg_match(
                    '~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                    $res,
                    $match
                )
            ) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[3]);
        $array2 = [];
        $arrayStr = (isset($matches[2]) && $matches[2] !== '') ? base64_decode($matches[2]) : $matches[1];

        if (
            preg_match(
                '~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
                $arrayStr,
                $match
            )
        ) {
            preg_match_all(
                '~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi',
                $match[0],
                $arrayMatches
            );

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace([$matches[1], $matches[8], $matches[10]], [$matches[2], 0, 0], $matches[7]);

        if (Helpers::convertToSafeFunc($matches[4])) {
            $code = @Helpers::executeWrapper($matches[4], [$matches[6]]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    private function deobfuscateEchoEscapedStr($str, $matches)
    {
        $i = 1;
        $result = $matches[1];
        $result = str_replace('\\\\\\', '\\\\', $result);

        while ($i < 3) {
            if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) {
                break;
            }

            $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) {
                return stripcslashes($m[1]);
            }, $result);

            $i++;
        }

        $result = stripslashes($result);
        $vars = Helpers::collectVars($result);

        $result = preg_replace_callback(
            '~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi',
            function ($m) use (&$vars) {
                $vars['$' . $m[1]] = $m[2];

                return '';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result);

        foreach ($vars as $name => $val) {
            $result = str_replace("$val=\"$val\";", '', $result);
        }

        return $result;
    }

    private function deobfuscateFilePutDecodedContents($str, $matches)
    {
        $res = $str;
        $content = base64_decode($matches[2]);
        $res = str_replace($matches[1], $content, $res);

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $res);

        $res    = Helpers::concatStringsInContent($res);
        $res    = Helpers::replaceBase64Decode($res, '\'');
        $vars   = Helpers::collectVars($res);
        $res    = Helpers::replaceVarsFromArray($vars, $res);
        $res    = Helpers::removeDuplicatedStrVars($res);

        return $res;
    }

    private function deobfuscatePregReplaceStr($str, $matches)
    {
        return stripcslashes($matches[1]);
    }

    private function deobfuscateEvalImplodedArrStr($str, $matches)
    {
        $split = str_split(stripcslashes($matches[2]));
        $map = array_map(static function ($str) {
            return chr(ord($str) - 1);
        }, $split);
        return implode($map);
    }

    private function deobfuscatePregReplaceCodeContent($str, $matches)
    {
        $func = stripcslashes($matches[5]);

        $res = $matches[2];

        if (
            preg_match(
                '~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi',
                $func,
                $match
            )
        ) {
            if ($match[3] === $matches[1]) {
                $res = str_replace($match[1], stripcslashes($match[2]), $res);
            }
        }

        $vars = [];

        $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) {
            $value = $m[3];
            if ($m[2] === '"') {
                $value = stripcslashes($value);
            }

            $vars[$m[1]] = $value;

            return sprintf('%s=\'%s\';', $m[1], $value);
        }, $res);

        $arrayVar = [];
        $arrayVarName = '';

        if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) {
            $arrayVarName = $m[1];

            preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER);
            if (isset($arrMatch[1])) {
                foreach ($arrMatch[1] as $arr) {
                    $arrayVar[] = $arr;
                }
            }
        }

        if (
            preg_match(
                '~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi',
                $res,
                $match
            )
        ) {
            $arrayVar2 = [];
            preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER);
            if (isset($arrMatch2[1])) {
                foreach ($arrMatch2[1] as $arr) {
                    $arrayVar2[] = $arr;
                }
            }

            if (
                isset($vars[$match[5]])
                && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m)
                    && $m[1] === $arrayVarName
                    && isset($vars[$m[2]])
                )
            ) {
                $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]);
            }
        }

        return $res;
    }

    private function deobfuscateSistemitComEnc($str, $matches)
    {
        $matches[4] = base64_decode(base64_decode($matches[4]));
        $res = gzinflate(base64_decode($matches[2]));
        preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $matches[4], $replace, PREG_SET_ORDER);
        $find = explode("','", substr($replace[0][1], 1, -1));
        $replace = explode("','", substr($replace[1][1], 1, -1));
        $res = str_replace($find, $replace, $res);
        return $res;
    }

    private function deobfuscateConcatVarsReplaceEval($str, $matches)
    {
        $res = Helpers::concatVariableValues($matches[1]);
        $res = str_replace($matches[5], '', $res);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalVarFunc2($str, $matches)
    {
        return $this->unwrapFuncs($matches[6]);
    }

    private function deobfuscateEvalArrays($str, $matches)
    {
        $res = str_replace('\'\'', '@@empty@@', $str);
        $vars = explode('", "', substr($matches[10], 1, -1));

        $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function ($m) use ($vars, $matches) {
            if ($m[1] !== $matches[9]) {
                return $m[0];
            }
            return "'" . $vars[(int)$m[2]] . "'";
        }, $res);
        $res = str_replace(['\'\'', '@@empty@@', $matches[8]], ['', '\'\'', ''], $res);
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $vars[$var[1]] = '\'' . $var[2] . '\'';
            $res = str_replace($var[0], '', $res);
        }
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscatePregReplaceVar($str, $matches)
    {
        $result = stripcslashes($matches[2]);

        $regex = stripcslashes($matches[1]);
        if ($regex === '.*') {
            return $result;
        }

        $result = preg_replace_callback($regex, static function ($m) {
            return '';
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBinHexVar($str, $matches)
    {
        $func1 = stripcslashes($matches[2]);
        $func2 = stripcslashes($matches[4]);
        $result = '';

        if (Helpers::convertToSafeFunc($func2) && Helpers::convertToSafeFunc($func1)) {
            $result = '?>' . @Helpers::executeWrapper($func1, [@Helpers::executeWrapper($func2, [$matches[6]])]);
        } else {
            $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $matches[6]);
        }

        return $result;
    }

    private function deobfuscateEvalFuncTwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[5]);
        $arg2 = $matches[6];

        $result = "";
        for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) {
            for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) {
                $result .= $arg1[$o] ^ $arg2[$u];
            }
        }

        return $result;
    }

    private function deobfuscateEvalVarReplace($str, $matches)
    {
        $res = $matches[3];
        $replaces = explode(';', $matches[4]);
        foreach ($replaces as $replace) {
            if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) {
                $res = str_replace($m[2], $m[3], $res);
            }
        }
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalPregReplaceFuncs($str, $matches)
    {
        $func1Str = preg_replace('/' . $matches[3] . '/', "", $matches[2]);
        $func2Str = preg_replace('/' . $matches[6] . '/', "", $matches[5]);

        $strToDecode = '';
        preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $matches[8], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $index => $strMatch) {
            if ($index > 0) {
                $strToDecode .= PHP_EOL;
            }
            $strToDecode .= $strMatch[1];
        }

        $result = '';
        if (Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
        }

        if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
            $result = stripcslashes($result);
            $vars = Helpers::collectVars($result);
            if (
                preg_match(
                    '~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi',
                    $result,
                    $m
                )
            ) {
                $result = $m[0];
            }
            $result = Helpers::replaceVarsFromArray($vars, $result);
            $result = preg_replace_callback(
                '~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi',
                function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[1])));
                },
                $result
            );
        }

        return $result;
    }

    private function deobfuscateEvalVarSlashed($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateUrlMd5Passwd($str, $matches)
    {
        while (preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $matches2)) {
            $vars = Helpers::collectVars($matches2[1], "'");
            $str = Helpers::replaceVarsFromArray($vars, $str, true);
            $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function ($m) {
                return "'" . str_rot13(urldecode($m[1])) . "'";
            }, $str);
            $str = str_replace($matches2[0], '', $str);
        }
        return $str;
    }

    private function deobfuscateBlackScorpShell($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], "'");
        $vars2 = Helpers::collectVars($matches[3], "'");
        array_walk($vars2, static function (&$var) {
            $var = "'$var'";
        });
        $str = gzinflate(base64_decode($vars2[$matches[5]]));
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        $str = Helpers::replaceVarsFromArray($vars2, $str);
        $str = str_ireplace('assert', 'eval', $str);
        return $str;
    }

    private function deobfuscateManyDictionaryVars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], "'");
        $result = $matches[2];

        foreach ($vars as $dictName => $dictVal) {
            $result = preg_replace_callback(
                '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi',
                static function ($m) use ($dictVal, $dictName) {
                    if ($m[1] !== $dictName) {
                        return $m[0];
                    }
                    return "'" . $dictVal[(int)$m[2]] . "'";
                },
                $result
            );
        }
        $result = Helpers::replaceVarsFromArray($vars, $result, true, true);
        $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) {
            return $m[2];
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBuffer($str, $matches)
    {
        $result = $matches[4];

        preg_match_all('~"([^"]+)"~msi', $matches[2], $arrMatches, PREG_SET_ORDER);

        $array = [];
        foreach ($arrMatches as $arrMatch) {
            $array[] = stripcslashes($arrMatch[1]);
        }

        $result = str_replace($array, '', $result);

        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalArrayWalkFunc($str, $matches)
    {
        $result = stripcslashes($matches[1]) . '?>' . PHP_EOL;
        $encodedStr = '';

        preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $matches[2], $arrayMatches, PREG_SET_ORDER);

        foreach ($arrayMatches as $arrayMatch) {
            $encodedStr .= stripcslashes($arrayMatch[1]);
        }

        $result .= base64_decode(str_rot13($encodedStr));

        return $result;
    }

    private function deobfuscateEvalDictionaryVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[2]] = $matches[3];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $matches[1]);

        $func = $vars[$matches[5]] ?? null;
        if ($func && Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[6]]);
        }

        $result = Helpers::replaceVarsFromArray($vars, $result);

        return $result;
    }

    private function deobfuscateEvalSubstrVal($str, $matches)
    {
        $result = strtr(
            substr($matches[2], (int)$matches[3] * (int)$matches[4]),
            substr($matches[2], (int)$matches[5], (int)$matches[6]),
            substr($matches[2], (int)$matches[7], (int)$matches[8])
        );

        return '?> ' . base64_decode($result);
    }

    private function deobfuscateEvalFuncXored($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str);
        $result = Helpers::replaceVarsFromArray($vars, $str);

        if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) {
            $encodedStr = gzinflate(base64_decode($matches[1]));
            $len = strlen($encodedStr);
            $result = '';
            for ($i = 0; $i < $len; $i++) {
                $result .= chr((ord($encodedStr[$i]) ^ (int)$matches[3]));
            }
        }

        return $result;
    }

    private function deobfuscateEvalFileContentOffset($str, $matches)
    {
        $result = $matches[1];

        $encodedStr = substr($str, (int)$matches[3]);
        $result = str_replace($matches[2], "'$encodedStr'", $result);

        return '<?php ' . $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalFuncExplodedContent($str, $matches)
    {
        $decodedStr = trim(trim($matches[7], ";"), '"');
        $strMD5 = md5($matches[1]);

        $result = base64_decode(
            str_replace($strMD5, '', strtr($decodedStr . $matches[4], $matches[5], $matches[6]))
        );

        return $result;
    }

    private function deobfuscateEvalEncryptedVars($str, $matches)
    {

        $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) {
            $res = (double)($m[1]) * (int)$m[2];

            return "'$res'";
        }, $matches[1]);

        $vars_str = str_replace('"', "'", Helpers::normalize($vars_str));

        $vars = Helpers::collectVars($vars_str, "'");
        $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str);
        $vars = Helpers::collectFuncVars($vars_str, $vars);
        $vars_str = Helpers::removeDuplicatedStrVars($vars_str);

        if (
            $a = preg_match(
                '~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi',
                $vars_str,
                $varMatch
            )
        ) {
            $vars[$varMatch[1]] = openssl_decrypt(
                base64_decode($varMatch[2]),
                'AES-256-CBC',
                substr(hash('SHA256', $varMatch[3], true), 0, 32),
                OPENSSL_RAW_DATA,
                $varMatch[4]
            );
        }

        $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $matches[7]));
        $result = str_replace($matches[4], str_replace($matches[5], '', "'$matches[6]'"), $result);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalLoveHateFuncs($str, $matches)
    {
        $result = $matches[7];
        $result .= gzinflate(base64_decode($matches[4]));

        /* hate function */
        $finalPHPCode = null;
        $problems = explode(".", gzinflate(base64_decode($matches[2])));
        for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($matches[6])) {
            for ($hug = 0, $hugMax = strlen($matches[6]); $hug < $hugMax; $hug++) {
                $past = (int)$problems[$mistake + $hug];
                $present = (int)ord(substr($matches[6], $hug, 1));
                $sweet = $past - $present;
                $finalPHPCode .= chr($sweet);
            }
        }

        $finalPHPCode = gzinflate(base64_decode($finalPHPCode));

        $result .= PHP_EOL . $finalPHPCode;

        return $result;
    }

    private function deobfuscateXoredKey($str, $matches)
    {
        $encrypted = base64_decode($matches[4]);
        $key = $matches[7];
        $res = Helpers::xorWithKey($encrypted, $key);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalGzB64($str, $matches)
    {
        $res = '';
        preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER);
        foreach ($m as $match) {
            $res .= gzuncompress(base64_decode($match[1])) . "\n";
        }
        return $res;
    }

    private function deobfuscateEvalArrayB64($str, $matches)
    {
        if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) {
            $strlist = explode("','", $found[4]);
            $res = preg_replace_callback(
                '|(\w+)\((\d+)\)|smi',
                function ($m) use ($strlist, $found) {
                    if ($m[1] !== $found[1]) {
                        return $m[0];
                    }
                    return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'";
                },
                $str
            );
            $res = str_replace($matches[1], '', $res);
            return $res;
        }
    }

    private function deobfuscateManyBase64DecodeContent($str)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateEvalEscapedCharsContent($str, $matches)
    {
        $res = $matches[2] . "'" . stripcslashes($matches[1]) . "')";

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalFuncBinary($str, $matches)
    {
        $binaryVals = hex2bin($matches[2]);
        $res = Helpers::decodeEvalFuncBinary($binaryVals);

        return $res;
    }

    private function deobfuscateEvalPackFuncs($str, $matches)
    {
        return stripcslashes($matches[3]) . $matches[4];
    }

    private function deobfuscateParseStrFunc($str, $matches)
    {
        $matches[1] = preg_replace('~(?<=\.)\/\*[^\*]+\*\/|//[^\']+(?=\.\')~msi', '', $matches[1]);
        parse_str(Helpers::concatStr($matches[1]), $vars);
        $funcs = ($matches[5] && $matches[5] !== '') ? $matches[5] : $matches[3];
        $res = Helpers::replaceVarsByArrayName($matches[2], $vars, $funcs);
        $res = $this->unwrapFuncs($res . $matches[6] . ')');
        if (strpos($res, '0+0') !== false) {
            $res = MathCalc::calcRawString($res);
        }

        return $res;
    }

    private function deobfuscateEvalGzinflate($str, $match)
    {
        $res = stripcslashes($match[2]);
        $res = str_replace('"."', '', $res);
        return 'eval(' . $res . ');';
    }

    private function deobfuscateFuncVars($str, $matches)
    {
        $key = $matches[3];
        $res = $matches[7];
        $vars = [$matches[4] => preg_replace($matches[5], "", $matches[6])];

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $matches[4] . '\(("[^"]+")\)\);~msi',
            $str,
            $match,
            PREG_SET_ORDER
        );
        foreach ($match as $matchVar) {
            $value = Helpers::decodeFuncVars($key, $this->unwrapFuncs($vars[$matches[4]] . '(' . $matchVar[3] . ')'));
            if ($matchVar[2] !== '') {
                $func = $vars[$matchVar[2]] ?? $matchVar[2];
                $value = $func . '() . \'' . $value . '\'';
            }
            $vars[$matchVar[1]] = $value;
        }

        foreach ($vars as $name => $val) {
            $res = str_replace($name, $val, $res);
        }
        return $res;
    }

    private function deobfuscateDictVars($str, $match)
    {
        $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]);
        $res = gzinflate(base64_decode(substr($res, 2, -3)));
        return $res;
    }

    private function deobfuscateGotoStrRot13Vars($str, $matches)
    {
        if (isset($matches[2])) {
            $vars = Helpers::collectVars($str);

            preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                if (isset($vars[$m[1]])) {
                    $vars[$m[1]] = str_rot13($vars[$m[1]]);
                }
            }

            preg_match_all('~(\$\w{1,50})~msi', $matches[2], $match, PREG_SET_ORDER);
            $strToDecode = '';
            foreach ($match as $var) {
                if (isset($vars[$var[1]])) {
                    $strToDecode .= $vars[$var[1]];
                }
            }

            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateDecodedDoubleStrSet($str, $matches)
    {
        $strToDecode1 = '';
        $strToDecode2 = '';

        preg_match_all('~"([^"]+)"~msi', $matches[1], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode2 .= $m[1];
        }
        preg_match_all('~\'([^\']+)\'~msi', $matches[2], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode1 .= $m[1];
        }

        return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2);
    }

    private function deobfuscateCreateFuncStrrev($str, $matches)
    {
        $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) {
            return '"' . strrev($m[1]) . '"';
        }, $matches[3]);

        $res = Helpers::concatStringsInContent($res);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $res);
        $res = Helpers::removeDuplicatedStrVars($res);

        if (
            preg_match(
                '~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi',
                $res
            )
        ) {
            $funcs = base64_decode($matches[5]);
            $res = str_replace($matches[1], '\'' . $matches[2] . '\'', $funcs);
        }

        return $res;
    }

    private function deobfuscateStrrevBase64($str, $matches)
    {
        return strrev($matches[2]);
    }

    private function deobfuscateCustomDecode($str, $matches)
    {
        return str_rot13($matches[2] . $matches[6]);
    }

    private function deobfuscateExpDoorCode($str, $matches)
    {
        $str = str_replace(
            [
                    $matches[1],
                    $matches[3]
                ],
            [
                    str_replace(['"."', '\'.\''], '', $matches[1]),
                    "'" . addcslashes(base64_decode($matches[4]), "'") . "'"
                ],
            $str
        );
        return $str;
    }

    private function deobfuscateAgustus1945($str, $matches)
    {
        return str_replace($matches[1], $matches[4] . '"' . $matches[7] . '"' . $matches[5], $str);
    }

    private function deobfuscateIncludeB64($str, $matches)
    {
        return str_replace($matches[1], "'" . base64_decode($matches[2]) . "'", $str);
    }

    private function deobfuscateDecodeFileContent($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateBase64decodedFuncContents($str, $matches)
    {
        $vars   = Helpers::collectVars($matches[2]);
        $res    = str_replace($matches[2], '', $str);
        $res    = Helpers::replaceVarsFromArray($vars, $res);

        return Helpers::replaceBase64Decode($res, '\'');
    }

    private function deobfuscateEvalVarWithComment($str, $matches)
    {
        $res = str_replace($matches[3], '', $matches[2]);
        $vars = Helpers::collectVars($matches[1]);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        return '?> ' . $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalPackPreg($str, $matches)
    {
        $varsStr = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($varsStr, "'");
        if (isset($vars[$matches[6]]) && Helpers::convertToSafeFunc($vars[$matches[6]])) {
            $strToDecode = @Helpers::executeWrapper($vars[$matches[6]], [$matches[2]]);
            $strToDecode = preg_replace('~[' . $matches[5] . ']~i', '', $strToDecode);
            $strToDecode = pack('H*', $strToDecode);

            return $strToDecode;
        }

        return $str;
    }

    private function deobfuscateNib2xeh($str, $matches)
    {
        $matches[3] = str_replace("'", '', $matches[3]);
        $matches[5] = str_replace("'", '', $matches[5]);
        $matches[7] = str_replace("'", '', $matches[7]);
        $replace_from = explode(',', $matches[5]);
        $replace_from[] = ',';
        $replace_to = explode(',', $matches[7]);
        $replace_to[] = '';
        $hex = str_replace($replace_from, $replace_to, $matches[3]);
        return hex2bin($hex);
    }

    private function deobfuscateFun256($str, $matches)
    {
        $need_encode_twice  = !isset($matches[4]);
        $replace            = $need_encode_twice ? $str : $matches[1];
        $code               = $need_encode_twice ? $matches[3] : $matches[4];

        $chr = '';
        for ($i = 0; $i < 120; $i++) {
            $chr .= chr($i);
        }
        $encoded = gzinflate(gzinflate(base64_decode($code)));
        if ($need_encode_twice) {
            $encoded = gzinflate(gzinflate(base64_decode($encoded)));
        }
        $encoded_len = strlen($encoded);
        $hash = sha1(hash('sha256', md5($chr)));
        $hash_len = strlen($hash);
        $j = null;
        $result = '';
        for ($i = 0; $i < $encoded_len; $i += 2) {
            $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16));
            if ($j === $hash_len) {
                $j = 0;
            }
            $delta = ord($hash[$j]);
            $j++;
            $result .= chr($char - $delta);
        }
        $result = str_replace($replace, $result, $str);
        return $result;
    }

    private function deobfuscateCreateFuncObf($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($matches[7], '\'');
        $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $str);
        $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function ($m) {
            return '\'' . Helpers::calc($m[0]) . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        return base64_decode(substr($str, 1, -1));
    }

    private function deobfuscateEvalFileContentBySize($str, $matches)
    {
        $res = $str;
        $mainContent = str_replace(["\r", "\n"], '', $str);
        $mainContentLen = strlen($mainContent);
        $main_key = $matches[2] . $mainContentLen;

        $str_to_code = base64_decode($matches[3]);
        $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key);

        if (
            preg_match(
                '~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi',
                $code,
                $match
            )
        ) {
            preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER);

            $find = '';
            foreach ($chrMatches as $chrMatch) {
                $find .= chr((int)$chrMatch[1]);
            }
            $pos = strpos($mainContent, $find);
            $content = substr($mainContent, 0, $pos);

            $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key);
            if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) {
                $key = md5($content) . $mainContentLen;
                $content = base64_decode(substr($mainContent, $pos + (int)$match[3]));
                $res = Helpers::decodeEvalFileContentBySize($content, $key);
            }
        }

        return '<?php ' . $res;
    }

    private function deobfuscateBase64Array($str, $matches)
    {
        $var_name   = $matches[1];
        $el0        = base64_decode($matches[2]);
        $el1        = Helpers::replaceBase64Decode($matches[3], '\'');
        $code       = $matches[4];

        $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code);
        $code = str_replace($var_name . '[1]', $el1, $code);
        $code = Helpers::replaceBase64Decode($code, '\'');

        return $code;
    }

    private function deobfuscateSimpleVarsAndEval($str, $matches)
    {
        $vars_content = $matches[1];
        $eval_content = $matches[2];

        $vars = Helpers::collectVars($vars_content);
        $code = Helpers::replaceVarsFromArray($vars, $eval_content);

        $code = preg_replace_callback('~\(([\w+/=:\.]{20,})\)~msi', function ($m) {
            return '("' . $m[1] . '")';
        }, $code);

        if (strpos($code, 'base64_decode') === 0) {
            $code = 'eval(' . $code . ')';
        }

        if ($this->getObfuscateType($code) !== '') {
            $code = $this->unwrapFuncs($code);
        }
        return $code;
    }

    private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $matches)
    {
        $nel_function_content   = $matches[3];
        $other_content          = $matches[1] . $matches[4];
        $array_elements         = str_replace('\'.\'', '', $nel_function_content);

        $elements = array_map('base64_decode', explode(',', $array_elements));

        $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function ($match) use ($elements) {
                $index = $match[1];
                $value = isset($elements[$index]) ? $elements[$index] : null;
            if (!is_null($value)) {
                if ($value === "\r") {
                    return '"\\r"';
                }
                return "'" . addcslashes($value, "'\\") . "'";
            }
                return $match[0];
        }, $other_content);

        return Helpers::replaceMinMaxRound($result);
    }

    private function deobfuscateCreateFuncVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateJsonDecodedVar($str, $matches)
    {
        $decodedStr = Helpers::replaceBase64Decode($matches[1], 'QUOTE');
        $decodedStr = str_replace("'", "\'", $decodedStr);
        $decodedStr = str_replace("QUOTE", "'", $decodedStr);

        $res = str_replace($matches[1], $decodedStr, $str);

        return $res;
    }

    private function deobfuscateFilePutPureEncodedContents($str, $matches)
    {
        return $this->deobfuscateJsonDecodedVar($str, $matches);
    }

    private function deobfuscateEvalFuncReverse($str, $matches)
    {
        $decodedContent = $matches[5];
        $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) {
            $strLen = strlen($m[2]);
            $res = '';

            for ($i = 0; $i <= $strLen - 1; $i++) {
                $res .= $m[2][$strLen - $i - 1];
            }

            return str_replace($m[1], $res, $m[0]);
        }, $decodedContent);

        return str_replace($matches[5], $decodedContent, $str);
    }

    private function deobfuscateBase64decodeFuncs($str, $matches)
    {
        $res = $str;
        $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) {
            return "'" . base64_decode($m[1]) . "'";
        }, $res);

        return $res;
    }

    private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);
        $vars = Helpers::collectVars($res, "'");
        $func = stripcslashes($matches[5]);

        return sprintf('eval(%s(%s(\'%s\'))));', $vars[$matches[3]] ?? $matches[3], $func, $matches[6]);
    }

    private function deobfuscateEvalCreateFuncWithVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectVars($res, false);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $res = Helpers::concatStringsInContent($res);
        $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) {
            return str_replace(',', '.', $m[1]);
        }, $res);
        $res = Helpers::concatStringsInContent($res);

        return trim($res, "'");
    }

    private function deobfuscateExplodeSubstrGzinflate($str, $matches)
    {
        $obfuscated = explode($matches[3], gzinflate(substr(stripcslashes($matches[4]), hexdec($matches[5]), (int)$matches[6])));
        $str = str_replace($matches[1], '', $str);
        $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]]\]?(\()?~msi', function ($m) use ($obfuscated) {
            $index = hexdec($m[1]);
            $func = (isset($m[2]) && $m[2] !== '');
            if ($func) {
                return $obfuscated[$index] . '(';
            } else {
                return '\'' . $obfuscated[$index] . '\'';
            }
        }, $str);
        $str = preg_replace('~define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);~msi', '', $str);
        $str = Helpers::normalize($str);
        return $str;
    }

    private function deobfuscateBase64Vars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], '\'');
        $code = Helpers::replaceVarsFromArray($vars, $matches[5], false, true);
        $code = Helpers::collectStr($code, '\'');
        $code = base64_decode($code);
        $code = str_replace($matches[1], $code, $str);
        return $code;
    }

    private function deobfuscateChr0b($str, $matches)
    {
        $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function ($m) {
            if (isset($m[2]) && $m[2] === '0b') {
                return '\'' . chr(bindec($m[1])) . '\'';
            }
            if (isset($m[2]) && $m[2] === '0x') {
                return '\'' . chr(hexdec($m[1])) . '\'';
            }
            return '\'' . chr($m[1]) . '\'';
        }, $str);

        $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function ($m) {
            return '\'' . ($m[1] ^ $m[2]) . '\'';
        }, $str);

        $str = str_replace('\'.\'', '', $str);
        $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str);
        $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) {
            return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';';
        }, $str);
        return $str;
    }

    private function deobfuscateCreateFuncPlugin($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateStrreplaceEval($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1]);
        return Helpers::replaceVarsFromArray($vars, $matches[4]);
    }

    private function deobfuscateHackM19($str, $matches)
    {
        return gzinflate(base64_decode($matches[6]));
    }

    private function deobfuscateEv404($str, $matches)
    {
        return bzdecompress(base64_decode($matches[4]));
    }

    private function deobfuscateSetVars($str, $matches)
    {
        return str_replace($matches[1], gzinflate(base64_decode($matches[5])), $str);
    }

    private function deobfuscateCreateFuncGzB64($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateCreateFuncGzInflateB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateWsoShellDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $vars              = Helpers::collectFuncVars($res, $vars, false);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $finalCode         = $this->unwrapFuncs($res);

        $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $matches[6]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);
        if (isset($vars[$matches[9]]) && $vars[$matches[9]] === 'rotencode') {
            $vars[$matches[8]] = Helpers::rotencode(base64_decode($matches[10]), -1);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[8], $vars[$matches[8]] ?? '', $matches[11]);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $dictVar);
            $vars    = Helpers::collectVars($dictVar, "'", $vars);

            $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[12]));

            $count = 10;
            while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) {
                $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res));
                $count--;
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateFuncDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);

        $vars[$matches[3]] = explode($matches[4], $matches[5]);
        foreach ($vars[$matches[3]] as $i => $k) {
            $temp          = preg_split("//", $k, -1, PREG_SPLIT_NO_EMPTY);
            $vars[$matches[3]][$i] = implode("", array_reverse($temp));
        }

        $iterVar = explode($matches[7], $matches[8]);
        foreach ($iterVar as $i => $k) {
            $vars[$k] = $vars[$matches[3]][$i];
        }

        $vars[$matches[1]] = Helpers::decodefuncDictVars($vars[$matches[1]], -2);
        $dictVar = Helpers::replaceVarsFromDictionary($matches[1], $vars[$matches[1]] ?? '', $matches[15]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $matches[20]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $res = Helpers::decodefuncDictVars($matches[23], 1);
        if (isset($vars[$matches[22]]) && Helpers::convertToSafeFunc($vars[$matches[22]])) {
            $res = @Helpers::executeWrapper($vars[$matches[22]], [$res]);
            $res = Helpers::replaceVarsFromArray($vars, $res);
        }

        if (
            preg_match(
                '~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi',
                $res,
                $match
            )
        ) {
            $res = '?> ' . gzuncompress(base64_decode(
                strtr(
                    substr($match[1], (int)Helpers::calculateMathStr($match[2])),
                    substr($match[1], (int)$match[3], (int)$match[4]),
                    substr($match[1], (int)$match[5], (int)$match[6])
                )
            ));
        }

        return $res;
    }

    private function deobfuscateSec7or($str, $matches)
    {
        $res = $this->unwrapFuncs($matches[3] . $matches[6] . $matches[4] . ';');
        for ($i = 0, $iMax = strlen($res); $i < $iMax; $i++) {
            $res[$i] = chr(ord($res[$i]) - (int)$matches[5]);
        }
        return $res;
    }

    private function deobfuscateLinesCond($str, $matches)
    {
        $vars_str = $this->unwrapFuncs($matches[1]);
        preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $func = base64_decode($var[2]);
            $tmp = explode('=', $var[1]);
            array_pop($tmp);
            $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func));
        }
        $vars = array_merge(...$vars);
        $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) {
            while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) {
                $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0]));
            }
            return $m[0];
        }, $matches[3]);
        $tmp = [];
        $vars = Helpers::collectVars($res, '"', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $vars = Helpers::collectVars($res, '\'', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateClassWithArrays($str, $matches)
    {
        preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $matches[2], $m);
        $data = implode('', array_reverse($m[1]));
        $data = gzuncompress(base64_decode($data));

        $numberSubstr = 14;
        if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) {
            $numberSubstr = (int)Helpers::calculateMathStr($calcMatch[1]);
        }
        for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) {
            if (isset($data[$i])) {
                $param3 = ord($data[$i]);
                $data[$i] = chr($param3 - $numberSubstr);
            }
        }
        $res = gzuncompress(base64_decode(strrev(gzinflate($data))));
        return $res;
    }

    private function deobfuscateGotoBase64Decode($str)
    {
        $res = $str;
        $hop = 5;

        while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) {
            $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $code = base64_decode(stripcslashes($match[1]));
                return '"' . Helpers::unwrapGoto($code) . '"';
            }, $res);

            $hop--;
        }

        return $res;
    }

    private function deobfuscateGotoB64Xor($str, $matches)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateAssertStrrev($str, $matches)
    {
        return str_replace($matches[1], strrev($matches[4]), $str);
    }

    private function deobfuscateB64strtr($str, $matches)
    {
        $code = $matches[4];
        $delta = (int)$matches[1];
        $code = str_split($code);
        foreach ($code as &$c) {
            $c = chr(ord($c) + $delta);
        }
        $code = implode('', $code);
        $code = strtr($code, $matches[2], $matches[3]);
        $code = base64_decode($code);
        preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m);
        $code = gzuncompress(base64_decode(strtr(substr($m[2], 52 * 2), substr($m[2], 52, 52), substr($m[2], 0, 52))));
        $res = Helpers::unwrapGoto($code);
        return $res;
    }

    private function deobfuscateGzB64strReplaceDataImage($str, $matches)
    {
        $strToDecode = str_replace([$matches[2], $matches[3]], [$matches[4], $matches[5]], $matches[7]);

        $res = gzinflate(base64_decode($strToDecode));

        return $res;
    }

    private function deobfuscateSerializeFileContent($str, $matches)
    {
        return base64_decode(strrev(str_rot13($matches[2])));
    }

    private function deobfuscateGlobalVarsManyReplace($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);

        foreach ($vars as &$var) {
            $var = base64_decode(strrev(str_rot13($var)));
        }

        $res = Helpers::replaceVarsFromArray($vars, $matches[2], true, true);

        return $res;
    }

    private function deobfuscateConcatVarsPregReplace($str, $matches)
    {
        $vars = [];

        $vars = Helpers::collectConcatedVars($str, '"', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[3], true, true);
        $res = $this->unwrapFuncs($res);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Decoded($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectConcatedVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);
        $res = Helpers::replaceBase64Decode($res, '"');

        return $res;
    }

    private function deobfuscateFwriteB64DecodedStr($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectFuncVars($res, $vars, false, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Content($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, "'");

        return $res;
    }

    private function deobfuscateChrDictCreateFunc($str, $matches)
    {
        $vars = [];

        preg_match_all('~chr\((\d+)\)~msi', $matches[3], $chrs, PREG_SET_ORDER);

        $dictVar = '';
        foreach ($chrs as $chr) {
            $dictVar .= chr((int)$chr[1]);
        }

        $res = Helpers::replaceVarsFromDictionary($matches[2], $dictVar, $matches[6]);
        $res = str_replace('\\\'', "'", $res);
        $res = Helpers::replaceBase64Decode($res, "'");
        $res = substr($res, 1);
        $res = substr($res, 0, -1);

        return $res;
    }

    private function deobfuscateStrReplaceFuncsEvalVar($str, $matches)
    {
        $func = str_replace($matches[3], '', $matches[2]);

        if ($func === 'base64_decode') {
            return base64_decode($matches[4]);
        }

        return $str;
    }

    private function deobfuscateB64SlashedStr($str, $matches)
    {
        return stripcslashes(base64_decode(stripcslashes($matches[1])));
    }

    private function deobfuscateB64ArrayStrEval($str, $matches)
    {
        return base64_decode($matches[4]);
    }

    private function deobfuscateDictVarsPregReplaceB64($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);

        if (
            strpos($res, 'preg_replace') &&
            strpos($res, 'eval') &&
            strpos($res, 'base64_decode')
        ) {
            return base64_decode($matches[3]);
        }

        return $res;
    }

    private function deobfuscateEvalVarB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateDecodeAChar($str, $matches)
    {
        $res = str_replace($matches[1], '', $str);
        while (strpos($res, 'eval(' . $matches[2] . '(\'') !== false) {
            $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) {
                return Helpers::decodeACharCustom($m[1]);
            }, $res);
        }
        $vars = Helpers::collectVars($res, '\'');
        foreach ($vars as $var => $value) {
            if (strpos($res, $matches[2] . '(' . $var . ')') !== false) {
                $res = str_replace($var . '=\'' . $value . '\';', '', $res);
                $res = str_replace($matches[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res);
            }
        }
        return $res;
    }

    private function deobfuscateStrReplaceCreateFunc($str, $matches)
    {
        $res = $matches[7];
        $funcs = str_replace($matches[3], 'str_replace', $matches[4]);
        $vars = Helpers::collectFuncVars($funcs, $vars, false);
        $vars[$matches[1]] = '\'' . $matches[2] . '\'';
        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
        }
        return 'eval(' . $res . ');';
    }

    private function deobfuscateEvalbin2hex($str, $matches)
    {
        $res = hex2bin($matches[5]) . $matches[6];
        $res = $this->unwrapFuncs($res);
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }

        if (substr_count($res, 'goto ') > 50) {
            $res = Helpers::unwrapGoto($res);
        }
        if (strpos($res, 'document.write(unescape(\'') > 0) {
            $res = preg_replace_callback('~<script type=\'text/javascript\'>document\.write\(unescape\(\'([^\']+)\'\)\)</script>~msi', function ($m) {
                return urldecode($m[1]);
            }, $res);
        }
        return $res;
    }

    private function deobfuscateManyFuncsWithCode($str, $matches)
    {
        $funcs = [$matches[1] => 'decode'];

        preg_match_all(
            '~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi',
            $str,
            $funcMatches,
            PREG_SET_ORDER
        );

        foreach ($funcMatches as $funcMatch) {
            $funcs[$funcMatch[1]] = 'single_var';
        }

        $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) {
            $func = $funcs[$m[1]] ?? false;
            if (!$func) {
                return $m[0];
            }
            if ($func === 'decode') {
                $decoded = "";
                for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) {
                    $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66);
                }

                return '"' . $decoded . '"';
            } elseif ($func === 'single_var') {
                return '"' . $m[2] . '"';
            }
        }, $str);

        return $res;
    }

    private function deobfuscateManyGlobals($str, $matches)
    {
        $vars = [];
        foreach ([$matches[1], $matches[2], $matches[3]] as $m) {
            $hangs = 50;
            $part = $m;
            while (strpos($part, 'base64_decode') !== false && $hangs--) {
                $part = Helpers::replaceVarsFromArray($vars, $part);
                $part = Helpers::replaceBase64Decode($part);
            }
            $ops = explode(';', $part);
            foreach ($ops as $v) {
                if ($v === '') {
                    continue;
                }
                $tmp = explode('=', $v, 2);
                $vars[$tmp[0]] = $tmp[1];
            }
        }
        $res = str_replace([$matches[1], $matches[2], $matches[3]], '', $str);
        $hangs = 50;
        while (strpos($res, '$GLOBALS') !== false && $hangs--) {
            $res = str_replace(array_keys($vars), array_values($vars), $res);
        }
        $res = str_replace('base64_decode(\'\')', '\'\'', $res);
        return $res;
    }

    private function deobfuscateB64xoredkey($str, $matches)
    {
        $b64 = Helpers::collectConcatedVars($matches[2]);
        $b64 = $b64[key($b64)];
        $res = Helpers::xorWithKey(base64_decode($b64), $matches[10]);
        return $matches[1] . $res;
    }

    private function deobfuscateGzB64Func($str, $matches)
    {
        $res = Helpers::normalize($matches[5]);
        $res = str_replace($matches[4], '"' . $matches[6] . '"', $res);
        return $res;
    }

    private function deobfuscateDictArrayFuncVars($str, $matches)
    {
        $dictName = $matches[5];

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $matches[6]);


        $vars[$matches[2]] = 'base64_decode';
        $vars[$matches[3]] = base64_decode(Helpers::concatStr($matches[4]));

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) {
            return '\'' . str_rot13($match[1]) . '\'';
        }, $res);

        $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) {
            preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings);
            $strVar = "";
            foreach ($concatStrings[2] as $index => $concatString) {
                if ($concatStrings[1][$index] === '.') {
                    $strVar .= $concatString;
                } else {
                    $strVar = $concatString;
                }
            }

            return '\'' . $strVar . '\'';
        }, $res);

        $arrayVarDict = [];

        preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER);

        foreach ($arrMatches as $arrMatch) {
            if ($arrMatch[1] === '') {
                continue;
            }
            $arrayVarDict[] = $arrMatch[1];
        }

        $res = str_replace([$matches[1], $matches[6]], '', $str);
        $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) {
            if ($dictName === $match[1]) {
                $res = $arrayVarDict[$match[2]] ?? $match[0];
                if (!Helpers::convertToSafeFunc($res) && $res !== 'json_decode' && $res !== 'create_function' && strpos($res, '$') === false) {
                    $res = '"' . $res . '"';
                }
                return $res;
            }
            return $match[0];
        }, $res);

        return $res;
    }

    private function deobfuscateCreateFuncPackStrRot13($str, $matches)
    {
        return pack('H*', str_rot13($matches[2]));
    }

    private function deobfuscateDictVarsCreateFunc($str, $matches)
    {
        $res = $str;
        $dictName = $matches[2];
        $dictVal = stripcslashes($matches[3]);
        $vars = [];

        $res = preg_replace_callback(
            '~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi',
            function ($m) use (&$vars, $dictName, $dictVal) {
                $varName = $m[1];
                $dictResultStr = '';

                preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER);
                foreach ($dictVars as $dictVar) {
                    if ($dictVar[1] !== $dictName) {
                        continue;
                    }

                    if ((int)$dictVar[2][0] === 0) {
                        $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? '';
                    } else {
                        $dictResultStr .= $dictVal[$dictVar[2]] ?? '';
                    }
                }

                $vars[$varName] = $dictResultStr;

                return '';
            },
            $str
        );

        $codeStr = '';
        preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER);
        foreach ($varsMatch as $var) {
            $codeStr .= $vars[$var[1]] ?? '';
        }

        if (strpos($codeStr, 'eval(base64_decode') !== false) {
            return base64_decode($matches[5]);
        }

        if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) {
            return gzinflate(base64_decode($matches[5]));
        }

        return $str;
    }

    private function deobfuscateDecodedFileGetContentsWithFunc($str, $matches)
    {
        $res = str_replace($matches[6], '', $str);

        $resCode = implode(' ', @Helpers::unserialize(base64_decode($matches[5])));

        if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) {
            $uid = $configs[1];
            $cfg = $configs[2];

            $resCode = preg_replace_callback(
                '~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi',
                static function ($m) use ($uid, $cfg) {
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]);
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid);
                    $configCodeArray = @Helpers::unserialize($configCodeArray);
                    $configCodeArray = var_export($configCodeArray, true);

                    return str_replace($m[1], $configCodeArray, $m[0]);
                },
                $resCode
            );
        }

        $res = str_replace($matches[8], $resCode, $res);

        return $res;
    }

    private function deobfuscateCreateFuncVarsCode($str, $matches)
    {
        $vars = Helpers::collectConcatedVars(stripcslashes($matches[1]));

        $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) {
            $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true));

            $vars[$m[1]] = $var;
        }, $matches[2]);

        $func = Helpers::replaceVarsFromArray($vars, $matches[7], true);
        $code = $this->unwrapFuncs("$func'$matches[6]))");

        if (
            preg_match(
                '~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi',
                $code,
                $codeMatches
            )
        ) {
            $res      = "";
            $arrayNum = [];

            preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $numbers, PREG_SET_ORDER);
            foreach ($numbers as $number) {
                $arrayNum[] = $number[1];
            }

            for ($i = 0; $i < sizeof($arrayNum); $i += 2) {
                if ($i % 4) {
                    $res .= substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]);
                } else {
                    $res .= strrev(substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]));
                }
            };

            $res = $this->unwrapFuncs("$func'$res))");
            if ($res) {
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscatePregConcat($str, $matches)
    {
        return Helpers::normalize($matches[2]);
    }

    private function deobfuscateUndefinedDFunc($str, $matches)
    {
        return 'eval(gzinflate(str_rot13(base64_decode(' . $matches[2] . '))));';
    }

    private function deobfuscateXoredStrings($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\s*(?:\s*/\*[^\*]+\*/\s*)?\^(?:\s*/\*[^\*]+\*/\s*)?\s*"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function ($m) {
            return '$' . $m[1];
        }, $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, false);

        if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) {
            $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m);
        }
        $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function ($m) {
            return '';
        }, $res);
        $res = str_replace('\\\'', '@@slaapos@@', $res);
        preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m);
        $res = str_replace('@@slaapos@@', '\\\'', $m[1]);
        $res = stripcslashes($res);

        $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $res);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function ($m) {
            return '$' . $m[1];
        }, $res);

        $replace = function ($m) use (&$vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $vars[$m[1]] . '(';
            }
            return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]];
        };

        Helpers::collectVars($res, '\'', $vars, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);
        Helpers::collectFuncVars($res, $vars, true, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);

        $res = preg_replace('~;+~msi', ';', $res);
        return $res;
    }

    private function deobfuscateCommentWithAlgo($str, $matches)
    {
        return str_replace($matches[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($matches[1])))))), '\''), $str);
    }

    private function deobfuscateDefinedB64($str, $matches)
    {
        return str_replace([$matches[1], $matches[6], $matches[8]], ['', '', gzinflate(base64_decode($matches[9]))], $str);
    }

    private function deobfuscateB64Xored($str, $matches)
    {
        return base64_decode(Helpers::xorWithKey(base64_decode($matches[4]), $matches[6]));
    }

    private function deobfuscateB64AssignedVarContent($str, $matches)
    {
        return str_replace($matches[4], "'" . (base64_decode($matches[2])) . "'", $matches[3]);
    }

    private function deobfuscateDictVarsWithMath($str, $matches)
    {
        $dictVal = $matches[2];

        $dictStrs = Helpers::calculateMathStr($matches[3]);
        $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs);
        $vars = Helpers::collectVars($str, '"', $vars);
        $vars = Helpers::collectConcatedVars($str, '"', $vars);

        return $vars[$matches[4]] ?? $str;
    }

    private function deobfuscateClassDecryptedWithKey($str, $matches)
    {
        $key = 'WebKit#58738Educ';

        $data = hex2bin($matches[2]);
        $res = Helpers::decodeClassDecryptedWithKey($data, 32, $key);

        if (strpos($res, 'error_reporting(') !== false) {
            return $res;
        }

        return $str;
    }

    private function deobfuscatePHPkoru($str, $matches)
    {
        $vars[$matches[2]] = str_rot13(base64_decode($matches[3]));
        $vars[$matches[4]] = str_rot13(base64_decode($matches[5]));
        $vars = Helpers::collectFuncVars($str, $vars, false);
        $vars = Helpers::collectVars($str, '\'', $vars);
        $code = $matches[6];
        while (strpos($code, 'eval') === 0) {
            $code = str_replace(array_keys($vars), array_values($vars), $code);
            $code = $this->unwrapFuncs($code);
        }
        $code = str_replace(array_keys($vars), array_values($vars), $code);
        $decoded = '';
        if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*(base64_decode\()?[\'"]([^"]+)[\'"]\)?,\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\),\s*(\d+),\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\)\)\);~msi', $code, $openssl_data)) {
            $data = base64_decode(trim($matches[9]));
            $algo = strpos($openssl_data[1], 'base64_decode') === false
                ? $openssl_data[2]
                : base64_decode($openssl_data[2]);
            $passphrase = base64_decode(str_rot13($openssl_data[3]));
            $iv = base64_decode(str_rot13($openssl_data[5]));
            $flags = $openssl_data[4];
            $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv);
            $decoded = str_rot13(base64_decode(str_rot13($decoded)));
        }
        return ' ?> ' . PHP_EOL . $decoded;
    }

    private function deobfuscateJoomlaInject($str, $matches)
    {
        $vars = Helpers::collectVars($matches[0]);
        preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data);
        preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $matches[0], $to_decode);
        foreach ($to_decode[1] as &$item) {
            if ($item[0] === '"' && $item[-1] === '"') {
                $item = substr($item, 1, -1);
            }
            $item = str_replace(array_keys($vars), array_values($vars), $item);
            $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'";
        }
        $res = str_replace($to_decode[0], $to_decode[1], $str);
        return $res;
    }

    private function deobfuscateFwriteB64Content($str, $matches)
    {
        $res = $str;

        $res = str_replace($matches[1], '', $res);
        $replace = base64_decode($matches[3]);

        $res = str_replace($matches[4], "'" . $replace . "'", $res);

        return $res;
    }

    private function deobfuscateB64concatedVars($str, $matches)
    {
        $res = $matches[6];

        $code = "'" . base64_decode($matches[2]) . base64_decode($matches[5]) . "'";

        $res = str_replace($matches[7], $code, $res);

        return $res;
    }

    private function deobfuscateSlashedCreateFunc($str, $matches)
    {
        $func = stripcslashes($matches[2]);

        if (strpos($func, 'create_function') !== false) {
            $code = stripcslashes($matches[5]);
            $code = str_replace($matches[4], $matches[6], $code);

            return $code;
        }

        return $str;
    }

    private function deobfuscateVarDictCreateFunc($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);

        $vars = [];
        $vars = Helpers::collectVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscatecallFuncGzB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[1]));
    }

    private function deobfuscateAssertDictVarEval($str, $matches)
    {
        $dict = $matches[2];
        $arr  = [];
        for ($i = 0; $i < 6; $i++) {
            $arr[] = (int)$matches[4 + $i];
        }

        $assertStr = "";
        for ($i = 0; $i < 6; $i++) {
            $temp      = $arr[$i];
            $assertStr .= $dict[$temp];
        }

        $funcs = Helpers::concatStringsInContent(stripcslashes($matches[13]));
        if ($assertStr === 'assert' && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) {
            return base64_decode(gzinflate(base64_decode($matches[11])));
        }

        $vars               = [];
        $vars[$matches[10]] = $matches[11];
        $vars[$matches[12]] = $assertStr;

        return Helpers::replaceVarsFromArray($vars, $funcs);
    }

    private function deobfuscateB64FuncEvalGz($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[4])));
    }

    private function deobfuscateB64Gz($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[2]));
        $break = isset($matches[5]) ? '?>' : '';

        return $break . $result;
    }

    private function deobfuscateSubstrEmpty($str, $matches)
    {
        $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) {
            return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"';
        }, $str);
        $str = str_replace(['"."', '"".'], '', $str);
        return $str;
    }

    private function deobfuscateDeltaOrd($str, $matches)
    {
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $funcs = array_reverse(array_filter(explode('(', $matches[6])));
            $str = $matches[7];
            foreach ($funcs as $func) {
                $str = Helpers::executeWrapper($func, [$str]);
            }
        } else {
            $str = gzinflate(base64_decode(stripcslashes($matches[7])));
        }

        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $str[$i] = chr(ord($str[$i]) + (int) $matches[4]);
        }
        return $str;
    }

    private function deobfuscateOutputBuffer($str, $matches)
    {
        $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[5], 1, -1)));
        $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[6], 1, -1)));
        $replace = array_map('stripcslashes', $replace);
        $buffer = str_replace($search, $replace, $matches[1] . $matches[9]);
        for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) {
            $buffer[$i] = chr(ord($buffer[$i]) - $j - $i);
        }
        $buffer[0] = ' ';
        return $buffer;
    }

    private function deobfuscateDoorwayInstaller($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '"', $vars, true);
        $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function ($m) use ($matches, $vars) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . base64_decode($m[2]) . '\'';
            }
            if (isset($m[3]) && isset($vars[$m[3]])) {
                return '\'' . base64_decode($vars[$m[3]]) . '\'';
            }
        }, $str);
        return $str;
    }

    private function deobfuscateStrReplaceAssert($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[2])));
    }

    private function deobfuscateAnaLTEAMShell($str, $matches)
    {
        preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m);
        $vars = array_combine($m[1], $m[2]);
        $str = str_replace($m[0], '', $str);
        $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function ($m) use ($vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            return '$' . $vars[$m[1]];
        }, $str);
        $str = Helpers::replaceBase64Decode($str);
        $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) {
            $res = str_replace($m[1], '', $m[0]);
            $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res);
            return $res;
        }, $str);
        $str = stripcslashes(stripcslashes($str));
        return $str;
    }

    private function deobfuscateZeuraB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[10]));
    }

    private function deobfuscateD5($str, $matches)
    {
        $content = explode(hex2bin($matches[4]), $str)[1];
        $tmp = [];
        for ($i = 0; $i < strlen($content); $i++) {
            $tmp[] = ord($content[$i]) xor $i;
        }
        $content = hex2bin(base64_decode(implode(array_map(hex2bin($matches[8]), $tmp))));
        return $content;
    }

    private function deobfuscateStrReplaceFunc($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[3], $vars, false, true);
        $cmd = Helpers::replaceVarsFromArray($vars, $matches[5]);
        if (strpos($cmd, 'create_function') === 0) {
            $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd);
        }
        $res = str_replace($matches[6], '\'' . $matches[7] . '\'', $cmd);
        return $res;
    }

    private function deobfuscateArrayMapB64($str, $matches)
    {
        $array = explode('\',\'', substr($matches[2], 1, -1));
        return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php ';
    }

    private function deobfuscatePregReplaceStrReplace($str, $matches)
    {
        return str_replace($matches[1], $matches[2], stripcslashes($matches[3]));
    }

    private function deobfuscateEchoB64($str, $matches)
    {
        return str_replace([$matches[2], $matches[5]], ['\'' . base64_decode($matches[3]) . '\'', '\'' . base64_decode($matches[6]) . '\''], $str);
    }

    private function deobfuscateCreateFuncXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = Helpers::collectVars($res, '\'', $vars, true);
        $res = gzinflate(base64_decode($matches[2]));
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        $code = $res;
        if (preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $code, $matches)) {
            $code = stripcslashes($matches[1]);
            $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function ($m) {
                return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
            }, $code);
            $code = MathCalc::calcRawString($code);
            $vars = [];
            $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function ($m) use (&$vars) {
                $vars['$' . $m[1] . '('] = $m[2] . '(';
                $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
                return '';
            }, $code);
            $vars['&& !$_0 '] = '&&';
            $vars['if($_0 '] = 'if(';
            krsort($vars);
            $code = str_replace(array_keys($vars), array_values($vars), $code);
        }

        if (preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m)) {
            $code = str_replace($m[0], '', $code);
            $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code);
        }
        $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $code);
        $vars = [];
        $code = preg_replace_callback('~(?|\$\{\'(\w+)\'\}\s*=\s*\'(\w+)\'|\$(\w+)\s*=\s*\'(\w+)\');+\s*~msi', function ($m) use (&$vars) {
            $vars['$' . $m[1] . '('] = $m[2] . '(';
            $vars['${\'' . $m[1] . '\'}' . '('] = $m[2] . '(';
            $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
            $vars['${\'' . $m[1] . '\'}'] = '\'' . $m[2] . '\'';
            return '';
        }, $code);
        $code = Helpers::replaceVarsFromArray($vars, $code);
        return $code;
    }

    private function deobfuscateCodeLockDecoder($str, $matches)
    {
        $codelock_stub = base64_decode($matches[1]);
        if (isset($matches[2]) && $matches[2] !== '') {
            $codelock_stub = gzinflate($codelock_stub);
            $hangs = 20;
            while (strpos($codelock_stub, 'eval') === 0 && $hangs--) {
                $codelock_stub = $this->UnwrapFuncs($codelock_stub);
            }
        }

        preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_active_key = $m[1];
        preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_usezlib = $m[1];
        $codelock_key_data = $matches[3];
        if ($codelock_usezlib === "^") {
            $codelock_key_data = base64_decode($codelock_key_data);
            $codelock_key_data = gzinflate($codelock_key_data);
        }
        if (substr($codelock_active_key, 0, 15) !== "codelock_active") {
            $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key);
        } else {
            preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m);
            $codelock_active_key = $m[1];
            $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key);
        }

        return $codelock_key_data;
    }

    private function deobfuscateEvalGzStrRotB64($str, $matches)
    {
        return gzinflate(str_rot13(base64_decode($matches[2])));
    }

    private function deobfuscateEvalDictArrayConcat($str, $matches)
    {
        $dictVal = '';
        preg_match_all('~[\'"]([^\'"])[\'"]~msi', $matches[2], $m, PREG_SET_ORDER);
        foreach ($m as $char) {
            $dictVal .= $char[1];
        }

        $replacedStr = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $str);
        $vars = Helpers::collectVars($replacedStr);

        $funcs = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $funcs = Helpers::concatStringsInContent($funcs);
        $funcs = strtolower($funcs);

        if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) {
            return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($matches[6])))));
        }

        return $str;
    }

    private function deobfuscatePregReplaceXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function ($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = [];
        $vars = Helpers::collectVars($res, '\"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $res = str_replace('\'.\'', '', $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = str_replace(['preg_replace("/' . $matches[2] . '/e",\'\'', '\'\',"' . $matches[2] . '");'], '', $res);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateR4C($str, $matches)
    {
        $vars = [];
        $res = $str;
        $hangs = 20;
        do {
            Helpers::collectConcatedVars($res, '"', $vars, true);
            $res = str_replace('"".$', '$', $res);
            Helpers::collectConcatedVars($res, '\'', $vars, true);
            $res = trim($res);
            $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
            $res = $this->unwrapFuncs($res);
        } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--);
        return $res;
    }

    private function deobfuscateBase64EncryptedGz($str, $matches)
    {
        $text       = $matches[1];
        $hash       = $matches[3];
        $key        = 'asdf';
        $key_len    = strlen($key);

        $text       = base64_decode(str_replace("\n", '', $text));
        $text_len   = strlen($text);

        $w = [];
        for ($i = 0; $i < $key_len; ++$i) {
            $w[] = $text_len - $key_len - ord($key[$i]);
        }

        for ($i = 0; $i < $text_len; ++$i) {
            $j          = abs($w[$i % $key_len] - $i);
            $x          = $text[$j];
            $text[$j]   = $text[$i];
            $text[$i]   = $x;
        }

        if ($key_len < 10) {
            $key_len *= $key_len & 1 ? 3 : 2;
        }

        if (($text = @gzinflate($text)) && (md5(substr($text, 0, $key_len)) === $hash)) {
            return substr($text, $key_len);
        }

        return '';
    }

    private function deobfuscateBloos3rpent($str, $matches)
    {
        $matches[3] = str_replace('\\\'', '\'', $matches[3]);
        $matches[4] = str_replace('\\\'', '\'', $matches[4]);
        $decoder = strtr($matches[5], $matches[3], $matches[4]);
        preg_match('~\$\w+\s*=\s*\[((?:\'[\da-fx]+\',?)+)\];~msi', $decoder, $funcs);
        $funcs = explode('\',\'', substr($funcs[1], 1, -1));
        $funcs = array_map('hex2bin', $funcs);
        preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*global\s*(\$\w+);\s*return\s*\3\[\d+\]\(\'([^\']+)\',function\(\$\w+\)\s*\{\s*if[^}]+\}return\s*\$\w+;\s*\}\s*else\{\s*return\s*chr[^}]+\}\},\$\w+\);\s*\}\s*function\s*(\w+)\(\$\w+\)\s*\{\s*global\s*\3;\s*eval\(\3\[\d+\]\(\$\w+\)\);\s*\}~msi', $decoder, $tmp);
        $strtr_func = $matches[1];
        $decode_code_func = $tmp[1];
        $eval_func = $tmp[5];
        $arr_funcs = $tmp[3];
        $code = Helpers::replaceVarsFromDictionary($arr_funcs, $funcs, $matches[7], false);
        $hangs = 20;
        while (preg_match('~(\w+)\(\'([^\']+)\'\)~msi', $code) && $hangs--) {
            $code = preg_replace_callback('~(\w+)\(\'([^\']+)\'\)~msi', function ($m) use ($strtr_func, $decode_code_func, $matches) {
                if ($m[1] === $strtr_func) {
                    return '\'' . strtr($m[2], $matches[3], $matches[4]) . '\'';
                }
                if ($m[1] === $decode_code_func) {
                    return '\'' . stripcslashes($m[2]) . '\'';
                }
                if (Helpers::convertToSafeFunc($m[1])) {
                    return '\'' . @Helpers::executeWrapper($m[1], [$m[2]]) . '\'';
                }
                return $m[0];
            }, $code);
        }
        $code = stripcslashes(substr($code, 1, -2));
        return $code;
    }

    private function deobfuscateDoublePregReplace($str, $matches)
    {
        $matches[2] = substr($matches[2], 1, -1);
        $decoder = @gzinflate(base64_decode(preg_replace('~' . $matches[2] . '~', $matches[3], $matches[4])));
        $res = str_replace($matches[1], $decoder, $str);
        $res = str_replace([$matches[11], $matches[5], $matches[7]], '', $res);
        $res = str_replace('\')))));', '\'))));', $res);
        return $res;
    }

    private function deobfuscateZeura2($str, $matches)
    {
        return 'eval(base64_decode(gzinflate(base64_decode(\'' . $matches[6] . '\'))));';
    }

    private function deobfuscateOneFuncStrDecodeVars($str, $matches)
    {
        $func_content_to_remove = $matches[1];
        $func_name = $matches[2];
        $dict = $matches[5];

        $dictConvert = function ($array_str) use ($dict) {
            $array = preg_split('~\s*,\s*~ms', $array_str);
            $result = '';
            foreach ($array as $item) {
                $result .= isset($dict[$item]) ? $dict[$item] : '';
            }
            return $result;
        };

        $vars = [];
        $str = preg_replace_callback('~(\$\w{1,20})\s?=\s?array\(([\d,]{1,200})\);\s*(\$\w{1,20})\s?=\s?(\w{1,20})\(\1\);~mis', function ($m) use ($func_name, $dictConvert, &$vars) {
            if ($m[4] != $func_name) {
                return $m[0];
            }
            $vars[$m[3]] = $dictConvert($m[2]);
            return '';
        }, $str);

        $str = preg_replace_callback('~(\$\w{1,20})\s*\(~mis', function ($item) use ($vars) {
            if (isset($vars[$item[1]])) {
                return $vars[$item[1]] . '(';
            }
            return $item[0];
        }, $str);

        return str_replace($func_content_to_remove, '', $str);
    }

    private function deobfuscateZeura4($str, $matches)
    {
        //Sample: zeura4_1.php, zeura4_2.php, zeura4_3.php, zeura4_4.php, zeura4_5.php

        $encrypted_string1 = $matches[2];
        $encrypted_string2 = $matches[5];

        $string1 = base64_decode($encrypted_string1);
        if (!preg_match('~array\(\d{1,10},(\d{1,10}),(\d{1,10})\)~mis', $string1, $m)) {
            return $str;
        }
        $key1 = $m[1];
        $key2 = $m[2];

        $offset = (int)$key1 + (int)$key2;
        $php = gzinflate(base64_decode(substr(trim($encrypted_string2), $offset)));
        if ($php === false) {
            return $str;
        }
        return stripcslashes($php);
    }

    private function deobfuscateCreateFuncEscaped($str, $matches)
    {
        return base64_decode($matches[6]);
    }

    private function deobfuscateMaskedDeltaOrd($str, $matches)
    {
        $matches[3] = '';
        $matches[7] = base64_decode($matches[2]);
        $matches[4] = '-1';
        return $this->deobfuscateDeltaOrd($str, $matches);
    }

    private function deobfuscatedecodeStrMultiForDict($str, $matches)
    {
        $strToDecode = str_replace(['-m ', ' ', PHP_EOL], '', $matches[3]);
        $strToDecode = base64_decode($strToDecode);

        $decodeArray = [];
        for ($i = 0; $i < 256; ++$i) {
            $decodeArray [$i] = $i;
        }

        $index = 0;
        for ($i = 0; $i < 256; ++$i) {
            $index                = ($index + $decodeArray [$i] + ord($matches[6] [$i % 63])) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
        }

        $i     = 0;
        $index = 0;
        for ($j = 0; $j < (int)$matches[10]; ++$j) {
            $i                    = ($i + 1) % 256;
            $index                = ($index + $decodeArray [$i]) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
            $strToDecode [$j]     = $strToDecode [$j] ^ chr($decodeArray [($decodeArray [$i] + $decodeArray [$index]) % 256]);
        }

        return $strToDecode;
    }

    private function deobfuscateB64ConcatedStrVars($str, $matches)
    {
        $vars        = Helpers::collectVars($str, "'");
        $code        = base64_decode($matches[2]);
        $strToDecode = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $strToDecode = Helpers::concatStringsInContent($strToDecode);
        if (preg_match('~(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?return\s?@?eval\(\1\);~msi', $code)) {
            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateChrFuncVars($str, $matches)
    {
        $result = preg_replace_callback('~' . $matches[1] . '\(array\(((?:\d+,?)+)\)\)~msi', function ($m) {
            $data = '';
            preg_match_all('~\d+~msi', $m[0], $nums, PREG_SET_ORDER);
            foreach ($nums as $num) {
                $data .= chr($num[0]);
            }
            return "'" . $data . "'";
        }, $str);

        return $result;
    }

    private function deobfuscateConcatVarsFuncs($str, $matches)
    {
        $concatedStr = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($concatedStr);
        $data = Helpers::concatStringsInContent($matches[2]);
        $data = Helpers::replaceVarsFromArray($vars, $data);

        $code = $this->unwrapFuncs($data);

        if (preg_match('~eval\(rawurldecode\("([^"]+)"~msi', $code, $m)) {
            return rawurldecode($m[1]);
        }

        return $code;
    }

    private function deobfuscateBlackshadow($str, $matches)
    {
        return ($matches[5] . '\'' . $matches[4] . $matches[2] . '\'' . $matches[7]);
    }

    private function deobfuscateGlobalDictVar($str, $matches)
    {
        $str = str_replace($matches[2], '', $str);
        $dict = stripcslashes($matches[4]);
        $str = preg_replace_callback('~\$\w+\[\'\w+\'\]\[(\d+)\]~msi', function ($m) use ($dict) {
            return '\'' . $dict[(int)$m[1]] . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        $vars = [];
        $str = preg_replace_callback('~(\$\w+\[\'(\w+)\'\])=(\'[^\']+\'|\$_POST|\$_GET|\$_COOKIE);(?!global)~msi', function ($m) use (&$vars) {
            if ($m[3][0] === '\'') {
                $m[3] = substr($m[3], 1, -1);
            }
            $vars[$m[1]] = $m[3];
            $vars['$' . $m[2]] = $m[3];
            return '';
        }, $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateGarbageVars($str, $matches)
    {
        $str = preg_replace('~"([\w@/:\?>,=\}\.]*)"~msi', '\'\1\'', $str);
        $str = preg_replace_callback('~(?:\'\s*\.\s*(\w+)|(\w+)\s*\.\s*\')~msi', function ($m) {
            if (isset($m[1]) && $m[1] !== '') {
                return '\' . \'' . $m[1] . '\'';
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . $m[2] . '\' . \'';
            }
        }, $str);

        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        $str = preg_replace_callback('~(?|\'([^\']+)\'|(\w+))\s*([\^\|\&])\s*(\~)?(?|\'([^\']+)\'|(\w+))~msi', function ($m) {
            if (isset($m[3]) && $m[3] !== '') {
                $m[4] = ~$m[4];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[4]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[4]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[4]) . '\'';
            }
        }, $str);

        $vars = Helpers::collectVars($str, '\'', $vars, true);

        $str = preg_replace_callback('~(?|\(\'([^\']+)\'\)|(\$\w+))([\^\&\|])(?|\(\'([^\']+)\'\)|(\$\w+))~msi', function ($m) use ($vars) {
            if ($m[1][0] === '$' && isset($vars[$m[1]])) {
                $m[1] = $vars[$m[1]];
            }
            if ($m[3][0] === '$' && isset($vars[$m[3]])) {
                $m[3] = $vars[$m[3]];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[3]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[3]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[3]) . '\'';
            }
        }, $str);

        Helpers::collectVars($str, '\'', $vars, true);
        foreach ($vars as $var => $val) {
            $str = str_replace($var . '(', $val . '(', $str);
            $str = str_replace($var, '\'' . $val . '\'', $str);
        }
        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        return $str;
    }

    private function deobfuscateChrMinXor($str, $matches)
    {
        $code = (isset($matches[2]) && $matches[2] !== '') ? convert_uudecode(str_replace($matches[5], '', $matches[2])) : base64_decode(strrev($matches[3]));
        $table = [];
        if (isset($matches[5]) && $matches[5] !== '') {
            for ($i = 0; $i < 256; ++$i) {
                $table[$i] = $i;
            }
            $j = 0;
            for ($i = 0; $i < 256; ++$i) {
                $j = ($j + $table[$i] + ord($matches[6][$i % (strlen($matches[6]) - 1)])) % 256;
                $tmp = $table[$i];
                $table[$i] = $table[$j];
                $table[$j] = $tmp;
            }
            $j = 0;
            $k = 0;
            for ($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $j = ($j + 1) % 256;
                $k = ($k + $table[$j]) % 256;
                $tmp = $table[$j];
                $table[$j] = $table[$k];
                $table[$k] = $tmp;
                $code[$i] = $code[$i] ^ chr($table[($table[$j] + $table[$k]) % 256]);
            }
        } else {
            for ($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $code[$i] = $code[$i] ^ $matches[6][$i % (strlen($matches[6]) - 1)];
            }
        }

        return $code;
    }

    private function deobfuscateFakeChop($str, $matches)
    {
        $offset = 2;
        $tmp = base64_decode($matches[2]);
        preg_match('~if\(\$\w+\)(\$\w+)=\$\w+\(\'([^\']+)\',\s*\(\(\$\w+\!=\d+\)\?\'[^\']+\':\'([^\']+)\'\),\1\);\$\w+\+=__LINE__\*1;~msi', $tmp, $m);
        $matches[3] = str_replace($m[2], $m[3], $matches[3]);
        $tmp = base64_decode(substr($matches[3], $offset));
        preg_match('~\w+=\'([^\']+)\';~msi', $tmp, $m);
        $code = base64_decode(substr($m[1], $offset));
        $dicts = [];
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\(pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\),pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\)\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode(pack($dicts[$m[2]][$m[3]], $dicts[$m[4]][$m[5]]), pack($dicts[$m[6]][$m[7]], $dicts[$m[8]][$m[9]]));
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]\[([xa-f\d]+)\](\()?~msi', function ($m) use ($dicts) {
            $offset = $m[2][1] === 'x' ? hexdec($m[2]) : ($m[2][0] === '0' ? octdec($m[2]) : $m[2]);
            return (isset($m[3]) && $m[3] !== '') ? $dicts[$m[1]][$offset] . '(' : '\'' . $dicts[$m[1]][$offset] . '\'';
        }, $code);
        $code = preg_replace_callback('~pack\(\'H\*\',\'([\da-f]+)\'\)~msi', function ($m) {
            return '\'' . pack('H*', $m[1]) . '\'';
        }, $code);
        preg_match('~\$[^=]+=array\(array\((\'[^\)]+)\)\);~msi', $code, $m);
        $m[1] = substr($m[1], 1, -1);
        $m[1] = str_replace('\',\'', '', $m[1]);
        $code = base64_decode(str_rot13($m[1]));
        return $code;
    }

    private function deobfuscateAssertUrldecode($str, $matches)
    {
        return $this->deobfuscateEval(stripcslashes($matches[2]), []);
    }

    private function deobfuscateImplodeB64Gz($str, $matches)
    {
        $b64str = str_replace('\',\'', '', $matches[2]);
        $code = gzuncompress(base64_decode($b64str));
        $code = MathCalc::calcRawString($code);
        $code = Helpers::normalize($code);
        $arr = [];
        $func = '';
        $code = preg_replace_callback('~if\(!function_exists\(\'(\w+)\'\)\)\{function\s*\1\((\$\w+)\)\s*\{(\$\w+)=array\(([^)]+)\);return\s*base64_decode\(\3\[\2\]\);\}~msi', function ($m) use (&$arr, &$func) {
            $arr = explode('\',\'', substr($m[4], 1, -1));
            $func = $m[1];
            return '';
        }, $code);
        foreach ($arr as $i => $data) {
            $code = str_replace($func . '(' . $i . ')', '\'' . base64_decode($data) . '\'', $code);
        }
        return $code;
    }

    private function deobfuscateEvalStrReplace($str, $matches)
    {
        return base64_decode(str_replace($matches[8], '', $matches[2]));
    }

    private function deobfuscateX12($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $matches[2] = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
        $matches[2] = Helpers::normalize($matches[2]);
        $funcs = Helpers::collectVars($matches[2], '\'');
        $matches[3] = Helpers::replaceVarsFromArray($funcs, $matches[3]);
        return $this->deobfuscateEval($matches[3], []);
    }

    private function deobfuscateWpNightmare($str, $matches)
    {
        return gzinflate(base64_decode($matches[8]));
    }

    private function deobfuscateXorGzUncompress($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], '\'');
        $code = array_pop($vars);
        $code = base64_decode($code);
        $code = Helpers::xorWithKey($code, $matches[10]);
        return gzuncompress($code);
    }

    private function deobfuscateEvalSubstr($str, $matches)
    {
        return base64_decode(substr(strrev($matches[2]), (int)$matches[3], (int)$matches[4]));
    }

    private function deobfuscateEvalStrrev($str, $matches)
    {
        $code = base64_decode(strrev($matches[2]));
        return $code;
    }

    private function deobfuscateStrRot13ConvertUUDecode($str, $matches)
    {
        $decode = str_rot13($matches[2]);
        $decode = stripcslashes($decode);
        if (preg_match('~eval\(convert_uudecode\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(convert_uudecode\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(strrev\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = strrev($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(str_rot13\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = str_rot13($decode);
        }

        $decode = $this->deobfuscateEval($decode, []);
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval\(convert_uudecode\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\\\\\\\\\)\);\\\\\1\s*\(verrts\(lave\'\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)|(\\\\\\\\))~m', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
                if (isset($g[3]) && $g[3] !== '') {
                    return '';
                }
            }, $m[2]);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'riny\(pbaireg_hhqrpbqr\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\)\);\1\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\))~msi', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
            }, $m[2]);
            $decode = convert_uudecode(str_rot13($decode));
        }
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\';\)\)\s*\\\\\'~msi', '~\\\\\'\s*\(verrts\(lave\'\s*\)\);~msi'], '', $decode);
            $decode = preg_replace_callback('~(?:(\\\\\')|(\\\\\\\\))~msi', function ($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '';
                }
            }, $decode);
        }
        return $decode;
    }

    private function deobfuscateCreateFuncHex($str, $matches)
    {
        $decode = stripcslashes($matches[5]);
        $decode = str_replace($matches[4], '\'' . $matches[6] . '\'', $decode);
        return $decode;
    }

    private function deobfuscatePregB64Strrev($str, $matches)
    {
        return $this->deobfuscateEvalStrrev($str, $matches);
    }

    private function deobfuscatePregB64FuncImgStr($str, $matches)
    {
        $decodedStr = base64_decode($matches[13]);

        if (preg_match('~<img src="data:image/png;(.*)">~msi', $decodedStr, $foundB64) !== false) {
            $decodedStr = str_replace(
                [base64_decode($matches[4]), base64_decode($matches[5])],
                [base64_decode($matches[6]), base64_decode($matches[7])],
                $foundB64[1]
            );
            $decodedStr = gzinflate(base64_decode($decodedStr));

            return str_replace($matches[11], $decodedStr, $str);
        }

        return $str;
    }

    private function deobfuscateUtfCharVarsFuncEval($str, $matches)
    {
        $vars = [];
        $res = $str;
        $globalVarName = $matches[1];
        $funcName = $matches[2];

        $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);

        for ($i = 0; $i < 10; $i++) {
            $found = false;

            if (preg_match('~eval\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+(\s*[\'"\)]+)+\s*;~msi', $res, $matches)) {
                $unWrapped = $this->unwrapFuncs($matches[0]);
                $res = str_replace($matches[0], $unWrapped, $res);
                $found = true;
            } elseif (preg_match('~eval\(' . $funcName . '\(base64_decode\(\'([^\']+)\'\)+;~msi', $res, $funcMatch)) {
                $code = base64_decode($funcMatch[1]);
                $code = Helpers::utfCharVarsFuncEvalVarDecoder($code);
                $res = str_replace($funcMatch[0], $code, $res);
                $found = true;
            }
            if ($found) {
                $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);
            } else {
                break;
            }
        }
        $res = Helpers::replaceBase64Decode($res);

        return $res;
    }

    private function deobfuscateManyVarFuncCreateFuncWrap($str, $matches)
    {
        $createFuncCode = hex2bin(pack('H*', $matches[8]));
        if (strpos($createFuncCode, 'eval($') !== false) {
            return gzinflate(hex2bin(pack('H*', $matches[9])));
        }

        return $str;
    }

    private function deobfuscateTwoCalcClasses($str, $matches)
    {
        $func1_name     = $matches[1] . '::' . $matches[2];
        $func1_data     = Helpers::prepareArray($matches[3]);
        $array_name     = Helpers::normalize($matches[4]);
        $array          = Helpers::prepareArray($matches[5]);
        $global_list    = Helpers::replaceBase64Decode(Helpers::normalize($matches[6]));
        $func2_name     = $matches[7] . '::' . $matches[8];
        $func2_data     = Helpers::prepareArray(Helpers::normalize($matches[9]));
        $content        = Helpers::normalize($matches[10]);

        $list_of_globals = [];
        foreach (explode(";", $global_list) as $item) {
            if (empty($item)) {
                continue;
            }
            list($key, $value) = explode('=', $item, 2);
            $list_of_globals[$key] = trim($value, '\'');
        }

        $content = str_replace(array_keys($list_of_globals), array_values($list_of_globals), $content);

        $content = preg_replace_callback('~' . preg_quote($func1_name) . '\(([\d]*)\)~mis', function ($m) use ($func1_data) {
            $key = octdec($m[1]);
            $result = '';
            if (array_key_exists($key, $func1_data)) {
                $result = $func1_data[$key];
            }
            return $result;
        }, $content);


        $content = preg_replace_callback('~' . preg_quote($func2_name) . '\(["\']([^\'"]+)["\'],\s*["\']([^\'"]+)["\']\)~mis', function ($m) use ($func2_data) {
            $param1 = $m[1];
            $param2 = $m[2];

            $slen = strlen($param2);
            $decoded = base64_decode($func2_data[$param1]);
            for ($i = 0, $cslen = strlen($decoded); $i !== $cslen; ++$i) {
                $decoded[$i] = chr(ord($decoded[$i]) ^ ord($param2[$i % $slen]));
            }
            return "'" . $decoded . "'";
        }, $content);


        $content = preg_replace_callback('~\$GLOBALS\["' . preg_quote($array_name) . '"\]\[([0-9\-]+)\]~i', function ($m) use ($array) {
            $key = octdec($m[1]);
            return $array[$key];
        }, $content);

        return MathCalc::calcRawString($content);
    }

    private function deobfuscateCreateFuncArray($str, $matches)
    {
        $dict = substr(str_replace(['","', "','", '\',"', '",\''], '', $matches[2]), 1, -1);
        $func = substr(Helpers::replaceVarsFromDictionary($matches[1], $dict, $matches[5]), 1, -1);
        $codeVar = str_replace(['"."', '\'.\'', '\'."', '".\''], '', $matches[4]);
        $res = str_replace($codeVar, '\'' . $matches[6] . '\'', $func);
        return $res;
    }

    private function deobfuscateCreateFuncReplaceB64($str, $matches)
    {
        $func1 = str_ireplace($matches[4], $matches[5], $matches[6]);
        $func2 = strtr($matches[8], $matches[9], $matches[10]);
        if ($func1 === 'create_function') {
            $func1 = 'eval';
        }
        $code = $func1 . '(' . $func2 . '(\'' . $matches[2] . '\'' . '));';
        return $code;
    }

    private function deobfuscateEvalTrim($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1], $vars, false);
        $func = strtolower(substr(str_replace('\'.\'', '', Helpers::replaceVarsFromArray($vars, $matches[4], false, true)), 1, -1));
        return 'eval(' . $func . '(\'' . $matches[6] . '\'));';
    }

    private function deobfuscateUnserializeB64GzJoinArr($str, $matches)
    {
        $arr = [];
        preg_match_all('~\'([^\']*)\'~msi', $matches[5], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $strMatch) {
            $arr[] = $strMatch[1];
        }
        $string = join($matches[4], $arr);
        $res = gzinflate(base64_decode($string));
        Helpers::unserialize($res);

        return $res;
    }

    private function deobfuscateEvalStrrevCode($str, $matches)
    {
        return strrev($matches[1]);
    }

    private function deobfuscateEvalConvertUudecodeWithSlashedQuote($str, $matches)
    {
        return convert_uudecode(stripcslashes($matches[1]));
    }

    private function deobfuscateDictVarsContent($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($res, "'", $vars, false);

        $res = str_replace($matches[3], $res, $matches[0]);
        $res = stripcslashes($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);

        return $res;
    }

    private function deobfuscateGlobalsCreateFuncEvalB64($str, $matches)
    {
        return str_replace(
            $matches[4],
            '?> ' . base64_decode($matches[8]) . '<?php ',
            $str
        );
    }

    private function deobfuscateDictForeachVars($str, $matches)
    {
        $dictStr = $matches[2];
        $vars = [];
        $res = $str;

        preg_match_all('~foreach\s?\(\[([^]]+)\]\s?as\s?\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}~msi', $str, $foreachMatches, PREG_SET_ORDER);

        foreach ($foreachMatches as $foreachMatch) {
            preg_match_all('~\d+~msi', $foreachMatch[1], $numMatches, PREG_SET_ORDER);
            $val = '';
            foreach ($numMatches as $numMatch) {
                $val .= $dictStr[$numMatch[0]] ?? '';
            }
            $vars[$foreachMatch[2]] = $val;
            $res = str_replace($foreachMatch[0], '', $res);
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateEchoEvalGzB64Var($str, $matches)
    {
        return stripcslashes(gzinflate(base64_decode(stripcslashes($matches[4]))));
    }

    private function deobfuscateTwoEvalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStrCode = urldecode(hex2bin($matches[3]));
        $vars = Helpers::collectFuncVars($varsStrCode, $vars, false);
        $res = hex2bin($matches[4]);

        $unwrappedCode = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $unwrappedCode = str_replace($matches[1], $matches[2], $unwrappedCode);
        $unwrappedCode = $this->unwrapFuncs($unwrappedCode . ')');

        $res .= $unwrappedCode;

        return $res;
    }

    private function deobfuscateEvalFuncCode($str, $matches)
    {
        $function = $matches[1];
        $safe = Helpers::convertToSafeFunc($function);
        if ($safe) {
            return @Helpers::executeWrapper($function, [stripcslashes($matches[2])]);
        }

        return $str;
    }

    private function deobfuscateEvalOpenSslDecrypt($str, $matches)
    {
        return openssl_decrypt(
            base64_decode($matches[1]),
            $matches[2],
            base64_decode($matches[3]),
            OPENSSL_RAW_DATA,
            base64_decode($matches[4])
        );
    }

    private function deobfuscateUrldecodedDictVarReplace($str, $matches)
    {
        $dictVal = urldecode($matches[2]);
        $res = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $matches[0]);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateZymdecrypt($str, $matches)
    {
        $funcs = Helpers::replaceBase64Decode($matches[2]);
        $tmp = explode(';', $funcs);
        $funcs = [];
        foreach ($tmp as $func) {
            if (empty($func)) {
                continue;
            }
            $func = explode('=', $func);
            $funcs[str_replace(['$' . $matches[1] . '[\'', '\']'], '', $func[0])] = substr($func[1], 1, -1);
        }
        foreach ($funcs as $var => $func) {
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']\(', $func . '(', $matches[3]);
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']', $func, $matches[3]);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\{return\s*base64_decode\(\2\);~msi', $matches[3], $m)) {
            $matches[3] = str_replace($m[1] . '(', 'base64_decode(', $matches[3]);
        }
        $limit = 10;
        while (
            (
                strpos($matches[3], 'base64_decode(\'') !== false
                || strpos($matches[3], 'base64_decode("') !== false
            ) && $limit--
        ) {
            $matches[3] = Helpers::replaceBase64Decode($matches[3]);
        }
        return $matches[3];
    }

    private function deobfuscateFuncRevB64($str, $matches)
    {
        $code = str_replace(['eval(' . $matches[1] . '(', '));'], ['eval(base64_decode(strrev(base64_decode(strrev(', ')))));'], $matches[4]);
        return $code;
    }

    private function deobfuscateCreateFuncGzConvertUudecode($str, $matches)
    {
        return stripcslashes(gzinflate(convert_uudecode(stripcslashes($matches[2]))));
    }

    private function deobfuscateGlobalsArrayFuncs($str, $matches)
    {
        $globalFuncStr = base64_decode(Helpers::concatStr($matches[2]));
        $res = str_replace($matches[1] . '(0)', '\'' . $globalFuncStr . '\'', $str);
        preg_match_all('~(?:[\'"][^"\']*[\'"]\s?\.?)+~msi', $matches[4], $strings, PREG_SET_ORDER);
        $vars = [];
        foreach ($strings as $string) {
            $vars[] = base64_decode(Helpers::concatStr($string[0]));
        }
        $res = preg_replace_callback(
            '~' . $matches[3] . '\((\d+)\)~msi',
            static function ($m) use ($vars) {
                $str = str_replace('\\', '\\\\', $vars[$m[1]]);
                $str = str_replace('\'', '\\\'', $str);
                return '\'' . $str . '\'';
            },
            $res
        );
        $res = MathCalc::calcRawString($res);

        return $res;
    }

    private function deobfuscateVarArrayChrFunc($str, $matches)
    {
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>(?:((?:\s?\w{1,50}\(\d{1,5}\)\.?)+)|\s?(\$\w{1,50})),~msi',
            $str,
            $arrMatches,
            PREG_SET_ORDER
        );
        $vars = [];
        foreach ($arrMatches as $arrMatch) {
            $value = '';
            if (!empty($arrMatch[2])) {
                preg_match_all('~\d{1,5}~msi', $arrMatch[2], $numbers, PREG_SET_ORDER);
                foreach ($numbers as $number) {
                    $value .= $number[0] < 128 ? chr($number[0]) : '';
                }
            } else {
                $value = $arrMatch[3] ?? '';
            }
            $vars[$arrMatch[1]] = $value;
        }
        $str = preg_replace_callback(
            '~\\' . $matches[1] . '\[[\'"]([^\'"]+)[\'"]]([\[\](])~msi',
            static function ($m) use ($vars) {
                $value = $vars[$m[1]] ?? '';
                if ($m[2] === ']') {
                    $value = '\'' . $value . '\'';
                }
                return $value . $m[2];
            },
            $str
        );

        return $str;
    }

    private function deobfuscateFuncDictB64($str, $matches)
    {
        $matches[5] = Helpers::replaceVarsFromDictionary($matches[3], $matches[4], $matches[5]);
        $vars = Helpers::collectVars($matches[5], '\'');
        $code = stripcslashes($matches[8]) . ';';
        $code = Helpers::replaceVarsFromArray($vars, $code, true, false);
        $code = $this->deobfuscateEval($code, []);
        $code = $matches[2] . $code;
        return $code;
    }

    private function deobfuscateGzuncompressStrrev($str, $matches)
    {
        return gzuncompress(strrev($matches[4]));
    }

    private function deobfuscateEvalOpensslDecryptStr($str, $matches)
    {
        $code = openssl_decrypt(
            base64_decode($matches[7]),
            "AES-256-CBC",
            $matches[2],
            0,
            $matches[3]
        );
        $code = str_replace($matches[4], $matches[5], $code);

        return $code;
    }

    private function deobfuscateEvalDictionaryFuncVar($str, $matches)
    {
        $code = Helpers::concatStringsInContent(
            str_replace(
                '\\\'',
                '',
                Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[4])
            )
        );
        return substr($code, 1, -1) . stripcslashes($matches[5]);
    }

    private function deobfuscateDictionaryStrReplace($str, $matches)
    {
        $dict = base64_decode(str_replace($matches[4], '', $matches[2]));
        $code = Helpers::replaceVarsFromDictionary($matches[5], $dict, $matches[6]);
        return $code;
    }

    private function deobfuscateManyBase64DecodeChr($str, $matches)
    {
        //sample manyBase64DecodeChr.php
        $code = MathCalc::calcRawString($matches[0]);

        $hangs = 10;
        while (stripos($code, 'base64_decode') !== false && $hangs--) {
            $code = Helpers::normalize($code);
            $code = Helpers::replaceBase64Decode($code);
            $vars = Helpers::collectVars($code, '\'', $vars, true);
            $code = Helpers::replaceVarsFromArray($vars, $code);
        }
        return $code;
    }

    private function deobfuscateManyB64CalcEval($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $limit = 50;
        while (
            strpos($code, 'base64_decode(\'') !== false
            || strpos($code, 'base64_decode("') !== false
            || $limit--
        ) {
            $code = Helpers::replaceBase64Decode($code);
        }
        $code = str_replace(['{\'', '\'}'], '', $code);

        if (
            preg_match(
                '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?((?:\$\w{1,50}\s?\.?=\s?(?:\$\w{1,50}\[\d{1,5}\]\s?\.?\s?)+;\s?)+)eval\((\$\w{1,50})\s?\([\'"]([^\'"]+)[\'"]\)\);~msi',
                $code,
                $found
            )
        ) {
            $vars[$found[1]] = $found[2];
            $vars = Helpers::getVarsFromDictionaryDynamically($vars, $found[0]);
            $func = $vars[$found[4]];
            if (!Helpers::convertToSafeFunc($func)) {
                return $code;
            }
            $res = $func($found[5]);
            $res = Helpers::replaceVarsFromArray($vars, $res, true);

            if (
                preg_match(
                    '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];eval\(\'\?>\'\.base64_decode\(strtr\(substr\(\1,(\$\w{1,50})\*2\),substr\(\1,\3,\3\),substr\(\1,0,\3\)\)\)\);~msi',
                    $res,
                    $m
                )
            ) {
                if (isset($vars[$m[3]])) {
                    $num = (int)$vars[$m[3]];
                    return '?> ' . base64_decode(
                        strtr(
                            substr($m[2], $num * 2),
                            substr($m[2], $num, $num),
                            substr($m[2], 0, $num)
                        )
                    );
                }
            }
        }
        return $code;
    }

    private function deobfuscateDa7Q9RnPjm($str, $matches)
    {
        $dict = str_replace($matches[5], 'base64_decode', $matches[7]);
        $dict = Helpers::replaceBase64Decode($dict);
        $dict = explode('\',\'', substr($dict, 1, -1));
        foreach ($dict as $index => $item) {
            $matches[8] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[8]);
        }
        $matches[8] = Helpers::normalize($matches[8]);
        $tmp = explode(';', $matches[8]);
        $vars = [];
        foreach ($tmp as $var) {
            $parts = explode('=', $var);
            $vars[$parts[0]] = $parts[1];
        }
        $vars = array_filter($vars);
        foreach ($dict as $index => $item) {
            $matches[11] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[11]);
        }
        foreach ($vars as $var => $val) {
            $matches[11] = str_replace($var, $val, $matches[11]);
        }
        $code = substr(Helpers::normalize($matches[11]), 1, -1);
        $code = str_replace($matches[4], '\'' . $matches[2] . '\'', $code);
        return $code;
    }

    private function deobfuscateGarbageComments($str, $matches)
    {
        $res = preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
        $res = str_replace('\'.\'', '', $res);
        return $res;
    }

    private function deobfuscateEvalVarsB64Concated($str, $matches)
    {
        $vars = [];
        $code = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectFuncVars($code, $vars);
        $vars = Helpers::collectVars($code, '"', $vars);

        return Helpers::replaceVarsFromArray($vars, $matches[1]);
    }

    private function deobfuscateStrReplaceVarsCreateFunc($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:str_replace|\$\w{1,50})\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s*~msi',
            $str,
            $replaces,
            PREG_SET_ORDER
        );

        foreach ($replaces as $replace) {
            $vars[$replace[1]] = str_replace($replace[2], '', $replace[3]);
        }

        $strToDecode = Helpers::concatStringsInContent(
            Helpers::replaceVarsFromArray($vars, $matches[4], false, true)
        );
        $funcs = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if ($funcs === 'base64_decode(str_replace(') {
            return base64_decode(str_replace($matches[3], '', $strToDecode));
        }

        return $str;
    }

    private function deobfuscateLongVarConcatStrRot13B64Gz($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        $strToDecode = '';
        foreach ($vars as $var) {
            $strToDecode .= $var;
        }
        $res = $strToDecode;
        preg_match_all(
            '~str_rot13|base64_decode|gzinflate~msi',
            $str,
            $funcs,
            PREG_SET_ORDER
        );
        foreach ($funcs as $func) {
            if (Helpers::convertToSafeFunc($func[0])) {
                $res = @$func[0]($res);
            }
        }

        return $res;
    }

    private function deobfuscatecreateFuncDict($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'', $vars, true);
        $vars2 = [];
        foreach ($vars as $k => $v) {
            if (strlen($v) === 1) {
                $vars2[$k] = $v;
            } else {
                $tmp = str_split($v);
                foreach ($tmp as $i => $char) {
                    $vars2[$k . '[' . $i . ']'] = $char;
                    $vars2[$k . '[\'' . $i . '\']'] = $char;
                }
            }
        }
        $res = Helpers::replaceVarsFromArray($vars2, $str, false, true);
        $res = Helpers::normalize($res);
        return $res;
    }

    private function deobfuscateCreateFuncArrayPop($str, $matches)
    {
        return substr($matches[4], 1, -1);
    }

    private function deobfuscateChrOrdB64FuncVars($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[0]);
        $func1 = $vars[$matches[4]] ?? '';
        $func2 = $vars[$matches[5]] ?? '';
        if ($func1 === 'chr' && $func2 === 'ord') {
            $strDecode = base64_decode($matches[2]);
            $res = '';
            $len = strlen($matches[2]);
            for ($i = 0; $i < $len; $i++) {
                $res .= chr(ord($strDecode[$i]) ^ (int)$matches[6]);
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateSimpleEvalFunctions($str, $matches)
    {
        $func1 = trim(Helpers::normalize($matches[2]), "'\"");
        $func2 = trim(Helpers::normalize($matches[4]), "'\"");
        $data = $matches[6];
        if (Helpers::isSafeFunc($func1) && Helpers::isSafeFunc($func2)) {
            return $func1($func2($data));
        }
        return $str;
    }

    private function deobfuscateClassArrayDictFunc($str, $matches)
    {
        $arrayDict = [];
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>\s?((?:\s?[\'"][^\'"]*[\'"]\s?\.?)+)[,)]~msi',
            $matches[12],
            $dicts,
            PREG_SET_ORDER
        );
        foreach ($dicts as $dict) {
            $arrayDict[$dict[1]] = $dict[2] !== '' ? Helpers::concatStr($dict[2]) : '';
        }

        $res = $matches[13];

        $res = preg_replace_callback(
            '~' . $matches[1] . '::' . $matches[3] . '\(([^,]+),([^)]+)\)~msi',
            static function ($m) use ($arrayDict) {
                $arg1 = Helpers::concatStr($m[1]);
                $arg2 = Helpers::concatStr($m[2]);
                $n = strlen($arg2);

                $decoded  = base64_decode($arrayDict[$arg1]);

                for ($i = 0, $len = strlen($decoded); $i !== $len; ++$i) {
                    $decoded[$i] = chr(ord($decoded[$i]) ^ ord($arg2[$i % $n]));
                }

                return '\'' . $decoded . '\'';
            },
            $res
        );

        return $res;
    }

    private function deobfuscateConcatVarsIterDict($str, $matches)
    {
        $res = '';
        $strEncoded = '';
        $dict1 = stripcslashes($matches[5]);
        $dict2 = stripcslashes($matches[7]);

        preg_match_all('~"([^"]+)"~msi', $matches[3], $strings, PREG_SET_ORDER);
        foreach ($strings as $string) {
            $strEncoded .= stripcslashes($string[1]);
        }
        foreach (str_split($strEncoded) as $c) {
            $res .= (strpos($dict2, $c) === false) ? $c : $dict1[strpos($dict2, $c)];
        }
        $res = "?> $res";

        return $res;
    }

    private function deobfuscateFuncB64TwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[7]);
        $arg2 = $matches[8];

        $res = "";
        for ($i = 0; $i < strlen($arg1);) {
            for ($j = 0; $j < strlen($arg2); $j++, $i++) {
                $res .= $arg1[$i] ^ $arg2[$j];
            }
        }

        return $res;
    }

    private function deobfuscateStrReplaceB64($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str, $vars, true, true);
        $code = Helpers::replaceBase64Decode($str);
        Helpers::collectFuncVars($code, $vars, false, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, false, false);
        $code = Helpers::normalize($code);
        return $code;
    }

    private function deobfuscateCreateFuncStrReplace($str, $matches)
    {
        return str_replace($matches[2], '', $matches[3]);
    }

    private function deobfuscateCreateFuncB64StrRotChr($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $code = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $code);
        $code = Helpers::replaceBase64Decode($code);
        $code = Helpers::normalize($code);
        $code = Helpers::replaceBase64Decode($code);
        if (preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'eval\(\2\);\'\);\1\(\'([^\']+)\'\);~msi', $code, $m)) {
            $code = $m[3];
        }
        return $code;
    }

    private function deobfuscateCreateFuncGzuncompressB64($str, $matches)
    {
         $code = gzuncompress(base64_decode(substr($matches[5], 1, -1)));
        if (strpos($code, '1;}') === 0) {
            $code = substr($code, 3);
        }
        if (substr_count($code, 'goto ') > 100) {
            $code = Helpers::unwrapGoto($code);
        }
         return $code;
    }

    private function deobfuscateGlobalsSlashed($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateB64VarsFuncEval($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectFuncVars($matches[3]);
        $strToDecode = $matches[2];
        $func1 = $vars[$matches[4]] ?? null;
        $func2 = $vars[$matches[5]] ?? null;
        if (
            $func1 !== null && $func2 !== null
            && Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)
        ) {
            $strToDecode = Helpers::executeWrapper($func1, [
                Helpers::executeWrapper($func2, [$strToDecode])
            ]);
        }

        $len = strlen($strToDecode);
        $res = '';
        $func1 = $vars[$matches[10]] ?? null;
        $func2 = $vars[$matches[11]] ?? null;
        if ($func1 === 'chr' && $func2 === 'ord') {
            for ($i = 0; $i < $len; $i++) {
                $res .= $func1($func2($strToDecode[$i]) ^ (int)$matches[12]);
            }
        }

        return $res;
    }

    private function deobfuscateB64FuncEval($str, $matches)
    {
        $key    = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[8]
            : $matches[6];
        $data   = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[6]
            : (
                $matches[2] ? str_replace($matches[5], $matches[8], $matches[2]) : $matches[8]
            );
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $key = base64_encode($key);
        }

        $res = Helpers::xorWithKey(base64_decode($data), $key);
        if (isset($matches[4]) && $matches[4] === 'base64_decode(') {
            $res = base64_decode($res);
        }

        if (isset($matches[4]) && $matches[4] === 'gzuncompress(base64_decode(') {
            $res = gzuncompress(base64_decode($res));
        }

        return $res;
    }

    private function deobfuscateNullEcho($str, $matches)
    {
        $vars = [];
        Helpers::collectConcatedVars($str, '\'', $vars, true);
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        return $str;
    }

    private function deobfuscateEvalB64Chunks($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($str);
        if (preg_match('~eval\(\'function\s*(\w+)\((\$\w+),(\$\w+)\)\{(\$\w+)=array\(((?:\d+\,?)+)\);if\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\]\+\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\{\$\w+=trim\(substr\(\2,\4\[\d+\]\+\4\[\d+\]\+\4\[\d+\]\)\);}return\s*\$\w+;\}\'\);~msi', $str, $m)) {
            $offsets = explode(',', $m[5]);
            $offsets[0] = 1;
            $str = preg_replace_callback('~' . $m[1] . '\(\$\w+\[\d+\],(\d+)\)~msi', function ($m2) use ($m, $matches, $offsets) {
                $value = '';
                if ($m2[1] === $m[6]) {
                    $value = substr($matches[4], (int)$offsets[0] + (int)$offsets[1], $offsets[2]);
                } elseif ($m2[1] === $m[7]) {
                    $value = substr($matches[4], (int)$offsets[0], (int)$offsets[1]);
                } elseif ($m2[1] === $m[8]) {
                    $value = trim(substr($matches[4], (int)$offsets[0] + (int)$offsets[1] + (int)$offsets[2]));
                }
                return '\'' . $value . '\'';
            }, $str);
        }
        $str = Helpers::replaceBase64Decode($str);
        $code = '';
        if (preg_match('~eval\(\'if\(\!function_exists\("([^"]+)"\)\)\{function\s*\1\((\$\w+),(\$\w+),(\$\w+)\)\s*\{(\$\w+)=implode\(\4\);\5=preg_replace\("[^"]+","",\5\);if[^{]+{return\(*((?:\w+\()+)\2\)\)\);}else{die\("[^"]+"\);}}}\'\);~msi', $str, $m)) {
            preg_match('~eval\(' . $m[1] . '\(\'([^\']+)\',\'\w{32}\',\$\w+\)\);~msi', $str, $m2);
            $code = 'eval(' . $m[6] . '\'' . $m2[1] . '\'' . str_repeat(')', substr_count($m[6], '(')) . ');';
        }
        $code = $this->deobfuscateEval($code, []);
        return $code;
    }

    private function deobfuscateObStartFlushVar($str, $matches)
    {
        preg_match_all('~\d{1,5}~msi', $matches[4], $tcNums, PREG_SET_ORDER);
        preg_match_all('~\d{1,5}~msi', $matches[6], $trNums, PREG_SET_ORDER);

        $res = '';
        foreach ($trNums as $tval) {
            $res .= chr((int)$tcNums[(int)$tval[0]][0] + 32);
        }

        return '?> ' . $res;
    }

    private function deobfuscateArrayReplacing($str, $matches)
    {
        $dictionaryKey = $matches[1];
        $dictionaryVal = $matches[2];

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);
        preg_match_all('~\$(\w{1,40})\s?=\s?\'(\w+)\';~', $result, $array, PREG_SET_ORDER);
        foreach ($array as &$value) {
            $re = '~\$\{"GLOBALS"}\["' . $value[1] . '"\]~';
            $result = preg_replace($re, $value[2], $result);
        }
        return $result;
    }

    private function deobfuscateVarConcatedReplaceEval($str, $matches)
    {
        $tempStr = $matches[1];
        $vars = [];
        $vars = Helpers::collectVars($tempStr, '"', $vars, true);
        $tempStr = Helpers::replaceVarsFromArray($vars, $tempStr, false, true);
        $tempStr = Helpers::concatStringsInContent($tempStr);
        $vars = Helpers::collectVars($tempStr, "'", $vars);
        $result = str_replace($matches[1], '', $str);
        $result = Helpers::replaceVarsFromArray($vars, $result, false, true);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateVarsConcatedFuncStrReplaceEval($str, $matches)
    {
        $content = $str;
        $vars = [$matches[1] => ''];
        $vars = Helpers::collectVars($content, '"', $vars, true);
        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $content);
        $result = Helpers::replaceVarsFromArray($vars, $matches[7], true, false) .
            '"' .
            str_replace($matches[8], $matches[6], $vars[$matches[1]]) . '"));';

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateB64GlobalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStr = Helpers::replaceBase64Decode($matches[1], '"');
        $vars = Helpers::collectVars($varsStr, '"', $vars);
        $res = str_replace($matches[1], '', $str);

        return Helpers::replaceVarsFromArray($vars, $res, false, true);
    }

    private function deobfuscateB64putContents($str, $matches)
    {
        return base64_decode($matches[1]);
    }

    private function deobfuscateB64WSO($str, $matches)
    {
        $code = Helpers::replaceBase64Decode($str);
        $vars = [];
        Helpers::collectConcatedVars($code, '\"', $vars, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, true, true);
        return $code;
    }

    private function deobfuscateEvalFuncDict($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[5]);
        $res = preg_replace('~\'\s*\.\s*\'~', '', substr(trim($res), 1, -1));
        $res .= $matches[6] . '\'' . str_repeat(')', substr_count($res, '(')) . ';';
        return $res;
    }

    private function deobfuscateExplodeGzinflateSubstr($str, $matches)
    {
        $matches[4] = stripcslashes($matches[4]);
        $strings = explode($matches[3], gzinflate(substr($matches[4], hexdec($matches[5]), (int)$matches[6])));
        $res = str_replace($matches[1], '', $matches[0]);
        $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function ($m) use ($strings) {
            return '\'' . $strings[hexdec($m[1])] . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateUrldecodeEval($str, $matches)
    {
        $dict = strpos($matches[1], 'urldecode') ? urldecode($matches[3]) : stripcslashes($matches[3]);
        $tmp = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $data = [];
        Helpers::collectConcatedVars($tmp, '\'', $data);
        foreach ($data as $var => $value) {
            $tmp = Helpers::replaceVarsFromDictionary($var, $value, $tmp);
        }
        Helpers::collectConcatedVars($tmp, '\'', $data);
        $res = '';
        foreach ($data as $var => $value) {
            $res .= $var . '=' . '\'' . $value . '\';';
        }
        $res .= str_replace([$matches[1], $matches[4]], '', $str);
        $res = Helpers::replaceVarsFromArray($data, $res, true, false);
        return $res;
    }

    private function deobfuscateStrtrEval($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '\'', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4], false, false);
        return $res;
    }

    private function deobfuscateEvalStrtr($str, $matches)
    {
        $res = '?> ';
        $offset = (int) $matches[2];
        $res .= base64_decode(strtr(substr($matches[1], $offset * 2), substr($matches[1], $offset, $offset), substr($matches[1], 0, $offset)));
        return $res;
    }

    private function deobfuscateCreateFuncHex2Bin($str, $matches)
    {
        if (isset($matches[1]) && $matches[1] !== '') {
            $str = str_replace($matches[1], '', $str);
            $str = str_replace($matches[2] . '(', 'hex2bin(', $str);
        }
        $res = Helpers::replaceHex2Bin($str);
        $vars = [];
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        return $res;
    }

    private function deobfuscateCreateFuncB64($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateChrXor($str, $matches)
    {
        $data = explode($matches[4], $matches[5]);
        $res = '';
        foreach ($data as $chr) {
            if ($chr === '') {
                continue;
            }
            $res .= chr($chr ^ (int) $matches[2]);
        }
        return $res;
    }

    private function deobfuscateManyB64WithVarNorm($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, '"');
        if (strpos($res, '${$') !== false) {
            $res = Helpers::postProcess($res);
        }
        return $res;
    }

    private function deobfuscateIncludeFilePutContents($str, $matches)
    {
        return 'eval(' . str_replace($matches[1] . ')', '\'' . $matches[2] . '\')', $matches[3]) . ');';
    }

    private function deobfuscateGzinflateBase64Decode($str, $matches)
    {
        $result = gzinflate(@base64_decode($matches[3]));
        for ($i = 0; $i < strlen($result); $i++) {
            $result[$i] = chr(ord($result[$i]) - 1);
        }
        return $result;
    }

    private function deobfuscateByteCodeData($str, $matches)
    {
        $index = 0;
        $code = '';

        $patterns = [
            'DECRYPT'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;\4\[\+\+\5\]=\s*\'\'\s*;\$[^=]+=\2\[\3\+\([^\)]+[^]]+\];if\(\![^)]+\)\3\+\+;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^\.]+\.=\2\[\3\];if.*?if\([^\)]+\)\{\$[^=]+=\(int\)\$[^;]+;for\(\$[^;]+;[^)]+\){\4\[\5\]\.=\2\[\+\+\3\]\^\$GLOBALS\[\'[^\']+\'\]\((\([^\)]+\))\);',
            'EVAL_REPLACE'  => 'case\s*\'(.)\'\s*:\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\$GLOBALS\[\'[^\']+\']\(\d+\)\.\$GLOBALS\[\'[^\']+\']\(\d+\),[^;]+;\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\s*\'return\s*\'\s*,\s*\'return\s*\'\s*\.\s*[^\)]+\);eval\(\$',
            'EVAL'          => 'case\s*\'(.)\'\s*:eval\(\$[^\[]+\[\$[^\]]+\]\);break\s*1;',
            'GOTO'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?\3=\-\-\$[^;]+;',
            'VAR'           => 'case\s*\'(.)\'\s*:switch\(\$[^\)]+\)\{case\s*\'_SERVER\'\s*:case',
            'ASSIGN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?\4\[\5\]=\4\[\5\-\([^;]+;',
            'END_STMT'      => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4=array\(\);\5=\-[^;]+;',
            'ARRAY'         => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=array\(\);',
            'CALL_FUNC'     => 'case\s*\'(.)\'\s*:\$[^;]+;\$[^=]+=\$[^;]+;\$[^=]+=array\(\);for\(\$[^}]+}(?:\$[^;]+;){2}\s*if\(is_string\(\$[^\)]+\)&&strcasecmp\(\$[^,]+,\s*\'call_user_func_array\'\s*\)\)',
            'INVERT'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\!\4\[\5\-',
            'BOOL'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\(bool\)\4\[\5\-',
            'IF_GOTO'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?if\(\!\4\[\5\]\)\{\3\+=\(int\)\$[^;]+;',
            'GET_CONST'     => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{if\(strcasecmp\(\4\[\5\],\s*\'__file__\'\s*\)==\(',
            'APPEND'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\5\]=\(array\)\4\[\5\];\4\[\5\]=\&\4\[\5\]\[\];',
            'RET'           => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-[^;]+;if\(\$[^<]+<\(',
            'RETURN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-\((?:[^;]+;){2}\}\}',
            'MATH'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?eval\(\s*\'\4\[\5\]=\4\[\5\-2\]\'\s*\.\s*\4\[\5\]\s*\.\s*\'\4\[\5\-1\];\'\s*\);',
            'FETCH_INDEX'   => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?gettype\(\4\[\5\]\);if\(',
        ];

        $opcodes = [];
        $xor = 0;
        $data = '';
        $aliases = [];
        $str = preg_replace_callback('~if\s*\(\!defined\("([^"]+)"\)\)\s*define\("\1",\s*"([^"]+)"\);~msi', function ($m) use (&$aliases) {
            $aliases[$m[1]] = $m[2];
            return '';
        }, $str);
        $vars = [];
        $str = preg_replace_callback('~\$GLOBALS\[([^]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$vars, $aliases) {
            $vars[$aliases[$m[1]]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~\$[^=]+=\s*pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*;if\(@\$GLOBALS\[[^]]+\]\[[^]]+\]\[pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\]==pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\)\$App_Codes=\$GLOBALS~msi', $str, $m)) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            $data = pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]);
        }

        if (preg_match('~\$[^=]+=(\s*(?:pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*\.\s*)+pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*);\$GLOBALS\[pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\]\(__FILE__\);~msi', $str, $m)) {
            $m[1] = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function ($m) use ($vars, $aliases) {
                $m[2] = Helpers::NormalizeInt($m[2]);
                $m[4] = Helpers::NormalizeInt($m[4]);
                return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
            }, $m[1]);
            $data = preg_replace('~\'\s*\.\s*\'~msi', '', substr(trim($m[1]), 1, -1));
        }
        $str = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function ($m) use ($vars, $aliases) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
        }, $str);
        $int = [];
        if (preg_match('~if\(!defined\(\'([^\']+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }
        if (!$data) {
            return '';
        }

        foreach ($patterns as $opcode => $pattern) {
            if (preg_match('~' . $pattern . '~msi', $str, $m)) {
                if (strlen($m[1]) > 1) {
                    $m[1] = substr($m[1], -1, 1);
                }
                $opcodes[$opcode] = $m[1];
                if ($opcode === 'DECRYPT') {
                    $m[7] = str_replace(array_keys($int), array_values($int), $m[7]);
                    $m[7] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $m[7]);
                    $m[7] = MathCalc::calcRawString($m[7]);
                    $xor = (int)substr($m[7], 1, -1);
                }
            }
        }

        $arrays = [];
        $code = Helpers::reverseByteCode($data, $opcodes, $xor);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*explode\(\'([^,]+)\',\s*\'([^\)]+)\'\);\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function ($m) use (&$arrays) {
            $arrays[$m[4]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\],\s*\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\]\)~msi', function ($m) use (&$arrays) {
            if (isset($arrays[$m[1]]) && isset($arrays[$m[3]])) {
                return '\'' . pack($arrays[$m[1]][(int)$m[2]], $arrays[$m[3]][(int)$m[4]]) . '\'';
            }
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*\'([^\']+)\';\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function ($m) use (&$vars) {
            $vars[$m[3]] = $m[2];
            return '';
        }, $code);
        foreach ($vars as $key => $val) {
            if (is_array($val) && $val[0] === 'H*') {
                $val = pack($val[0], $val[1]);
            }
            $code = str_replace('$GLOBALS[\'' . $key . '\']', $val, $code);
        }
        $code = preg_replace_callback('~function\s*\w+\([^\)]+\)\s*\{\$__xend_args=array\([^)]+\);(return\s*[^}]+)\}\s*goto\s*(l_\d+)\s*\s*\s*(?:(.*)?\2:)~msi', function ($m) {
            $m[0] = str_replace($m[3], '', $m[0]);
            $m[0] = str_replace($m[1], "\n" . $m[3] . "\n", $m[0]);
            return $m[0];
        }, $code);

        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+)\s*[\+\-\*\/]+\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+);\s*)+~msi', function ($m) {
            $vars = [];
            $expressions = explode(';', $m[0]);
            foreach ($expressions as $expr) {
                if ($expr === '') {
                    continue;
                }
                $tmp = explode(' = ', $expr);
                $tmp[1] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $tmp[1]);
                $tmp[1] = str_replace(array_keys($vars), array_values($vars), $tmp[1]);
                $vars[trim($tmp[0])] = trim(MathCalc::calcRawString(' ' . $tmp[1]));
            }
            return $m[1] . ' = ' . $vars[$m[1]] . ';' . "\n";
        }, $code);

        $code = preg_replace_callback('~((\$\w+)\s*=\s*\'\d+\';)\s*(l_\d+):\s*(\$\w+)\s*=\s*([^;]+;)\s*if\s*\(\!\4\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*(.*?)(\2\s*=\s*[^;]+);\s*goto\s*\3\s*goto\s*\8\s*\8:~msi', function ($m) {
            return 'for (' . $m[1] . ' ' . $m[5] . ' ' . $m[10] . ') {' . "\n" . $m[9] . '}';
        }, $code);

        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\8:~msi', function ($m) {
            return $m[1] . ': ' . "\n";
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:(?:\s*goto\s*(l_\d+)\s*\8:)?~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*if\s*\(\![^)]+\)+\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\2:\s*goto\s*(l_\d+)\s*\3:\s*([^\n]+;\n)\s*goto\s*\1\s*goto\s*\4\s*\4:\s*~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*goto\s*(l_\d+)\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*goto\s*(l_\d+)\s*goto\s*\8\s*\8:\s*goto\s*(l_\d+)\s*\9:\s*return;\s*goto\s*\1\s*goto\s*\10\s*\10:~msi', function ($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*([^;]+);\s*if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\3:\s*goto\s*(l_\d+)\s*\4:\s*(.*?)\5:\s*~msi', function ($m) {
            $m[6] = preg_replace('~\s*goto\s*l_\d+\s*$~msi', '', $m[6]);
            $m[0] = 'if(' . $m[2] . ') {' . "\n" . $m[6] . "\n" . '}' . "\n";
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*([^;]+);\s*)+if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*\3:\s*l_\d+:\s*((?:[^\n]+;\n)+)l_\d+:(\s*((?:[^\n!]+;\n)+)l_\d+:)?~msi', function ($m) {
            if (isset($m[5]) && $m[5] !== '') {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '} else {' . "\n" . $m[5] . '}';
            } else {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '}';
            }
        }, $code);
        $code = preg_replace_callback('~(goto\s*l_\d+)\n~msi', function ($m) {
            return $m[1] . ';' . "\n";
        }, $code);
        return $code;
    }

    private function deobfuscateOESNS_cms($str, $matches)
    {
        $strings = [];
        $int = [];
        $str = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);
        $str = preg_replace_callback('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\'\w+\'\);\s*\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\'([^\']+)\'\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }

        $matches[4] = stripcslashes($matches[4]);
        $code = base64_decode($matches[5]);
        $code = preg_replace_callback('~\((?:(?:\w+|\d+)[\*+-/])+(?:\w+|\d+)\)~msi', function ($m) use ($int) {
            $m[0] = str_replace(array_keys($int), array_values($int), $m[0]);
            return MathCalc::calcRawString($m[0]);
        }, $code);
        $code = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(stripcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])])), '\\\'') . '\'';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}](\()?~msi', function ($m) use ($strings) {
            if (isset($m[3]) && $m[3] !== '') {
                return $strings[$m[1]][Helpers::NormalizeInt($m[2])] . '(';
            }
            return '\'' . addcslashes(stripcslashes($strings[$m[1]][Helpers::NormalizeInt($m[2])]), '\\\'') . '\'';
        }, $code);
        return $code;
    }

    private function deobfuscateFilePutContentsB64Var($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateStrRot13PackFuncs($str, $matches)
    {
        return pack('H*', str_rot13($matches[3]));
    }

    private function deobfuscateDefinedGlobalsEval($str, $matches)
    {
        $dictionary = explode($matches[2], $matches[3]);
        $result = $str;
        $mainNumberVal = 0;
        $mainNumberName = '';
        $result = preg_replace_callback(
            '~pack\(\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]],\s?\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]]\)|ord\((\d+)\)~msi',
            function ($m) use ($dictionary, &$mainNumberVal, &$mainNumberName) {
                if ($m[3] !== null) {
                    $mainNumberVal = ord($m[3]);
                    return $mainNumberVal;
                }
                $arg1 = $dictionary[Helpers::NormalizeInt($m[1])] ?? '';
                $arg2 = $dictionary[Helpers::NormalizeInt($m[2])] ?? '';
                $mainNumberName = pack($arg1, $arg2);
                return '"' . $mainNumberName . '"';
            },
            $result
        );

        preg_match_all('~"([^\'"]+)"~msi', $matches[5], $dictonarySet, PREG_SET_ORDER);
        if (!array_key_exists($matches[7], $dictonarySet)) {
            return $result;
        }
        $func = stripcslashes($dictonarySet[$matches[7]][1]);
        $code = sprintf('%s("%s")', $func, $matches[8]);
        $code = stripslashes($this->unwrapFuncs($code));
        $code = str_replace($mainNumberName, (int)$mainNumberVal, $code);

        $result = str_replace($matches[6], $code, $result);

        preg_match_all(
            '~\$GLOBALS\[(\w{1,100})\]\s?=\s?explode\([\'"]([^\'"]+)[\'"],\s?[\'"](H\*[^\'"]+)[\'"]\);~msi',
            $result,
            $globalMatches,
            PREG_SET_ORDER
        );

        foreach ($globalMatches as $globalMatch) {
            $dictonarySet = explode($globalMatch[2], $globalMatch[3]);
            $result = preg_replace_callback(
                '~pack\(\$GLOBALS\[' . $globalMatch[1] . '\][{[](\w+)[]}]\s*,\s*\$GLOBALS\['
                . $globalMatch[1] . '\][{[](\w+)[]}]\)~msi',
                function ($m) use ($dictonarySet) {
                    $key = Helpers::NormalizeInt($m[2]);
                    if (!array_key_exists($key, $dictonarySet)) {
                        return $m[0];
                    }
                    return '"' . pack('H*', $dictonarySet[$key]) . '"';
                },
                $result
            );
        }

        $result = MathCalc::calcRawString($result);

        return $result;
    }

    private function deobfuscateEvalB64Strtr($str, $matches)
    {
        $code = '';
        $decoder = base64_decode(strtr($matches[8], $matches[9], $matches[10]));
        if (preg_match('~eval\(\$[^\(]+\(\$[^\(]+\((\$[^,]+),\s*\'([^\']+)\',\s*\'([^\']+)\'\)\)\);\s*\1\s*=\s*NULL;~msi', $decoder, $m)) {
            $code = base64_decode(strtr($matches[11], $m[2], $m[3]));
        }
        return $code;
    }

    private function deobfuscateEvalXorKey($str, $matches)
    {
        return Helpers::xorWithKey(base64_decode($matches[10]), $matches[12]);
    }

    private function deobfuscateEvalB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateOnelineBackdoor($str, $matches)
    {
        if (strpos($str, ' = ') !== false) {
            $str = preg_replace('~\s*=\s*~', '=', $str);
        }
        return Helpers::postProcess($str);
    }

    private function deobfuscateUrldecodeDict($str, $matches)
    {
        $dict = urldecode($matches[3]);
        $funcs = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $vars = Helpers::collectConcatedVars($funcs);
        foreach ($vars as $var => $value) {
            $funcs = Helpers::replaceVarsFromDictionary($var, $value, $funcs);
        }
        $vars = Helpers::collectConcatedVars($funcs);
        $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[8]));
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscateWpMlwPluginGegelShell($str, $matches)
    {
        $strings[$matches[8]] = explode('", "', $matches[9]);
        $strings[$matches[2]] = $matches[3];
        $strings[$matches[14]] = $matches[15];
        $strings[$matches[17]] = $matches[18];
        $str = str_replace([$matches[1], $matches[7], $matches[13], $matches[16]], '', $str);
        $str = preg_replace_callback(
            '~\$this\-\>(\w+)\[(\d+)\]~msi',
            function ($m) use ($strings) {
                if (isset($strings[$m[1]])) {
                    return '\'' . $strings[$m[1]][(int)$m[2]] . '\'';
                }
                return $m[0];
            },
            $str
        );
        $str = str_replace('\' . \'', '', $str);
        $str = preg_replace_callback('~function\s*\w+\([^\)]*\)\s*(\{([^{}]*+(?:(?1)[^{}]*)*+)\})~msi', function ($m) use ($strings) {
            $vars = [];
            Helpers::collectVars($m[0], '"', $vars, true);
            $res = Helpers::replaceVarsFromArray($vars, $m[0]);
            $res = preg_replace_callback('~\$this\-\>(\w+)\s*=\s*strtr\(\$this\-\>\1,\s*array\(\s*\'([^\)]+)\'\s*\)\);\s*(\$\w+)\s*=\s*\$this->\w+\(\$this->\1,\s*false\);~msi', function ($m2) use ($strings) {
                $tmp = explode('\', \'', $m2[2]);
                $chars = [];
                foreach ($tmp as $entry) {
                    $entry = explode('\'=>\'', $entry);
                    $chars[$entry[0]] = $entry[1];
                }
                $res = $m2[1] . ' = \'' . Helpers::gegelShellDecode(strtr($strings[$m2[1]], $chars), false) . '\';';
                return $res;
            }, $res);
            return $res;
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange($str, $matches)
    {
        return Helpers::replaceVarsFromDictionary(
            $matches[1],
            implode(range(chr($matches[2]), chr($matches[3]))),
            $str
        );
    }

    private function deobfuscateEvalHex2Bin($str, $matches)
    {
        $code = Helpers::collectConcatedVars($matches[1]);
        return hex2bin($code[$matches[2]]);
    }

    private function deobfuscateThinkPHP_cms($str, $matches)
    {
        $strings = [];
        $int = [
            '~\bE_ERROR\b~'               => E_ERROR,
            '~\bE_RECOVERABLE_ERROR\b~'   => E_RECOVERABLE_ERROR,
            '~\bE_WARNING\b~'             => E_WARNING,
            '~\bE_PARSE\b~'               => E_PARSE,
            '~\bE_NOTICE\b~'              => E_NOTICE,
            '~\bE_STRICT\b~'              => E_STRICT,
            '~\bE_DEPRECATED\b~'          => E_DEPRECATED,
            '~\bE_CORE_ERROR\b~'          => E_CORE_ERROR,
            '~\bE_CORE_WARNING\b~'        => E_CORE_WARNING,
            '~\bE_COMPILE_ERROR\b~'       => E_COMPILE_ERROR,
            '~\bE_COMPILE_WARNING\b~'     => E_COMPILE_WARNING,
            '~\bE_USER_ERROR\b~'          => E_USER_ERROR,
            '~\bE_USER_WARNING\b~'        => E_USER_WARNING,
            '~\bE_USER_NOTICE\b~'         => E_USER_NOTICE,
            '~\bE_USER_DEPRECATED\b~'     => E_USER_DEPRECATED,
            '~\bE_ALL\b~'                 => E_ALL,
        ];

        $str = preg_replace(array_keys($int), array_values($int), $str);
        $str = MathCalc::calcRawString($str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function ($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $hangs = 10;
        while (preg_match('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', $str) && $hangs--) {
            $str = preg_replace_callback('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', function ($m) {
                return $m[1] . '(' . $m[2] . ')';
            }, $str);
        }

        $str = preg_replace_callback('~(?|if\(!defined\("(\w+)"\)\)|\$\w+=!defined\("([^"]+)"\);if\(\$\w+\)\{)\s*define\("\1","\w+"\);\s*(?|\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\s*\'([^\']+)\'\);|unset\(\$\w+\);\$\w+=explode\(\'([^\']+)\',\'([^\']+)\'\);\$GLOBALS\[\1\]=\$\w+;)~msi', function ($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\s*,\s*\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function ($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function ($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $str = preg_replace_callback('~call_user_func\(function\([^)]*\)\{.*?\},\s*\$GLOBALS\[(\w+)\]\[(\d+)\],\$GLOBALS\[(\w+)\]\[(\d+)\]\)~msi', function ($m) use ($strings) {
            return '\'' . pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]) . '\'';
        }, $str);

        return $str;
    }

    private function deobfuscateEvalHexFunc($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'');
        $func = stripcslashes($matches[3]);
        $vars[$matches[2]] = Helpers::executeWrapper($func, [stripcslashes($matches[4])]);
        $code = Helpers::executeWrapper(stripcslashes($matches[5]), [$vars[$matches[2]]]);
        return Helpers::replaceVarsFromArray($vars, $code);
    }

    private function deobfuscateCallUserFuncsPackDefinedVar($str, $matches)
    {
        $packDataArray = explode(
            $matches[3],
            gzinflate(substr(
                substr(stripcslashes($matches[4]), 0, -1),
                hexdec($matches[5]),
                (int)$matches[6]
            ))
        );

        $packDataArray = explode($matches[7], $packDataArray[hexdec($matches[8])]);
        $result = MathCalc::calcRawString($str);

        $result = preg_replace_callback(
            '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{' . $matches[1] . '})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
            function ($match) use ($packDataArray) {
                $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                if (isset($packDataArray[$index])) {
                    $result = pack('H*', $packDataArray[$index]);
                    if (is_callable($result)) {
                        return $result;
                    }
                    return '\'' . $result . '\'';
                }
                return $match[0];
            },
            $result
        );

        if (preg_match('~if\(\!\s?defined\(\s?\'([^\']+)\'\)\)\s?define\(\s?\'\1\',\s?\'[^\']+\'\)?;\s?call_user_func_array\([\'"\w\s]+,\s?array\(\d\)\);[^\$]+(\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s?explode\(\s?\'([^\']+)\',\s?gzinflate\(\s?substr\(\s?\'((?:[^\']+\')+),(\dx\w{1,50}),\s?(\-?[\w]{1,50})\)+;\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s*call_user_func_array\([^,]+,\s?array\(\s?\'([^\']+)\',\s?\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\[(0x\d+)\]\)+;)(?:.*?\$[GET_LOBALS]+{\s?[\'"]?\1[\'"]?})+[^;]+;~msi', $result, $match)) {
            $decoded = gzinflate(substr(
                substr(($match[4]), 0, -1),
                hexdec($match[5]),
                strpos($match[6], '-') !== false
                        ? -hexdec($match[6])
                        : hexdec($match[6])
            ));

            if (!$decoded) {
                return $match[0];
            }

            $packDataArray = explode(
                $match[3],
                $decoded
            );

            $packDataArray = explode($match[7], $packDataArray[hexdec($match[8])]);

            $result = str_replace($match[2], '', $result);
            $result = MathCalc::calcRawString($result);

            $result = preg_replace_callback(
                '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{\s?\'' . $match[1] . '\'})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
                function ($match) use ($packDataArray) {
                    $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                    if (isset($packDataArray[$index])) {
                        $result = pack('H*', $packDataArray[$index]);
                        if (is_callable($result)) {
                            return $result;
                        }
                        return '\'' . $result . '\'';
                    }
                    return $match[0];
                },
                $result
            );
        }

        $result = str_replace($matches[2], '', $result);

        return $result;
    }

    private function deobfuscateVarFuncsCallEvalV1($str, $matches)
    {
        return gzinflate(base64_decode($matches[7]));
    }

    private function deobfuscateVarFuncsCallEvalV2($str, $matches)
    {
        return gzinflate(base64_decode($matches[2]));
    }

    private function deobfuscateDictStrippedVarsCreateFunc($str, $matches)
    {
        $dictName = $matches[1];
        $dictVal = stripcslashes($matches[2]);

        $result = MathCalc::calcRawString($matches[3]);
        $code = Helpers::replaceVarsFromDictionary($dictName, $dictVal, $result);
        if (preg_match('~base64_decode[^;]+;[^=]+=gzinflate[^;]+;eval~msi', $code)) {
            return gzinflate(base64_decode(stripcslashes($matches[5])));
        }

        return $str;
    }

    private function deobfuscateDictFuncsSubstr($str, $matches)
    {
        $dict = stripcslashes($matches[3]);
        $vars[$matches[4]] = substr($dict, $dict[Helpers::NormalizeInt($matches[5])], $dict[Helpers::NormalizeInt($matches[6])]);
        $vars[$matches[7]] = substr($dict, $dict[Helpers::NormalizeInt($matches[8])] + $dict[Helpers::NormalizeInt($matches[9])], $dict[Helpers::NormalizeInt($matches[10])]);
        $vars[$matches[11]] = substr($dict, $dict[Helpers::NormalizeInt($matches[12])] + $dict[Helpers::NormalizeInt($matches[13])] + $dict[Helpers::NormalizeInt($matches[14])]);
        $str = str_replace($matches[1], '', $str);
        $str = str_replace($matches[15], Helpers::replaceVarsFromArray($vars, $matches[15]), $str);
        $str = preg_replace_callback('~0x[\da-f]+~msi', function ($m) {
            return Helpers::NormalizeInt($m[0]);
        }, $str);

        $hangs = 10;
        while (preg_match('~define\(\'([^\']+)\',\'[^\']+\'\);(\$_SERVER|\$GLOBALS)\[\'?\1\'?\]=explode\(\'([^\']+)\',gzinflate\(substr\(base64_decode\(\'([^\']+)\'\),(\d+),\s?\-(\d+)\)\)\);~msi', $str, $m) && $hangs--) {
            $str = str_replace($m[0], '', $str);
            $code = explode($m[3], gzinflate(substr(base64_decode($m[4]), Helpers::NormalizeInt($m[5]), -Helpers::NormalizeInt($m[6]))));
            $tmp = [];
            foreach ($code as $i => $val) {
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                if (preg_match_all('~(\$\w+)=&\$GLOBALS\[\'' . $m[1] . '\'\]~msi', $str, $m2)) {
                    $tmp = $m2[1] ?? [];
                    foreach ($m2[0] as $stmt) {
                        $str = str_replace($stmt . ';', '', $str);
                    }
                }
                foreach ($tmp as $var) {
                    $str = str_replace($var . '[' . $i . '](', $val . '(', $str);
                    $str = str_replace($var . '[' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                }
            }
        }
        $str = preg_replace_callback('~gzinflate\(base64_decode\(\'([^\']+)\'\)\)~msi', function ($m) {
            return '\'' . gzinflate(base64_decode($m[1])) . '\'';
        }, $str);
        return $str;
    }

    private function deobfuscateGulf2($str, $matches)
    {
        $str = str_replace($matches[6], '', $str);
        $str .= gzinflate(base64_decode($matches[11]));
        $str = preg_replace_callback('~eval\(gzinflate\((\w+)\(\'~msi', function ($m) {
            return str_replace($m[1], 'base64_decode', $m[0]);
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange2($str, $matches)
    {
        $dict = range(chr((int)$matches[2]), chr((int)$matches[3]));
        $str = Helpers::replaceVarsFromDictionary($matches[1], $dict, $str);
        if (preg_match('~\'(\$\w+)\',\'(eval\("\?>"\.(\w+\()+\1\)+;)\'~msi', $str, $m)) {
            $str = str_replace($m[1], '\'' . $matches[6] . '\'', $m[2]);
            return $str;
        }
        $dict2 = range(chr((int)$matches[8]), chr((int)$matches[9]));
        $str = Helpers::replaceVarsFromDictionary($matches[7], $dict2, $str);
        $dict3 = explode(',', Helpers::replaceVarsFromDictionary($matches[7], $dict2, $matches[11]));
        foreach ($dict3 as &$string) {
            $string = trim($string, ' \'');
        }
        $str = Helpers::replaceVarsFromDictionary($matches[10], $dict3, $str, false);
        return $str;
    }

    private function deobfuscateFileInjector($str, $matches)
    {
        return str_replace($matches[2], base64_decode($matches[2]), $str);
    }

    private function deobfuscateXxteaDecrypt($str, $matches)
    {
        return Helpers::Xxtea_decrypt($matches[6], $matches[7]);
    }

    private function deobfuscateSDCMS($str, $matches)
    {
        $res = Helpers::unwrapGoto($str);
        $res = preg_replace('~\$\w+=chr\(72\)\s*\.\s*chr\(42\);~msi', '', $res);
        $res = preg_replace_callback('~pack\(\$\w+,"([^"]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateGlobalsEvalFuncs($str, $matches)
    {
        $search = ['$ ', '{ ', ' }', ' [', '] ', '} '];
        $replace = ['$', '{', '}', '[', ']', '}'];
        $str = str_replace($search, $replace, $str);
        $res = $str;
        $vars = Helpers::collectVars($res, '"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        preg_match_all(
            '~(?|\${(\${)?[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?|()\$(\w+))\s?=\s?[\'"]([^"\']+)["\'];~msi',
            $res,
            $globalVars,
            PREG_SET_ORDER
        );

        foreach ($globalVars as $globalVar) {
            if ($globalVar[1] === '${' && isset($vars['$' . $globalVar[2]])) {
                $vars['$' . $vars['$' . $globalVar[2]]] = $globalVar[3];
            } else {
                $vars['$' . $globalVar[2]] = $globalVar[3];
            }

            $res = str_replace($globalVar[0], '', $res);
        }

        preg_match_all(
            '~\${\${[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?\s?=\s?((?:\$\w{1,50}\s?\.?\s?|\${\${[\'"]GLOBALS[\'"]}\[[\'"][^\'"]+[\'"]\]}\s?\.?\s?)+;\s?)~msi',
            $res,
            $varsToReplace,
            PREG_SET_ORDER
        );
        foreach ($varsToReplace as $varToReplace) {
            preg_match_all(
                '~(\$\w{1,50})|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}~msi',
                $varToReplace[2],
                $varData,
                PREG_SET_ORDER
            );

            $value = '';
            foreach ($varData as $var) {
                if ($var[1] !== '' && isset($vars[$var[1]])) {
                    $value .= $vars[$var[1]];
                }
                if ($var[2] !== '' && isset($vars['$' . $var[2]])) {
                    $value .= $vars['$' . $vars['$' . $var[2]]];
                }
            }

            $vars['$' . $vars['$' . $varToReplace[1]]] = $value;
            $res = str_replace($varToReplace[0], '', $res);
        }

        $res = preg_replace_callback(
            '~(?|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}|(?<=\()\$(\w+)(?=\())(\()?~msi',
            function ($m) use ($vars) {
                if ($m[1] !== '' && isset($vars['$' . $m[1]])) {
                    if (isset($m[2]) && $m[2] !== '') {
                        $ret = $vars['$' . $vars['$' . $m[1]]] ?? $vars['$' . $m[1]];
                        return $ret . '(';
                    } else {
                        return '"' . $vars['$' . $vars['$' . $m[1]]] . '"';
                    }
                }
                return $m[0];
            },
            $res
        );

        $res = trim(preg_replace('~echo "\s*";~', '', $res));
        return $this->unwrapFuncs($res);
    }

    private function deobfuscateDictVarsEval($str, $matches)
    {
        $dict = str_split($matches[3]);
        $str = str_replace($matches[1], '', $str);
        $str = Helpers::replaceVarsFromDictionary($matches[2], $dict, $str);
        $vars = Helpers::collectVars($str);
        $str = preg_replace('~((\$\w{1,50}\s*=\s*[\'"]\w{1,20}[\'"]\s*;\s*){1,})~msi', '', $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateEvalIter($str, $matches)
    {
        $varsConcated = Helpers::collectConcatedVars($matches[3]);
        $res = MathCalc::calcRawString($matches[5] . $matches[7]);
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($varsConcated, $res));
        $vars = Helpers::collectVars($res, "'");
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($vars, $matches[9]));
        $res = $this->deobfuscateEval($res, []);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        if (preg_match('~(eval\(gzuncompress\(base64_decode\(\'[^\']+\'\)\)\);)(eval\(gzuncompress\(strrev\(base64_decode\(\'[^\']+\'\)\)\)\);)~msi', $res, $m)) {
            $eval1 = $this->deobfuscateEval($m[1], []);
            $res = str_replace($m[1], $eval1, $res);

            $eval2 = $this->deobfuscateEval($m[2], []);
            for ($i = 0; $i < 101; $i++) {
                $eval2 = Helpers::replaceVarsFromArray($vars, $eval2);
                $eval2 = $this->deobfuscateEval($eval2, []);
            }

            if (preg_match('~((\$\w*)\s*=\s*\w*\s*\(\s*\$\w*,\s*\"(\w*)\"\s*\)\s*;)\s*eval\s*\(\2\)\s*;~msi', $eval2, $m2)) {
                $key = $m2[3];
                $var = $matches[2];

                $key = base64_encode($key);
                $var = base64_decode($var);
                $ATKQTP = "";
                $WWEMZR = "";
                $RHNLHB = 0;
                while ($RHNLHB < strlen($var)) {
                    for ($VGPJVG = 0; $VGPJVG < strlen($key); $VGPJVG++) {
                        $ATKQTP = chr(ord($var[$RHNLHB]) ^ ord($key[$VGPJVG]));
                        $WWEMZR .= $ATKQTP;
                        $RHNLHB++;
                        if ($RHNLHB >= strlen($var)) {
                            break;
                        }
                    }
                }
                $eval2 = str_replace($m2[1], '', $eval2);
                $eval2 = str_replace($m2[2], gzuncompress(base64_decode($WWEMZR)), $eval2);
                $eval2 = Helpers::normalize($eval2);

                if (preg_match('~eval\(\"[^\"]+\"\.gzuncompress\(base64_decode\(\"[^\"]+\"\)\)\);~msi', $eval2, $m3)) {
                    $subeval = $this->deobfuscateEval($m3[0], []);
                    $eval2 = str_replace($m3[0], $subeval, $eval2);
                }
                $res = str_replace($m[2], $eval2, $res);
            }
        }
        return $res;
    }

    private function deobfuscateArrayDictCharsConcatStr($str, $matches)
    {
        $varsStr = $matches[7];
        $varsStr = preg_replace_callback('~\$[^\s(]+\([\'"]([^\'"]+)[\'"]\)~msi', function ($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $varsStr);

        $vars = explode(',', $varsStr);
        array_walk($vars, function (&$val) {
            $val = trim($val, '\'');
        });

        $dictVars = $matches[8];
        $dictVars = preg_replace_callback(
            '~(?:\$[^\s[]+\[\d+\]\.?)+~msi',
            function ($m) use ($vars) {
                $res = '';
                preg_match_all('~\[(\d+)\]~ms', $m[0], $match, PREG_SET_ORDER);
                foreach ($match as $index) {
                    $res .= $vars[(int)$index[1]] ?? '';
                }
                return '\'' . $res . '\'';
            },
            $dictVars
        );

        $res = str_replace('.', '', $matches[10]);

        $vars = [];
        $closeBrackets = 0;
        preg_match_all('~(\$[^\s=]+)\s?=\s?[\'"]([^\'"]+)[\'"];~msi', $dictVars, $matchVars, PREG_SET_ORDER);
        foreach ($matchVars as $matchVar) {
            $res = str_replace($matchVar[1], strtolower($matchVar[2]), $res);
            $closeBrackets++;
        }

        return $this->unwrapFuncs($res . '\'' . $matches[2] . '\'' . str_repeat(')', $closeBrackets) . ';');
    }

    private function deobfuscateEvalFile($str, $matches)
    {
        $res = '';
        $file_content = $str;
        $func1_name = $matches[5];
        $func2_name = $matches[10];
        $eval1 = $matches[2];
        $eval2 = $matches[3];
        $eval3 = $matches[7];
        $eval3_arg = $matches[8];

        $eval1_res = $this->deobfuscateEval($eval1, []);
        $res = str_replace($eval1, $eval1_res, $str);

        if (preg_match('~' . $func1_name . '~msi', $eval1_res)) {
            $func1_call1 = Helpers::someDecoder5($file_content, $matches[6], $matches[6], $matches[12], $matches[14]);
            $func1_call2 = Helpers::someDecoder5($file_content, $matches[12], $matches[6], $matches[12], $matches[14]);
            $func1_call3 = Helpers::someDecoder5($file_content, $matches[14], $matches[6], $matches[12], $matches[14]);

            $eval2_res = $this->deobfuscateEval(str_replace($matches[4], '"' . $func1_call1 . '"', $eval2), []);
            $res = str_replace($eval2, $eval2_res, $res);

            if (preg_match('~' . $func2_name . '~msi', $eval2_res)) {
                $func2_call = Helpers::someDecoder6($func1_call2, $func1_call3);
                $eval3_arg = str_replace($matches[9], '"' . $func2_call . '"', $eval3_arg);
                $eval3_arg = trim(Helpers::normalize($eval3_arg), '"');
                $res = str_replace($eval3, $eval3_arg, $res);
                $res = str_replace($matches[15], '', $res);
            }
        }

        return $res;
    }

    private function deobfuscateSlashedDictFuncGetVar($str, $matches)
    {
        //Sample: slashedDictFuncGetVar_1.php
        $dictionary = stripcslashes($matches[2]);
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?substr\(\$\w{1,50},\s?((?:\$\w{1,50}\[\d+\]\+?\s?)+),?\s?(\$\w{1,50}\[\d+\])?\);~msi',
            $matches[3],
            $varMatches,
            PREG_SET_ORDER
        );

        $vars = [];
        foreach ($varMatches as $varMatch) {
            $argOneValue = 0;
            preg_match_all('~\d+~msi', $varMatch[2], $indexMatches, PREG_SET_ORDER);
            foreach ($indexMatches as $indexMatch) {
                $argOneValue += $dictionary[(int)$indexMatch[0]] ?? 0;
            }
            if (isset($varMatch[3]) && $varMatch[3] !== '') {
                $argTwoValue = 0;
                preg_match_all('~\d+~msi', $varMatch[3], $indexMatches, PREG_SET_ORDER);
                foreach ($indexMatches as $indexMatch) {
                    $argTwoValue += $dictionary[(int)$indexMatch[0]] ?? 0;
                }

                $vars[$varMatch[1]] = substr($dictionary, $argOneValue, $argTwoValue);
                continue;
            }

            $vars[$varMatch[1]] = substr($dictionary, $argOneValue);
        }

        $result = Helpers::replaceVarsFromArray($vars, $str, true);

        $hop = 10;
        $regex = '~(\$\w+\[[^]]+\])\s?=\s?explode\([\'"]([^\'"]+)[\'"]\s?,gzinflate\(substr\(base64_decode\([\'"]([^\'"]+)[\'"]\)\s?,(\w+),\s?([-\w]+)\)\)\);((?:.*?\1\[\w+\])+[^;}]+[;}]+)~msi';
        $finalDictionary = [];
        while ($hop !== 0 && preg_match($regex, $result, $matchPattern)) {
            $substrArg1 = @hexdec($matchPattern[4]) * (strpos($matchPattern[4], '-') !== false ? -1 : 1);
            $substrArg2 = @hexdec($matchPattern[5]) * (strpos($matchPattern[5], '-') !== false ? -1 : 1);
            $finalVariable = $matchPattern[1];
            // If $matchPattern[2] is an empty string explode will throw a ValueError.
            try {
                $finalDictionary = explode(
                    $matchPattern[2],
                    gzinflate(substr(base64_decode($matchPattern[3]), $substrArg1, $substrArg2))
                );
            } catch (\ValueError $e) {
                $finalDictionary = [];
            }

            $var = str_replace('[', '\[', $finalVariable);
            $var = str_replace(']', '\]', $var);
            $subRegex = '~\\' . $var . '\[([\dx\w]+)\](\s*\()?~msi';

            $result = $matchPattern[6];

            $subHop = 10;
            while ($subHop !== 0 && preg_match($subRegex, $result)) {
                $result = preg_replace_callback($subRegex, function ($m) use ($finalDictionary) {
                    $index = hexdec($m[1]);
                    if (!isset($finalDictionary[$index])) {
                        return $m[0];
                    }
                    if (isset($m[2]) && $m[2] !== '') {
                        return $finalDictionary[$index] . '(';
                    }

                    return '\'' . addslashes($finalDictionary[$index]) . '\'';
                },
                    $result);
                $subHop--;
            }

            $hop--;
        }

        $result = preg_replace_callback('~\$\w+\[([\d\w]+)\](\s*\()?~msi', function ($m) use ($finalDictionary) {
            $index = hexdec($m[1]);

            if (!isset($finalDictionary[$index])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $finalDictionary[$index] . '(';
            }

            return '\'' . addslashes($finalDictionary[$index]) . '\'';
        }, $result);

        return $result;
    }

    private function deobfuscateConcatVarsInLoopEval($str, $matches)
    {
        //Sample: concatVarsInLoopEval_1.php
        $vars = Helpers::collectVars($matches[1], "'");

        $result = str_replace('.', '', $matches[6]);
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $func = stripcslashes($matches[3] . $matches[4]);

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }

        for ($i = (int)$matches[8]; $i <= (int)$matches[9]; $i++) {
            $result = @$func($result);
        }

        return $result;
    }

    private function deobfuscateTwoFuncStrDecodeVars($str, $matches)
    {
        //Sample: twoFuncStrDecodeVars_1.php
        $dictionary = $matches[4];

        $set = explode(',', $matches[11]);
        $func = "";
        foreach ($set as $val) {
            $func .= $dictionary[$val];
        }

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }
        $result = @$func($matches[21]);

        $dataFirst = strlen($result);
        $dataSecond = strlen($matches[23]);

        if ($dataFirst <= $dataSecond) {
            return $result ^ $matches[23];
        }
        for ($i = 0; $i < $dataFirst; ++$i) {
            $result[$i] = $result[$i] ^ $matches[23][$i % $dataSecond];
        }

        return $result;
    }

    private function deobfuscateClassArrayFuncReplaces($str, $matches)
    {
        //Sample: classArrayFuncReplaces_1.php
        $result = $str;

        $dictionary = range($matches[2], $matches[3]);
        preg_match_all('~(\d+)~msi', $matches[5], $strings, PREG_SET_ORDER);
        $variableValue = '';
        foreach ($strings as $str) {
            $variableValue .= $dictionary[(int)$str[1]] ?? '';
        }

        $result = str_replace($matches[5], $variableValue, $result);

        $dictionary = Helpers::concatStringsInContent($matches[18]);
        preg_match_all('~(\w+)~msi', $dictionary, $strings, PREG_SET_ORDER);

        $variableValues = [];
        $dictionary = range($matches[11], $matches[12]);
        foreach ($strings as $str) {
            $variableValue = '';
            $arr = explode($matches[13], $str[1]);
            foreach ($arr as $key => $val) {
                $variableValue .= $dictionary[$val - 0];
            }
            $variableValues[] = $variableValue;
        }

        $result = str_replace($matches[16], '', $result);

        $result = preg_replace_callback(
            '~\\' . $matches[19] . '\[(\d+)\](\s?\()?~msi',
            function ($m) use ($variableValues) {
                $replace = $variableValues[(int)$m[1]] ?? $m[0];
                return (isset($m[2]) && $m[2] !== '') ? $replace . '(' : ('"' . $replace . '"');
            },
            $result
        );

        return $result;
    }

    private function deobfuscateGlobalsArrayDictFunc($str, $matches)
    {
        //Sample: globalsArrayDictFunc.php

        $globals_name   = $matches[1];
        $globals_array  = explode(',', str_replace(['"', "'"], '', Helpers::replaceBase64Decode(Helpers::normalize($matches[2]), '\'')));
        $function_name  = $matches[3];
        $function_dict  = explode(',', str_replace(['"', "'"], '', $matches[4]));
        $code           = $matches[5];

        $code = preg_replace_callback('~\$GLOBALS\[["\'](\w{1,100})["\']\]\[(\d{1,10})\]~mis', function ($matches) use ($globals_name, $globals_array) {
            if ($matches[1] !== $globals_name || !array_key_exists($matches[2], $globals_array)) {
                return $matches[0];
            }
            return $globals_array[$matches[2]];
        }, $code);

        $code = preg_replace_callback('~(\w{1,20})\((\d{1,3})\)~mis', function ($matches) use ($function_name, $function_dict) {
            if ($matches[1] !== $function_name || !array_key_exists($matches[2], $function_dict)) {
                return $matches[0];
            }
            return '\'' . base64_decode($function_dict[$matches[2]]) . '\'';
        }, $code);

        return $code;
    }

    private function deobfuscateDecryptWithUserAgent($str, $matches)
    {
        $hardcoded_key = '87.38';
        $funcs = explode('(', $matches[4]);
        $funcs = array_reverse($funcs);
        $code = $matches[11];
        foreach ($funcs as $func) {
            if ($func === '') {
                continue;
            }
            if (Helpers::convertToSafeFunc($func)) {
                $code = Helpers::executeWrapper($func, [$code]);
            }
        }
        $key = $hardcoded_key . $matches[10];
        $key = md5($key);
        $res = Helpers::xorWithPrevChar(Helpers::xorWithKey($code, $key));
        if (strpos($res, 'error_reporting') !== false) {
            return $res;
        }
        return '';
    }

    private function deobfuscateEvalChrVarsMany($str, $matches)
    {
        $vars = Helpers::collectVars($str, "'", $vars);
        $vars[$matches[1]] = 'chr';
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[3]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        if (
            !preg_match(
                '~(eval\(\$?\w{1,50}\(\$?\w{1,50}\([\'"][^\'"]+[\'"]\)\)\);)\s?(eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;)~msi',
                $res,
                $unwrapCode
            )
        ) {
            return $res;
        }

        $decodedContent = $unwrapCode[2];
        $hop = 200;
        while ($hop > 0 && preg_match('~eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;~msi', $decodedContent)) {
            $decodedContent = Helpers::replaceVarsFromArray($vars, $decodedContent, true);
            $decodedContent = $this->unwrapFuncs($decodedContent);
            $hop--;
        }

        $functionContent = Helpers::replaceVarsFromArray($vars, $unwrapCode[1], true);
        ;
        $functionContent = $this->unwrapFuncs($functionContent);
        $res = str_replace($unwrapCode[1], '', $res);

        if (
            !preg_match(
                '~function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s{0,50}{\s{0,50}\3\s?=\s?base64_encode\(\3\);\s{0,50}\2\s?=\s?base64_decode\(\2\);\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?0;\s{0,50}while\s?\(\6\s?<\s?strlen\(\2\)\)\s?{\s{0,50}for\s?\((\$\w{1,50})\s?=\s?0;\s?\7\s?<\s?strlen\(\3\);\s?\7\+\+\)\s?{\s{0,50}\4\s?=\s?chr\(ord\(\2\[\6\]\)\s?\^\s?ord\(\3\[\7\]\)\);\s{0,50}\5\s?\.=\s?\4;\s{0,50}\6\+\+;\s{0,50}if\s?\(\6\s?>=\s?strlen\(\2\)\)\s?break;[\s}]+return\sgzuncompress\(base64_decode\(\5\)\);[\s}]+~msi',
                $functionContent,
                $functionContentMatch
            )
        ) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if (
            !preg_match(
                '~(\$\w{1,50})\s?=\s?(\w{1,50})\((\$\w{1,50}),\s?["\']([^\'"]+)[\'"]\);\s{0,50}eval\s?\(\1\);~msi',
                $decodedContent,
                $decodedContentMatch
            )
        ) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if ($decodedContentMatch[2] === $functionContentMatch[1] && in_array($decodedContentMatch[3], array_keys($vars))) {
            $key = base64_encode($decodedContentMatch[4]);
            $decodedStr = base64_decode($vars[$decodedContentMatch[3]]);
            $chrOrd = "";
            $resultTemp = "";
            $incrementNum = 0;
            while ($incrementNum < strlen($decodedStr)) {
                for ($i = 0; $i < strlen($key); $i++) {
                    $chrOrd = chr(ord($decodedStr[$incrementNum]) ^ ord($key[$i]));
                    $resultTemp .= $chrOrd;
                    $incrementNum++;
                    if ($incrementNum >= strlen($decodedStr)) {
                        break;
                    }
                }
            }
            $res = str_replace($unwrapCode[2], gzuncompress(base64_decode($resultTemp)), $res);
        }

        return $res;
    }

    private function deobfuscateCreateFuncChrVarsMany($str, $matches)
    {
        $vars = [
            $matches[1] => 'chr'
        ];
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[4]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        $res = preg_replace('~\s?/\*.*?\*/~msi', '', $res);
        $res = preg_replace_callback(
            '~\s*(\$\w{1,50}\s?=\s?)(?://|##)[^\n]{0,50}\n([chr\'.]+)\s*(?://|##)[^\n]{0,50}\n([chr\'.]+;)~msi',
            function ($m) {
                return $m[1] . $m[2] . $m[3];
            },
            $res
        );

        return $res;
    }

    private function deobfuscateCookiePost($str, $matches)
    {
        $code = $matches[4];
        $code = str_replace($matches[2], 'chr', $code);
        $code = Helpers::replaceChrInStr($code);
        $code = Helpers::normalize($code);
        $vars = Helpers::collectVars($code, "\"", $vars);
        $res = $code;

        $func = $matches[5];
        $func = str_replace($matches[2], 'chr', $func);
        $func = str_replace('global chr;', '', $func);
        $func = Helpers::normalize($func);
        $res .= $func;

        $code2 = $matches[12];
        $code2 = str_replace($matches[2], 'chr', $code2);
        $code2 = Helpers::replaceChrInStr($code2);
        $code2 = Helpers::normalize($code2);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);
        $res .= $code2;

        return $res;
    }

    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        if (isset($matches[3]) && $matches[3] === 'eval(') {
            $chars = explode(',', $matches[4]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            if (isset($matches[1]) && $matches[1] !== '') {
                $result = $matches[1] . $result;
            }
            if (isset($matches[5]) && $matches[5] !== '') {
                $result = $result . $matches[5];
            }
            return $result;
        }

        $result = preg_replace_callback('~String\.fromCharCode\(([\d,\s]+)\)~msi', function ($m) {
            $chars = explode(',', $m[1]);
            $res = null;
            foreach ($chars as $char) {
                $res .= chr((int)trim($char));
            }
            return '\'' . $res . '\'';
        }, $str);

        return $result;
    }

    private function deobfuscateJS_unescapeContentFuncWrapped($str, $matches)
    {
        $result = '';

        $functionCode = urldecode($matches[1]);
        $functionName = urldecode($matches[2]);
        $strDecoded = $matches[3];

        if (
            preg_match(
                '~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+([-+]?\d{1,5})\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi',
                $functionCode,
                $match
            ) && strpos($functionName, $match[1])
        ) {
            $tmp = explode((string)$match[2], $strDecoded);
            $s = urldecode($tmp[0]);
            $k = urldecode($tmp[1] . (string)$match[3]);
            $kLen = strlen($k);
            $sLen = strlen($s);

            for ($i = 0; $i < $sLen; $i++) {
                $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) + (int)$match[4]);
            }
        } else {
            $result = $matches[3];
            $result = str_replace([$matches[1], $matches[2]], [$functionCode, $functionCode], $result);
        }

        return $result;
    }

    private function deobfuscateJS_ObfuscatorIO($str, $matches)
    {
        $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi';
        preg_match_all($detectPattern, $str, $detectMatch);
        $detectMatch = array_unique($detectMatch[1]);
        if (count($detectMatch) !== 1) {
            return $str;
        }

        preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE);
        $index = $index[0][1];

        $bo = 0;
        $bc = 0;
        $strSize = strlen($str);
        $mainCode = '';
        while ($index < $strSize) {
            if ($str[$index] === '{') {
                $bo++;
            }
            if ($str[$index] === '}') {
                $bc++;
            }
            if ($bc === $bo && $bo !== 0) {
                $mainCode = substr($str, $index + 2);
                break;
            }
            $index++;
        }
        $array = explode('\',\'', substr($matches[2], 1, -1));

        $shuffle = hexdec($matches[3]);
        while ($shuffle--) {
            $array[] = array_shift($array);
        }
        $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) {
            return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\'';
        }, $mainCode);
        return Helpers::normalize($mainCode);
    }

    private function deobfuscateJS_documentWriteUnescapedStr($str, $matches)
    {
        if ($matches[1] === 'atob') {
            return base64_decode($matches[2]);
        }
        if (strpos($matches[2], '\u00') !== false) {
            $matches[2] = str_replace('\u00', '%', $matches[2]);
        }
        $res = urldecode($matches[2]);
        if (
            isset($matches[3]) && isset($matches[4]) && $matches[3] !== ''
            && strpos($res, 'function ' . $matches[3]) !== false && $matches[4] !== ''
            && preg_match('~var\s*(\w+)=unescape\((\w+)\.substr\(0,\2\.length-1\)+;\s*var\s*(\w+)=\'\';for\((\w+)=0;\4<\1\.length;\4\+\+\)\3\+=String\.fromCharCode\(\1\.charCodeAt\(\4\)-s\.substr\(\2\.length-1,1\)+;document\.write\(unescape\(\3\)+;~msi', $res)
        ) {
            $tmp = urldecode($matches[4]);
            $res = '';
            for ($i = 0, $iMax = strlen($tmp); $i < $iMax; $i++) {
                $res .= chr(ord($tmp[$i]) - (int)substr($matches[4], -1, 1));
            }
            $res = urldecode($res);
        }
        return $res;
    }

    private function deobfuscateJS_deanPacker($str, $matches)
    {
        $payload = $matches[1];
        // Words
        $symtab = explode('|', $matches[4]);
        // Radix
        $radix = (int)$matches[2];
        // Words Count
        $count = (int)$matches[3];

        if ($count !== count($symtab)) {
            return $str; // Malformed p.a.c.k.e.r symtab !
        }

        $array = [];

        while ($count--) {
            $tmp = Helpers::jsPackerUnbaser($count, $radix);
            $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp;
        }

        $result = preg_replace_callback('~\b\w+\b~', function ($m) use ($array) {
            return $array[$m[0]];
        }, $payload);
        $result = str_replace('\\', '', $result);
        if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) {
            $class = $m[1];
            $b64_func = $m[3];
            $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function ($m) use ($class, $b64_func) {
                if (
                    (isset($m[4]) && $m[4] !== '' && $m[4] !== $class . '.' . $b64_func)
                    || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . '.' . $b64_func)
                ) {
                    return $m[0];
                }
                if (isset($m[4]) && $m[4] !== '') {
                    return '\'' . base64_decode($m[5]) . '\'';
                }
                if (isset($m[3]) && $m[3] !== '') {
                    return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\'';
                }
            }, $result);
            $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function ($m) {
                $arr = explode('\',\'', substr($m[1], 1, -1));
                $arr = array_map('base64_decode', $arr);
                return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]);
            }, $result);
        }
        return $result;
    }

    private function deobfuscateJS_objectDecode($str, $matches)
    {
        $ciphered = explode('+', $matches[9]);
        $chars = explode('\',\'', substr($matches[13], 1, -1));
        $count = (int)$matches[8];
        $arr = [];
        for ($i = 0; $i < $count; $i++) {
            $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($matches[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1);
        }
        $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function ($m) use ($arr) {
            if (!isset($arr[$m[1]])) {
                return $m[0];
            }
            return $arr[$m[1]];
        }, $matches[2]);

        return $ret;
    }

    private function deobfuscateJS_B64Embedded($str, $matches)
    {
        return '<script type="text/javascript">' . PHP_EOL . base64_decode($matches[1]) . PHP_EOL . '</script>';
    }

    private function deobfuscateJS_ParseIntArray($str, $matches)
    {
        if (preg_match('~{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);}}}\(_0x\w+,(-?0x[^)]+)\)~msi', $str, $expected)) {
            $expected = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $expected[1]);
            $expected = (int)trim(MathCalc::calcRawString(' ' . $expected));
        }

        if (preg_match('~_0x\w+=function\(_0x\w+,_0x\w+\){_0x\w+=_0x\w+-\(?([^\);]+)\)?;~msi', $str, $delta)) {
            $delta = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $delta[1]);
            $delta = (int)trim(MathCalc::calcRawString(' ' . $delta));
        }

        if (preg_match('~function\s*_0x\w+\(\)\{var\s?_0x\w+=\[([^\]]+)\];_0x\w+=function\(\)\{return\s?_0x\w+;\};return\s?_0x\w+\(\);\}~msi', $str, $array)) {
            $array = explode('\',\'', substr($array[1], 1, -1));
        }

        if (preg_match('~\(function\((_0x\w+),\s?_0x\w+\)\{var\s?(_0x\w+)=_0x\w+,_0x\w+=_0x\w+\(\);while\(!!\[\]\)\{try\{var\s?_0x\w+=((?>\-?parseInt\(_0x\w+\(0x\w+\)\)/(?:\([^\)]+\)*|0x\w+)\)*[\+\*]?\(?-?)+);if\(_0x\w+===_0x\w+\)break;else\s?_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}catch\(_0x\w+\)\{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}+\s*\((_0x\w+),(-?0x\w+[^\)]+)\)~msi', $str, $ints)) {
            $ints = $ints[3];
        }

        if (preg_match('~(?:\(function\(\)\{var[^}]+\}\(\)\)\);|document\[_0x\w+\(0x\w+\)\]\(unescape\((?>\(?_0x\w+\(0x\w+\)+\+?)+;)~msi', $str, $code)) {
            $code = $code[0];
        }

        $i = 0;
        while (true) {
            $i++;
            try {
                $num = preg_replace_callback('~parseInt\(\_0x\w+\((\w+)\)\)~msi', function ($m) use ($array, $delta) {
                    $index = hexdec($m[1]) - $delta;
                    $item = $array[$index];
                    preg_match('~\d+~', $item, $num);
                    $num = isset($num[0]) ? (int)$num[0] : 0;
                    return $num;
                }, $ints);
                $num = preg_replace_callback('~0x\w+~msi', function ($m) {
                    return hexdec($m[0]);
                }, $num);
                $num = (int)trim(MathCalc::calcRawString(' ' . $num));
                if ($num === $expected) {
                    break;
                } else {
                    $item = array_shift($array);
                    $array[] = $item;
                }
            } catch (Exception $e) {
                $item = array_shift($array);
                $array[] = $item;
            }
        }

        $code = preg_replace_callback('~_0x\w+\((0x\w+)\)~', function ($m) use ($array, $delta) {
            $index = hexdec($m[1]) - $delta;
            return '\'' . $array[$index] . '\'';
        }, $code);

        $code = str_replace(['\'+\'', '\'+(\'', '\')+(\'', ')\'+\''], '', $code);

        $code = preg_replace_callback('~unescape\(\'([^\']+)\'\)~', function ($m) {
            $m[1] = str_replace('%', '', $m[1]);
            return '\'' . hex2bin($m[1]) . '\'';
        }, $code);

        $code = preg_replace_callback('~atob\(\'([^\']+)\'\)~', function ($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $code);

        return $code;
    }

    /*************************************************************************************************************/
    /*                                          PYTHON deobfuscators                                             */
    /*************************************************************************************************************/

    private function deobfuscatePY_evalCompileStr($str, $matches)
    {
        return gzuncompress(base64_decode($matches[1]));
    }
}


/**
 * Class SharedMem work with shared-memory
 */
class SharedMem
{
    private $instance = null;

    /**
     * SharedMem constructor.
     * @param int $key
     * @param string $mode
     * @param int $permissions
     * @param int $size
     */
    public function __construct(int $key, string $mode, int $permissions, int $size)
    {
        $this->instance = shmop_open($key, $mode, $permissions, $size);
    }

    /**
     * @param int $offset
     * @param int $size
     * @param bool $trim
     * @param bool $json
     * @return false|mixed|string
     */
    public function read(int $offset, int $size, bool $trim = true, bool $json = true)
    {
        $res = shmop_read($this->instance, $offset, $size);
        if ($trim) {
            $res = rtrim($res, "\0");
        }
        if ($json) {
            $res = json_decode($res, true);
        }
        return $res;
    }

    /**
     * @param string $data
     * @return int
     */
    public function write(array $data): int
    {
        shmop_write($this->instance, str_repeat("\0", shmop_size($this->instance)), 0);
        if (function_exists('json_encode')) {
            $res = shmop_write($this->instance, json_encode($data), 0);
        } else {
            $res = shmop_write($this->instance, serialize($data), 0);
        }
        return $res;
    }

    /**
     * @return int
     */
    public function getSize(): int
    {
        return shmop_size($this->instance);
    }

    /**
     * @return bool
     */
    public function delete(): bool
    {
        return shmop_delete($this->instance);
    }

    /**
     * @param bool $delete
     */
    public function close(bool $delete = false)
    {
        if ($delete) {
            shmop_delete($this->instance);
        }

        if (version_compare(phpversion('shmop'), '8.0.0', '<')) {
            shmop_close($this->instance);
        }

        $this->instance = null;
    }

    /**
     * @return bool
     */
    public function isValid()
    {
        if (version_compare(phpversion('shmop'), '8.0.0', '>=')) {
            return is_object($this->instance);
        }

        return is_resource($this->instance);
    }

    /**
     * @return false|resource|Shmop
     */
    public function getInstance()
    {
        return $this->instance;
    }
}


/**
 * Class Factory.
 */
class Factory
{
    /**
     * @var Factory
     */
    private static $instance;
    /**
     * @var array
     */
    private static $config;

    /**
     * Factory constructor.
     *
     * @throws Exception
     */
    private function __construct()
    {
    }

    /**
     * Instantiate and return a factory.
     *
     * @return Factory
     * @throws Exception
     */
    public static function instance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Configure a factory.
     *
     * This method can be called only once.
     *
     * @param array $config
     * @throws Exception
     */
    public static function configure($config = [])
    {
        if (self::isConfigured()) {
            throw new Exception('The Factory::configure() method can be called only once.');
        }

        self::$config = $config;
    }

    /**
     * Return whether a factory is configured or not.
     *
     * @return bool
     */
    public static function isConfigured()
    {
        return self::$config !== null;
    }

    /**
     * Creates and returns an instance of a particular class.
     *
     * @param string $class
     *
     * @param array $constructorArgs
     * @return mixed
     * @throws Exception
     */
    public function create($class, $constructorArgs = [])
    {
        if (!isset(self::$config[$class])) {
            throw new Exception("The factory is not contains configuration for '{$class}'.");
        }

        if (is_callable(self::$config[$class])) {
            return call_user_func(self::$config[$class], $constructorArgs);
        } else {
            return new self::$config[$class](...$constructorArgs);
        }
    }
}


class Template
{
    protected $html;
    protected $variables = [];

    /**
     * Template constructor.
     *
     * @param string $html
     */
    public function __construct($html)
    {
        $this->html = $html;
    }

    /**
     * @param $html
     *
     * @return Template
     */
    public static function create($html)
    {
        /** @phpstan-ignore-next-line */
        return new static($html);
    }

    /**
     * @param $key
     * @param $value
     */
    public function set($key, $value)
    {
        $this->variables[$key] = $value;
    }

    /**
     * @return string
     */
    public function render()
    {
        if (!empty($this->variables)) {
            foreach ($this->variables as $key => $value) {
                $this->html = str_replace("@@$key@@", $value, $this->html);
            }
        }

        return $this->html;
    }
}


class Translate
{
    const LANG_EN = 'EN';
    const LANG_RU = 'RU';

    /**
     * @var string
     */
    private static $lang = self::LANG_EN;

    /**
     * @param $lang
     */
    public static function setLang($lang)
    {
        self::$lang = $lang;
    }

    /**
     * @param string      $key
     * @param null|array  $params
     *
     * @param null|string $language
     *
     * @return string
     */
    public static function getStr($key, $params = null, $language = null)
    {
        if ($language && in_array($language, [self::LANG_RU, self::LANG_EN])) {
            $lang = $language;
        } else {
            $lang = self::$lang;
        }

        $result = ($lang === self::LANG_RU) ? TranslateList::RU[$key] : TranslateList::EN[$key];
        if ($params && is_array($params) && $params !== null) {
            return vsprintf($result, $params);
        }

        return $result;
    }
}


class SendMessageRequest
{
    const API_URL = 'https://api.imunify360.com/api/send-message';
    const DEBUG_API_URL = 'http://127.0.0.1:8888';

    private $timeout = 10;
    private $debug = false;
    private $tag = '';

    /**
     * SendMessageRequest constructor.
     * @param string $tag
     * @param int $timeout
     */
    public function __construct($tag, $timeout = 10, $debug = false)
    {
        $this->timeout = $timeout;
        $this->debug = $debug;
        $this->tag = $tag;
    }

    /**
     * @param $data
     * @return bool|array
     */
    public function request($data)
    {
        $json_data = json_encode($data);

        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->getApiUrl());
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
            $result = curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            fwrite(STDERR, 'Warning: [' . $this->tag . '] Curl: ' . $e->getMessage() . PHP_EOL);
            return false;
        }
        return @json_decode($result, true);
    }

    private function getApiUrl()
    {
        return $this->debug ? self::DEBUG_API_URL : self::API_URL;
    }
}


class ImLicense
{
    const VERIFY_FIELDS = ['id', 'status', 'group', 'limit', 'token_created_utc', 'token_expire_utc'];
    private $is_valid = false;
    private $raw_lic = [];
    private $valid_sign = '';
    private $pub_keys = [];

    public function __construct($lic_path, $pub_keys)
    {
        if (file_exists($lic_path) && filesize($lic_path) > 0 && is_readable($lic_path)) {
            $this->raw_lic = json_decode(file_get_contents($lic_path), true);
        }

        foreach ($pub_keys as $pub_key) {
            if (file_exists($pub_key) && filesize($pub_key) > 0 && is_readable($pub_key)) {
                $this->pub_keys[] = file_get_contents($pub_key);
            }
        }

        if ($this->isAllFieldsPresent()) {
            $this->findValidSignature();
        }
    }

    public function isValid()
    {
        return $this->is_valid;
    }

    public function getLicData()
    {
        if (!$this->is_valid || $this->valid_sign === '') {
            return false;
        }
        if (is_array($this->raw_lic) && $this->isAllFieldsPresent()) {
            return [
                'id'                => $this->raw_lic['id'],
                'status'            => $this->raw_lic['status'],
                'limit'             => $this->raw_lic['limit'],
                'token_created_utc' => $this->raw_lic['token_created_utc'],
                'token_expire_utc'  => $this->raw_lic['token_expire_utc'],
                'sign'              => $this->valid_sign,
            ];
        }
        return false;
    }

    private function isAllFieldsPresent()
    {
        if (!isset($this->raw_lic['signatures'])) {
            return false;
        }
        if (empty($this->pub_keys)) {
            return false;
        }
        foreach (self::VERIFY_FIELDS as $field) {
            if (!isset($this->raw_lic[$field])) {
                return false;
            }
        }
        return true;
    }

    private function findValidSignature()
    {
        foreach ($this->raw_lic['signatures'] as $sign) {
            $signature = base64_decode($sign);
            $content = '';
            foreach (self::VERIFY_FIELDS as $field) {
                $content .= $this->raw_lic[$field];
            }
            foreach ($this->pub_keys as $pub_key) {
                if (openssl_verify($content, $signature, $pub_key, OPENSSL_ALGO_SHA512)) {
                    $this->valid_sign = $sign;
                    $this->is_valid = true;
                    return true;
                }
            }
        }
        return false;
    }
}


class ResidentStats
{
    /**
     * counter of files scanned by notify
     * @var int
     */
    protected static $scanned_notify = 0;
    /**
     * counter of files scanned by upload
     * @var int
     */
    protected static $scanned_upload = 0;

    protected static $ai_version = '';
    protected static $sig_version = '';

    protected static $lic = null;
    protected static $request = null;

    protected static $last_send = 0;
    protected static $start_time = 0;

    protected static $upload_job_latency_sum = 0;
    protected static $upload_job_latency_count = 0;
    protected static $upload_job_latency_overflow_count = 0;

    protected static $white_count = 0;
    protected static $white_extended_count = 0;
    protected static $black_count = 0;
    protected static $injection_count = 0;
    protected static $cas_time = 0;

    /**
     * @param int $start_time
     */
    public static function setStartTime(float $start_time)
    {
        self::$start_time = $start_time;
    }

    /**
     * @param SendMessageRequest $request
     */
    public static function setRequest($request)
    {
        self::$request = $request;
    }

    /**
     * @param int $scanned_notify
     */
    public static function addScannedNotify(int $scanned_notify)
    {
        self::$scanned_notify += $scanned_notify;
    }

    /**
     * @param int $scanned_upload
     */
    public static function addScannedUpload(int $scanned_upload)
    {
        self::$scanned_upload += $scanned_upload;
    }

    /**
     * @param string $ai_version
     */
    public static function setAiVersion(string $ai_version)
    {
        self::$ai_version = $ai_version;
    }

    /**
     * @param string $sig_version
     */
    public static function setSigVersion(string $sig_version)
    {
        self::$sig_version = $sig_version;
    }

    /**
     * @param null $lic
     */
    public static function setLic($lic)
    {
        self::$lic = $lic;
    }


    /**
     * @param int $count
     */
    public static function setWhiteCount($count)
    {
        self::$white_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setWhiteExtendedCount($count)
    {
        self::$white_extended_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setBlackCount($count)
    {
        self::$black_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setInjectionCount($count)
    {
        self::$injection_count += $count;
    }

    /**
     * @param float $cas_time
     */
    public static function addCasTime($cas_time)
    {
        self::$cas_time += $cas_time;
    }

    public static function collectUploadJobLatency($upload_job_latency)
    {
        if ($upload_job_latency > 10) {
            self::$upload_job_latency_overflow_count++;
        }
        self::$upload_job_latency_sum += $upload_job_latency;
        self::$upload_job_latency_count++;
    }

    public static function sendStatData()
    {
        if (!self::$lic->isValid()) {
            return;
        }
        $payload = self::collectProcStat();
        $payload['aibolit_version'] = self::$ai_version;
        $payload['signatures_version'] = self::$sig_version;
        $payload['running_time'] = floor(AibolitHelpers::currentTime() - self::$start_time);
        $payload['period'] = floor((self::$last_send === 0) ? $payload['running_time'] : AibolitHelpers::currentTime() - self::$last_send);
        $payload['files_upload'] = self::$scanned_upload;
        $payload['files_notify'] = self::$scanned_notify;
        $payload['upload_job_latency_avg'] = (self::$upload_job_latency_count != 0) ? round(self::$upload_job_latency_sum / self::$upload_job_latency_count, 2) : 0;
        $payload['upload_job_latency_overflow'] = self::$upload_job_latency_overflow_count;
        $payload['white_count'] = self::$white_count;
        $payload['white_extended_count'] = self::$white_extended_count;
        $payload['black_count'] = self::$black_count + self::$injection_count;
        $payload['cas_time'] = self::$cas_time;
        $license = self::$lic->getLicData();
        $data = [
            'method' => 'AIBOLIT_RESIDENT_STATS',
            'license' => $license,
            'payload' => $payload,
            'server_id' => $license['id'],
        ];
        $res = self::$request->request($data);
        self::$last_send = AibolitHelpers::currentTime();
        self::clearStats();
        if ($res['status'] === 'ok') {
            return true;
        } else {
            fwrite(STDERR, 'Warning: [AI-Resident] Invalid response: ' . json_encode($res) . PHP_EOL);
            return false;
        }
    }

    protected static function collectProcStat(): array
    {
        $data = [];
        $procStats = ProcStats::collectAll();
        $stat = $procStats[ProcStats::STAT];
        $status = $procStats[ProcStats::STATUS];
        $io = $procStats[ProcStats::IO];
        $data['utime'] =        (int)$stat[13];
        $data['stime'] =        (int)$stat[14];
        $data['vmrss'] =        (int)$status['VmRSS'];
        $data['vmhwm'] =        (int)$status['VmHWM'];
        $data['syscr'] =        (int)$io['syscr'];
        $data['read_bytes'] =   (int)$io['read_bytes'];
        $data['write_bytes'] =  (int)$io['write_bytes'];
        return $data;
    }

    protected static function clearStats()
    {
        self::$scanned_notify = 0;
        self::$scanned_upload = 0;
        self::$upload_job_latency_sum = 0;
        self::$upload_job_latency_count = 0;
        self::$upload_job_latency_overflow_count = 0;
        self::$white_count = 0;
        self::$white_extended_count = 0;
        self::$black_count = 0;
        self::$injection_count = 0;
        self::$cas_time = 0;
    }
}

